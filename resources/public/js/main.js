if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

/**
 * React v0.12.2
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var ReactChildren = _dereq_("./ReactChildren");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactDOM = _dereq_("./ReactDOM");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTypes = _dereq_("./ReactPropTypes");
var ReactServerRendering = _dereq_("./ReactServerRendering");
var ReactTextComponent = _dereq_("./ReactTextComponent");

var assign = _dereq_("./Object.assign");
var deprecated = _dereq_("./deprecated");
var onlyChild = _dereq_("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== "development") {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== "development") {
  var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

},{"./DOMPropertyOperations":12,"./EventPluginUtils":20,"./ExecutionEnvironment":22,"./Object.assign":27,"./ReactChildren":31,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactDOM":37,"./ReactDOMComponent":39,"./ReactDefaultInjection":49,"./ReactElement":52,"./ReactElementValidator":53,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./ReactPropTypes":72,"./ReactServerRendering":76,"./ReactTextComponent":78,"./deprecated":106,"./onlyChild":137}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = _dereq_("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":111}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var SyntheticInputEvent = _dereq_("./SyntheticInputEvent");

var keyOf = _dereq_("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./SyntheticInputEvent":89,"./keyOf":133}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var camelizeStyleName = _dereq_("./camelizeStyleName");
var dangerousStyleValue = _dereq_("./dangerousStyleValue");
var hyphenateStyleName = _dereq_("./hyphenateStyleName");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== "development") {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":4,"./ExecutionEnvironment":22,"./camelizeStyleName":100,"./dangerousStyleValue":105,"./hyphenateStyleName":124,"./memoizeStringOnly":135,"./warning":145}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== "development" ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

},{"./Object.assign":27,"./PooledClass":28,"./invariant":126}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactUpdates = _dereq_("./ReactUpdates");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var isEventSupported = _dereq_("./isEventSupported");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactUpdates":79,"./SyntheticEvent":87,"./isEventSupported":127,"./isTextInputElement":129,"./keyOf":133}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var keyOf = _dereq_("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactInputSelection":59,"./SyntheticCompositionEvent":85,"./getTextContentAccessor":121,"./keyOf":133}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = _dereq_("./Danger");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var invariant = _dereq_("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== "development" ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":13,"./ReactMultiChildUpdateTypes":65,"./getTextContentAccessor":121,"./invariant":126}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = _dereq_("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":126}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== "development" ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":11,"./escapeTextForBrowser":109,"./memoizeStringOnly":135,"./warning":145}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");
var emptyFunction = _dereq_("./emptyFunction");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":22,"./createNodesFromMarkup":104,"./emptyFunction":107,"./getMarkupWrap":118,"./invariant":126}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = _dereq_("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":133}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

var ReactMount = _dereq_("./ReactMount");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactMount":63,"./SyntheticMouseEvent":91,"./keyOf":133}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":132}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

},{"./emptyFunction":107}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var EventPluginUtils = _dereq_("./EventPluginUtils");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":19,"./EventPluginUtils":20,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":126}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var invariant = _dereq_("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":16,"./invariant":126}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":16,"./EventPluginHub":18,"./accumulateInto":97,"./forEachAccumulated":112}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":11,"./ExecutionEnvironment":22}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = _dereq_("./ReactPropTypes");

var invariant = _dereq_("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":72,"./invariant":126}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

},{"./ReactBrowserEventEmitter":30,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var emptyFunction = _dereq_("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":16,"./emptyFunction":107}],27:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":126}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactMount = _dereq_("./ReactMount");

var invariant = _dereq_("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== "development" ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./ReactEmptyComponent":54,"./ReactMount":63,"./invariant":126}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var assign = _dereq_("./Object.assign");
var isEventSupported = _dereq_("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPluginRegistry":19,"./Object.assign":27,"./ReactEventEmitterMixin":56,"./ViewportMetrics":96,"./isEventSupported":127}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

},{"./PooledClass":28,"./traverseAllChildren":144,"./warning":145}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== "development" ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

},{"./Object.assign":27,"./ReactElement":52,"./ReactOwner":67,"./ReactUpdates":79,"./invariant":126,"./keyMirror":132}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");
var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");

var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":41,"./ReactMarkupChecksum":62,"./ReactMount":63,"./ReactPerf":68,"./ReactReconcileTransaction":74,"./getReactRootElementInContainer":120,"./invariant":126,"./setInnerHTML":140}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactErrorUtils = _dereq_("./ReactErrorUtils");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTransferer = _dereq_("./ReactPropTransferer");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var mapObject = _dereq_("./mapObject");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development"){
      ("production" !== "development" ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== "development" ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== "development") {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

},{"./Object.assign":27,"./ReactComponent":32,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactElementValidator":53,"./ReactEmptyComponent":54,"./ReactErrorUtils":55,"./ReactLegacyElement":61,"./ReactOwner":67,"./ReactPerf":68,"./ReactPropTransferer":69,"./ReactPropTypeLocationNames":70,"./ReactPropTypeLocations":71,"./ReactUpdates":79,"./instantiateReactComponent":125,"./invariant":126,"./keyMirror":132,"./keyOf":133,"./mapObject":134,"./monitorCodeUse":136,"./shouldUpdateReactComponent":142,"./warning":145}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = _dereq_("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":27}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");

var mapObject = _dereq_("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== "development") {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

},{"./ReactElement":52,"./ReactElementValidator":53,"./ReactLegacyElement":61,"./mapObject":134}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var keyMirror = _dereq_("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":2,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./keyMirror":132}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMProperty = _dereq_("./DOMProperty");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponent = _dereq_("./ReactComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var invariant = _dereq_("./invariant");
var isEventSupported = _dereq_("./isEventSupported");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== "development") {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== "development") {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":5,"./DOMProperty":11,"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./escapeTextForBrowser":109,"./invariant":126,"./isEventSupported":127,"./keyOf":133,"./monitorCodeUse":136}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":5,"./DOMChildrenOperations":10,"./DOMPropertyOperations":12,"./ReactMount":63,"./ReactPerf":68,"./invariant":126,"./setInnerHTML":140}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactMount":63,"./ReactUpdates":79,"./invariant":126}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var warning = _dereq_("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./warning":145}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":2,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");
var getTextContentAccessor = _dereq_("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":22,"./getNodeForCharacterOffset":119,"./getTextContentAccessor":121}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var warning = _dereq_("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79,"./invariant":126,"./warning":145}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = _dereq_("./ReactUpdates");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":27,"./ReactUpdates":79,"./Transaction":95,"./emptyFunction":107}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = _dereq_("./BeforeInputEventPlugin");
var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");
var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");
var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");
var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = _dereq_("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  _dereq_("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDOMButton = _dereq_("./ReactDOMButton");
var ReactDOMForm = _dereq_("./ReactDOMForm");
var ReactDOMImg = _dereq_("./ReactDOMImg");
var ReactDOMInput = _dereq_("./ReactDOMInput");
var ReactDOMOption = _dereq_("./ReactDOMOption");
var ReactDOMSelect = _dereq_("./ReactDOMSelect");
var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");
var ReactEventListener = _dereq_("./ReactEventListener");
var ReactInjection = _dereq_("./ReactInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var SelectEventPlugin = _dereq_("./SelectEventPlugin");
var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");
var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");
var SVGDOMPropertyConfig = _dereq_("./SVGDOMPropertyConfig");

var createFullPageComponent = _dereq_("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./BeforeInputEventPlugin":3,"./ChangeEventPlugin":7,"./ClientReactRootIndex":8,"./CompositionEventPlugin":9,"./DefaultEventPluginOrder":14,"./EnterLeaveEventPlugin":15,"./ExecutionEnvironment":22,"./HTMLDOMPropertyConfig":23,"./MobileSafariClickEventPlugin":26,"./ReactBrowserComponentMixin":29,"./ReactComponentBrowserEnvironment":33,"./ReactDOMButton":38,"./ReactDOMComponent":39,"./ReactDOMForm":40,"./ReactDOMImg":42,"./ReactDOMInput":43,"./ReactDOMOption":44,"./ReactDOMSelect":45,"./ReactDOMTextarea":47,"./ReactDefaultBatchingStrategy":48,"./ReactDefaultPerf":50,"./ReactEventListener":57,"./ReactInjection":58,"./ReactInstanceHandles":60,"./ReactMount":63,"./SVGDOMPropertyConfig":80,"./SelectEventPlugin":81,"./ServerReactRootIndex":82,"./SimpleEventPlugin":83,"./createFullPageComponent":103}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var performanceNow = _dereq_("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":11,"./ReactDefaultPerfAnalysis":51,"./ReactMount":63,"./ReactPerf":68,"./performanceNow":139}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":27}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var warning = _dereq_("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== "development" ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== "development") {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== "development") {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== "development") {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

},{"./ReactContext":35,"./ReactCurrentOwner":36,"./warning":145}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== "development" ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

},{"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactPropTypeLocations":71,"./monitorCodeUse":136,"./warning":145}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== "development" ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

},{"./ReactElement":52,"./invariant":126}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = _dereq_("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":18}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = _dereq_("./EventListener");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var PooledClass = _dereq_("./PooledClass");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var getEventTarget = _dereq_("./getEventTarget");
var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":17,"./ExecutionEnvironment":22,"./Object.assign":27,"./PooledClass":28,"./ReactInstanceHandles":60,"./ReactMount":63,"./ReactUpdates":79,"./getEventTarget":117,"./getUnboundedScrollPosition":122}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var EventPluginHub = _dereq_("./EventPluginHub");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactPerf = _dereq_("./ReactPerf");
var ReactRootIndex = _dereq_("./ReactRootIndex");
var ReactUpdates = _dereq_("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":11,"./EventPluginHub":18,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactEmptyComponent":54,"./ReactNativeComponent":66,"./ReactPerf":68,"./ReactRootIndex":75,"./ReactUpdates":79}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = _dereq_("./ReactDOMSelection");

var containsNode = _dereq_("./containsNode");
var focusNode = _dereq_("./focusNode");
var getActiveElement = _dereq_("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":46,"./containsNode":101,"./focusNode":111,"./getActiveElement":113}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = _dereq_("./ReactRootIndex");

var invariant = _dereq_("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":75,"./invariant":126}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var invariant = _dereq_("./invariant");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== "development" ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== "development" ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== "development" ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== "development" ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== "development" ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== "development") {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

},{"./ReactCurrentOwner":36,"./invariant":126,"./monitorCodeUse":136,"./warning":145}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = _dereq_("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":98}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactPerf = _dereq_("./ReactPerf");

var containsNode = _dereq_("./containsNode");
var deprecated = _dereq_("./deprecated");
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

},{"./DOMProperty":11,"./ReactBrowserEventEmitter":30,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactPerf":68,"./containsNode":101,"./deprecated":106,"./getReactRootElementInContainer":120,"./instantiateReactComponent":125,"./invariant":126,"./shouldUpdateReactComponent":142,"./warning":145}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var flattenChildren = _dereq_("./flattenChildren");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":32,"./ReactMultiChildUpdateTypes":65,"./flattenChildren":110,"./instantiateReactComponent":125,"./shouldUpdateReactComponent":142}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":132}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

},{"./Object.assign":27,"./invariant":126}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = _dereq_("./emptyObject");
var invariant = _dereq_("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./emptyObject":108,"./invariant":126}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var invariant = _dereq_("./invariant");
var joinClasses = _dereq_("./joinClasses");
var warning = _dereq_("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== "development" ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== "development") {
        if (!didWarn) {
          didWarn = true;
          ("production" !== "development" ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./Object.assign":27,"./emptyFunction":107,"./invariant":126,"./joinClasses":131,"./warning":145}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":132}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");

var deprecated = _dereq_("./deprecated");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":52,"./ReactPropTypeLocationNames":70,"./deprecated":106,"./emptyFunction":107}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var assign = _dereq_("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30,"./ReactInputSelection":59,"./ReactPutListenerQueue":73,"./Transaction":95}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  _dereq_("./ReactServerRenderingTransaction");

var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactMarkupChecksum":62,"./ReactServerRenderingTransaction":77,"./instantiateReactComponent":125,"./invariant":126}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var CallbackQueue = _dereq_("./CallbackQueue");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactPutListenerQueue":73,"./Transaction":95,"./emptyFunction":107}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactComponent = _dereq_("./ReactComponent");
var ReactElement = _dereq_("./ReactElement");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactComponent":32,"./ReactElement":52,"./escapeTextForBrowser":109}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactPerf = _dereq_("./ReactPerf");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var warning = _dereq_("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== "development" ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== "development" ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== "development" ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== "development" ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactCurrentOwner":36,"./ReactPerf":68,"./Transaction":95,"./invariant":126,"./warning":145}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":11}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var getActiveElement = _dereq_("./getActiveElement");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");
var shallowEqual = _dereq_("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactInputSelection":59,"./SyntheticEvent":87,"./getActiveElement":113,"./isTextInputElement":129,"./keyOf":133,"./shallowEqual":141}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");
var SyntheticEvent = _dereq_("./SyntheticEvent");
var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");
var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");

var getEventCharCode = _dereq_("./getEventCharCode");

var invariant = _dereq_("./invariant");
var keyOf = _dereq_("./keyOf");
var warning = _dereq_("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== "development" ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":16,"./EventPluginUtils":20,"./EventPropagators":21,"./SyntheticClipboardEvent":84,"./SyntheticDragEvent":86,"./SyntheticEvent":87,"./SyntheticFocusEvent":88,"./SyntheticKeyboardEvent":90,"./SyntheticMouseEvent":91,"./SyntheticTouchEvent":92,"./SyntheticUIEvent":93,"./SyntheticWheelEvent":94,"./getEventCharCode":114,"./invariant":126,"./keyOf":133,"./warning":145}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":87}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":87}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":91}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":27,"./PooledClass":28,"./emptyFunction":107,"./getEventTarget":117}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":93}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":87}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventCharCode = _dereq_("./getEventCharCode");
var getEventKey = _dereq_("./getEventKey");
var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":93,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":93,"./ViewportMetrics":96,"./getEventModifierState":116}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":93,"./getEventModifierState":116}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":87,"./getEventTarget":117}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":91}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":126}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":122}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

},{"./invariant":126}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = _dereq_("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":99}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = _dereq_("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":130}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = _dereq_("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":143}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":34,"./ReactElement":52,"./invariant":126}],104:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createArrayFrom = _dereq_("./createArrayFrom");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":22,"./createArrayFrom":102,"./getMarkupWrap":118,"./invariant":126}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":4}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = _dereq_("./Object.assign");
var warning = _dereq_("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== "development") {
    var newFn = function() {
      ("production" !== "development" ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

},{"./Object.assign":27,"./warning":145}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== "development") {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

},{}],109:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = _dereq_("./ReactTextComponent");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./ReactTextComponent":78,"./traverseAllChildren":144,"./warning":145}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = _dereq_("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":114}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var invariant = _dereq_("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":22,"./invariant":126}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":22}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],124:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = _dereq_("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":123}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = _dereq_("./warning");

var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

},{"./ReactElement":52,"./ReactEmptyComponent":54,"./ReactLegacyElement":61,"./ReactNativeComponent":66,"./warning":145}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== "development") {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":22}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = _dereq_("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":128}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":126}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],135:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],136:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== "development" ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

},{"./invariant":126}],137:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactElement":52,"./invariant":126}],138:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":22}],139:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = _dereq_("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":138}],140:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":22}],141:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],142:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = _dereq_("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":126}],144:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");

var invariant = _dereq_("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== "development" ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./invariant":126}],145:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":107}]},{},[1])(1)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.define("goog.DEBUG", true);
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.define("goog.DISALLOW_TEST_ONLY_CODE", COMPILED && !goog.DEBUG);
goog.define("goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }
  goog.constructNamespace_(name);
};
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name, opt_obj);
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
  if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1) {
    throw Error("Invalid module identifier");
  }
  if (!goog.isInModuleLoader_()) {
    throw Error("Module " + name + " has been loaded incorrectly.");
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module may only be called once per module.");
  }
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return name in goog.loadedModules_ ? goog.loadedModules_[name] : goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};
goog.module.declareTestMethods = function() {
  if (!goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareTestMethods must be called from " + "within a goog.module");
  }
  goog.moduleLoaderState_.declareTestMethods = true;
};
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareLegacyNamespace must be called from " + "within a goog.module");
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module must be called prior to " + "goog.module.declareLegacyNamespace.");
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {"goog.module":true};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires, opt_isModule) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      deps.pathIsModule[path] = !!opt_isModule;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console["error"](msg);
  }
};
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
      goog.maybeProcessDeferredDep_(name);
    }
    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return null;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    goog.logToConsole_(errorMessage);
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.define("goog.LOAD_MODULE_USING_EVAL", true);
goog.define("goog.SEAL_MODULE_EXPORTS", goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathIsModule:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("SCRIPT");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var script = (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.IS_OLD_IE_ = !goog.global.atob && goog.global.document && goog.global.document.all;
  goog.importModule_ = function(src) {
    var bootstrap = 'goog.retrieveAndExecModule_("' + src + '");';
    if (goog.importScript_("", bootstrap)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.queuedModules_ = [];
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return "" + "goog.loadModule(function(exports) {" + '"use strict";' + scriptText + "\n" + ";return exports" + "});" + "\n//# sourceURL\x3d" + srcUrl + "\n";
    } else {
      return "" + "goog.loadModule(" + goog.global.JSON.stringify(scriptText + "\n//# sourceURL\x3d" + srcUrl + "\n") + ");";
    }
  };
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0;i < count;i++) {
        var path = queue[i];
        goog.maybeProcessDeferredPath_(path);
      }
    }
  };
  goog.maybeProcessDeferredDep_ = function(name) {
    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
      var path = goog.getPathFromDeps_(name);
      goog.maybeProcessDeferredPath_(goog.basePath + path);
    }
  };
  goog.isDeferredModule_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && goog.dependencies_.pathIsModule[path]) {
      var abspath = goog.basePath + path;
      return abspath in goog.dependencies_.deferred;
    }
    return false;
  };
  goog.allDepsAreAvailable_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && path in goog.dependencies_.requires) {
      for (var requireName in goog.dependencies_.requires[path]) {
        if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName)) {
          return false;
        }
      }
    }
    return true;
  };
  goog.maybeProcessDeferredPath_ = function(abspath) {
    if (abspath in goog.dependencies_.deferred) {
      var src = goog.dependencies_.deferred[abspath];
      delete goog.dependencies_.deferred[abspath];
      goog.globalEval(src);
    }
  };
  goog.loadModule = function(moduleDef) {
    var previousState = goog.moduleLoaderState_;
    try {
      goog.moduleLoaderState_ = {moduleName:undefined, declareTestMethods:false};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else {
        if (goog.isString(moduleDef)) {
          exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
        } else {
          throw Error("Invalid module definition");
        }
      }
      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name "' + moduleName + '"');
      }
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else {
        if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
          Object.seal(exports);
        }
      }
      goog.loadedModules_[moduleName] = exports;
      if (goog.moduleLoaderState_.declareTestMethods) {
        for (var entry in exports) {
          if (entry.indexOf("test", 0) === 0 || entry == "tearDown" || entry == "setUp" || entry == "setUpPage" || entry == "tearDownPage") {
            goog.global[entry] = exports[entry];
          }
        }
      }
    } finally {
      goog.moduleLoaderState_ = previousState;
    }
  };
  goog.loadModuleFromSource_ = function(source) {
    var exports = {};
    eval(arguments[0]);
    return exports;
  };
  goog.writeScriptSrcNode_ = function(src) {
    goog.global.document.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
  };
  goog.appendScriptSrcNode_ = function(src) {
    var doc = goog.global.document;
    var scriptEl = doc.createElement("script");
    scriptEl.type = "text/javascript";
    scriptEl.src = src;
    scriptEl.defer = false;
    scriptEl.async = false;
    doc.head.appendChild(scriptEl);
  };
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      var isOldIE = goog.IS_OLD_IE_;
      if (opt_sourceText === undefined) {
        if (!isOldIE) {
          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            goog.appendScriptSrcNode_(src);
          } else {
            goog.writeScriptSrcNode_(src);
          }
        } else {
          var state = " onreadystatechange\x3d'goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"' + state + "\x3e\x3c/" + "script\x3e");
        }
      } else {
        doc.write('\x3cscript type\x3d"text/javascript"\x3e' + opt_sourceText + "\x3c/" + "script\x3e");
      }
      return true;
    } else {
      return false;
    }
  };
  goog.lastNonModuleScriptIndex_ = 0;
  goog.onScriptLoad_ = function(script, scriptIndex) {
    if (script.readyState == "complete" && goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;
    var loadingModule = false;
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      if (path) {
        if (!deps.pathIsModule[path]) {
          goog.importScript_(goog.basePath + path);
        } else {
          loadingModule = true;
          goog.importModule_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error("Undefined script input");
      }
    }
    goog.moduleLoaderState_ = moduleState;
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.normalizePath_ = function(path) {
  var components = path.split("/");
  var i = 0;
  while (i < components.length) {
    if (components[i] == ".") {
      components.splice(i, 1);
    } else {
      if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
  }
  return components.join("/");
};
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    var xhr = new goog.global["XMLHttpRequest"];
    xhr.open("get", src, false);
    xhr.send();
    return xhr.responseText;
  }
};
goog.retrieveAndExecModule_ = function(src) {
  if (!COMPILED) {
    var originalPath = src;
    src = goog.normalizePath_(src);
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    var scriptText = goog.loadFileSync_(src);
    if (scriptText != null) {
      var execModuleScript = goog.wrapModule_(src, scriptText);
      var isOldIE = goog.IS_OLD_IE_;
      if (isOldIE) {
        goog.dependencies_.deferred[originalPath] = execModuleScript;
        goog.queuedModules_.push(originalPath);
      } else {
        importScript(src, execModuleScript);
      }
    } else {
      throw new Error("load of " + src + "failed");
    }
  }
};
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("SCRIPT");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = new Array(arguments.length - 2);
    for (var i = 2;i < arguments.length;i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1;i < arguments.length;i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }
  var args = new Array(arguments.length - 2);
  for (var i = 2;i < arguments.length;i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.define("goog.string.FORCE_NON_DOM_HTML_UNESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = function(str) {
  return /^[\s\xa0]*$/.test(str);
};
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
  return str.trim();
} : function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return -1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return '"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return (new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];
  if (a == b) {
    return 0;
  }
  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }
  for (var i = 0;i < b.length + 1;i++) {
    v0[i] = i;
  }
  for (var i = 0;i < a.length;i++) {
    v1[0] = i + 1;
    for (var j = 0;j < b.length;j++) {
      var cost = a[i] != b[j];
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }
    for (var j = 0;j < v0.length;j++) {
      v0[j] = v1[j];
    }
  }
  return v1[b.length];
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }
  var val = f();
  obj[key] = val;
  return val;
};
goog.object.equals = function(a, b) {
  for (var k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (var k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call(opt_obj, val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0;j < len2;j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return [];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0;c < element.length;c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0;r < recurseResult.length;r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};
goog.provide("cljs.core");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-3269";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_ = "default";
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__18126__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__18125 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__18125) : cljs.core.into_array.call(null, G__18125);
      }());
    };
    var G__18126 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__18127__i = 0, G__18127__a = new Array(arguments.length - 0);
        while (G__18127__i < G__18127__a.length) {
          G__18127__a[G__18127__i] = arguments[G__18127__i + 0];
          ++G__18127__i;
        }
        args = new cljs.core.IndexedSeq(G__18127__a, 0);
      }
      return G__18126__delegate.call(this, args);
    };
    G__18126.cljs$lang$maxFixedArity = 0;
    G__18126.cljs$lang$applyTo = function(arglist__18128) {
      var args = cljs.core.seq(arglist__18128);
      return G__18126__delegate(args);
    };
    G__18126.cljs$core$IFn$_invoke$arity$variadic = G__18126__delegate;
    return G__18126;
  }();
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return !(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  var G__18130 = x;
  return goog.isString(G__18130);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__18132 = x__$1;
    return goog.typeOf(G__18132);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4295__auto__ = ty;
    if (cljs.core.truth_(and__4295__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4295__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__18134 = obj;
    return goog.typeOf(G__18134);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4421__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4421__auto__)) {
    var s = temp__4421__auto__;
    return s;
  } else {
    return [cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__18136 = Symbol;
  return goog.typeOf(G__18136);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function cljs$core$make_array() {
  var G__18138 = arguments.length;
  switch(G__18138) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__5192__auto___18140 = len;
  var i_18141 = 0;
  while (true) {
    if (i_18141 < n__5192__auto___18140) {
      new_arr[i_18141] = arr[i_18141];
      var G__18142 = i_18141 + 1;
      i_18141 = G__18142;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__18143 = i + 1;
      i = G__18143;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget() {
  var G__18148 = arguments.length;
  switch(G__18148) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__18149 = cljs.core.aget;
  var G__18150 = array[i];
  var G__18151 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__18149, G__18150, G__18151) : cljs.core.apply.call(null, G__18149, G__18150, G__18151);
};
cljs.core.aget.cljs$lang$applyTo = function(seq18144) {
  var G__18145 = cljs.core.first(seq18144);
  var seq18144__$1 = cljs.core.next(seq18144);
  var G__18146 = cljs.core.first(seq18144__$1);
  var seq18144__$2 = cljs.core.next(seq18144__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__18145, G__18146, seq18144__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset() {
  var G__18158 = arguments.length;
  switch(G__18158) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5358__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__18159 = cljs.core.aset;
  var G__18160 = array[idx];
  var G__18161 = idx2;
  var G__18162 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__18159, G__18160, G__18161, G__18162) : cljs.core.apply.call(null, G__18159, G__18160, G__18161, G__18162);
};
cljs.core.aset.cljs$lang$applyTo = function(seq18153) {
  var G__18154 = cljs.core.first(seq18153);
  var seq18153__$1 = cljs.core.next(seq18153);
  var G__18155 = cljs.core.first(seq18153__$1);
  var seq18153__$2 = cljs.core.next(seq18153__$1);
  var G__18156 = cljs.core.first(seq18153__$2);
  var seq18153__$3 = cljs.core.next(seq18153__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__18154, G__18155, G__18156, seq18153__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array() {
  var G__18165 = arguments.length;
  switch(G__18165) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__18166 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__18167 = [];
  var G__18168 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__18166, G__18167, G__18168) : cljs.core.reduce.call(null, G__18166, G__18167, G__18168);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke() {
  var argseq__5347__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5347__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq18170) {
  var G__18171 = cljs.core.first(seq18170);
  var seq18170__$1 = cljs.core.next(seq18170);
  var G__18172 = cljs.core.first(seq18170__$1);
  var seq18170__$2 = cljs.core.next(seq18170__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__18171, G__18172, seq18170__$2);
};
cljs.core.Fn = function() {
  var obj18174 = {};
  return obj18174;
}();
cljs.core.IFn = function() {
  var obj18176 = {};
  return obj18176;
}();
cljs.core._invoke = function cljs$core$_invoke() {
  var G__18178 = arguments.length;
  switch(G__18178) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18180 = x__4943__auto__;
        return goog.typeOf(G__18180);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18182 = x__4943__auto__;
        return goog.typeOf(G__18182);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18184 = x__4943__auto__;
        return goog.typeOf(G__18184);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$4;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18186 = x__4943__auto__;
        return goog.typeOf(G__18186);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$5;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18188 = x__4943__auto__;
        return goog.typeOf(G__18188);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$6;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18190 = x__4943__auto__;
        return goog.typeOf(G__18190);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$7;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18192 = x__4943__auto__;
        return goog.typeOf(G__18192);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$8;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18194 = x__4943__auto__;
        return goog.typeOf(G__18194);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$9;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18196 = x__4943__auto__;
        return goog.typeOf(G__18196);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$10;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18198 = x__4943__auto__;
        return goog.typeOf(G__18198);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$11;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18200 = x__4943__auto__;
        return goog.typeOf(G__18200);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$12;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18202 = x__4943__auto__;
        return goog.typeOf(G__18202);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$13;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18204 = x__4943__auto__;
        return goog.typeOf(G__18204);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$14;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18206 = x__4943__auto__;
        return goog.typeOf(G__18206);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$15;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18208 = x__4943__auto__;
        return goog.typeOf(G__18208);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$16;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18210 = x__4943__auto__;
        return goog.typeOf(G__18210);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$17;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18212 = x__4943__auto__;
        return goog.typeOf(G__18212);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$18;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18214 = x__4943__auto__;
        return goog.typeOf(G__18214);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$19;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18216 = x__4943__auto__;
        return goog.typeOf(G__18216);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$20;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18218 = x__4943__auto__;
        return goog.typeOf(G__18218);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$21;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18220 = x__4943__auto__;
        return goog.typeOf(G__18220);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$22;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._invoke[function() {
        var G__18222 = x__4943__auto__;
        return goog.typeOf(G__18222);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._invoke["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
  var obj18225 = {};
  return obj18225;
}();
cljs.core._clone = function cljs$core$_clone(value) {
  if (function() {
    var and__4295__auto__ = value;
    if (and__4295__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4943__auto__ = value == null ? null : value;
    return function() {
      var or__4307__auto__ = cljs.core._clone[function() {
        var G__18229 = x__4943__auto__;
        return goog.typeOf(G__18229);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._clone["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj18231 = {};
  return obj18231;
}();
cljs.core._count = function cljs$core$_count(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._count[function() {
        var G__18235 = x__4943__auto__;
        return goog.typeOf(G__18235);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._count["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj18237 = {};
  return obj18237;
}();
cljs.core._empty = function cljs$core$_empty(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._empty[function() {
        var G__18241 = x__4943__auto__;
        return goog.typeOf(G__18241);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._empty["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj18243 = {};
  return obj18243;
}();
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._conj[function() {
        var G__18247 = x__4943__auto__;
        return goog.typeOf(G__18247);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._conj["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj18249 = {};
  return obj18249;
}();
cljs.core._nth = function cljs$core$_nth() {
  var G__18251 = arguments.length;
  switch(G__18251) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._nth[function() {
        var G__18253 = x__4943__auto__;
        return goog.typeOf(G__18253);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._nth["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n);
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._nth[function() {
        var G__18255 = x__4943__auto__;
        return goog.typeOf(G__18255);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._nth["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n, not_found);
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
  var obj18258 = {};
  return obj18258;
}();
cljs.core.ISeq = function() {
  var obj18260 = {};
  return obj18260;
}();
cljs.core._first = function cljs$core$_first(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._first[function() {
        var G__18264 = x__4943__auto__;
        return goog.typeOf(G__18264);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._first["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._rest[function() {
        var G__18268 = x__4943__auto__;
        return goog.typeOf(G__18268);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._rest["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj18270 = {};
  return obj18270;
}();
cljs.core._next = function cljs$core$_next(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._next[function() {
        var G__18274 = x__4943__auto__;
        return goog.typeOf(G__18274);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._next["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj18276 = {};
  return obj18276;
}();
cljs.core._lookup = function cljs$core$_lookup() {
  var G__18278 = arguments.length;
  switch(G__18278) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._lookup[function() {
        var G__18280 = x__4943__auto__;
        return goog.typeOf(G__18280);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._lookup["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k);
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._lookup[function() {
        var G__18282 = x__4943__auto__;
        return goog.typeOf(G__18282);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._lookup["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k, not_found);
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
  var obj18285 = {};
  return obj18285;
}();
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__18289 = x__4943__auto__;
        return goog.typeOf(G__18289);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._assoc[function() {
        var G__18293 = x__4943__auto__;
        return goog.typeOf(G__18293);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._assoc["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj18295 = {};
  return obj18295;
}();
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._dissoc[function() {
        var G__18299 = x__4943__auto__;
        return goog.typeOf(G__18299);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._dissoc["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj18301 = {};
  return obj18301;
}();
cljs.core._key = function cljs$core$_key(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._key[function() {
        var G__18305 = x__4943__auto__;
        return goog.typeOf(G__18305);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._key["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._val[function() {
        var G__18309 = x__4943__auto__;
        return goog.typeOf(G__18309);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._val["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj18311 = {};
  return obj18311;
}();
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._disjoin[function() {
        var G__18315 = x__4943__auto__;
        return goog.typeOf(G__18315);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._disjoin["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj18317 = {};
  return obj18317;
}();
cljs.core._peek = function cljs$core$_peek(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._peek[function() {
        var G__18321 = x__4943__auto__;
        return goog.typeOf(G__18321);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._peek["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._pop[function() {
        var G__18325 = x__4943__auto__;
        return goog.typeOf(G__18325);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._pop["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj18327 = {};
  return obj18327;
}();
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._assoc_n[function() {
        var G__18331 = x__4943__auto__;
        return goog.typeOf(G__18331);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._assoc_n["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj18333 = {};
  return obj18333;
}();
cljs.core._deref = function cljs$core$_deref(o) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._deref[function() {
        var G__18337 = x__4943__auto__;
        return goog.typeOf(G__18337);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._deref["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj18339 = {};
  return obj18339;
}();
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._deref_with_timeout[function() {
        var G__18343 = x__4943__auto__;
        return goog.typeOf(G__18343);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj18345 = {};
  return obj18345;
}();
cljs.core._meta = function cljs$core$_meta(o) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._meta[function() {
        var G__18349 = x__4943__auto__;
        return goog.typeOf(G__18349);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._meta["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj18351 = {};
  return obj18351;
}();
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._with_meta[function() {
        var G__18355 = x__4943__auto__;
        return goog.typeOf(G__18355);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._with_meta["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj18357 = {};
  return obj18357;
}();
cljs.core._reduce = function cljs$core$_reduce() {
  var G__18359 = arguments.length;
  switch(G__18359) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._reduce[function() {
        var G__18361 = x__4943__auto__;
        return goog.typeOf(G__18361);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._reduce["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f);
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._reduce[function() {
        var G__18363 = x__4943__auto__;
        return goog.typeOf(G__18363);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._reduce["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f, start);
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
  var obj18366 = {};
  return obj18366;
}();
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._kv_reduce[function() {
        var G__18370 = x__4943__auto__;
        return goog.typeOf(G__18370);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj18372 = {};
  return obj18372;
}();
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._equiv[function() {
        var G__18376 = x__4943__auto__;
        return goog.typeOf(G__18376);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._equiv["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj18378 = {};
  return obj18378;
}();
cljs.core._hash = function cljs$core$_hash(o) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._hash[function() {
        var G__18382 = x__4943__auto__;
        return goog.typeOf(G__18382);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._hash["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj18384 = {};
  return obj18384;
}();
cljs.core._seq = function cljs$core$_seq(o) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._seq[function() {
        var G__18388 = x__4943__auto__;
        return goog.typeOf(G__18388);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._seq["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj18390 = {};
  return obj18390;
}();
cljs.core.IList = function() {
  var obj18392 = {};
  return obj18392;
}();
cljs.core.IRecord = function() {
  var obj18394 = {};
  return obj18394;
}();
cljs.core.IReversible = function() {
  var obj18396 = {};
  return obj18396;
}();
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._rseq[function() {
        var G__18400 = x__4943__auto__;
        return goog.typeOf(G__18400);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._rseq["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj18402 = {};
  return obj18402;
}();
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._sorted_seq[function() {
        var G__18406 = x__4943__auto__;
        return goog.typeOf(G__18406);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._sorted_seq_from[function() {
        var G__18410 = x__4943__auto__;
        return goog.typeOf(G__18410);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._entry_key[function() {
        var G__18414 = x__4943__auto__;
        return goog.typeOf(G__18414);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._entry_key["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._comparator[function() {
        var G__18418 = x__4943__auto__;
        return goog.typeOf(G__18418);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._comparator["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj18420 = {};
  return obj18420;
}();
cljs.core._write = function cljs$core$_write(writer, s) {
  if (function() {
    var and__4295__auto__ = writer;
    if (and__4295__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4943__auto__ = writer == null ? null : writer;
    return function() {
      var or__4307__auto__ = cljs.core._write[function() {
        var G__18424 = x__4943__auto__;
        return goog.typeOf(G__18424);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._write["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (function() {
    var and__4295__auto__ = writer;
    if (and__4295__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4943__auto__ = writer == null ? null : writer;
    return function() {
      var or__4307__auto__ = cljs.core._flush[function() {
        var G__18428 = x__4943__auto__;
        return goog.typeOf(G__18428);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._flush["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj18430 = {};
  return obj18430;
}();
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._pr_writer[function() {
        var G__18434 = x__4943__auto__;
        return goog.typeOf(G__18434);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._pr_writer["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj18436 = {};
  return obj18436;
}();
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (function() {
    var and__4295__auto__ = d;
    if (and__4295__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4943__auto__ = d == null ? null : d;
    return function() {
      var or__4307__auto__ = cljs.core._realized_QMARK_[function() {
        var G__18440 = x__4943__auto__;
        return goog.typeOf(G__18440);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj18442 = {};
  return obj18442;
}();
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._notify_watches[function() {
        var G__18446 = x__4943__auto__;
        return goog.typeOf(G__18446);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._notify_watches["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._add_watch[function() {
        var G__18450 = x__4943__auto__;
        return goog.typeOf(G__18450);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._add_watch["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core._remove_watch[function() {
        var G__18454 = x__4943__auto__;
        return goog.typeOf(G__18454);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._remove_watch["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj18456 = {};
  return obj18456;
}();
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._as_transient[function() {
        var G__18460 = x__4943__auto__;
        return goog.typeOf(G__18460);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._as_transient["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj18462 = {};
  return obj18462;
}();
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (function() {
    var and__4295__auto__ = tcoll;
    if (and__4295__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4943__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4307__auto__ = cljs.core._conj_BANG_[function() {
        var G__18466 = x__4943__auto__;
        return goog.typeOf(G__18466);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (function() {
    var and__4295__auto__ = tcoll;
    if (and__4295__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4943__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4307__auto__ = cljs.core._persistent_BANG_[function() {
        var G__18470 = x__4943__auto__;
        return goog.typeOf(G__18470);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj18472 = {};
  return obj18472;
}();
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__4295__auto__ = tcoll;
    if (and__4295__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4943__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4307__auto__ = cljs.core._assoc_BANG_[function() {
        var G__18476 = x__4943__auto__;
        return goog.typeOf(G__18476);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj18478 = {};
  return obj18478;
}();
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__4295__auto__ = tcoll;
    if (and__4295__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4943__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4307__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__18482 = x__4943__auto__;
        return goog.typeOf(G__18482);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj18484 = {};
  return obj18484;
}();
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__4295__auto__ = tcoll;
    if (and__4295__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4943__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4307__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__18488 = x__4943__auto__;
        return goog.typeOf(G__18488);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (function() {
    var and__4295__auto__ = tcoll;
    if (and__4295__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4943__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4307__auto__ = cljs.core._pop_BANG_[function() {
        var G__18492 = x__4943__auto__;
        return goog.typeOf(G__18492);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj18494 = {};
  return obj18494;
}();
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__4295__auto__ = tcoll;
    if (and__4295__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4943__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4307__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__18498 = x__4943__auto__;
        return goog.typeOf(G__18498);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj18500 = {};
  return obj18500;
}();
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (function() {
    var and__4295__auto__ = x;
    if (and__4295__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4943__auto__ = x == null ? null : x;
    return function() {
      var or__4307__auto__ = cljs.core._compare[function() {
        var G__18504 = x__4943__auto__;
        return goog.typeOf(G__18504);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._compare["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj18506 = {};
  return obj18506;
}();
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._drop_first[function() {
        var G__18510 = x__4943__auto__;
        return goog.typeOf(G__18510);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._drop_first["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj18512 = {};
  return obj18512;
}();
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._chunked_first[function() {
        var G__18516 = x__4943__auto__;
        return goog.typeOf(G__18516);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._chunked_first["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._chunked_rest[function() {
        var G__18520 = x__4943__auto__;
        return goog.typeOf(G__18520);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj18522 = {};
  return obj18522;
}();
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._chunked_next[function() {
        var G__18526 = x__4943__auto__;
        return goog.typeOf(G__18526);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._chunked_next["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj18528 = {};
  return obj18528;
}();
cljs.core._name = function cljs$core$_name(x) {
  if (function() {
    var and__4295__auto__ = x;
    if (and__4295__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4943__auto__ = x == null ? null : x;
    return function() {
      var or__4307__auto__ = cljs.core._name[function() {
        var G__18532 = x__4943__auto__;
        return goog.typeOf(G__18532);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._name["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (function() {
    var and__4295__auto__ = x;
    if (and__4295__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4943__auto__ = x == null ? null : x;
    return function() {
      var or__4307__auto__ = cljs.core._namespace[function() {
        var G__18536 = x__4943__auto__;
        return goog.typeOf(G__18536);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._namespace["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj18538 = {};
  return obj18538;
}();
cljs.core.IReset = function() {
  var obj18540 = {};
  return obj18540;
}();
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._reset_BANG_[function() {
        var G__18544 = x__4943__auto__;
        return goog.typeOf(G__18544);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj18546 = {};
  return obj18546;
}();
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_() {
  var G__18548 = arguments.length;
  switch(G__18548) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._swap_BANG_[function() {
        var G__18550 = x__4943__auto__;
        return goog.typeOf(G__18550);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._swap_BANG_[function() {
        var G__18552 = x__4943__auto__;
        return goog.typeOf(G__18552);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._swap_BANG_[function() {
        var G__18554 = x__4943__auto__;
        return goog.typeOf(G__18554);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._swap_BANG_[function() {
        var G__18556 = x__4943__auto__;
        return goog.typeOf(G__18556);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b, xs);
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
  var obj18559 = {};
  return obj18559;
}();
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = cljs.core._vreset_BANG_[function() {
        var G__18563 = x__4943__auto__;
        return goog.typeOf(G__18563);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj18565 = {};
  return obj18565;
}();
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (function() {
    var and__4295__auto__ = coll;
    if (and__4295__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4943__auto__ = coll == null ? null : coll;
    return function() {
      var or__4307__auto__ = cljs.core._iterator[function() {
        var G__18569 = x__4943__auto__;
        return goog.typeOf(G__18569);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._iterator["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "sb", "sb", -1249746442, null)], null);
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return [cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__18572 = 4294967295;
  var G__18573 = 5;
  return Math.imul(G__18572, G__18573);
}() === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var G__18576 = a;
    var G__18577 = b;
    return Math.imul(G__18576, G__18577);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__18578 = i + 2;
        var G__18579 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__18578;
        h1 = G__18579;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj18581 = {};
  return obj18581;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__18582 = i + 1;
          var G__18583 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__18582;
          hash = G__18583;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj18587 = {};
      return obj18587;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (function() {
    var G__18590 = o;
    if (G__18590) {
      var bit__4974__auto__ = G__18590.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4974__auto__ || G__18590.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__18591 = o;
        return Math.floor(G__18591);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4295__auto__ = cljs.core.not(a.ns);
      if (and__4295__auto__) {
        return b.ns;
      } else {
        return and__4295__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__18598 = a.ns;
            var G__18599 = b.ns;
            return goog.array.defaultCompare(G__18598, G__18599);
          }();
          if (0 === nsc) {
            var G__18600 = a.name;
            var G__18601 = b.name;
            return goog.array.defaultCompare(G__18600, G__18601);
          } else {
            return nsc;
          }
        }
      } else {
        var G__18602 = a.name;
        var G__18603 = b.name;
        return goog.array.defaultCompare(G__18602, G__18603);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__18605 = null;
  var G__18605__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__18605__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__18605 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18605__2.call(this, self__, coll);
      case 3:
        return G__18605__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18605.cljs$core$IFn$_invoke$arity$2 = G__18605__2;
  G__18605.cljs$core$IFn$_invoke$arity$3 = G__18605__3;
  return G__18605;
}();
cljs.core.Symbol.prototype.apply = function(self__, args18604) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18604)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4723__auto__ = self__._hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "str", "str", -1564826950, null), new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol() {
  var G__18607 = arguments.length;
  switch(G__18607) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.call = function() {
  var G__18654 = null;
  var G__18654__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__18654__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__18654__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__18654__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__18654__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__18654__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__18654__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__18654__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__18654__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__18654__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__18654__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__18654__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__18654__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__18654__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__18654__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__18654__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__18654__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__18654__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__18654__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__18654__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__18654__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__18654__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18610 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__18611 = a;
    var G__18612 = b;
    var G__18613 = c;
    var G__18614 = d;
    var G__18615 = e;
    var G__18616 = f;
    var G__18617 = g;
    var G__18618 = h;
    var G__18619 = i;
    var G__18620 = j;
    var G__18621 = k;
    var G__18622 = l;
    var G__18623 = m;
    var G__18624 = n;
    var G__18625 = o;
    var G__18626 = p;
    var G__18627 = q;
    var G__18628 = r;
    var G__18629 = s;
    var G__18630 = t;
    var G__18631 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__18610, G__18611, G__18612, G__18613, G__18614, G__18615, G__18616, G__18617, G__18618, G__18619, G__18620, G__18621, G__18622, G__18623, G__18624, G__18625, G__18626, G__18627, G__18628, G__18629, G__18630, G__18631) : cljs.core.apply.call(null, G__18610, G__18611, G__18612, G__18613, G__18614, G__18615, G__18616, G__18617, G__18618, G__18619, G__18620, G__18621, G__18622, G__18623, G__18624, 
    G__18625, G__18626, G__18627, G__18628, G__18629, G__18630, G__18631);
  };
  G__18654 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__18654__1.call(this, self__);
      case 2:
        return G__18654__2.call(this, self__, a);
      case 3:
        return G__18654__3.call(this, self__, a, b);
      case 4:
        return G__18654__4.call(this, self__, a, b, c);
      case 5:
        return G__18654__5.call(this, self__, a, b, c, d);
      case 6:
        return G__18654__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__18654__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__18654__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__18654__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__18654__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__18654__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__18654__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__18654__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__18654__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__18654__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__18654__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__18654__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__18654__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__18654__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__18654__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__18654__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__18654__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18654.cljs$core$IFn$_invoke$arity$1 = G__18654__1;
  G__18654.cljs$core$IFn$_invoke$arity$2 = G__18654__2;
  G__18654.cljs$core$IFn$_invoke$arity$3 = G__18654__3;
  G__18654.cljs$core$IFn$_invoke$arity$4 = G__18654__4;
  G__18654.cljs$core$IFn$_invoke$arity$5 = G__18654__5;
  G__18654.cljs$core$IFn$_invoke$arity$6 = G__18654__6;
  G__18654.cljs$core$IFn$_invoke$arity$7 = G__18654__7;
  G__18654.cljs$core$IFn$_invoke$arity$8 = G__18654__8;
  G__18654.cljs$core$IFn$_invoke$arity$9 = G__18654__9;
  G__18654.cljs$core$IFn$_invoke$arity$10 = G__18654__10;
  G__18654.cljs$core$IFn$_invoke$arity$11 = G__18654__11;
  G__18654.cljs$core$IFn$_invoke$arity$12 = G__18654__12;
  G__18654.cljs$core$IFn$_invoke$arity$13 = G__18654__13;
  G__18654.cljs$core$IFn$_invoke$arity$14 = G__18654__14;
  G__18654.cljs$core$IFn$_invoke$arity$15 = G__18654__15;
  G__18654.cljs$core$IFn$_invoke$arity$16 = G__18654__16;
  G__18654.cljs$core$IFn$_invoke$arity$17 = G__18654__17;
  G__18654.cljs$core$IFn$_invoke$arity$18 = G__18654__18;
  G__18654.cljs$core$IFn$_invoke$arity$19 = G__18654__19;
  G__18654.cljs$core$IFn$_invoke$arity$20 = G__18654__20;
  G__18654.cljs$core$IFn$_invoke$arity$21 = G__18654__21;
  G__18654.cljs$core$IFn$_invoke$arity$22 = G__18654__22;
  return G__18654;
}();
cljs.core.Var.prototype.apply = function(self__, args18609) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18609)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__18632 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__18633 = a;
  var G__18634 = b;
  var G__18635 = c;
  var G__18636 = d;
  var G__18637 = e;
  var G__18638 = f;
  var G__18639 = g;
  var G__18640 = h;
  var G__18641 = i;
  var G__18642 = j;
  var G__18643 = k;
  var G__18644 = l;
  var G__18645 = m;
  var G__18646 = n;
  var G__18647 = o;
  var G__18648 = p;
  var G__18649 = q;
  var G__18650 = r;
  var G__18651 = s;
  var G__18652 = t;
  var G__18653 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__18632, G__18633, G__18634, G__18635, G__18636, G__18637, G__18638, G__18639, G__18640, G__18641, G__18642, G__18643, G__18644, G__18645, G__18646, G__18647, G__18648, G__18649, G__18650, G__18651, G__18652, G__18653) : cljs.core.apply.call(null, G__18632, G__18633, G__18634, G__18635, G__18636, G__18637, G__18638, G__18639, G__18640, G__18641, G__18642, G__18643, G__18644, G__18645, G__18646, 
  G__18647, G__18648, G__18649, G__18650, G__18651, G__18652, G__18653);
};
cljs.core.Var.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.var_QMARK_ = function cljs$core$var_QMARK_(v) {
  return v instanceof cljs.core.Var;
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  var G__18656 = x;
  if (G__18656) {
    var bit__4981__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4307__auto__ = bit__4981__auto__;
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return G__18656.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__18656.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__18656);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__18656);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  var G__18658 = value;
  if (G__18658) {
    var bit__4981__auto__ = G__18658.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4981__auto__ || G__18658.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__18658.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__18658);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__18658);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__18660 = coll;
      if (G__18660) {
        var bit__4974__auto__ = G__18660.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4974__auto__ || G__18660.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__18662 = coll;
      if (G__18662) {
        var bit__4974__auto__ = G__18662.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4974__auto__ || G__18662.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__18664 = coll;
      if (G__18664) {
        var bit__4974__auto__ = G__18664.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4974__auto__ || G__18664.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__18666 = coll;
      if (G__18666) {
        var bit__4974__auto__ = G__18666.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4974__auto__ || G__18666.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_() {
  var G__18671 = arguments.length;
  switch(G__18671) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__18673 = y;
        var G__18674 = cljs.core.first(more);
        var G__18675 = cljs.core.next(more);
        x = G__18673;
        y = G__18674;
        more = G__18675;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq18667) {
  var G__18668 = cljs.core.first(seq18667);
  var seq18667__$1 = cljs.core.next(seq18667);
  var G__18669 = cljs.core.first(seq18667__$1);
  var seq18667__$2 = cljs.core.next(seq18667__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__18668, G__18669, seq18667__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":x, "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null)], null);
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__18676 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__18676) : cljs.core.es6_iterator_seq.call(null, G__18676);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null), new cljs.core.Symbol(null, "_rest", "_rest", -2100466189, null)], null);
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__18677 = n + 1;
      var G__18678 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__18679 = cljs.core.next(coll__$1);
      n = G__18677;
      hash_code = G__18678;
      coll__$1 = G__18679;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__18680 = n + 1;
      var G__18681 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__18682 = cljs.core.next(coll__$1);
      n = G__18680;
      hash_code = G__18681;
      coll__$1 = G__18682;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  var G__18683 = this$__$1.valueOf();
  var G__18684 = other.valueOf();
  return goog.array.defaultCompare(G__18683, G__18684);
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__18685 = o;
  return goog.getUid(G__18685);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__18687 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18687) : cljs.core.deref.call(null, G__18687);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce() {
  var G__18689 = arguments.length;
  switch(G__18689) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__18690 = val;
          var G__18691 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18690, G__18691) : f.call(null, G__18690, G__18691);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__18697 = nval;
          var G__18698 = n + 1;
          val = G__18697;
          n = G__18698;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__18692 = val__$1;
        var G__18693 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18692, G__18693) : f.call(null, G__18692, G__18693);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__18699 = nval;
        var G__18700 = n + 1;
        val__$1 = G__18699;
        n = G__18700;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__18694 = val__$1;
        var G__18695 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18694, G__18695) : f.call(null, G__18694, G__18695);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__18701 = nval;
        var G__18702 = n + 1;
        val__$1 = G__18701;
        n = G__18702;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce() {
  var G__18704 = arguments.length;
  switch(G__18704) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__18705 = val;
          var G__18706 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18705, G__18706) : f.call(null, G__18705, G__18706);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__18712 = nval;
          var G__18713 = n + 1;
          val = G__18712;
          n = G__18713;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__18707 = val__$1;
        var G__18708 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18707, G__18708) : f.call(null, G__18707, G__18708);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__18714 = nval;
        var G__18715 = n + 1;
        val__$1 = G__18714;
        n = G__18715;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__18709 = val__$1;
        var G__18710 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18709, G__18710) : f.call(null, G__18709, G__18710);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__18716 = nval;
        var G__18717 = n + 1;
        val__$1 = G__18716;
        n = G__18717;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  var G__18719 = x;
  if (G__18719) {
    var bit__4981__auto__ = G__18719.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4981__auto__ || G__18719.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__18719.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__18719);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__18719);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  var G__18721 = x;
  if (G__18721) {
    var bit__4981__auto__ = G__18721.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4981__auto__ || G__18721.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__18721.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__18721);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__18721);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__18722 = coll__$1;
  var G__18723 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__18722, G__18723) : cljs.core.equiv_sequential.call(null, G__18722, G__18723);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__18724 = o;
  var G__18725 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__18724, G__18725) : cljs.core.cons.call(null, G__18724, G__18725);
};
cljs.core.IndexedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq() {
  var G__18727 = arguments.length;
  switch(G__18727) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq() {
  var G__18730 = arguments.length;
  switch(G__18730) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__18732 = coll__$1;
  var G__18733 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__18732, G__18733) : cljs.core.equiv_sequential.call(null, G__18732, G__18733);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__18734 = cljs.core.List.EMPTY;
  var G__18735 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__18734, G__18735) : cljs.core.with_meta.call(null, G__18734, G__18735);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__18736 = f;
  var G__18737 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__18736, G__18737) : cljs.core.seq_reduce.call(null, G__18736, G__18737);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__18738 = f;
  var G__18739 = start;
  var G__18740 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__18738, G__18739, G__18740) : cljs.core.seq_reduce.call(null, G__18738, G__18739, G__18740);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__18741 = o;
  var G__18742 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__18741, G__18742) : cljs.core.cons.call(null, G__18741, G__18742);
};
cljs.core.RSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ci", "ci", 2049808339, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__18743 = sn;
      s = G__18743;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj() {
  var G__18748 = arguments.length;
  switch(G__18748) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return cljs.core._conj(cljs.core.List.EMPTY, x);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__18750 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__18751 = cljs.core.first(xs);
      var G__18752 = cljs.core.next(xs);
      coll = G__18750;
      x = G__18751;
      xs = G__18752;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq18744) {
  var G__18745 = cljs.core.first(seq18744);
  var seq18744__$1 = cljs.core.next(seq18744);
  var G__18746 = cljs.core.first(seq18744__$1);
  var seq18744__$2 = cljs.core.next(seq18744__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__18745, G__18746, seq18744__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__18753 = cljs.core.next(s);
      var G__18754 = acc + 1;
      s = G__18753;
      acc = G__18754;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__18756 = coll;
      if (G__18756) {
        var bit__4974__auto__ = G__18756.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4974__auto__ || G__18756.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth() {
  var G__18758 = arguments.length;
  switch(G__18758) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__18760 = cljs.core.next(coll);
            var G__18761 = n - 1;
            coll = G__18760;
            n = G__18761;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__18762 = cljs.core.next(coll);
            var G__18763 = n - 1;
            var G__18764 = not_found;
            coll = G__18762;
            n = G__18763;
            not_found = G__18764;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth() {
  var G__18766 = arguments.length;
  switch(G__18766) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (function() {
        var G__18767 = coll;
        if (G__18767) {
          var bit__4974__auto__ = G__18767.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4974__auto__ || G__18767.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__18768 = coll;
                if (G__18768) {
                  var bit__4981__auto__ = G__18768.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__4981__auto__ || G__18768.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__18768.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__18768);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__18768);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (function() {
        var G__18769 = coll;
        if (G__18769) {
          var bit__4974__auto__ = G__18769.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4974__auto__ || G__18769.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__18770 = coll;
                if (G__18770) {
                  var bit__4981__auto__ = G__18770.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__4981__auto__ || G__18770.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__18770.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__18770);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__18770);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__18772 = n__$1 - 1;
      var G__18773 = cljs.core.rest(xs);
      n__$1 = G__18772;
      xs = G__18773;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get() {
  var G__18775 = arguments.length;
  switch(G__18775) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (function() {
      var G__18776 = o;
      if (G__18776) {
        var bit__4974__auto__ = G__18776.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__4974__auto__ || G__18776.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (function() {
      var G__18777 = o;
      if (G__18777) {
        var bit__4974__auto__ = G__18777.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__4974__auto__ || G__18777.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc() {
  var G__18784 = arguments.length;
  switch(G__18784) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5358__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__18786 = ret;
      var G__18787 = cljs.core.first(kvs);
      var G__18788 = cljs.core.second(kvs);
      var G__18789 = cljs.core.nnext(kvs);
      coll = G__18786;
      k = G__18787;
      v = G__18788;
      kvs = G__18789;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq18779) {
  var G__18780 = cljs.core.first(seq18779);
  var seq18779__$1 = cljs.core.next(seq18779);
  var G__18781 = cljs.core.first(seq18779__$1);
  var seq18779__$2 = cljs.core.next(seq18779__$1);
  var G__18782 = cljs.core.first(seq18779__$2);
  var seq18779__$3 = cljs.core.next(seq18779__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__18780, G__18781, G__18782, seq18779__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc() {
  var G__18794 = arguments.length;
  switch(G__18794) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__18796 = ret;
        var G__18797 = cljs.core.first(ks);
        var G__18798 = cljs.core.next(ks);
        coll = G__18796;
        k = G__18797;
        ks = G__18798;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq18790) {
  var G__18791 = cljs.core.first(seq18790);
  var seq18790__$1 = cljs.core.next(seq18790);
  var G__18792 = cljs.core.first(seq18790__$1);
  var seq18790__$2 = cljs.core.next(seq18790__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__18791, G__18792, seq18790__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4307__auto__ = function() {
    var G__18803 = f;
    return goog.isFunction(G__18803);
  }();
  if (cljs.core.truth_(or__4307__auto__)) {
    return or__4307__auto__;
  } else {
    var G__18804 = f;
    if (G__18804) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto____$1 = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto____$1)) {
          return or__4307__auto____$1;
        } else {
          return G__18804.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__18804.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__18804);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__18804);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.call = function() {
  var G__19270 = null;
  var G__19270__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__19270__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18806 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__18806) : self__.afn.call(null, G__18806);
  };
  var G__19270__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18807 = a;
    var G__18808 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__18807, G__18808) : self__.afn.call(null, G__18807, G__18808);
  };
  var G__19270__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18809 = a;
    var G__18810 = b;
    var G__18811 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__18809, G__18810, G__18811) : self__.afn.call(null, G__18809, G__18810, G__18811);
  };
  var G__19270__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18812 = a;
    var G__18813 = b;
    var G__18814 = c;
    var G__18815 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__18812, G__18813, G__18814, G__18815) : self__.afn.call(null, G__18812, G__18813, G__18814, G__18815);
  };
  var G__19270__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18816 = a;
    var G__18817 = b;
    var G__18818 = c;
    var G__18819 = d;
    var G__18820 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__18816, G__18817, G__18818, G__18819, G__18820) : self__.afn.call(null, G__18816, G__18817, G__18818, G__18819, G__18820);
  };
  var G__19270__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18821 = a;
    var G__18822 = b;
    var G__18823 = c;
    var G__18824 = d;
    var G__18825 = e;
    var G__18826 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__18821, G__18822, G__18823, G__18824, G__18825, G__18826) : self__.afn.call(null, G__18821, G__18822, G__18823, G__18824, G__18825, G__18826);
  };
  var G__19270__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18827 = a;
    var G__18828 = b;
    var G__18829 = c;
    var G__18830 = d;
    var G__18831 = e;
    var G__18832 = f;
    var G__18833 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__18827, G__18828, G__18829, G__18830, G__18831, G__18832, G__18833) : self__.afn.call(null, G__18827, G__18828, G__18829, G__18830, G__18831, G__18832, G__18833);
  };
  var G__19270__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18834 = a;
    var G__18835 = b;
    var G__18836 = c;
    var G__18837 = d;
    var G__18838 = e;
    var G__18839 = f;
    var G__18840 = g;
    var G__18841 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__18834, G__18835, G__18836, G__18837, G__18838, G__18839, G__18840, G__18841) : self__.afn.call(null, G__18834, G__18835, G__18836, G__18837, G__18838, G__18839, G__18840, G__18841);
  };
  var G__19270__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18842 = a;
    var G__18843 = b;
    var G__18844 = c;
    var G__18845 = d;
    var G__18846 = e;
    var G__18847 = f;
    var G__18848 = g;
    var G__18849 = h;
    var G__18850 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__18842, G__18843, G__18844, G__18845, G__18846, G__18847, G__18848, G__18849, G__18850) : self__.afn.call(null, G__18842, G__18843, G__18844, G__18845, G__18846, G__18847, G__18848, G__18849, G__18850);
  };
  var G__19270__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18851 = a;
    var G__18852 = b;
    var G__18853 = c;
    var G__18854 = d;
    var G__18855 = e;
    var G__18856 = f;
    var G__18857 = g;
    var G__18858 = h;
    var G__18859 = i;
    var G__18860 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__18851, G__18852, G__18853, G__18854, G__18855, G__18856, G__18857, G__18858, G__18859, G__18860) : self__.afn.call(null, G__18851, G__18852, G__18853, G__18854, G__18855, G__18856, G__18857, G__18858, G__18859, G__18860);
  };
  var G__19270__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18861 = a;
    var G__18862 = b;
    var G__18863 = c;
    var G__18864 = d;
    var G__18865 = e;
    var G__18866 = f;
    var G__18867 = g;
    var G__18868 = h;
    var G__18869 = i;
    var G__18870 = j;
    var G__18871 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__18861, G__18862, G__18863, G__18864, G__18865, G__18866, G__18867, G__18868, G__18869, G__18870, G__18871) : self__.afn.call(null, G__18861, G__18862, G__18863, G__18864, G__18865, G__18866, G__18867, G__18868, G__18869, G__18870, G__18871);
  };
  var G__19270__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18872 = a;
    var G__18873 = b;
    var G__18874 = c;
    var G__18875 = d;
    var G__18876 = e;
    var G__18877 = f;
    var G__18878 = g;
    var G__18879 = h;
    var G__18880 = i;
    var G__18881 = j;
    var G__18882 = k;
    var G__18883 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__18872, G__18873, G__18874, G__18875, G__18876, G__18877, G__18878, G__18879, G__18880, G__18881, G__18882, G__18883) : self__.afn.call(null, G__18872, G__18873, G__18874, G__18875, G__18876, G__18877, G__18878, G__18879, G__18880, G__18881, G__18882, G__18883);
  };
  var G__19270__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18884 = a;
    var G__18885 = b;
    var G__18886 = c;
    var G__18887 = d;
    var G__18888 = e;
    var G__18889 = f;
    var G__18890 = g;
    var G__18891 = h;
    var G__18892 = i;
    var G__18893 = j;
    var G__18894 = k;
    var G__18895 = l;
    var G__18896 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__18884, G__18885, G__18886, G__18887, G__18888, G__18889, G__18890, G__18891, G__18892, G__18893, G__18894, G__18895, G__18896) : self__.afn.call(null, G__18884, G__18885, G__18886, G__18887, G__18888, G__18889, G__18890, G__18891, G__18892, G__18893, G__18894, G__18895, G__18896);
  };
  var G__19270__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18897 = a;
    var G__18898 = b;
    var G__18899 = c;
    var G__18900 = d;
    var G__18901 = e;
    var G__18902 = f;
    var G__18903 = g;
    var G__18904 = h;
    var G__18905 = i;
    var G__18906 = j;
    var G__18907 = k;
    var G__18908 = l;
    var G__18909 = m;
    var G__18910 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__18897, G__18898, G__18899, G__18900, G__18901, G__18902, G__18903, G__18904, G__18905, G__18906, G__18907, G__18908, G__18909, G__18910) : self__.afn.call(null, G__18897, G__18898, G__18899, G__18900, G__18901, G__18902, G__18903, G__18904, G__18905, G__18906, G__18907, G__18908, G__18909, G__18910);
  };
  var G__19270__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18911 = a;
    var G__18912 = b;
    var G__18913 = c;
    var G__18914 = d;
    var G__18915 = e;
    var G__18916 = f;
    var G__18917 = g;
    var G__18918 = h;
    var G__18919 = i;
    var G__18920 = j;
    var G__18921 = k;
    var G__18922 = l;
    var G__18923 = m;
    var G__18924 = n;
    var G__18925 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__18911, G__18912, G__18913, G__18914, G__18915, G__18916, G__18917, G__18918, G__18919, G__18920, G__18921, G__18922, G__18923, G__18924, G__18925) : self__.afn.call(null, G__18911, G__18912, G__18913, G__18914, G__18915, G__18916, G__18917, G__18918, G__18919, G__18920, G__18921, G__18922, G__18923, G__18924, G__18925);
  };
  var G__19270__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18926 = a;
    var G__18927 = b;
    var G__18928 = c;
    var G__18929 = d;
    var G__18930 = e;
    var G__18931 = f;
    var G__18932 = g;
    var G__18933 = h;
    var G__18934 = i;
    var G__18935 = j;
    var G__18936 = k;
    var G__18937 = l;
    var G__18938 = m;
    var G__18939 = n;
    var G__18940 = o;
    var G__18941 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__18926, G__18927, G__18928, G__18929, G__18930, G__18931, G__18932, G__18933, G__18934, G__18935, G__18936, G__18937, G__18938, G__18939, G__18940, G__18941) : self__.afn.call(null, G__18926, G__18927, G__18928, G__18929, G__18930, G__18931, G__18932, G__18933, G__18934, G__18935, G__18936, G__18937, G__18938, G__18939, G__18940, G__18941);
  };
  var G__19270__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18942 = a;
    var G__18943 = b;
    var G__18944 = c;
    var G__18945 = d;
    var G__18946 = e;
    var G__18947 = f;
    var G__18948 = g;
    var G__18949 = h;
    var G__18950 = i;
    var G__18951 = j;
    var G__18952 = k;
    var G__18953 = l;
    var G__18954 = m;
    var G__18955 = n;
    var G__18956 = o;
    var G__18957 = p;
    var G__18958 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__18942, G__18943, G__18944, G__18945, G__18946, G__18947, G__18948, G__18949, G__18950, G__18951, G__18952, G__18953, G__18954, G__18955, G__18956, G__18957, G__18958) : self__.afn.call(null, G__18942, G__18943, G__18944, G__18945, G__18946, G__18947, G__18948, G__18949, G__18950, G__18951, G__18952, G__18953, G__18954, G__18955, G__18956, G__18957, G__18958);
  };
  var G__19270__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18959 = a;
    var G__18960 = b;
    var G__18961 = c;
    var G__18962 = d;
    var G__18963 = e;
    var G__18964 = f;
    var G__18965 = g;
    var G__18966 = h;
    var G__18967 = i;
    var G__18968 = j;
    var G__18969 = k;
    var G__18970 = l;
    var G__18971 = m;
    var G__18972 = n;
    var G__18973 = o;
    var G__18974 = p;
    var G__18975 = q;
    var G__18976 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__18959, G__18960, G__18961, G__18962, G__18963, G__18964, G__18965, G__18966, G__18967, G__18968, G__18969, G__18970, G__18971, G__18972, G__18973, G__18974, G__18975, G__18976) : self__.afn.call(null, G__18959, G__18960, G__18961, G__18962, G__18963, G__18964, G__18965, G__18966, G__18967, G__18968, G__18969, G__18970, G__18971, G__18972, G__18973, G__18974, G__18975, G__18976);
  };
  var G__19270__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18977 = a;
    var G__18978 = b;
    var G__18979 = c;
    var G__18980 = d;
    var G__18981 = e;
    var G__18982 = f;
    var G__18983 = g;
    var G__18984 = h;
    var G__18985 = i;
    var G__18986 = j;
    var G__18987 = k;
    var G__18988 = l;
    var G__18989 = m;
    var G__18990 = n;
    var G__18991 = o;
    var G__18992 = p;
    var G__18993 = q;
    var G__18994 = r;
    var G__18995 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__18977, G__18978, G__18979, G__18980, G__18981, G__18982, G__18983, G__18984, G__18985, G__18986, G__18987, G__18988, G__18989, G__18990, G__18991, G__18992, G__18993, G__18994, G__18995) : self__.afn.call(null, G__18977, G__18978, G__18979, G__18980, G__18981, G__18982, G__18983, G__18984, G__18985, G__18986, G__18987, G__18988, G__18989, G__18990, G__18991, G__18992, G__18993, G__18994, G__18995);
  };
  var G__19270__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18996 = a;
    var G__18997 = b;
    var G__18998 = c;
    var G__18999 = d;
    var G__19000 = e;
    var G__19001 = f;
    var G__19002 = g;
    var G__19003 = h;
    var G__19004 = i;
    var G__19005 = j;
    var G__19006 = k;
    var G__19007 = l;
    var G__19008 = m;
    var G__19009 = n;
    var G__19010 = o;
    var G__19011 = p;
    var G__19012 = q;
    var G__19013 = r;
    var G__19014 = s;
    var G__19015 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__18996, G__18997, G__18998, G__18999, G__19000, G__19001, G__19002, G__19003, G__19004, G__19005, G__19006, G__19007, G__19008, G__19009, G__19010, G__19011, G__19012, G__19013, G__19014, G__19015) : self__.afn.call(null, G__18996, G__18997, G__18998, G__18999, G__19000, G__19001, G__19002, G__19003, G__19004, G__19005, G__19006, G__19007, G__19008, G__19009, G__19010, G__19011, G__19012, G__19013, 
    G__19014, G__19015);
  };
  var G__19270__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__19016 = self__.afn;
    var G__19017 = a;
    var G__19018 = b;
    var G__19019 = c;
    var G__19020 = d;
    var G__19021 = e;
    var G__19022 = f;
    var G__19023 = g;
    var G__19024 = h;
    var G__19025 = i;
    var G__19026 = j;
    var G__19027 = k;
    var G__19028 = l;
    var G__19029 = m;
    var G__19030 = n;
    var G__19031 = o;
    var G__19032 = p;
    var G__19033 = q;
    var G__19034 = r;
    var G__19035 = s;
    var G__19036 = t;
    var G__19037 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__19016, G__19017, G__19018, G__19019, G__19020, G__19021, G__19022, G__19023, G__19024, G__19025, G__19026, G__19027, G__19028, G__19029, G__19030, G__19031, G__19032, G__19033, G__19034, G__19035, G__19036, G__19037) : cljs.core.apply.call(null, G__19016, G__19017, G__19018, G__19019, G__19020, G__19021, G__19022, G__19023, G__19024, G__19025, G__19026, G__19027, G__19028, G__19029, G__19030, 
    G__19031, G__19032, G__19033, G__19034, G__19035, G__19036, G__19037);
  };
  G__19270 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__19270__1.call(this, self__);
      case 2:
        return G__19270__2.call(this, self__, a);
      case 3:
        return G__19270__3.call(this, self__, a, b);
      case 4:
        return G__19270__4.call(this, self__, a, b, c);
      case 5:
        return G__19270__5.call(this, self__, a, b, c, d);
      case 6:
        return G__19270__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__19270__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__19270__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__19270__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__19270__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__19270__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__19270__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__19270__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__19270__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__19270__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__19270__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__19270__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__19270__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__19270__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__19270__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__19270__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__19270__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19270.cljs$core$IFn$_invoke$arity$1 = G__19270__1;
  G__19270.cljs$core$IFn$_invoke$arity$2 = G__19270__2;
  G__19270.cljs$core$IFn$_invoke$arity$3 = G__19270__3;
  G__19270.cljs$core$IFn$_invoke$arity$4 = G__19270__4;
  G__19270.cljs$core$IFn$_invoke$arity$5 = G__19270__5;
  G__19270.cljs$core$IFn$_invoke$arity$6 = G__19270__6;
  G__19270.cljs$core$IFn$_invoke$arity$7 = G__19270__7;
  G__19270.cljs$core$IFn$_invoke$arity$8 = G__19270__8;
  G__19270.cljs$core$IFn$_invoke$arity$9 = G__19270__9;
  G__19270.cljs$core$IFn$_invoke$arity$10 = G__19270__10;
  G__19270.cljs$core$IFn$_invoke$arity$11 = G__19270__11;
  G__19270.cljs$core$IFn$_invoke$arity$12 = G__19270__12;
  G__19270.cljs$core$IFn$_invoke$arity$13 = G__19270__13;
  G__19270.cljs$core$IFn$_invoke$arity$14 = G__19270__14;
  G__19270.cljs$core$IFn$_invoke$arity$15 = G__19270__15;
  G__19270.cljs$core$IFn$_invoke$arity$16 = G__19270__16;
  G__19270.cljs$core$IFn$_invoke$arity$17 = G__19270__17;
  G__19270.cljs$core$IFn$_invoke$arity$18 = G__19270__18;
  G__19270.cljs$core$IFn$_invoke$arity$19 = G__19270__19;
  G__19270.cljs$core$IFn$_invoke$arity$20 = G__19270__20;
  G__19270.cljs$core$IFn$_invoke$arity$21 = G__19270__21;
  G__19270.cljs$core$IFn$_invoke$arity$22 = G__19270__22;
  return G__19270;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args18805) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18805)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__19038 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__19038) : self__.afn.call(null, G__19038);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__19039 = a;
  var G__19040 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__19039, G__19040) : self__.afn.call(null, G__19039, G__19040);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__19041 = a;
  var G__19042 = b;
  var G__19043 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__19041, G__19042, G__19043) : self__.afn.call(null, G__19041, G__19042, G__19043);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__19044 = a;
  var G__19045 = b;
  var G__19046 = c;
  var G__19047 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__19044, G__19045, G__19046, G__19047) : self__.afn.call(null, G__19044, G__19045, G__19046, G__19047);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__19048 = a;
  var G__19049 = b;
  var G__19050 = c;
  var G__19051 = d;
  var G__19052 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__19048, G__19049, G__19050, G__19051, G__19052) : self__.afn.call(null, G__19048, G__19049, G__19050, G__19051, G__19052);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__19053 = a;
  var G__19054 = b;
  var G__19055 = c;
  var G__19056 = d;
  var G__19057 = e;
  var G__19058 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__19053, G__19054, G__19055, G__19056, G__19057, G__19058) : self__.afn.call(null, G__19053, G__19054, G__19055, G__19056, G__19057, G__19058);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__19059 = a;
  var G__19060 = b;
  var G__19061 = c;
  var G__19062 = d;
  var G__19063 = e;
  var G__19064 = f;
  var G__19065 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__19059, G__19060, G__19061, G__19062, G__19063, G__19064, G__19065) : self__.afn.call(null, G__19059, G__19060, G__19061, G__19062, G__19063, G__19064, G__19065);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__19066 = a;
  var G__19067 = b;
  var G__19068 = c;
  var G__19069 = d;
  var G__19070 = e;
  var G__19071 = f;
  var G__19072 = g;
  var G__19073 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__19066, G__19067, G__19068, G__19069, G__19070, G__19071, G__19072, G__19073) : self__.afn.call(null, G__19066, G__19067, G__19068, G__19069, G__19070, G__19071, G__19072, G__19073);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__19074 = a;
  var G__19075 = b;
  var G__19076 = c;
  var G__19077 = d;
  var G__19078 = e;
  var G__19079 = f;
  var G__19080 = g;
  var G__19081 = h;
  var G__19082 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__19074, G__19075, G__19076, G__19077, G__19078, G__19079, G__19080, G__19081, G__19082) : self__.afn.call(null, G__19074, G__19075, G__19076, G__19077, G__19078, G__19079, G__19080, G__19081, G__19082);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__19083 = a;
  var G__19084 = b;
  var G__19085 = c;
  var G__19086 = d;
  var G__19087 = e;
  var G__19088 = f;
  var G__19089 = g;
  var G__19090 = h;
  var G__19091 = i;
  var G__19092 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__19083, G__19084, G__19085, G__19086, G__19087, G__19088, G__19089, G__19090, G__19091, G__19092) : self__.afn.call(null, G__19083, G__19084, G__19085, G__19086, G__19087, G__19088, G__19089, G__19090, G__19091, G__19092);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__19093 = a;
  var G__19094 = b;
  var G__19095 = c;
  var G__19096 = d;
  var G__19097 = e;
  var G__19098 = f;
  var G__19099 = g;
  var G__19100 = h;
  var G__19101 = i;
  var G__19102 = j;
  var G__19103 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__19093, G__19094, G__19095, G__19096, G__19097, G__19098, G__19099, G__19100, G__19101, G__19102, G__19103) : self__.afn.call(null, G__19093, G__19094, G__19095, G__19096, G__19097, G__19098, G__19099, G__19100, G__19101, G__19102, G__19103);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__19104 = a;
  var G__19105 = b;
  var G__19106 = c;
  var G__19107 = d;
  var G__19108 = e;
  var G__19109 = f;
  var G__19110 = g;
  var G__19111 = h;
  var G__19112 = i;
  var G__19113 = j;
  var G__19114 = k;
  var G__19115 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__19104, G__19105, G__19106, G__19107, G__19108, G__19109, G__19110, G__19111, G__19112, G__19113, G__19114, G__19115) : self__.afn.call(null, G__19104, G__19105, G__19106, G__19107, G__19108, G__19109, G__19110, G__19111, G__19112, G__19113, G__19114, G__19115);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__19116 = a;
  var G__19117 = b;
  var G__19118 = c;
  var G__19119 = d;
  var G__19120 = e;
  var G__19121 = f;
  var G__19122 = g;
  var G__19123 = h;
  var G__19124 = i;
  var G__19125 = j;
  var G__19126 = k;
  var G__19127 = l;
  var G__19128 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__19116, G__19117, G__19118, G__19119, G__19120, G__19121, G__19122, G__19123, G__19124, G__19125, G__19126, G__19127, G__19128) : self__.afn.call(null, G__19116, G__19117, G__19118, G__19119, G__19120, G__19121, G__19122, G__19123, G__19124, G__19125, G__19126, G__19127, G__19128);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__19129 = a;
  var G__19130 = b;
  var G__19131 = c;
  var G__19132 = d;
  var G__19133 = e;
  var G__19134 = f;
  var G__19135 = g;
  var G__19136 = h;
  var G__19137 = i;
  var G__19138 = j;
  var G__19139 = k;
  var G__19140 = l;
  var G__19141 = m;
  var G__19142 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__19129, G__19130, G__19131, G__19132, G__19133, G__19134, G__19135, G__19136, G__19137, G__19138, G__19139, G__19140, G__19141, G__19142) : self__.afn.call(null, G__19129, G__19130, G__19131, G__19132, G__19133, G__19134, G__19135, G__19136, G__19137, G__19138, G__19139, G__19140, G__19141, G__19142);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__19143 = a;
  var G__19144 = b;
  var G__19145 = c;
  var G__19146 = d;
  var G__19147 = e;
  var G__19148 = f;
  var G__19149 = g;
  var G__19150 = h;
  var G__19151 = i;
  var G__19152 = j;
  var G__19153 = k;
  var G__19154 = l;
  var G__19155 = m;
  var G__19156 = n;
  var G__19157 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__19143, G__19144, G__19145, G__19146, G__19147, G__19148, G__19149, G__19150, G__19151, G__19152, G__19153, G__19154, G__19155, G__19156, G__19157) : self__.afn.call(null, G__19143, G__19144, G__19145, G__19146, G__19147, G__19148, G__19149, G__19150, G__19151, G__19152, G__19153, G__19154, G__19155, G__19156, G__19157);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__19158 = a;
  var G__19159 = b;
  var G__19160 = c;
  var G__19161 = d;
  var G__19162 = e;
  var G__19163 = f;
  var G__19164 = g;
  var G__19165 = h;
  var G__19166 = i;
  var G__19167 = j;
  var G__19168 = k;
  var G__19169 = l;
  var G__19170 = m;
  var G__19171 = n;
  var G__19172 = o;
  var G__19173 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__19158, G__19159, G__19160, G__19161, G__19162, G__19163, G__19164, G__19165, G__19166, G__19167, G__19168, G__19169, G__19170, G__19171, G__19172, G__19173) : self__.afn.call(null, G__19158, G__19159, G__19160, G__19161, G__19162, G__19163, G__19164, G__19165, G__19166, G__19167, G__19168, G__19169, G__19170, G__19171, G__19172, G__19173);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__19174 = a;
  var G__19175 = b;
  var G__19176 = c;
  var G__19177 = d;
  var G__19178 = e;
  var G__19179 = f;
  var G__19180 = g;
  var G__19181 = h;
  var G__19182 = i;
  var G__19183 = j;
  var G__19184 = k;
  var G__19185 = l;
  var G__19186 = m;
  var G__19187 = n;
  var G__19188 = o;
  var G__19189 = p;
  var G__19190 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__19174, G__19175, G__19176, G__19177, G__19178, G__19179, G__19180, G__19181, G__19182, G__19183, G__19184, G__19185, G__19186, G__19187, G__19188, G__19189, G__19190) : self__.afn.call(null, G__19174, G__19175, G__19176, G__19177, G__19178, G__19179, G__19180, G__19181, G__19182, G__19183, G__19184, G__19185, G__19186, G__19187, G__19188, G__19189, G__19190);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__19191 = a;
  var G__19192 = b;
  var G__19193 = c;
  var G__19194 = d;
  var G__19195 = e;
  var G__19196 = f;
  var G__19197 = g;
  var G__19198 = h;
  var G__19199 = i;
  var G__19200 = j;
  var G__19201 = k;
  var G__19202 = l;
  var G__19203 = m;
  var G__19204 = n;
  var G__19205 = o;
  var G__19206 = p;
  var G__19207 = q;
  var G__19208 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__19191, G__19192, G__19193, G__19194, G__19195, G__19196, G__19197, G__19198, G__19199, G__19200, G__19201, G__19202, G__19203, G__19204, G__19205, G__19206, G__19207, G__19208) : self__.afn.call(null, G__19191, G__19192, G__19193, G__19194, G__19195, G__19196, G__19197, G__19198, G__19199, G__19200, G__19201, G__19202, G__19203, G__19204, G__19205, G__19206, G__19207, G__19208);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__19209 = a;
  var G__19210 = b;
  var G__19211 = c;
  var G__19212 = d;
  var G__19213 = e;
  var G__19214 = f;
  var G__19215 = g;
  var G__19216 = h;
  var G__19217 = i;
  var G__19218 = j;
  var G__19219 = k;
  var G__19220 = l;
  var G__19221 = m;
  var G__19222 = n;
  var G__19223 = o;
  var G__19224 = p;
  var G__19225 = q;
  var G__19226 = r;
  var G__19227 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__19209, G__19210, G__19211, G__19212, G__19213, G__19214, G__19215, G__19216, G__19217, G__19218, G__19219, G__19220, G__19221, G__19222, G__19223, G__19224, G__19225, G__19226, G__19227) : self__.afn.call(null, G__19209, G__19210, G__19211, G__19212, G__19213, G__19214, G__19215, G__19216, G__19217, G__19218, G__19219, G__19220, G__19221, G__19222, G__19223, G__19224, G__19225, G__19226, G__19227);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__19228 = a;
  var G__19229 = b;
  var G__19230 = c;
  var G__19231 = d;
  var G__19232 = e;
  var G__19233 = f;
  var G__19234 = g;
  var G__19235 = h;
  var G__19236 = i;
  var G__19237 = j;
  var G__19238 = k;
  var G__19239 = l;
  var G__19240 = m;
  var G__19241 = n;
  var G__19242 = o;
  var G__19243 = p;
  var G__19244 = q;
  var G__19245 = r;
  var G__19246 = s;
  var G__19247 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__19228, G__19229, G__19230, G__19231, G__19232, G__19233, G__19234, G__19235, G__19236, G__19237, G__19238, G__19239, G__19240, G__19241, G__19242, G__19243, G__19244, G__19245, G__19246, G__19247) : self__.afn.call(null, G__19228, G__19229, G__19230, G__19231, G__19232, G__19233, G__19234, G__19235, G__19236, G__19237, G__19238, G__19239, G__19240, G__19241, G__19242, G__19243, G__19244, G__19245, G__19246, 
  G__19247);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__19248 = self__.afn;
  var G__19249 = a;
  var G__19250 = b;
  var G__19251 = c;
  var G__19252 = d;
  var G__19253 = e;
  var G__19254 = f;
  var G__19255 = g;
  var G__19256 = h;
  var G__19257 = i;
  var G__19258 = j;
  var G__19259 = k;
  var G__19260 = l;
  var G__19261 = m;
  var G__19262 = n;
  var G__19263 = o;
  var G__19264 = p;
  var G__19265 = q;
  var G__19266 = r;
  var G__19267 = s;
  var G__19268 = t;
  var G__19269 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__19248, G__19249, G__19250, G__19251, G__19252, G__19253, G__19254, G__19255, G__19256, G__19257, G__19258, G__19259, G__19260, G__19261, G__19262, G__19263, G__19264, G__19265, G__19266, G__19267, G__19268, G__19269) : cljs.core.apply.call(null, G__19248, G__19249, G__19250, G__19251, G__19252, G__19253, G__19254, G__19255, G__19256, G__19257, G__19258, G__19259, G__19260, G__19261, G__19262, 
  G__19263, G__19264, G__19265, G__19266, G__19267, G__19268, G__19269);
};
cljs.core.MetaFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "afn", "afn", 216963467, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__19274 = o;
    if (G__19274) {
      var bit__4981__auto__ = G__19274.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4981__auto__ || G__19274.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__19274.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__19274);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__19274);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4295__auto__ = !(o == null);
    if (and__4295__auto__) {
      var G__19278 = o;
      if (G__19278) {
        var bit__4981__auto__ = G__19278.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4981__auto__ || G__19278.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__19278.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__19278);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__19278);
      }
    } else {
      return and__4295__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj() {
  var G__19283 = arguments.length;
  switch(G__19283) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__19285 = ret;
        var G__19286 = cljs.core.first(ks);
        var G__19287 = cljs.core.next(ks);
        coll = G__19285;
        k = G__19286;
        ks = G__19287;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq19279) {
  var G__19280 = cljs.core.first(seq19279);
  var seq19279__$1 = cljs.core.next(seq19279);
  var G__19281 = cljs.core.first(seq19279__$1);
  var seq19279__$2 = cljs.core.next(seq19279__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__19280, G__19281, seq19279__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__19289 = x;
    if (G__19289) {
      var bit__4981__auto__ = G__19289.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4981__auto__ || G__19289.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__19289.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__19289);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__19289);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__19291 = x;
    if (G__19291) {
      var bit__4981__auto__ = G__19291.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4981__auto__ || G__19291.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__19291.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__19291);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__19291);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  var G__19293 = x;
  if (G__19293) {
    var bit__4981__auto__ = G__19293.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4981__auto__ || G__19293.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__19293.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__19293);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__19293);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  var G__19295 = x;
  if (G__19295) {
    var bit__4981__auto__ = G__19295.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4981__auto__ || G__19295.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__19295.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__19295);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__19295);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  var G__19297 = x;
  if (G__19297) {
    var bit__4981__auto__ = G__19297.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4981__auto__ || G__19297.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__19297.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__19297);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__19297);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  var G__19299 = x;
  if (G__19299) {
    var bit__4981__auto__ = G__19299.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4981__auto__ || G__19299.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__19299.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__19299);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__19299);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__19301 = x;
    if (G__19301) {
      var bit__4981__auto__ = G__19301.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4981__auto__ || G__19301.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__19301.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__19301);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__19301);
    }
  }
};
cljs.core.record_QMARK_ = function cljs$core$record_QMARK_(x) {
  var G__19303 = x;
  if (G__19303) {
    var bit__4981__auto__ = G__19303.cljs$lang$protocol_mask$partition0$ & 67108864;
    if (bit__4981__auto__ || G__19303.cljs$core$IRecord$) {
      return true;
    } else {
      if (!G__19303.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, G__19303);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, G__19303);
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  var G__19305 = x;
  if (G__19305) {
    var bit__4981__auto__ = G__19305.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4981__auto__ || G__19305.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__19305.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__19305);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__19305);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  var G__19307 = x;
  if (G__19307) {
    var bit__4974__auto__ = G__19307.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4974__auto__ || G__19307.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj() {
  var G__19310 = arguments.length;
  switch(G__19310) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__5358__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  var obj19312 = {};
  return obj19312;
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var G__19313 = goog.object.create;
  var G__19314 = keyvals;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__19313, G__19314) : cljs.core.apply.call(null, G__19313, G__19314);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq19308) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19308));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__19318_19320 = obj;
  var G__19319_19321 = function(G__19318_19320, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__19318_19320, keys);
  goog.object.forEach(G__19318_19320, G__19319_19321);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__19322 = i__$1 + 1;
      var G__19323 = j__$1 + 1;
      var G__19324 = len__$1 - 1;
      i__$1 = G__19322;
      j__$1 = G__19323;
      len__$1 = G__19324;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__19325 = i__$1 - 1;
      var G__19326 = j__$1 - 1;
      var G__19327 = len__$1 - 1;
      i__$1 = G__19325;
      j__$1 = G__19326;
      len__$1 = G__19327;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj19329 = {};
  return obj19329;
}();
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__19331 = s;
    if (G__19331) {
      var bit__4981__auto__ = G__19331.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4981__auto__ || G__19331.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__19331.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__19331);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__19331);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var G__19333 = s;
  if (G__19333) {
    var bit__4981__auto__ = G__19333.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4981__auto__ || G__19333.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__19333.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__19333);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__19333);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4307__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4307__auto__) {
    return or__4307__auto__;
  } else {
    var G__19337 = f;
    if (G__19337) {
      var bit__4981__auto__ = G__19337.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4981__auto__ || G__19337.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__19337.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__19337);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__19337);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__19350 = n;
    return isNaN(G__19350);
  }()) && !(n === Infinity) && function() {
    var G__19351 = n;
    return parseFloat(G__19351);
  }() === function() {
    var G__19352 = n;
    var G__19353 = 10;
    return parseInt(G__19352, G__19353);
  }();
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_() {
  var G__19358 = arguments.length;
  switch(G__19358) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__19360 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__19361 = etc;
          s = G__19360;
          xs = G__19361;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq19354) {
  var G__19355 = cljs.core.first(seq19354);
  var seq19354__$1 = cljs.core.next(seq19354);
  var G__19356 = cljs.core.first(seq19354__$1);
  var seq19354__$2 = cljs.core.next(seq19354__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__19355, G__19356, seq19354__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return -1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__19365 = x;
            if (G__19365) {
              var bit__4974__auto__ = G__19365.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4974__auto__ || G__19365.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__19366 = x;
            var G__19367 = y;
            return goog.array.defaultCompare(G__19366, G__19367);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed() {
  var G__19369 = arguments.length;
  switch(G__19369) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return -1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__19371 = xs;
      var G__19372 = ys;
      var G__19373 = len;
      var G__19374 = n + 1;
      xs = G__19371;
      ys = G__19372;
      len = G__19373;
      n = G__19374;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__19379 = x;
        var G__19380 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19379, G__19380) : f.call(null, G__19379, G__19380);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return -1;
        } else {
          if (cljs.core.truth_(function() {
            var G__19381 = y;
            var G__19382 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19381, G__19382) : f.call(null, G__19381, G__19382);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort() {
  var G__19384 = arguments.length;
  switch(G__19384) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = function() {
      var G__19385 = coll;
      return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__19385) : cljs.core.to_array.call(null, G__19385);
    }();
    var G__19386_19389 = a;
    var G__19387_19390 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__19386_19389, G__19387_19390);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by() {
  var G__19392 = arguments.length;
  switch(G__19392) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, function() {
      var G__19393 = x;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__19393) : keyfn.call(null, G__19393);
    }(), function() {
      var G__19394 = y;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__19394) : keyfn.call(null, G__19394);
    }());
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce() {
  var G__19397 = arguments.length;
  switch(G__19397) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4421__auto__ = cljs.core.seq(coll);
  if (temp__4421__auto__) {
    var s = temp__4421__auto__;
    var G__19398 = f;
    var G__19399 = cljs.core.first(s);
    var G__19400 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__19398, G__19399, G__19400) : cljs.core.reduce.call(null, G__19398, G__19399, G__19400);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__19401 = val__$1;
        var G__19402 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19401, G__19402) : f.call(null, G__19401, G__19402);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__19404 = nval;
        var G__19405 = cljs.core.next(coll__$1);
        val__$1 = G__19404;
        coll__$1 = G__19405;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = function() {
    var G__19409 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__19409) : cljs.core.to_array.call(null, G__19409);
  }();
  var G__19410_19412 = a;
  goog.array.shuffle(G__19410_19412);
  var G__19411 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__19411) : cljs.core.vec.call(null, G__19411);
};
cljs.core.reduce = function cljs$core$reduce() {
  var G__19414 = arguments.length;
  switch(G__19414) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (function() {
    var G__19415 = coll;
    if (G__19415) {
      var bit__4974__auto__ = G__19415.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__4974__auto__ || G__19415.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (function() {
    var G__19416 = coll;
    if (G__19416) {
      var bit__4974__auto__ = G__19416.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__4974__auto__ || G__19416.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing() {
  var G__19419 = arguments.length;
  switch(G__19419) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__19424 = null;
    var G__19424__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__19424__1 = function(x) {
      var G__19420 = x;
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__19420) : cf.call(null, G__19420);
    };
    var G__19424__2 = function(x, y) {
      var G__19421 = x;
      var G__19422 = y;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19421, G__19422) : f.call(null, G__19421, G__19422);
    };
    G__19424 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__19424__0.call(this);
        case 1:
          return G__19424__1.call(this, x);
        case 2:
          return G__19424__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19424.cljs$core$IFn$_invoke$arity$0 = G__19424__0;
    G__19424.cljs$core$IFn$_invoke$arity$1 = G__19424__1;
    G__19424.cljs$core$IFn$_invoke$arity$2 = G__19424__2;
    return G__19424;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce() {
  var G__19426 = arguments.length;
  switch(G__19426) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }(), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = function() {
    var G__19427 = f;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__19427) : xform.call(null, G__19427);
  }();
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  var G__19428 = ret;
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__19428) : f__$1.call(null, G__19428);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_() {
  var G__19434 = arguments.length;
  switch(G__19434) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq19430) {
  var G__19431 = cljs.core.first(seq19430);
  var seq19430__$1 = cljs.core.next(seq19430);
  var G__19432 = cljs.core.first(seq19430__$1);
  var seq19430__$2 = cljs.core.next(seq19430__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__19431, G__19432, seq19430__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_() {
  var G__19440 = arguments.length;
  switch(G__19440) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq19436) {
  var G__19437 = cljs.core.first(seq19436);
  var seq19436__$1 = cljs.core.next(seq19436);
  var G__19438 = cljs.core.first(seq19436__$1);
  var seq19436__$2 = cljs.core.next(seq19436__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__19437, G__19438, seq19436__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_() {
  var G__19446 = arguments.length;
  switch(G__19446) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq19442) {
  var G__19443 = cljs.core.first(seq19442);
  var seq19442__$1 = cljs.core.next(seq19442);
  var G__19444 = cljs.core.first(seq19442__$1);
  var seq19442__$2 = cljs.core.next(seq19442__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__19443, G__19444, seq19442__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_() {
  var G__19452 = arguments.length;
  switch(G__19452) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq19448) {
  var G__19449 = cljs.core.first(seq19448);
  var seq19448__$1 = cljs.core.next(seq19448);
  var G__19450 = cljs.core.first(seq19448__$1);
  var seq19448__$2 = cljs.core.next(seq19448__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__19449, G__19450, seq19448__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_() {
  var G__19458 = arguments.length;
  switch(G__19458) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__19460 = y;
        var G__19461 = cljs.core.first(more);
        var G__19462 = cljs.core.next(more);
        x = G__19460;
        y = G__19461;
        more = G__19462;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq19454) {
  var G__19455 = cljs.core.first(seq19454);
  var seq19454__$1 = cljs.core.next(seq19454);
  var G__19456 = cljs.core.first(seq19454__$1);
  var seq19454__$2 = cljs.core.next(seq19454__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__19455, G__19456, seq19454__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_() {
  var G__19467 = arguments.length;
  switch(G__19467) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__19469 = y;
        var G__19470 = cljs.core.first(more);
        var G__19471 = cljs.core.next(more);
        x = G__19469;
        y = G__19470;
        more = G__19471;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq19463) {
  var G__19464 = cljs.core.first(seq19463);
  var seq19463__$1 = cljs.core.next(seq19463);
  var G__19465 = cljs.core.first(seq19463__$1);
  var seq19463__$2 = cljs.core.next(seq19463__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__19464, G__19465, seq19463__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_() {
  var G__19476 = arguments.length;
  switch(G__19476) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__19478 = y;
        var G__19479 = cljs.core.first(more);
        var G__19480 = cljs.core.next(more);
        x = G__19478;
        y = G__19479;
        more = G__19480;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq19472) {
  var G__19473 = cljs.core.first(seq19472);
  var seq19472__$1 = cljs.core.next(seq19472);
  var G__19474 = cljs.core.first(seq19472__$1);
  var seq19472__$2 = cljs.core.next(seq19472__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__19473, G__19474, seq19472__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_() {
  var G__19485 = arguments.length;
  switch(G__19485) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__19487 = y;
        var G__19488 = cljs.core.first(more);
        var G__19489 = cljs.core.next(more);
        x = G__19487;
        y = G__19488;
        more = G__19489;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq19481) {
  var G__19482 = cljs.core.first(seq19481);
  var seq19481__$1 = cljs.core.next(seq19481);
  var G__19483 = cljs.core.first(seq19481__$1);
  var seq19481__$2 = cljs.core.next(seq19481__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__19482, G__19483, seq19481__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max() {
  var G__19494 = arguments.length;
  switch(G__19494) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4619__auto__ = x;
  var y__4620__auto__ = y;
  return x__4619__auto__ > y__4620__auto__ ? x__4619__auto__ : y__4620__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__4619__auto__ = x;
    var y__4620__auto__ = y;
    return x__4619__auto__ > y__4620__auto__ ? x__4619__auto__ : y__4620__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq19490) {
  var G__19491 = cljs.core.first(seq19490);
  var seq19490__$1 = cljs.core.next(seq19490);
  var G__19492 = cljs.core.first(seq19490__$1);
  var seq19490__$2 = cljs.core.next(seq19490__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__19491, G__19492, seq19490__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min() {
  var G__19500 = arguments.length;
  switch(G__19500) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4626__auto__ = x;
  var y__4627__auto__ = y;
  return x__4626__auto__ < y__4627__auto__ ? x__4626__auto__ : y__4627__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__4626__auto__ = x;
    var y__4627__auto__ = y;
    return x__4626__auto__ < y__4627__auto__ ? x__4626__auto__ : y__4627__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq19496) {
  var G__19497 = cljs.core.first(seq19496);
  var seq19496__$1 = cljs.core.next(seq19496);
  var G__19498 = cljs.core.first(seq19496__$1);
  var seq19496__$2 = cljs.core.next(seq19496__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__19497, G__19498, seq19496__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add() {
  var G__19506 = arguments.length;
  switch(G__19506) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq19502) {
  var G__19503 = cljs.core.first(seq19502);
  var seq19502__$1 = cljs.core.next(seq19502);
  var G__19504 = cljs.core.first(seq19502__$1);
  var seq19502__$2 = cljs.core.next(seq19502__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__19503, G__19504, seq19502__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int() {
  var G__19512 = arguments.length;
  switch(G__19512) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq19508) {
  var G__19509 = cljs.core.first(seq19508);
  var seq19508__$1 = cljs.core.next(seq19508);
  var G__19510 = cljs.core.first(seq19508__$1);
  var seq19508__$2 = cljs.core.next(seq19508__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__19509, G__19510, seq19508__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int() {
  var G__19518 = arguments.length;
  switch(G__19518) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq19514) {
  var G__19515 = cljs.core.first(seq19514);
  var seq19514__$1 = cljs.core.next(seq19514);
  var G__19516 = cljs.core.first(seq19514__$1);
  var seq19514__$2 = cljs.core.next(seq19514__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__19515, G__19516, seq19514__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply() {
  var G__19524 = arguments.length;
  switch(G__19524) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq19520) {
  var G__19521 = cljs.core.first(seq19520);
  var seq19520__$1 = cljs.core.next(seq19520);
  var G__19522 = cljs.core.first(seq19520__$1);
  var seq19520__$2 = cljs.core.next(seq19520__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__19521, G__19522, seq19520__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int() {
  var G__19530 = arguments.length;
  switch(G__19530) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq19526) {
  var G__19527 = cljs.core.first(seq19526);
  var seq19526__$1 = cljs.core.next(seq19526);
  var G__19528 = cljs.core.first(seq19526__$1);
  var seq19526__$2 = cljs.core.next(seq19526__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__19527, G__19528, seq19526__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return -x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return -x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  var G__19534 = x;
  var G__19535 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__19534, G__19535) : cljs.core.mod.call(null, G__19534, G__19535);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract() {
  var G__19540 = arguments.length;
  switch(G__19540) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq19536) {
  var G__19537 = cljs.core.first(seq19536);
  var seq19536__$1 = cljs.core.next(seq19536);
  var G__19538 = cljs.core.first(seq19536__$1);
  var seq19536__$2 = cljs.core.next(seq19536__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__19537, G__19538, seq19536__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int() {
  var G__19546 = arguments.length;
  switch(G__19546) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq19542) {
  var G__19543 = cljs.core.first(seq19542);
  var seq19542__$1 = cljs.core.next(seq19542);
  var G__19544 = cljs.core.first(seq19542__$1);
  var seq19542__$2 = cljs.core.next(seq19542__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__19543, G__19544, seq19542__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    var G__19550 = q;
    return Math.floor(G__19550);
  } else {
    var G__19551 = q;
    return Math.ceil(G__19551);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return (n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor() {
  var G__19556 = arguments.length;
  switch(G__19556) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq19552) {
  var G__19553 = cljs.core.first(seq19552);
  var seq19552__$1 = cljs.core.next(seq19552);
  var G__19554 = cljs.core.first(seq19552__$1);
  var seq19552__$2 = cljs.core.next(seq19552__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__19553, G__19554, seq19552__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and() {
  var G__19562 = arguments.length;
  switch(G__19562) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq19558) {
  var G__19559 = cljs.core.first(seq19558);
  var seq19558__$1 = cljs.core.next(seq19558);
  var G__19560 = cljs.core.first(seq19558__$1);
  var seq19558__$2 = cljs.core.next(seq19558__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__19559, G__19560, seq19558__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or() {
  var G__19568 = arguments.length;
  switch(G__19568) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq19564) {
  var G__19565 = cljs.core.first(seq19564);
  var seq19564__$1 = cljs.core.next(seq19564);
  var G__19566 = cljs.core.first(seq19564__$1);
  var seq19564__$2 = cljs.core.next(seq19564__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__19565, G__19566, seq19564__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not() {
  var G__19574 = arguments.length;
  switch(G__19574) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq19570) {
  var G__19571 = cljs.core.first(seq19570);
  var seq19570__$1 = cljs.core.next(seq19570);
  var G__19572 = cljs.core.first(seq19570__$1);
  var seq19570__$2 = cljs.core.next(seq19570__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__19571, G__19572, seq19570__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return ~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return (x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return (v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_() {
  var G__19580 = arguments.length;
  switch(G__19580) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__19582 = y;
        var G__19583 = cljs.core.first(more);
        var G__19584 = cljs.core.next(more);
        x = G__19582;
        y = G__19583;
        more = G__19584;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq19576) {
  var G__19577 = cljs.core.first(seq19576);
  var seq19576__$1 = cljs.core.next(seq19576);
  var G__19578 = cljs.core.first(seq19576__$1);
  var seq19576__$2 = cljs.core.next(seq19576__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__19577, G__19578, seq19576__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__19585 = n__$1 - 1;
      var G__19586 = cljs.core.next(xs);
      n__$1 = G__19585;
      xs = G__19586;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str() {
  var G__19590 = arguments.length;
  switch(G__19590) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5358__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    var G__19591 = x;
    return goog.string.buildString(G__19591);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__19593 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__19594 = cljs.core.next(more);
      sb = G__19593;
      more = G__19594;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq19587) {
  var G__19588 = cljs.core.first(seq19587);
  var seq19587__$1 = cljs.core.next(seq19587);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__19588, seq19587__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs() {
  var G__19596 = arguments.length;
  switch(G__19596) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__19598 = cljs.core.next(xs);
            var G__19599 = cljs.core.next(ys);
            xs = G__19598;
            ys = G__19599;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__19600 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__19601 = cljs.core.next(s);
        res = G__19600;
        s = G__19601;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__19606 = (h + (cljs.core.hash(function() {
        var G__19604 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__19604) : cljs.core.key.call(null, G__19604);
      }()) ^ cljs.core.hash(function() {
        var G__19605 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__19605) : cljs.core.val.call(null, G__19605);
      }()))) % 4503599627370496;
      var G__19607 = cljs.core.next(s);
      h = G__19606;
      s = G__19607;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__19608 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__19609 = cljs.core.next(s__$1);
      h = G__19608;
      s__$1 = G__19609;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__19620_19630 = cljs.core.seq(fn_map);
  var chunk__19621_19631 = null;
  var count__19622_19632 = 0;
  var i__19623_19633 = 0;
  while (true) {
    if (i__19623_19633 < count__19622_19632) {
      var vec__19624_19634 = chunk__19621_19631.cljs$core$IIndexed$_nth$arity$2(null, i__19623_19633);
      var key_name_19635 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19624_19634, 0, null);
      var f_19636 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19624_19634, 1, null);
      var str_name_19637 = function() {
        var G__19625 = key_name_19635;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__19625) : cljs.core.name.call(null, G__19625);
      }();
      obj[str_name_19637] = f_19636;
      var G__19638 = seq__19620_19630;
      var G__19639 = chunk__19621_19631;
      var G__19640 = count__19622_19632;
      var G__19641 = i__19623_19633 + 1;
      seq__19620_19630 = G__19638;
      chunk__19621_19631 = G__19639;
      count__19622_19632 = G__19640;
      i__19623_19633 = G__19641;
      continue;
    } else {
      var temp__4423__auto___19642 = cljs.core.seq(seq__19620_19630);
      if (temp__4423__auto___19642) {
        var seq__19620_19643__$1 = temp__4423__auto___19642;
        if (cljs.core.chunked_seq_QMARK_(seq__19620_19643__$1)) {
          var c__5092__auto___19644 = function() {
            var G__19626 = seq__19620_19643__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__19626) : cljs.core.chunk_first.call(null, G__19626);
          }();
          var G__19645 = function() {
            var G__19627 = seq__19620_19643__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__19627) : cljs.core.chunk_rest.call(null, G__19627);
          }();
          var G__19646 = c__5092__auto___19644;
          var G__19647 = cljs.core.count(c__5092__auto___19644);
          var G__19648 = 0;
          seq__19620_19630 = G__19645;
          chunk__19621_19631 = G__19646;
          count__19622_19632 = G__19647;
          i__19623_19633 = G__19648;
          continue;
        } else {
          var vec__19628_19649 = cljs.core.first(seq__19620_19643__$1);
          var key_name_19650 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19628_19649, 0, null);
          var f_19651 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19628_19649, 1, null);
          var str_name_19652 = function() {
            var G__19629 = key_name_19650;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__19629) : cljs.core.name.call(null, G__19629);
          }();
          obj[str_name_19652] = f_19651;
          var G__19653 = cljs.core.next(seq__19620_19643__$1);
          var G__19654 = null;
          var G__19655 = 0;
          var G__19656 = 0;
          seq__19620_19630 = G__19653;
          chunk__19621_19631 = G__19654;
          count__19622_19632 = G__19655;
          i__19623_19633 = G__19656;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  var G__19658 = coll;
  if (G__19658) {
    var bit__4981__auto__ = G__19658.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4981__auto__ || G__19658.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__19658.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__19658);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__19658);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__19660 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__19660;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__19661 = i - 1;
      var G__19662 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__19661;
      r = G__19662;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq19659) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19659));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4307__auto__ = coll == null;
    if (or__4307__auto__) {
      return or__4307__auto__;
    } else {
      var G__19666 = coll;
      if (G__19666) {
        var bit__4974__auto__ = G__19666.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4974__auto__ || G__19666.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  var G__19668 = x;
  if (G__19668) {
    var bit__4981__auto__ = G__19668.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4981__auto__ || G__19668.cljs$core$IList$) {
      return true;
    } else {
      if (!G__19668.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__19668);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__19668);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4295__auto__ = cljs.core.not(a.ns);
      if (and__4295__auto__) {
        return b.ns;
      } else {
        return and__4295__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__19675 = a.ns;
            var G__19676 = b.ns;
            return goog.array.defaultCompare(G__19675, G__19676);
          }();
          if (0 === nsc) {
            var G__19677 = a.name;
            var G__19678 = b.name;
            return goog.array.defaultCompare(G__19677, G__19678);
          } else {
            return nsc;
          }
        }
      } else {
        var G__19679 = a.name;
        var G__19680 = b.name;
        return goog.array.defaultCompare(G__19679, G__19680);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__19682 = null;
  var G__19682__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__19682__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__19682 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19682__2.call(this, self__, coll);
      case 3:
        return G__19682__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19682.cljs$core$IFn$_invoke$arity$2 = G__19682__2;
  G__19682.cljs$core$IFn$_invoke$arity$3 = G__19682__3;
  return G__19682;
}();
cljs.core.Keyword.prototype.apply = function(self__, args19681) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19681)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4723__auto__ = self__._hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "fqn", "fqn", -1749334463, null), new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null)], null);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (function() {
    var G__19684 = x;
    if (G__19684) {
      var bit__4974__auto__ = G__19684.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4974__auto__ || G__19684.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword() {
  var G__19686 = arguments.length;
  switch(G__19686) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), function() {
        var G__19687 = name;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__19687) : cljs.core.name.call(null, G__19687);
      }(), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__19689 = ls.sval();
        ls = G__19689;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk() {
  var G__19691 = arguments.length;
  switch(G__19691) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), new cljs.core.Symbol(null, "more", "more", -418290273, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (function() {
    var G__19694 = s;
    if (G__19694) {
      var bit__4974__auto__ = G__19694.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4974__auto__ || G__19694.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__19695 = cljs.core.next(s__$1);
      s__$1 = G__19695;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_19696 = 0;
  var xs_19697 = cljs.core.seq(coll);
  while (true) {
    if (xs_19697) {
      ret[i_19696] = cljs.core.to_array(cljs.core.first(xs_19697));
      var G__19698 = i_19696 + 1;
      var G__19699 = cljs.core.next(xs_19697);
      i_19696 = G__19698;
      xs_19697 = G__19699;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array() {
  var G__19701 = arguments.length;
  switch(G__19701) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__19703 = i + 1;
        var G__19704 = cljs.core.next(s__$1);
        i = G__19703;
        s__$1 = G__19704;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5192__auto___19705 = size;
    var i_19706 = 0;
    while (true) {
      if (i_19706 < n__5192__auto___19705) {
        a[i_19706] = init_val_or_seq;
        var G__19707 = i_19706 + 1;
        i_19706 = G__19707;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array() {
  var G__19709 = arguments.length;
  switch(G__19709) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__19711 = i + 1;
        var G__19712 = cljs.core.next(s__$1);
        i = G__19711;
        s__$1 = G__19712;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5192__auto___19713 = size;
    var i_19714 = 0;
    while (true) {
      if (i_19714 < n__5192__auto___19713) {
        a[i_19714] = init_val_or_seq;
        var G__19715 = i_19714 + 1;
        i_19714 = G__19715;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array() {
  var G__19717 = arguments.length;
  switch(G__19717) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__19719 = i + 1;
        var G__19720 = cljs.core.next(s__$1);
        i = G__19719;
        s__$1 = G__19720;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5192__auto___19721 = size;
    var i_19722 = 0;
    while (true) {
      if (i_19722 < n__5192__auto___19721) {
        a[i_19722] = init_val_or_seq;
        var G__19723 = i_19722 + 1;
        i_19722 = G__19723;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array() {
  var G__19725 = arguments.length;
  switch(G__19725) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__19727 = i + 1;
        var G__19728 = cljs.core.next(s__$1);
        i = G__19727;
        s__$1 = G__19728;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5192__auto___19729 = size;
    var i_19730 = 0;
    while (true) {
      if (i_19730 < n__5192__auto___19729) {
        a[i_19730] = init_val_or_seq;
        var G__19731 = i_19730 + 1;
        i_19730 = G__19731;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__19732 = cljs.core.next(s__$1);
        var G__19733 = i - 1;
        var G__19734 = sum + 1;
        s__$1 = G__19732;
        i = G__19733;
        sum = G__19734;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat() {
  var G__19740 = arguments.length;
  switch(G__19740) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq19736) {
  var G__19737 = cljs.core.first(seq19736);
  var seq19736__$1 = cljs.core.next(seq19736);
  var G__19738 = cljs.core.first(seq19736__$1);
  var seq19736__$2 = cljs.core.next(seq19736__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__19737, G__19738, seq19736__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_() {
  var G__19754 = arguments.length;
  switch(G__19754) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5358__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq19748) {
  var G__19749 = cljs.core.first(seq19748);
  var seq19748__$1 = cljs.core.next(seq19748);
  var G__19750 = cljs.core.first(seq19748__$1);
  var seq19748__$2 = cljs.core.next(seq19748__$1);
  var G__19751 = cljs.core.first(seq19748__$2);
  var seq19748__$3 = cljs.core.next(seq19748__$2);
  var G__19752 = cljs.core.first(seq19748__$3);
  var seq19748__$4 = cljs.core.next(seq19748__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__19749, G__19750, G__19751, G__19752, seq19748__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_() {
  var G__19760 = arguments.length;
  switch(G__19760) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__19762 = ntcoll;
      var G__19763 = cljs.core.first(vals);
      var G__19764 = cljs.core.next(vals);
      tcoll = G__19762;
      val = G__19763;
      vals = G__19764;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq19756) {
  var G__19757 = cljs.core.first(seq19756);
  var seq19756__$1 = cljs.core.next(seq19756);
  var G__19758 = cljs.core.first(seq19756__$1);
  var seq19756__$2 = cljs.core.next(seq19756__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__19757, G__19758, seq19756__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_() {
  var G__19770 = arguments.length;
  switch(G__19770) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5358__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__19772 = ntcoll;
      var G__19773 = cljs.core.first(kvs);
      var G__19774 = cljs.core.second(kvs);
      var G__19775 = cljs.core.nnext(kvs);
      tcoll = G__19772;
      key = G__19773;
      val = G__19774;
      kvs = G__19775;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq19765) {
  var G__19766 = cljs.core.first(seq19765);
  var seq19765__$1 = cljs.core.next(seq19765);
  var G__19767 = cljs.core.first(seq19765__$1);
  var seq19765__$2 = cljs.core.next(seq19765__$1);
  var G__19768 = cljs.core.first(seq19765__$2);
  var seq19765__$3 = cljs.core.next(seq19765__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__19766, G__19767, G__19768, seq19765__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_() {
  var G__19780 = arguments.length;
  switch(G__19780) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__19782 = ntcoll;
      var G__19783 = cljs.core.first(ks);
      var G__19784 = cljs.core.next(ks);
      tcoll = G__19782;
      key = G__19783;
      ks = G__19784;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq19776) {
  var G__19777 = cljs.core.first(seq19776);
  var seq19776__$1 = cljs.core.next(seq19776);
  var G__19778 = cljs.core.first(seq19776__$1);
  var seq19776__$2 = cljs.core.next(seq19776__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__19777, G__19778, seq19776__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_() {
  var G__19789 = arguments.length;
  switch(G__19789) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__19791 = ntcoll;
      var G__19792 = cljs.core.first(vals);
      var G__19793 = cljs.core.next(vals);
      tcoll = G__19791;
      val = G__19792;
      vals = G__19793;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq19785) {
  var G__19786 = cljs.core.first(seq19785);
  var seq19785__$1 = cljs.core.next(seq19785);
  var G__19787 = cljs.core.first(seq19785__$1);
  var seq19785__$2 = cljs.core.next(seq19785__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__19786, G__19787, seq19785__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5236 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5236);
      } else {
        var G__20004 = a5236;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20004) : f.call(null, G__20004);
      }
    } else {
      var b5237 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5236, b5237);
        } else {
          var G__20005 = a5236;
          var G__20006 = b5237;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20005, G__20006) : f.call(null, G__20005, G__20006);
        }
      } else {
        var c5238 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5236, b5237, c5238);
          } else {
            var G__20007 = a5236;
            var G__20008 = b5237;
            var G__20009 = c5238;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20007, G__20008, G__20009) : f.call(null, G__20007, G__20008, G__20009);
          }
        } else {
          var d5239 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5236, b5237, c5238, d5239);
            } else {
              var G__20010 = a5236;
              var G__20011 = b5237;
              var G__20012 = c5238;
              var G__20013 = d5239;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__20010, G__20011, G__20012, G__20013) : f.call(null, G__20010, G__20011, G__20012, G__20013);
            }
          } else {
            var e5240 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5236, b5237, c5238, d5239, e5240);
              } else {
                var G__20014 = a5236;
                var G__20015 = b5237;
                var G__20016 = c5238;
                var G__20017 = d5239;
                var G__20018 = e5240;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__20014, G__20015, G__20016, G__20017, G__20018) : f.call(null, G__20014, G__20015, G__20016, G__20017, G__20018);
              }
            } else {
              var f5241 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5236, b5237, c5238, d5239, e5240, f5241);
                } else {
                  var G__20019 = a5236;
                  var G__20020 = b5237;
                  var G__20021 = c5238;
                  var G__20022 = d5239;
                  var G__20023 = e5240;
                  var G__20024 = f5241;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__20019, G__20020, G__20021, G__20022, G__20023, G__20024) : f.call(null, G__20019, G__20020, G__20021, G__20022, G__20023, G__20024);
                }
              } else {
                var g5242 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5236, b5237, c5238, d5239, e5240, f5241, g5242);
                  } else {
                    var G__20025 = a5236;
                    var G__20026 = b5237;
                    var G__20027 = c5238;
                    var G__20028 = d5239;
                    var G__20029 = e5240;
                    var G__20030 = f5241;
                    var G__20031 = g5242;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__20025, G__20026, G__20027, G__20028, G__20029, G__20030, G__20031) : f.call(null, G__20025, G__20026, G__20027, G__20028, G__20029, G__20030, G__20031);
                  }
                } else {
                  var h5243 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5236, b5237, c5238, d5239, e5240, f5241, g5242, h5243);
                    } else {
                      var G__20032 = a5236;
                      var G__20033 = b5237;
                      var G__20034 = c5238;
                      var G__20035 = d5239;
                      var G__20036 = e5240;
                      var G__20037 = f5241;
                      var G__20038 = g5242;
                      var G__20039 = h5243;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__20032, G__20033, G__20034, G__20035, G__20036, G__20037, G__20038, G__20039) : f.call(null, G__20032, G__20033, G__20034, G__20035, G__20036, G__20037, G__20038, G__20039);
                    }
                  } else {
                    var i5244 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5236, b5237, c5238, d5239, e5240, f5241, g5242, h5243, i5244);
                      } else {
                        var G__20040 = a5236;
                        var G__20041 = b5237;
                        var G__20042 = c5238;
                        var G__20043 = d5239;
                        var G__20044 = e5240;
                        var G__20045 = f5241;
                        var G__20046 = g5242;
                        var G__20047 = h5243;
                        var G__20048 = i5244;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__20040, G__20041, G__20042, G__20043, G__20044, G__20045, G__20046, G__20047, G__20048) : f.call(null, G__20040, G__20041, G__20042, G__20043, G__20044, G__20045, G__20046, G__20047, G__20048);
                      }
                    } else {
                      var j5245 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5236, b5237, c5238, d5239, e5240, f5241, g5242, h5243, i5244, j5245);
                        } else {
                          var G__20049 = a5236;
                          var G__20050 = b5237;
                          var G__20051 = c5238;
                          var G__20052 = d5239;
                          var G__20053 = e5240;
                          var G__20054 = f5241;
                          var G__20055 = g5242;
                          var G__20056 = h5243;
                          var G__20057 = i5244;
                          var G__20058 = j5245;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__20049, G__20050, G__20051, G__20052, G__20053, G__20054, G__20055, G__20056, G__20057, G__20058) : f.call(null, G__20049, G__20050, G__20051, G__20052, G__20053, G__20054, G__20055, G__20056, G__20057, G__20058);
                        }
                      } else {
                        var k5246 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5236, b5237, c5238, d5239, e5240, f5241, g5242, h5243, i5244, j5245, k5246);
                          } else {
                            var G__20059 = a5236;
                            var G__20060 = b5237;
                            var G__20061 = c5238;
                            var G__20062 = d5239;
                            var G__20063 = e5240;
                            var G__20064 = f5241;
                            var G__20065 = g5242;
                            var G__20066 = h5243;
                            var G__20067 = i5244;
                            var G__20068 = j5245;
                            var G__20069 = k5246;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__20059, G__20060, G__20061, G__20062, G__20063, G__20064, G__20065, G__20066, G__20067, G__20068, G__20069) : f.call(null, G__20059, G__20060, G__20061, G__20062, G__20063, G__20064, G__20065, G__20066, G__20067, G__20068, G__20069);
                          }
                        } else {
                          var l5247 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5236, b5237, c5238, d5239, e5240, f5241, g5242, h5243, i5244, j5245, k5246, l5247);
                            } else {
                              var G__20070 = a5236;
                              var G__20071 = b5237;
                              var G__20072 = c5238;
                              var G__20073 = d5239;
                              var G__20074 = e5240;
                              var G__20075 = f5241;
                              var G__20076 = g5242;
                              var G__20077 = h5243;
                              var G__20078 = i5244;
                              var G__20079 = j5245;
                              var G__20080 = k5246;
                              var G__20081 = l5247;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__20070, G__20071, G__20072, G__20073, G__20074, G__20075, G__20076, G__20077, G__20078, G__20079, G__20080, G__20081) : f.call(null, G__20070, G__20071, G__20072, G__20073, G__20074, G__20075, G__20076, G__20077, G__20078, G__20079, G__20080, G__20081);
                            }
                          } else {
                            var m5248 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5236, b5237, c5238, d5239, e5240, f5241, g5242, h5243, i5244, j5245, k5246, l5247, m5248);
                              } else {
                                var G__20082 = a5236;
                                var G__20083 = b5237;
                                var G__20084 = c5238;
                                var G__20085 = d5239;
                                var G__20086 = e5240;
                                var G__20087 = f5241;
                                var G__20088 = g5242;
                                var G__20089 = h5243;
                                var G__20090 = i5244;
                                var G__20091 = j5245;
                                var G__20092 = k5246;
                                var G__20093 = l5247;
                                var G__20094 = m5248;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__20082, G__20083, G__20084, G__20085, G__20086, G__20087, G__20088, G__20089, G__20090, G__20091, G__20092, G__20093, G__20094) : f.call(null, G__20082, G__20083, G__20084, G__20085, G__20086, G__20087, G__20088, G__20089, G__20090, G__20091, G__20092, G__20093, G__20094);
                              }
                            } else {
                              var n5249 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5236, b5237, c5238, d5239, e5240, f5241, g5242, h5243, i5244, j5245, k5246, l5247, m5248, n5249);
                                } else {
                                  var G__20095 = a5236;
                                  var G__20096 = b5237;
                                  var G__20097 = c5238;
                                  var G__20098 = d5239;
                                  var G__20099 = e5240;
                                  var G__20100 = f5241;
                                  var G__20101 = g5242;
                                  var G__20102 = h5243;
                                  var G__20103 = i5244;
                                  var G__20104 = j5245;
                                  var G__20105 = k5246;
                                  var G__20106 = l5247;
                                  var G__20107 = m5248;
                                  var G__20108 = n5249;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__20095, G__20096, G__20097, G__20098, G__20099, G__20100, G__20101, G__20102, G__20103, G__20104, G__20105, G__20106, G__20107, G__20108) : f.call(null, G__20095, G__20096, G__20097, G__20098, G__20099, G__20100, G__20101, G__20102, G__20103, G__20104, G__20105, G__20106, G__20107, G__20108);
                                }
                              } else {
                                var o5250 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5236, b5237, c5238, d5239, e5240, f5241, g5242, h5243, i5244, j5245, k5246, l5247, m5248, n5249, o5250);
                                  } else {
                                    var G__20109 = a5236;
                                    var G__20110 = b5237;
                                    var G__20111 = c5238;
                                    var G__20112 = d5239;
                                    var G__20113 = e5240;
                                    var G__20114 = f5241;
                                    var G__20115 = g5242;
                                    var G__20116 = h5243;
                                    var G__20117 = i5244;
                                    var G__20118 = j5245;
                                    var G__20119 = k5246;
                                    var G__20120 = l5247;
                                    var G__20121 = m5248;
                                    var G__20122 = n5249;
                                    var G__20123 = o5250;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__20109, G__20110, G__20111, G__20112, G__20113, G__20114, G__20115, G__20116, G__20117, G__20118, G__20119, G__20120, G__20121, G__20122, G__20123) : f.call(null, G__20109, G__20110, G__20111, G__20112, G__20113, G__20114, G__20115, G__20116, G__20117, G__20118, G__20119, G__20120, G__20121, G__20122, G__20123);
                                  }
                                } else {
                                  var p5251 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5236, b5237, c5238, d5239, e5240, f5241, g5242, h5243, i5244, j5245, k5246, l5247, m5248, n5249, o5250, p5251);
                                    } else {
                                      var G__20124 = a5236;
                                      var G__20125 = b5237;
                                      var G__20126 = c5238;
                                      var G__20127 = d5239;
                                      var G__20128 = e5240;
                                      var G__20129 = f5241;
                                      var G__20130 = g5242;
                                      var G__20131 = h5243;
                                      var G__20132 = i5244;
                                      var G__20133 = j5245;
                                      var G__20134 = k5246;
                                      var G__20135 = l5247;
                                      var G__20136 = m5248;
                                      var G__20137 = n5249;
                                      var G__20138 = o5250;
                                      var G__20139 = p5251;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__20124, G__20125, G__20126, G__20127, G__20128, G__20129, G__20130, G__20131, G__20132, G__20133, G__20134, G__20135, G__20136, G__20137, G__20138, G__20139) : f.call(null, G__20124, G__20125, G__20126, G__20127, G__20128, G__20129, G__20130, G__20131, G__20132, G__20133, G__20134, G__20135, G__20136, G__20137, G__20138, G__20139);
                                    }
                                  } else {
                                    var q5252 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5236, b5237, c5238, d5239, e5240, f5241, g5242, h5243, i5244, j5245, k5246, l5247, m5248, n5249, o5250, p5251, q5252);
                                      } else {
                                        var G__20140 = a5236;
                                        var G__20141 = b5237;
                                        var G__20142 = c5238;
                                        var G__20143 = d5239;
                                        var G__20144 = e5240;
                                        var G__20145 = f5241;
                                        var G__20146 = g5242;
                                        var G__20147 = h5243;
                                        var G__20148 = i5244;
                                        var G__20149 = j5245;
                                        var G__20150 = k5246;
                                        var G__20151 = l5247;
                                        var G__20152 = m5248;
                                        var G__20153 = n5249;
                                        var G__20154 = o5250;
                                        var G__20155 = p5251;
                                        var G__20156 = q5252;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__20140, G__20141, G__20142, G__20143, G__20144, G__20145, G__20146, G__20147, G__20148, G__20149, G__20150, G__20151, G__20152, G__20153, G__20154, G__20155, G__20156) : f.call(null, G__20140, G__20141, G__20142, G__20143, G__20144, G__20145, G__20146, G__20147, G__20148, G__20149, G__20150, G__20151, G__20152, G__20153, G__20154, G__20155, G__20156);
                                      }
                                    } else {
                                      var r5253 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5236, b5237, c5238, d5239, e5240, f5241, g5242, h5243, i5244, j5245, k5246, l5247, m5248, n5249, o5250, p5251, q5252, r5253);
                                        } else {
                                          var G__20157 = a5236;
                                          var G__20158 = b5237;
                                          var G__20159 = c5238;
                                          var G__20160 = d5239;
                                          var G__20161 = e5240;
                                          var G__20162 = f5241;
                                          var G__20163 = g5242;
                                          var G__20164 = h5243;
                                          var G__20165 = i5244;
                                          var G__20166 = j5245;
                                          var G__20167 = k5246;
                                          var G__20168 = l5247;
                                          var G__20169 = m5248;
                                          var G__20170 = n5249;
                                          var G__20171 = o5250;
                                          var G__20172 = p5251;
                                          var G__20173 = q5252;
                                          var G__20174 = r5253;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__20157, G__20158, G__20159, G__20160, G__20161, G__20162, G__20163, G__20164, G__20165, G__20166, G__20167, G__20168, G__20169, G__20170, G__20171, G__20172, G__20173, G__20174) : f.call(null, G__20157, G__20158, G__20159, G__20160, G__20161, G__20162, G__20163, G__20164, G__20165, G__20166, G__20167, G__20168, G__20169, G__20170, G__20171, G__20172, G__20173, G__20174);
                                        }
                                      } else {
                                        var s5254 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5236, b5237, c5238, d5239, e5240, f5241, g5242, h5243, i5244, j5245, k5246, l5247, m5248, n5249, o5250, p5251, q5252, r5253, s5254);
                                          } else {
                                            var G__20175 = a5236;
                                            var G__20176 = b5237;
                                            var G__20177 = c5238;
                                            var G__20178 = d5239;
                                            var G__20179 = e5240;
                                            var G__20180 = f5241;
                                            var G__20181 = g5242;
                                            var G__20182 = h5243;
                                            var G__20183 = i5244;
                                            var G__20184 = j5245;
                                            var G__20185 = k5246;
                                            var G__20186 = l5247;
                                            var G__20187 = m5248;
                                            var G__20188 = n5249;
                                            var G__20189 = o5250;
                                            var G__20190 = p5251;
                                            var G__20191 = q5252;
                                            var G__20192 = r5253;
                                            var G__20193 = s5254;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__20175, G__20176, G__20177, G__20178, G__20179, G__20180, G__20181, G__20182, G__20183, G__20184, G__20185, G__20186, G__20187, G__20188, G__20189, G__20190, G__20191, G__20192, G__20193) : f.call(null, G__20175, G__20176, G__20177, G__20178, G__20179, G__20180, G__20181, G__20182, G__20183, G__20184, G__20185, G__20186, G__20187, G__20188, G__20189, G__20190, G__20191, G__20192, 
                                            G__20193);
                                          }
                                        } else {
                                          var t5255 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5236, b5237, c5238, d5239, e5240, f5241, g5242, h5243, i5244, j5245, k5246, l5247, m5248, n5249, o5250, p5251, q5252, r5253, s5254, t5255);
                                            } else {
                                              var G__20194 = a5236;
                                              var G__20195 = b5237;
                                              var G__20196 = c5238;
                                              var G__20197 = d5239;
                                              var G__20198 = e5240;
                                              var G__20199 = f5241;
                                              var G__20200 = g5242;
                                              var G__20201 = h5243;
                                              var G__20202 = i5244;
                                              var G__20203 = j5245;
                                              var G__20204 = k5246;
                                              var G__20205 = l5247;
                                              var G__20206 = m5248;
                                              var G__20207 = n5249;
                                              var G__20208 = o5250;
                                              var G__20209 = p5251;
                                              var G__20210 = q5252;
                                              var G__20211 = r5253;
                                              var G__20212 = s5254;
                                              var G__20213 = t5255;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__20194, G__20195, G__20196, G__20197, G__20198, G__20199, G__20200, G__20201, G__20202, G__20203, G__20204, G__20205, G__20206, G__20207, G__20208, G__20209, G__20210, G__20211, G__20212, G__20213) : f.call(null, G__20194, G__20195, G__20196, G__20197, G__20198, G__20199, G__20200, G__20201, G__20202, G__20203, G__20204, G__20205, G__20206, G__20207, G__20208, G__20209, G__20210, 
                                              G__20211, G__20212, G__20213);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply() {
  var G__20221 = arguments.length;
  switch(G__20221) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 5), 0);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5358__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq20214) {
  var G__20215 = cljs.core.first(seq20214);
  var seq20214__$1 = cljs.core.next(seq20214);
  var G__20216 = cljs.core.first(seq20214__$1);
  var seq20214__$2 = cljs.core.next(seq20214__$1);
  var G__20217 = cljs.core.first(seq20214__$2);
  var seq20214__$3 = cljs.core.next(seq20214__$2);
  var G__20218 = cljs.core.first(seq20214__$3);
  var seq20214__$4 = cljs.core.next(seq20214__$3);
  var G__20219 = cljs.core.first(seq20214__$4);
  var seq20214__$5 = cljs.core.next(seq20214__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__20215, G__20216, G__20217, G__20218, G__20219, seq20214__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta() {
  var G__20231 = arguments.length;
  switch(G__20231) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5358__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__20232 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20232) : f.call(null, G__20232);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__20233 = cljs.core.meta(obj);
    var G__20234 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20233, G__20234) : f.call(null, G__20233, G__20234);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__20235 = cljs.core.meta(obj);
    var G__20236 = a;
    var G__20237 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20235, G__20236, G__20237) : f.call(null, G__20235, G__20236, G__20237);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__20238 = cljs.core.meta(obj);
    var G__20239 = a;
    var G__20240 = b;
    var G__20241 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__20238, G__20239, G__20240, G__20241) : f.call(null, G__20238, G__20239, G__20240, G__20241);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__20242 = cljs.core.meta(obj);
    var G__20243 = a;
    var G__20244 = b;
    var G__20245 = c;
    var G__20246 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__20242, G__20243, G__20244, G__20245, G__20246) : f.call(null, G__20242, G__20243, G__20244, G__20245, G__20246);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq20223) {
  var G__20224 = cljs.core.first(seq20223);
  var seq20223__$1 = cljs.core.next(seq20223);
  var G__20225 = cljs.core.first(seq20223__$1);
  var seq20223__$2 = cljs.core.next(seq20223__$1);
  var G__20226 = cljs.core.first(seq20223__$2);
  var seq20223__$3 = cljs.core.next(seq20223__$2);
  var G__20227 = cljs.core.first(seq20223__$3);
  var seq20223__$4 = cljs.core.next(seq20223__$3);
  var G__20228 = cljs.core.first(seq20223__$4);
  var seq20223__$5 = cljs.core.next(seq20223__$4);
  var G__20229 = cljs.core.first(seq20223__$5);
  var seq20223__$6 = cljs.core.next(seq20223__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__20224, G__20225, G__20226, G__20227, G__20228, G__20229, seq20223__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_() {
  var G__20252 = arguments.length;
  switch(G__20252) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq20248) {
  var G__20249 = cljs.core.first(seq20248);
  var seq20248__$1 = cljs.core.next(seq20248);
  var G__20250 = cljs.core.first(seq20248__$1);
  var seq20248__$2 = cljs.core.next(seq20248__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__20249, G__20250, seq20248__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t20257 !== "undefined") {
  } else {
    cljs.core.t20257 = function(nil_iter, meta20258) {
      this.nil_iter = nil_iter;
      this.meta20258 = meta20258;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t20257.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_20259, meta20258__$1) {
      var self__ = this;
      var _20259__$1 = this;
      return new cljs.core.t20257(self__.nil_iter, meta20258__$1);
    };
    cljs.core.t20257.prototype.cljs$core$IMeta$_meta$arity$1 = function(_20259) {
      var self__ = this;
      var _20259__$1 = this;
      return self__.meta20258;
    };
    cljs.core.t20257.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t20257.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t20257.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t20257.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "nil-iter", "nil-iter", 1101030523, null), new cljs.core.Symbol(null, "meta20258", "meta20258", -664152174, null)], null);
    };
    cljs.core.t20257.cljs$lang$type = true;
    cljs.core.t20257.cljs$lang$ctorStr = "cljs.core/t20257";
    cljs.core.t20257.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write(writer__4887__auto__, "cljs.core/t20257");
    };
    cljs.core.__GT_t20257 = function cljs$core$nil_iter_$___GT_t20257(nil_iter__$1, meta20258) {
      return new cljs.core.t20257(nil_iter__$1, meta20258);
    };
  }
  return new cljs.core.t20257(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return !(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "_seq", "_seq", -449557847, null), new cljs.core.Symbol(null, "_next", "_next", 101877036, null)], null);
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.truth_(cljs.core.iterable_QMARK_(coll))) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4295__auto__ = !(lt.stepper == null);
      if (and__4295__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4295__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__20260 = lt;
        var G__20261 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__20260, G__20261) : self__.xform.call(null, G__20260, G__20261);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__20262 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__20262) : self__.xform.call(null, G__20262);
  }
};
cljs.core.Stepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__20264 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__20264) : xform.call(null, G__20264);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__20266 = cljs.core.next(iters__$1);
        iters__$1 = G__20266;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__5192__auto___20267 = self__.iters.length;
  var i_20268 = 0;
  while (true) {
    if (i_20268 < n__5192__auto___20267) {
      self__.nexts[i_20268] = self__.iters[i_20268].next();
      var G__20269 = i_20268 + 1;
      i_20268 = G__20269;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4295__auto__ = !(lt.stepper == null);
      if (and__4295__auto__) {
        return this$.hasNext();
      } else {
        return and__4295__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__20265 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__20265) : self__.xform.call(null, G__20265);
  }
};
cljs.core.MultiStepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iters", "iters", 719353031, null), new cljs.core.Symbol(null, "nexts", "nexts", -1683579407, null)], null);
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper() {
  var G__20271 = arguments.length;
  switch(G__20271) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(function() {
    var G__20272 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__20272) : xform.call(null, G__20272);
  }(), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "stepper", "stepper", 1159163296, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__20274_20278 = cljs.core.seq(colls);
  var chunk__20275_20279 = null;
  var count__20276_20280 = 0;
  var i__20277_20281 = 0;
  while (true) {
    if (i__20277_20281 < count__20276_20280) {
      var coll_20282 = chunk__20275_20279.cljs$core$IIndexed$_nth$arity$2(null, i__20277_20281);
      iters.push(cljs.core.iter(coll_20282));
      var G__20283 = seq__20274_20278;
      var G__20284 = chunk__20275_20279;
      var G__20285 = count__20276_20280;
      var G__20286 = i__20277_20281 + 1;
      seq__20274_20278 = G__20283;
      chunk__20275_20279 = G__20284;
      count__20276_20280 = G__20285;
      i__20277_20281 = G__20286;
      continue;
    } else {
      var temp__4423__auto___20287 = cljs.core.seq(seq__20274_20278);
      if (temp__4423__auto___20287) {
        var seq__20274_20288__$1 = temp__4423__auto___20287;
        if (cljs.core.chunked_seq_QMARK_(seq__20274_20288__$1)) {
          var c__5092__auto___20289 = cljs.core.chunk_first(seq__20274_20288__$1);
          var G__20290 = cljs.core.chunk_rest(seq__20274_20288__$1);
          var G__20291 = c__5092__auto___20289;
          var G__20292 = cljs.core.count(c__5092__auto___20289);
          var G__20293 = 0;
          seq__20274_20278 = G__20290;
          chunk__20275_20279 = G__20291;
          count__20276_20280 = G__20292;
          i__20277_20281 = G__20293;
          continue;
        } else {
          var coll_20294 = cljs.core.first(seq__20274_20288__$1);
          iters.push(cljs.core.iter(coll_20294));
          var G__20295 = cljs.core.next(seq__20274_20288__$1);
          var G__20296 = null;
          var G__20297 = 0;
          var G__20298 = 0;
          seq__20274_20278 = G__20295;
          chunk__20275_20279 = G__20296;
          count__20276_20280 = G__20297;
          i__20277_20281 = G__20298;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence() {
  var G__20303 = arguments.length;
  switch(G__20303) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__4307__auto__ = cljs.core.seq(coll);
    if (or__4307__auto__) {
      return or__4307__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq20299) {
  var G__20300 = cljs.core.first(seq20299);
  var seq20299__$1 = cljs.core.next(seq20299);
  var G__20301 = cljs.core.first(seq20299__$1);
  var seq20299__$2 = cljs.core.next(seq20299__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__20300, G__20301, seq20299__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__20306 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__20306) : pred.call(null, G__20306);
      }())) {
        var G__20307 = pred;
        var G__20308 = cljs.core.next(coll);
        pred = G__20307;
        coll = G__20308;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return !cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4307__auto__ = function() {
        var G__20312 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__20312) : pred.call(null, G__20312);
      }();
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        var G__20313 = pred;
        var G__20314 = cljs.core.next(coll);
        pred = G__20313;
        coll = G__20314;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return (n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return !cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__20321 = null;
    var G__20321__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__20321__1 = function(x) {
      return cljs.core.not(function() {
        var G__20318 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20318) : f.call(null, G__20318);
      }());
    };
    var G__20321__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__20319 = x;
        var G__20320 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20319, G__20320) : f.call(null, G__20319, G__20320);
      }());
    };
    var G__20321__3 = function() {
      var G__20322__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__20322 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__20323__i = 0, G__20323__a = new Array(arguments.length - 2);
          while (G__20323__i < G__20323__a.length) {
            G__20323__a[G__20323__i] = arguments[G__20323__i + 2];
            ++G__20323__i;
          }
          zs = new cljs.core.IndexedSeq(G__20323__a, 0);
        }
        return G__20322__delegate.call(this, x, y, zs);
      };
      G__20322.cljs$lang$maxFixedArity = 2;
      G__20322.cljs$lang$applyTo = function(arglist__20324) {
        var x = cljs.core.first(arglist__20324);
        arglist__20324 = cljs.core.next(arglist__20324);
        var y = cljs.core.first(arglist__20324);
        var zs = cljs.core.rest(arglist__20324);
        return G__20322__delegate(x, y, zs);
      };
      G__20322.cljs$core$IFn$_invoke$arity$variadic = G__20322__delegate;
      return G__20322;
    }();
    G__20321 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__20321__0.call(this);
        case 1:
          return G__20321__1.call(this, x);
        case 2:
          return G__20321__2.call(this, x, y);
        default:
          var G__20325 = null;
          if (arguments.length > 2) {
            var G__20326__i = 0, G__20326__a = new Array(arguments.length - 2);
            while (G__20326__i < G__20326__a.length) {
              G__20326__a[G__20326__i] = arguments[G__20326__i + 2];
              ++G__20326__i;
            }
            G__20325 = new cljs.core.IndexedSeq(G__20326__a, 0);
          }
          return G__20321__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20325);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__20321.cljs$lang$maxFixedArity = 2;
    G__20321.cljs$lang$applyTo = G__20321__3.cljs$lang$applyTo;
    G__20321.cljs$core$IFn$_invoke$arity$0 = G__20321__0;
    G__20321.cljs$core$IFn$_invoke$arity$1 = G__20321__1;
    G__20321.cljs$core$IFn$_invoke$arity$2 = G__20321__2;
    G__20321.cljs$core$IFn$_invoke$arity$variadic = G__20321__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__20321;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__20327__delegate = function(args) {
      return x;
    };
    var G__20327 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__20328__i = 0, G__20328__a = new Array(arguments.length - 0);
        while (G__20328__i < G__20328__a.length) {
          G__20328__a[G__20328__i] = arguments[G__20328__i + 0];
          ++G__20328__i;
        }
        args = new cljs.core.IndexedSeq(G__20328__a, 0);
      }
      return G__20327__delegate.call(this, args);
    };
    G__20327.cljs$lang$maxFixedArity = 0;
    G__20327.cljs$lang$applyTo = function(arglist__20329) {
      var args = cljs.core.seq(arglist__20329);
      return G__20327__delegate(args);
    };
    G__20327.cljs$core$IFn$_invoke$arity$variadic = G__20327__delegate;
    return G__20327;
  }();
};
cljs.core.comp = function cljs$core$comp() {
  var G__20335 = arguments.length;
  switch(G__20335) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5358__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__20364 = null;
    var G__20364__0 = function() {
      var G__20336 = function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20336) : f.call(null, G__20336);
    };
    var G__20364__1 = function(x) {
      var G__20337 = function() {
        var G__20338 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__20338) : g.call(null, G__20338);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20337) : f.call(null, G__20337);
    };
    var G__20364__2 = function(x, y) {
      var G__20339 = function() {
        var G__20340 = x;
        var G__20341 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__20340, G__20341) : g.call(null, G__20340, G__20341);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20339) : f.call(null, G__20339);
    };
    var G__20364__3 = function(x, y, z) {
      var G__20342 = function() {
        var G__20343 = x;
        var G__20344 = y;
        var G__20345 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__20343, G__20344, G__20345) : g.call(null, G__20343, G__20344, G__20345);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20342) : f.call(null, G__20342);
    };
    var G__20364__4 = function() {
      var G__20365__delegate = function(x, y, z, args) {
        var G__20346 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20346) : f.call(null, G__20346);
      };
      var G__20365 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20366__i = 0, G__20366__a = new Array(arguments.length - 3);
          while (G__20366__i < G__20366__a.length) {
            G__20366__a[G__20366__i] = arguments[G__20366__i + 3];
            ++G__20366__i;
          }
          args = new cljs.core.IndexedSeq(G__20366__a, 0);
        }
        return G__20365__delegate.call(this, x, y, z, args);
      };
      G__20365.cljs$lang$maxFixedArity = 3;
      G__20365.cljs$lang$applyTo = function(arglist__20367) {
        var x = cljs.core.first(arglist__20367);
        arglist__20367 = cljs.core.next(arglist__20367);
        var y = cljs.core.first(arglist__20367);
        arglist__20367 = cljs.core.next(arglist__20367);
        var z = cljs.core.first(arglist__20367);
        var args = cljs.core.rest(arglist__20367);
        return G__20365__delegate(x, y, z, args);
      };
      G__20365.cljs$core$IFn$_invoke$arity$variadic = G__20365__delegate;
      return G__20365;
    }();
    G__20364 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__20364__0.call(this);
        case 1:
          return G__20364__1.call(this, x);
        case 2:
          return G__20364__2.call(this, x, y);
        case 3:
          return G__20364__3.call(this, x, y, z);
        default:
          var G__20368 = null;
          if (arguments.length > 3) {
            var G__20369__i = 0, G__20369__a = new Array(arguments.length - 3);
            while (G__20369__i < G__20369__a.length) {
              G__20369__a[G__20369__i] = arguments[G__20369__i + 3];
              ++G__20369__i;
            }
            G__20368 = new cljs.core.IndexedSeq(G__20369__a, 0);
          }
          return G__20364__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20368);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__20364.cljs$lang$maxFixedArity = 3;
    G__20364.cljs$lang$applyTo = G__20364__4.cljs$lang$applyTo;
    G__20364.cljs$core$IFn$_invoke$arity$0 = G__20364__0;
    G__20364.cljs$core$IFn$_invoke$arity$1 = G__20364__1;
    G__20364.cljs$core$IFn$_invoke$arity$2 = G__20364__2;
    G__20364.cljs$core$IFn$_invoke$arity$3 = G__20364__3;
    G__20364.cljs$core$IFn$_invoke$arity$variadic = G__20364__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__20364;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__20370 = null;
    var G__20370__0 = function() {
      var G__20347 = function() {
        var G__20348 = function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__20348) : g.call(null, G__20348);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20347) : f.call(null, G__20347);
    };
    var G__20370__1 = function(x) {
      var G__20349 = function() {
        var G__20350 = function() {
          var G__20351 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__20351) : h.call(null, G__20351);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__20350) : g.call(null, G__20350);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20349) : f.call(null, G__20349);
    };
    var G__20370__2 = function(x, y) {
      var G__20352 = function() {
        var G__20353 = function() {
          var G__20354 = x;
          var G__20355 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__20354, G__20355) : h.call(null, G__20354, G__20355);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__20353) : g.call(null, G__20353);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20352) : f.call(null, G__20352);
    };
    var G__20370__3 = function(x, y, z) {
      var G__20356 = function() {
        var G__20357 = function() {
          var G__20358 = x;
          var G__20359 = y;
          var G__20360 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__20358, G__20359, G__20360) : h.call(null, G__20358, G__20359, G__20360);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__20357) : g.call(null, G__20357);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20356) : f.call(null, G__20356);
    };
    var G__20370__4 = function() {
      var G__20371__delegate = function(x, y, z, args) {
        var G__20361 = function() {
          var G__20362 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__20362) : g.call(null, G__20362);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20361) : f.call(null, G__20361);
      };
      var G__20371 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20372__i = 0, G__20372__a = new Array(arguments.length - 3);
          while (G__20372__i < G__20372__a.length) {
            G__20372__a[G__20372__i] = arguments[G__20372__i + 3];
            ++G__20372__i;
          }
          args = new cljs.core.IndexedSeq(G__20372__a, 0);
        }
        return G__20371__delegate.call(this, x, y, z, args);
      };
      G__20371.cljs$lang$maxFixedArity = 3;
      G__20371.cljs$lang$applyTo = function(arglist__20373) {
        var x = cljs.core.first(arglist__20373);
        arglist__20373 = cljs.core.next(arglist__20373);
        var y = cljs.core.first(arglist__20373);
        arglist__20373 = cljs.core.next(arglist__20373);
        var z = cljs.core.first(arglist__20373);
        var args = cljs.core.rest(arglist__20373);
        return G__20371__delegate(x, y, z, args);
      };
      G__20371.cljs$core$IFn$_invoke$arity$variadic = G__20371__delegate;
      return G__20371;
    }();
    G__20370 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__20370__0.call(this);
        case 1:
          return G__20370__1.call(this, x);
        case 2:
          return G__20370__2.call(this, x, y);
        case 3:
          return G__20370__3.call(this, x, y, z);
        default:
          var G__20374 = null;
          if (arguments.length > 3) {
            var G__20375__i = 0, G__20375__a = new Array(arguments.length - 3);
            while (G__20375__i < G__20375__a.length) {
              G__20375__a[G__20375__i] = arguments[G__20375__i + 3];
              ++G__20375__i;
            }
            G__20374 = new cljs.core.IndexedSeq(G__20375__a, 0);
          }
          return G__20370__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20374);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__20370.cljs$lang$maxFixedArity = 3;
    G__20370.cljs$lang$applyTo = G__20370__4.cljs$lang$applyTo;
    G__20370.cljs$core$IFn$_invoke$arity$0 = G__20370__0;
    G__20370.cljs$core$IFn$_invoke$arity$1 = G__20370__1;
    G__20370.cljs$core$IFn$_invoke$arity$2 = G__20370__2;
    G__20370.cljs$core$IFn$_invoke$arity$3 = G__20370__3;
    G__20370.cljs$core$IFn$_invoke$arity$variadic = G__20370__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__20370;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__20376__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__20377 = cljs.core.first(fs__$2).call(null, ret);
            var G__20378 = cljs.core.next(fs__$2);
            ret = G__20377;
            fs__$2 = G__20378;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__20376 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__20379__i = 0, G__20379__a = new Array(arguments.length - 0);
          while (G__20379__i < G__20379__a.length) {
            G__20379__a[G__20379__i] = arguments[G__20379__i + 0];
            ++G__20379__i;
          }
          args = new cljs.core.IndexedSeq(G__20379__a, 0);
        }
        return G__20376__delegate.call(this, args);
      };
      G__20376.cljs$lang$maxFixedArity = 0;
      G__20376.cljs$lang$applyTo = function(arglist__20380) {
        var args = cljs.core.seq(arglist__20380);
        return G__20376__delegate(args);
      };
      G__20376.cljs$core$IFn$_invoke$arity$variadic = G__20376__delegate;
      return G__20376;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq20330) {
  var G__20331 = cljs.core.first(seq20330);
  var seq20330__$1 = cljs.core.next(seq20330);
  var G__20332 = cljs.core.first(seq20330__$1);
  var seq20330__$2 = cljs.core.next(seq20330__$1);
  var G__20333 = cljs.core.first(seq20330__$2);
  var seq20330__$3 = cljs.core.next(seq20330__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__20331, G__20332, G__20333, seq20330__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial() {
  var G__20387 = arguments.length;
  switch(G__20387) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5358__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__20431 = null;
    var G__20431__0 = function() {
      var G__20388 = arg1;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20388) : f.call(null, G__20388);
    };
    var G__20431__1 = function(x) {
      var G__20389 = arg1;
      var G__20390 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20389, G__20390) : f.call(null, G__20389, G__20390);
    };
    var G__20431__2 = function(x, y) {
      var G__20391 = arg1;
      var G__20392 = x;
      var G__20393 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20391, G__20392, G__20393) : f.call(null, G__20391, G__20392, G__20393);
    };
    var G__20431__3 = function(x, y, z) {
      var G__20394 = arg1;
      var G__20395 = x;
      var G__20396 = y;
      var G__20397 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__20394, G__20395, G__20396, G__20397) : f.call(null, G__20394, G__20395, G__20396, G__20397);
    };
    var G__20431__4 = function() {
      var G__20432__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__20432 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20433__i = 0, G__20433__a = new Array(arguments.length - 3);
          while (G__20433__i < G__20433__a.length) {
            G__20433__a[G__20433__i] = arguments[G__20433__i + 3];
            ++G__20433__i;
          }
          args = new cljs.core.IndexedSeq(G__20433__a, 0);
        }
        return G__20432__delegate.call(this, x, y, z, args);
      };
      G__20432.cljs$lang$maxFixedArity = 3;
      G__20432.cljs$lang$applyTo = function(arglist__20434) {
        var x = cljs.core.first(arglist__20434);
        arglist__20434 = cljs.core.next(arglist__20434);
        var y = cljs.core.first(arglist__20434);
        arglist__20434 = cljs.core.next(arglist__20434);
        var z = cljs.core.first(arglist__20434);
        var args = cljs.core.rest(arglist__20434);
        return G__20432__delegate(x, y, z, args);
      };
      G__20432.cljs$core$IFn$_invoke$arity$variadic = G__20432__delegate;
      return G__20432;
    }();
    G__20431 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__20431__0.call(this);
        case 1:
          return G__20431__1.call(this, x);
        case 2:
          return G__20431__2.call(this, x, y);
        case 3:
          return G__20431__3.call(this, x, y, z);
        default:
          var G__20435 = null;
          if (arguments.length > 3) {
            var G__20436__i = 0, G__20436__a = new Array(arguments.length - 3);
            while (G__20436__i < G__20436__a.length) {
              G__20436__a[G__20436__i] = arguments[G__20436__i + 3];
              ++G__20436__i;
            }
            G__20435 = new cljs.core.IndexedSeq(G__20436__a, 0);
          }
          return G__20431__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20435);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__20431.cljs$lang$maxFixedArity = 3;
    G__20431.cljs$lang$applyTo = G__20431__4.cljs$lang$applyTo;
    G__20431.cljs$core$IFn$_invoke$arity$0 = G__20431__0;
    G__20431.cljs$core$IFn$_invoke$arity$1 = G__20431__1;
    G__20431.cljs$core$IFn$_invoke$arity$2 = G__20431__2;
    G__20431.cljs$core$IFn$_invoke$arity$3 = G__20431__3;
    G__20431.cljs$core$IFn$_invoke$arity$variadic = G__20431__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__20431;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__20437 = null;
    var G__20437__0 = function() {
      var G__20398 = arg1;
      var G__20399 = arg2;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20398, G__20399) : f.call(null, G__20398, G__20399);
    };
    var G__20437__1 = function(x) {
      var G__20400 = arg1;
      var G__20401 = arg2;
      var G__20402 = x;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20400, G__20401, G__20402) : f.call(null, G__20400, G__20401, G__20402);
    };
    var G__20437__2 = function(x, y) {
      var G__20403 = arg1;
      var G__20404 = arg2;
      var G__20405 = x;
      var G__20406 = y;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__20403, G__20404, G__20405, G__20406) : f.call(null, G__20403, G__20404, G__20405, G__20406);
    };
    var G__20437__3 = function(x, y, z) {
      var G__20407 = arg1;
      var G__20408 = arg2;
      var G__20409 = x;
      var G__20410 = y;
      var G__20411 = z;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__20407, G__20408, G__20409, G__20410, G__20411) : f.call(null, G__20407, G__20408, G__20409, G__20410, G__20411);
    };
    var G__20437__4 = function() {
      var G__20438__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__20438 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20439__i = 0, G__20439__a = new Array(arguments.length - 3);
          while (G__20439__i < G__20439__a.length) {
            G__20439__a[G__20439__i] = arguments[G__20439__i + 3];
            ++G__20439__i;
          }
          args = new cljs.core.IndexedSeq(G__20439__a, 0);
        }
        return G__20438__delegate.call(this, x, y, z, args);
      };
      G__20438.cljs$lang$maxFixedArity = 3;
      G__20438.cljs$lang$applyTo = function(arglist__20440) {
        var x = cljs.core.first(arglist__20440);
        arglist__20440 = cljs.core.next(arglist__20440);
        var y = cljs.core.first(arglist__20440);
        arglist__20440 = cljs.core.next(arglist__20440);
        var z = cljs.core.first(arglist__20440);
        var args = cljs.core.rest(arglist__20440);
        return G__20438__delegate(x, y, z, args);
      };
      G__20438.cljs$core$IFn$_invoke$arity$variadic = G__20438__delegate;
      return G__20438;
    }();
    G__20437 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__20437__0.call(this);
        case 1:
          return G__20437__1.call(this, x);
        case 2:
          return G__20437__2.call(this, x, y);
        case 3:
          return G__20437__3.call(this, x, y, z);
        default:
          var G__20441 = null;
          if (arguments.length > 3) {
            var G__20442__i = 0, G__20442__a = new Array(arguments.length - 3);
            while (G__20442__i < G__20442__a.length) {
              G__20442__a[G__20442__i] = arguments[G__20442__i + 3];
              ++G__20442__i;
            }
            G__20441 = new cljs.core.IndexedSeq(G__20442__a, 0);
          }
          return G__20437__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20441);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__20437.cljs$lang$maxFixedArity = 3;
    G__20437.cljs$lang$applyTo = G__20437__4.cljs$lang$applyTo;
    G__20437.cljs$core$IFn$_invoke$arity$0 = G__20437__0;
    G__20437.cljs$core$IFn$_invoke$arity$1 = G__20437__1;
    G__20437.cljs$core$IFn$_invoke$arity$2 = G__20437__2;
    G__20437.cljs$core$IFn$_invoke$arity$3 = G__20437__3;
    G__20437.cljs$core$IFn$_invoke$arity$variadic = G__20437__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__20437;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__20443 = null;
    var G__20443__0 = function() {
      var G__20412 = arg1;
      var G__20413 = arg2;
      var G__20414 = arg3;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20412, G__20413, G__20414) : f.call(null, G__20412, G__20413, G__20414);
    };
    var G__20443__1 = function(x) {
      var G__20415 = arg1;
      var G__20416 = arg2;
      var G__20417 = arg3;
      var G__20418 = x;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__20415, G__20416, G__20417, G__20418) : f.call(null, G__20415, G__20416, G__20417, G__20418);
    };
    var G__20443__2 = function(x, y) {
      var G__20419 = arg1;
      var G__20420 = arg2;
      var G__20421 = arg3;
      var G__20422 = x;
      var G__20423 = y;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__20419, G__20420, G__20421, G__20422, G__20423) : f.call(null, G__20419, G__20420, G__20421, G__20422, G__20423);
    };
    var G__20443__3 = function(x, y, z) {
      var G__20424 = arg1;
      var G__20425 = arg2;
      var G__20426 = arg3;
      var G__20427 = x;
      var G__20428 = y;
      var G__20429 = z;
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__20424, G__20425, G__20426, G__20427, G__20428, G__20429) : f.call(null, G__20424, G__20425, G__20426, G__20427, G__20428, G__20429);
    };
    var G__20443__4 = function() {
      var G__20444__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__20444 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20445__i = 0, G__20445__a = new Array(arguments.length - 3);
          while (G__20445__i < G__20445__a.length) {
            G__20445__a[G__20445__i] = arguments[G__20445__i + 3];
            ++G__20445__i;
          }
          args = new cljs.core.IndexedSeq(G__20445__a, 0);
        }
        return G__20444__delegate.call(this, x, y, z, args);
      };
      G__20444.cljs$lang$maxFixedArity = 3;
      G__20444.cljs$lang$applyTo = function(arglist__20446) {
        var x = cljs.core.first(arglist__20446);
        arglist__20446 = cljs.core.next(arglist__20446);
        var y = cljs.core.first(arglist__20446);
        arglist__20446 = cljs.core.next(arglist__20446);
        var z = cljs.core.first(arglist__20446);
        var args = cljs.core.rest(arglist__20446);
        return G__20444__delegate(x, y, z, args);
      };
      G__20444.cljs$core$IFn$_invoke$arity$variadic = G__20444__delegate;
      return G__20444;
    }();
    G__20443 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__20443__0.call(this);
        case 1:
          return G__20443__1.call(this, x);
        case 2:
          return G__20443__2.call(this, x, y);
        case 3:
          return G__20443__3.call(this, x, y, z);
        default:
          var G__20447 = null;
          if (arguments.length > 3) {
            var G__20448__i = 0, G__20448__a = new Array(arguments.length - 3);
            while (G__20448__i < G__20448__a.length) {
              G__20448__a[G__20448__i] = arguments[G__20448__i + 3];
              ++G__20448__i;
            }
            G__20447 = new cljs.core.IndexedSeq(G__20448__a, 0);
          }
          return G__20443__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20447);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__20443.cljs$lang$maxFixedArity = 3;
    G__20443.cljs$lang$applyTo = G__20443__4.cljs$lang$applyTo;
    G__20443.cljs$core$IFn$_invoke$arity$0 = G__20443__0;
    G__20443.cljs$core$IFn$_invoke$arity$1 = G__20443__1;
    G__20443.cljs$core$IFn$_invoke$arity$2 = G__20443__2;
    G__20443.cljs$core$IFn$_invoke$arity$3 = G__20443__3;
    G__20443.cljs$core$IFn$_invoke$arity$variadic = G__20443__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__20443;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__20449__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__20449 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__20450__i = 0, G__20450__a = new Array(arguments.length - 0);
        while (G__20450__i < G__20450__a.length) {
          G__20450__a[G__20450__i] = arguments[G__20450__i + 0];
          ++G__20450__i;
        }
        args = new cljs.core.IndexedSeq(G__20450__a, 0);
      }
      return G__20449__delegate.call(this, args);
    };
    G__20449.cljs$lang$maxFixedArity = 0;
    G__20449.cljs$lang$applyTo = function(arglist__20451) {
      var args = cljs.core.seq(arglist__20451);
      return G__20449__delegate(args);
    };
    G__20449.cljs$core$IFn$_invoke$arity$variadic = G__20449__delegate;
    return G__20449;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq20381) {
  var G__20382 = cljs.core.first(seq20381);
  var seq20381__$1 = cljs.core.next(seq20381);
  var G__20383 = cljs.core.first(seq20381__$1);
  var seq20381__$2 = cljs.core.next(seq20381__$1);
  var G__20384 = cljs.core.first(seq20381__$2);
  var seq20381__$3 = cljs.core.next(seq20381__$2);
  var G__20385 = cljs.core.first(seq20381__$3);
  var seq20381__$4 = cljs.core.next(seq20381__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__20382, G__20383, G__20384, G__20385, seq20381__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil() {
  var G__20453 = arguments.length;
  switch(G__20453) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__20471 = null;
    var G__20471__1 = function(a) {
      var G__20454 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20454) : f.call(null, G__20454);
    };
    var G__20471__2 = function(a, b) {
      var G__20455 = a == null ? x : a;
      var G__20456 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20455, G__20456) : f.call(null, G__20455, G__20456);
    };
    var G__20471__3 = function(a, b, c) {
      var G__20457 = a == null ? x : a;
      var G__20458 = b;
      var G__20459 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20457, G__20458, G__20459) : f.call(null, G__20457, G__20458, G__20459);
    };
    var G__20471__4 = function() {
      var G__20472__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__20472 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__20473__i = 0, G__20473__a = new Array(arguments.length - 3);
          while (G__20473__i < G__20473__a.length) {
            G__20473__a[G__20473__i] = arguments[G__20473__i + 3];
            ++G__20473__i;
          }
          ds = new cljs.core.IndexedSeq(G__20473__a, 0);
        }
        return G__20472__delegate.call(this, a, b, c, ds);
      };
      G__20472.cljs$lang$maxFixedArity = 3;
      G__20472.cljs$lang$applyTo = function(arglist__20474) {
        var a = cljs.core.first(arglist__20474);
        arglist__20474 = cljs.core.next(arglist__20474);
        var b = cljs.core.first(arglist__20474);
        arglist__20474 = cljs.core.next(arglist__20474);
        var c = cljs.core.first(arglist__20474);
        var ds = cljs.core.rest(arglist__20474);
        return G__20472__delegate(a, b, c, ds);
      };
      G__20472.cljs$core$IFn$_invoke$arity$variadic = G__20472__delegate;
      return G__20472;
    }();
    G__20471 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__20471__1.call(this, a);
        case 2:
          return G__20471__2.call(this, a, b);
        case 3:
          return G__20471__3.call(this, a, b, c);
        default:
          var G__20475 = null;
          if (arguments.length > 3) {
            var G__20476__i = 0, G__20476__a = new Array(arguments.length - 3);
            while (G__20476__i < G__20476__a.length) {
              G__20476__a[G__20476__i] = arguments[G__20476__i + 3];
              ++G__20476__i;
            }
            G__20475 = new cljs.core.IndexedSeq(G__20476__a, 0);
          }
          return G__20471__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__20475);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__20471.cljs$lang$maxFixedArity = 3;
    G__20471.cljs$lang$applyTo = G__20471__4.cljs$lang$applyTo;
    G__20471.cljs$core$IFn$_invoke$arity$1 = G__20471__1;
    G__20471.cljs$core$IFn$_invoke$arity$2 = G__20471__2;
    G__20471.cljs$core$IFn$_invoke$arity$3 = G__20471__3;
    G__20471.cljs$core$IFn$_invoke$arity$variadic = G__20471__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__20471;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__20477 = null;
    var G__20477__2 = function(a, b) {
      var G__20460 = a == null ? x : a;
      var G__20461 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20460, G__20461) : f.call(null, G__20460, G__20461);
    };
    var G__20477__3 = function(a, b, c) {
      var G__20462 = a == null ? x : a;
      var G__20463 = b == null ? y : b;
      var G__20464 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20462, G__20463, G__20464) : f.call(null, G__20462, G__20463, G__20464);
    };
    var G__20477__4 = function() {
      var G__20478__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__20478 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__20479__i = 0, G__20479__a = new Array(arguments.length - 3);
          while (G__20479__i < G__20479__a.length) {
            G__20479__a[G__20479__i] = arguments[G__20479__i + 3];
            ++G__20479__i;
          }
          ds = new cljs.core.IndexedSeq(G__20479__a, 0);
        }
        return G__20478__delegate.call(this, a, b, c, ds);
      };
      G__20478.cljs$lang$maxFixedArity = 3;
      G__20478.cljs$lang$applyTo = function(arglist__20480) {
        var a = cljs.core.first(arglist__20480);
        arglist__20480 = cljs.core.next(arglist__20480);
        var b = cljs.core.first(arglist__20480);
        arglist__20480 = cljs.core.next(arglist__20480);
        var c = cljs.core.first(arglist__20480);
        var ds = cljs.core.rest(arglist__20480);
        return G__20478__delegate(a, b, c, ds);
      };
      G__20478.cljs$core$IFn$_invoke$arity$variadic = G__20478__delegate;
      return G__20478;
    }();
    G__20477 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__20477__2.call(this, a, b);
        case 3:
          return G__20477__3.call(this, a, b, c);
        default:
          var G__20481 = null;
          if (arguments.length > 3) {
            var G__20482__i = 0, G__20482__a = new Array(arguments.length - 3);
            while (G__20482__i < G__20482__a.length) {
              G__20482__a[G__20482__i] = arguments[G__20482__i + 3];
              ++G__20482__i;
            }
            G__20481 = new cljs.core.IndexedSeq(G__20482__a, 0);
          }
          return G__20477__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__20481);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__20477.cljs$lang$maxFixedArity = 3;
    G__20477.cljs$lang$applyTo = G__20477__4.cljs$lang$applyTo;
    G__20477.cljs$core$IFn$_invoke$arity$2 = G__20477__2;
    G__20477.cljs$core$IFn$_invoke$arity$3 = G__20477__3;
    G__20477.cljs$core$IFn$_invoke$arity$variadic = G__20477__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__20477;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__20483 = null;
    var G__20483__2 = function(a, b) {
      var G__20465 = a == null ? x : a;
      var G__20466 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20465, G__20466) : f.call(null, G__20465, G__20466);
    };
    var G__20483__3 = function(a, b, c) {
      var G__20467 = a == null ? x : a;
      var G__20468 = b == null ? y : b;
      var G__20469 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20467, G__20468, G__20469) : f.call(null, G__20467, G__20468, G__20469);
    };
    var G__20483__4 = function() {
      var G__20484__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__20484 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__20485__i = 0, G__20485__a = new Array(arguments.length - 3);
          while (G__20485__i < G__20485__a.length) {
            G__20485__a[G__20485__i] = arguments[G__20485__i + 3];
            ++G__20485__i;
          }
          ds = new cljs.core.IndexedSeq(G__20485__a, 0);
        }
        return G__20484__delegate.call(this, a, b, c, ds);
      };
      G__20484.cljs$lang$maxFixedArity = 3;
      G__20484.cljs$lang$applyTo = function(arglist__20486) {
        var a = cljs.core.first(arglist__20486);
        arglist__20486 = cljs.core.next(arglist__20486);
        var b = cljs.core.first(arglist__20486);
        arglist__20486 = cljs.core.next(arglist__20486);
        var c = cljs.core.first(arglist__20486);
        var ds = cljs.core.rest(arglist__20486);
        return G__20484__delegate(a, b, c, ds);
      };
      G__20484.cljs$core$IFn$_invoke$arity$variadic = G__20484__delegate;
      return G__20484;
    }();
    G__20483 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__20483__2.call(this, a, b);
        case 3:
          return G__20483__3.call(this, a, b, c);
        default:
          var G__20487 = null;
          if (arguments.length > 3) {
            var G__20488__i = 0, G__20488__a = new Array(arguments.length - 3);
            while (G__20488__i < G__20488__a.length) {
              G__20488__a[G__20488__i] = arguments[G__20488__i + 3];
              ++G__20488__i;
            }
            G__20487 = new cljs.core.IndexedSeq(G__20488__a, 0);
          }
          return G__20483__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__20487);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__20483.cljs$lang$maxFixedArity = 3;
    G__20483.cljs$lang$applyTo = G__20483__4.cljs$lang$applyTo;
    G__20483.cljs$core$IFn$_invoke$arity$2 = G__20483__2;
    G__20483.cljs$core$IFn$_invoke$arity$3 = G__20483__3;
    G__20483.cljs$core$IFn$_invoke$arity$variadic = G__20483__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__20483;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed() {
  var G__20490 = arguments.length;
  switch(G__20490) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = function() {
      var G__20491 = -1;
      return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__20491) : cljs.core.volatile_BANG_.call(null, G__20491);
    }();
    return function(i) {
      return function() {
        var G__20522 = null;
        var G__20522__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__20522__1 = function(result) {
          var G__20492 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20492) : rf.call(null, G__20492);
        };
        var G__20522__2 = function(result, input) {
          var G__20493 = result;
          var G__20494 = function() {
            var G__20495 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__20496 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20495, G__20496) : f.call(null, G__20495, G__20496);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20493, G__20494) : rf.call(null, G__20493, G__20494);
        };
        G__20522 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__20522__0.call(this);
            case 1:
              return G__20522__1.call(this, result);
            case 2:
              return G__20522__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__20522.cljs$core$IFn$_invoke$arity$0 = G__20522__0;
        G__20522.cljs$core$IFn$_invoke$arity$1 = G__20522__1;
        G__20522.cljs$core$IFn$_invoke$arity$2 = G__20522__2;
        return G__20522;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4423__auto__ = cljs.core.seq(coll__$1);
      if (temp__4423__auto__) {
        var s = temp__4423__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5192__auto___20523 = size;
          var i_20524 = 0;
          while (true) {
            if (i_20524 < n__5192__auto___20523) {
              cljs.core.chunk_append(b, function() {
                var G__20517 = idx + i_20524;
                var G__20518 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_20524);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20517, G__20518) : f.call(null, G__20517, G__20518);
              }());
              var G__20525 = i_20524 + 1;
              i_20524 = G__20525;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__20519 = idx;
            var G__20520 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20519, G__20520) : f.call(null, G__20519, G__20520);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep() {
  var G__20527 = arguments.length;
  switch(G__20527) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__20535 = null;
      var G__20535__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__20535__1 = function(result) {
        var G__20528 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20528) : rf.call(null, G__20528);
      };
      var G__20535__2 = function(result, input) {
        var v = function() {
          var G__20529 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20529) : f.call(null, G__20529);
        }();
        if (v == null) {
          return result;
        } else {
          var G__20530 = result;
          var G__20531 = v;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20530, G__20531) : rf.call(null, G__20530, G__20531);
        }
      };
      G__20535 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__20535__0.call(this);
          case 1:
            return G__20535__1.call(this, result);
          case 2:
            return G__20535__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20535.cljs$core$IFn$_invoke$arity$0 = G__20535__0;
      G__20535.cljs$core$IFn$_invoke$arity$1 = G__20535__1;
      G__20535.cljs$core$IFn$_invoke$arity$2 = G__20535__2;
      return G__20535;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5192__auto___20536 = size;
        var i_20537 = 0;
        while (true) {
          if (i_20537 < n__5192__auto___20536) {
            var x_20538 = function() {
              var G__20532 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_20537);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20532) : f.call(null, G__20532);
            }();
            if (x_20538 == null) {
            } else {
              cljs.core.chunk_append(b, x_20538);
            }
            var G__20539 = i_20537 + 1;
            i_20537 = G__20539;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__20533 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20533) : f.call(null, G__20533);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__20540 = cljs.core.seq(self__.watches);
  var chunk__20541 = null;
  var count__20542 = 0;
  var i__20543 = 0;
  while (true) {
    if (i__20543 < count__20542) {
      var vec__20544 = chunk__20541.cljs$core$IIndexed$_nth$arity$2(null, i__20543);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20544, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20544, 1, null);
      var G__20545_20555 = key;
      var G__20546_20556 = this$__$1;
      var G__20547_20557 = oldval;
      var G__20548_20558 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__20545_20555, G__20546_20556, G__20547_20557, G__20548_20558) : f.call(null, G__20545_20555, G__20546_20556, G__20547_20557, G__20548_20558);
      var G__20559 = seq__20540;
      var G__20560 = chunk__20541;
      var G__20561 = count__20542;
      var G__20562 = i__20543 + 1;
      seq__20540 = G__20559;
      chunk__20541 = G__20560;
      count__20542 = G__20561;
      i__20543 = G__20562;
      continue;
    } else {
      var temp__4423__auto__ = cljs.core.seq(seq__20540);
      if (temp__4423__auto__) {
        var seq__20540__$1 = temp__4423__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20540__$1)) {
          var c__5092__auto__ = cljs.core.chunk_first(seq__20540__$1);
          var G__20563 = cljs.core.chunk_rest(seq__20540__$1);
          var G__20564 = c__5092__auto__;
          var G__20565 = cljs.core.count(c__5092__auto__);
          var G__20566 = 0;
          seq__20540 = G__20563;
          chunk__20541 = G__20564;
          count__20542 = G__20565;
          i__20543 = G__20566;
          continue;
        } else {
          var vec__20549 = cljs.core.first(seq__20540__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20549, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20549, 1, null);
          var G__20550_20567 = key;
          var G__20551_20568 = this$__$1;
          var G__20552_20569 = oldval;
          var G__20553_20570 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__20550_20567, G__20551_20568, G__20552_20569, G__20553_20570) : f.call(null, G__20550_20567, G__20551_20568, G__20552_20569, G__20553_20570);
          var G__20571 = cljs.core.next(seq__20540__$1);
          var G__20572 = null;
          var G__20573 = 0;
          var G__20574 = 0;
          seq__20540 = G__20571;
          chunk__20541 = G__20572;
          count__20542 = G__20573;
          i__20543 = G__20574;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__20554 = this$__$1;
  return goog.getUid(G__20554);
};
cljs.core.Atom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "watches", "watches", 1367433992, null)], null);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom() {
  var G__20578 = arguments.length;
  switch(G__20578) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5358__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__20579) {
  var map__20580 = p__20579;
  var map__20580__$1 = cljs.core.seq_QMARK_(map__20580) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__20580) : map__20580;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20580__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20580__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq20575) {
  var G__20576 = cljs.core.first(seq20575);
  var seq20575__$1 = cljs.core.next(seq20575);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__20576, seq20575__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__20584 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__20584) : validate.call(null, G__20584);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__20585 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__20585) : cljs.core.pr_str.call(null, G__20585);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_() {
  var G__20592 = arguments.length;
  switch(G__20592) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5358__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__20593 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20593) : f.call(null, G__20593);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__20594 = a.state;
      var G__20595 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20594, G__20595) : f.call(null, G__20594, G__20595);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__20596 = a.state;
      var G__20597 = x;
      var G__20598 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20596, G__20597, G__20598) : f.call(null, G__20596, G__20597, G__20598);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq20586) {
  var G__20587 = cljs.core.first(seq20586);
  var seq20586__$1 = cljs.core.next(seq20586);
  var G__20588 = cljs.core.first(seq20586__$1);
  var seq20586__$2 = cljs.core.next(seq20586__$1);
  var G__20589 = cljs.core.first(seq20586__$2);
  var seq20586__$3 = cljs.core.next(seq20586__$2);
  var G__20590 = cljs.core.first(seq20586__$3);
  var seq20586__$4 = cljs.core.next(seq20586__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__20587, G__20588, G__20589, G__20590, seq20586__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null)], null);
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed() {
  var G__20601 = arguments.length;
  switch(G__20601) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__20636 = null;
        var G__20636__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__20636__1 = function(result) {
          var G__20602 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20602) : rf.call(null, G__20602);
        };
        var G__20636__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = function() {
            var G__20603 = i;
            var G__20604 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20603, G__20604) : f.call(null, G__20603, G__20604);
          }();
          if (v == null) {
            return result;
          } else {
            var G__20605 = result;
            var G__20606 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20605, G__20606) : rf.call(null, G__20605, G__20606);
          }
        };
        G__20636 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__20636__0.call(this);
            case 1:
              return G__20636__1.call(this, result);
            case 2:
              return G__20636__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__20636.cljs$core$IFn$_invoke$arity$0 = G__20636__0;
        G__20636.cljs$core$IFn$_invoke$arity$1 = G__20636__1;
        G__20636.cljs$core$IFn$_invoke$arity$2 = G__20636__2;
        return G__20636;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4423__auto__ = cljs.core.seq(coll__$1);
      if (temp__4423__auto__) {
        var s = temp__4423__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5192__auto___20637 = size;
          var i_20638 = 0;
          while (true) {
            if (i_20638 < n__5192__auto___20637) {
              var x_20639 = function() {
                var G__20631 = idx + i_20638;
                var G__20632 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_20638);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20631, G__20632) : f.call(null, G__20631, G__20632);
              }();
              if (x_20639 == null) {
              } else {
                cljs.core.chunk_append(b, x_20639);
              }
              var G__20640 = i_20638 + 1;
              i_20638 = G__20640;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__20633 = idx;
            var G__20634 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20633, G__20634) : f.call(null, G__20633, G__20634);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred() {
  var G__20652 = arguments.length;
  switch(G__20652) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5358__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(function() {
        var G__20668 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20668) : p.call(null, G__20668);
      }());
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4295__auto__ = function() {
          var G__20670 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20670) : p.call(null, G__20670);
        }();
        if (cljs.core.truth_(and__4295__auto__)) {
          var G__20671 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20671) : p.call(null, G__20671);
        } else {
          return and__4295__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4295__auto__ = function() {
          var G__20673 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20673) : p.call(null, G__20673);
        }();
        if (cljs.core.truth_(and__4295__auto__)) {
          var and__4295__auto____$1 = function() {
            var G__20675 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20675) : p.call(null, G__20675);
          }();
          if (cljs.core.truth_(and__4295__auto____$1)) {
            var G__20676 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20676) : p.call(null, G__20676);
          } else {
            return and__4295__auto____$1;
          }
        } else {
          return and__4295__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__20838__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4295__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4295__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__4295__auto__;
          }
        }());
      };
      var G__20838 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20839__i = 0, G__20839__a = new Array(arguments.length - 3);
          while (G__20839__i < G__20839__a.length) {
            G__20839__a[G__20839__i] = arguments[G__20839__i + 3];
            ++G__20839__i;
          }
          args = new cljs.core.IndexedSeq(G__20839__a, 0);
        }
        return G__20838__delegate.call(this, x, y, z, args);
      };
      G__20838.cljs$lang$maxFixedArity = 3;
      G__20838.cljs$lang$applyTo = function(arglist__20840) {
        var x = cljs.core.first(arglist__20840);
        arglist__20840 = cljs.core.next(arglist__20840);
        var y = cljs.core.first(arglist__20840);
        arglist__20840 = cljs.core.next(arglist__20840);
        var z = cljs.core.first(arglist__20840);
        var args = cljs.core.rest(arglist__20840);
        return G__20838__delegate(x, y, z, args);
      };
      G__20838.cljs$core$IFn$_invoke$arity$variadic = G__20838__delegate;
      return G__20838;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__20841 = null;
          if (arguments.length > 3) {
            var G__20842__i = 0, G__20842__a = new Array(arguments.length - 3);
            while (G__20842__i < G__20842__a.length) {
              G__20842__a[G__20842__i] = arguments[G__20842__i + 3];
              ++G__20842__i;
            }
            G__20841 = new cljs.core.IndexedSeq(G__20842__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20841);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4295__auto__ = function() {
          var G__20708 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20708) : p1.call(null, G__20708);
        }();
        if (cljs.core.truth_(and__4295__auto__)) {
          var G__20709 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20709) : p2.call(null, G__20709);
        } else {
          return and__4295__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4295__auto__ = function() {
          var G__20711 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20711) : p1.call(null, G__20711);
        }();
        if (cljs.core.truth_(and__4295__auto__)) {
          var and__4295__auto____$1 = function() {
            var G__20713 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20713) : p1.call(null, G__20713);
          }();
          if (cljs.core.truth_(and__4295__auto____$1)) {
            var and__4295__auto____$2 = function() {
              var G__20715 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20715) : p2.call(null, G__20715);
            }();
            if (cljs.core.truth_(and__4295__auto____$2)) {
              var G__20716 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20716) : p2.call(null, G__20716);
            } else {
              return and__4295__auto____$2;
            }
          } else {
            return and__4295__auto____$1;
          }
        } else {
          return and__4295__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4295__auto__ = function() {
          var G__20718 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20718) : p1.call(null, G__20718);
        }();
        if (cljs.core.truth_(and__4295__auto__)) {
          var and__4295__auto____$1 = function() {
            var G__20720 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20720) : p1.call(null, G__20720);
          }();
          if (cljs.core.truth_(and__4295__auto____$1)) {
            var and__4295__auto____$2 = function() {
              var G__20722 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20722) : p1.call(null, G__20722);
            }();
            if (cljs.core.truth_(and__4295__auto____$2)) {
              var and__4295__auto____$3 = function() {
                var G__20724 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20724) : p2.call(null, G__20724);
              }();
              if (cljs.core.truth_(and__4295__auto____$3)) {
                var and__4295__auto____$4 = function() {
                  var G__20726 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20726) : p2.call(null, G__20726);
                }();
                if (cljs.core.truth_(and__4295__auto____$4)) {
                  var G__20727 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20727) : p2.call(null, G__20727);
                } else {
                  return and__4295__auto____$4;
                }
              } else {
                return and__4295__auto____$3;
              }
            } else {
              return and__4295__auto____$2;
            }
          } else {
            return and__4295__auto____$1;
          }
        } else {
          return and__4295__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__20843__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4295__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4295__auto__)) {
            return cljs.core.every_QMARK_(function(and__4295__auto__) {
              return function(p1__20641_SHARP_) {
                var and__4295__auto____$1 = function() {
                  var G__20729 = p1__20641_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20729) : p1.call(null, G__20729);
                }();
                if (cljs.core.truth_(and__4295__auto____$1)) {
                  var G__20730 = p1__20641_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20730) : p2.call(null, G__20730);
                } else {
                  return and__4295__auto____$1;
                }
              };
            }(and__4295__auto__), args);
          } else {
            return and__4295__auto__;
          }
        }());
      };
      var G__20843 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20844__i = 0, G__20844__a = new Array(arguments.length - 3);
          while (G__20844__i < G__20844__a.length) {
            G__20844__a[G__20844__i] = arguments[G__20844__i + 3];
            ++G__20844__i;
          }
          args = new cljs.core.IndexedSeq(G__20844__a, 0);
        }
        return G__20843__delegate.call(this, x, y, z, args);
      };
      G__20843.cljs$lang$maxFixedArity = 3;
      G__20843.cljs$lang$applyTo = function(arglist__20845) {
        var x = cljs.core.first(arglist__20845);
        arglist__20845 = cljs.core.next(arglist__20845);
        var y = cljs.core.first(arglist__20845);
        arglist__20845 = cljs.core.next(arglist__20845);
        var z = cljs.core.first(arglist__20845);
        var args = cljs.core.rest(arglist__20845);
        return G__20843__delegate(x, y, z, args);
      };
      G__20843.cljs$core$IFn$_invoke$arity$variadic = G__20843__delegate;
      return G__20843;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__20846 = null;
          if (arguments.length > 3) {
            var G__20847__i = 0, G__20847__a = new Array(arguments.length - 3);
            while (G__20847__i < G__20847__a.length) {
              G__20847__a[G__20847__i] = arguments[G__20847__i + 3];
              ++G__20847__i;
            }
            G__20846 = new cljs.core.IndexedSeq(G__20847__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20846);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4295__auto__ = function() {
          var G__20776 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20776) : p1.call(null, G__20776);
        }();
        if (cljs.core.truth_(and__4295__auto__)) {
          var and__4295__auto____$1 = function() {
            var G__20778 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20778) : p2.call(null, G__20778);
          }();
          if (cljs.core.truth_(and__4295__auto____$1)) {
            var G__20779 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20779) : p3.call(null, G__20779);
          } else {
            return and__4295__auto____$1;
          }
        } else {
          return and__4295__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4295__auto__ = function() {
          var G__20781 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20781) : p1.call(null, G__20781);
        }();
        if (cljs.core.truth_(and__4295__auto__)) {
          var and__4295__auto____$1 = function() {
            var G__20783 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20783) : p2.call(null, G__20783);
          }();
          if (cljs.core.truth_(and__4295__auto____$1)) {
            var and__4295__auto____$2 = function() {
              var G__20785 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20785) : p3.call(null, G__20785);
            }();
            if (cljs.core.truth_(and__4295__auto____$2)) {
              var and__4295__auto____$3 = function() {
                var G__20787 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20787) : p1.call(null, G__20787);
              }();
              if (cljs.core.truth_(and__4295__auto____$3)) {
                var and__4295__auto____$4 = function() {
                  var G__20789 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20789) : p2.call(null, G__20789);
                }();
                if (cljs.core.truth_(and__4295__auto____$4)) {
                  var G__20790 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20790) : p3.call(null, G__20790);
                } else {
                  return and__4295__auto____$4;
                }
              } else {
                return and__4295__auto____$3;
              }
            } else {
              return and__4295__auto____$2;
            }
          } else {
            return and__4295__auto____$1;
          }
        } else {
          return and__4295__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4295__auto__ = function() {
          var G__20792 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20792) : p1.call(null, G__20792);
        }();
        if (cljs.core.truth_(and__4295__auto__)) {
          var and__4295__auto____$1 = function() {
            var G__20794 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20794) : p2.call(null, G__20794);
          }();
          if (cljs.core.truth_(and__4295__auto____$1)) {
            var and__4295__auto____$2 = function() {
              var G__20796 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20796) : p3.call(null, G__20796);
            }();
            if (cljs.core.truth_(and__4295__auto____$2)) {
              var and__4295__auto____$3 = function() {
                var G__20798 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20798) : p1.call(null, G__20798);
              }();
              if (cljs.core.truth_(and__4295__auto____$3)) {
                var and__4295__auto____$4 = function() {
                  var G__20800 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20800) : p2.call(null, G__20800);
                }();
                if (cljs.core.truth_(and__4295__auto____$4)) {
                  var and__4295__auto____$5 = function() {
                    var G__20802 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20802) : p3.call(null, G__20802);
                  }();
                  if (cljs.core.truth_(and__4295__auto____$5)) {
                    var and__4295__auto____$6 = function() {
                      var G__20804 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20804) : p1.call(null, G__20804);
                    }();
                    if (cljs.core.truth_(and__4295__auto____$6)) {
                      var and__4295__auto____$7 = function() {
                        var G__20806 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20806) : p2.call(null, G__20806);
                      }();
                      if (cljs.core.truth_(and__4295__auto____$7)) {
                        var G__20807 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20807) : p3.call(null, G__20807);
                      } else {
                        return and__4295__auto____$7;
                      }
                    } else {
                      return and__4295__auto____$6;
                    }
                  } else {
                    return and__4295__auto____$5;
                  }
                } else {
                  return and__4295__auto____$4;
                }
              } else {
                return and__4295__auto____$3;
              }
            } else {
              return and__4295__auto____$2;
            }
          } else {
            return and__4295__auto____$1;
          }
        } else {
          return and__4295__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__20848__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4295__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4295__auto__)) {
            return cljs.core.every_QMARK_(function(and__4295__auto__) {
              return function(p1__20642_SHARP_) {
                var and__4295__auto____$1 = function() {
                  var G__20809 = p1__20642_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20809) : p1.call(null, G__20809);
                }();
                if (cljs.core.truth_(and__4295__auto____$1)) {
                  var and__4295__auto____$2 = function() {
                    var G__20811 = p1__20642_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20811) : p2.call(null, G__20811);
                  }();
                  if (cljs.core.truth_(and__4295__auto____$2)) {
                    var G__20812 = p1__20642_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20812) : p3.call(null, G__20812);
                  } else {
                    return and__4295__auto____$2;
                  }
                } else {
                  return and__4295__auto____$1;
                }
              };
            }(and__4295__auto__), args);
          } else {
            return and__4295__auto__;
          }
        }());
      };
      var G__20848 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20849__i = 0, G__20849__a = new Array(arguments.length - 3);
          while (G__20849__i < G__20849__a.length) {
            G__20849__a[G__20849__i] = arguments[G__20849__i + 3];
            ++G__20849__i;
          }
          args = new cljs.core.IndexedSeq(G__20849__a, 0);
        }
        return G__20848__delegate.call(this, x, y, z, args);
      };
      G__20848.cljs$lang$maxFixedArity = 3;
      G__20848.cljs$lang$applyTo = function(arglist__20850) {
        var x = cljs.core.first(arglist__20850);
        arglist__20850 = cljs.core.next(arglist__20850);
        var y = cljs.core.first(arglist__20850);
        arglist__20850 = cljs.core.next(arglist__20850);
        var z = cljs.core.first(arglist__20850);
        var args = cljs.core.rest(arglist__20850);
        return G__20848__delegate(x, y, z, args);
      };
      G__20848.cljs$core$IFn$_invoke$arity$variadic = G__20848__delegate;
      return G__20848;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__20851 = null;
          if (arguments.length > 3) {
            var G__20852__i = 0, G__20852__a = new Array(arguments.length - 3);
            while (G__20852__i < G__20852__a.length) {
              G__20852__a[G__20852__i] = arguments[G__20852__i + 3];
              ++G__20852__i;
            }
            G__20851 = new cljs.core.IndexedSeq(G__20852__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20851);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__20643_SHARP_) {
            var G__20828 = x;
            return p1__20643_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20643_SHARP_.cljs$core$IFn$_invoke$arity$1(G__20828) : p1__20643_SHARP_.call(null, G__20828);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__20644_SHARP_) {
            var and__4295__auto__ = function() {
              var G__20830 = x;
              return p1__20644_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20644_SHARP_.cljs$core$IFn$_invoke$arity$1(G__20830) : p1__20644_SHARP_.call(null, G__20830);
            }();
            if (cljs.core.truth_(and__4295__auto__)) {
              var G__20831 = y;
              return p1__20644_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20644_SHARP_.cljs$core$IFn$_invoke$arity$1(G__20831) : p1__20644_SHARP_.call(null, G__20831);
            } else {
              return and__4295__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__20645_SHARP_) {
            var and__4295__auto__ = function() {
              var G__20833 = x;
              return p1__20645_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20645_SHARP_.cljs$core$IFn$_invoke$arity$1(G__20833) : p1__20645_SHARP_.call(null, G__20833);
            }();
            if (cljs.core.truth_(and__4295__auto__)) {
              var and__4295__auto____$1 = function() {
                var G__20835 = y;
                return p1__20645_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20645_SHARP_.cljs$core$IFn$_invoke$arity$1(G__20835) : p1__20645_SHARP_.call(null, G__20835);
              }();
              if (cljs.core.truth_(and__4295__auto____$1)) {
                var G__20836 = z;
                return p1__20645_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20645_SHARP_.cljs$core$IFn$_invoke$arity$1(G__20836) : p1__20645_SHARP_.call(null, G__20836);
              } else {
                return and__4295__auto____$1;
              }
            } else {
              return and__4295__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__20853__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__4295__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__4295__auto__)) {
              return cljs.core.every_QMARK_(function(and__4295__auto__, ps__$1) {
                return function(p1__20646_SHARP_) {
                  return cljs.core.every_QMARK_(p1__20646_SHARP_, args);
                };
              }(and__4295__auto__, ps__$1), ps__$1);
            } else {
              return and__4295__auto__;
            }
          }());
        };
        var G__20853 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__20854__i = 0, G__20854__a = new Array(arguments.length - 3);
            while (G__20854__i < G__20854__a.length) {
              G__20854__a[G__20854__i] = arguments[G__20854__i + 3];
              ++G__20854__i;
            }
            args = new cljs.core.IndexedSeq(G__20854__a, 0);
          }
          return G__20853__delegate.call(this, x, y, z, args);
        };
        G__20853.cljs$lang$maxFixedArity = 3;
        G__20853.cljs$lang$applyTo = function(arglist__20855) {
          var x = cljs.core.first(arglist__20855);
          arglist__20855 = cljs.core.next(arglist__20855);
          var y = cljs.core.first(arglist__20855);
          arglist__20855 = cljs.core.next(arglist__20855);
          var z = cljs.core.first(arglist__20855);
          var args = cljs.core.rest(arglist__20855);
          return G__20853__delegate(x, y, z, args);
        };
        G__20853.cljs$core$IFn$_invoke$arity$variadic = G__20853__delegate;
        return G__20853;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__20856 = null;
            if (arguments.length > 3) {
              var G__20857__i = 0, G__20857__a = new Array(arguments.length - 3);
              while (G__20857__i < G__20857__a.length) {
                G__20857__a[G__20857__i] = arguments[G__20857__i + 3];
                ++G__20857__i;
              }
              G__20856 = new cljs.core.IndexedSeq(G__20857__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20856);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq20647) {
  var G__20648 = cljs.core.first(seq20647);
  var seq20647__$1 = cljs.core.next(seq20647);
  var G__20649 = cljs.core.first(seq20647__$1);
  var seq20647__$2 = cljs.core.next(seq20647__$1);
  var G__20650 = cljs.core.first(seq20647__$2);
  var seq20647__$3 = cljs.core.next(seq20647__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__20648, G__20649, G__20650, seq20647__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn() {
  var G__20869 = arguments.length;
  switch(G__20869) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5358__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      var G__20885 = x;
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20885) : p.call(null, G__20885);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__4307__auto__ = function() {
        var G__20887 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20887) : p.call(null, G__20887);
      }();
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        var G__20888 = y;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20888) : p.call(null, G__20888);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__4307__auto__ = function() {
        var G__20890 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20890) : p.call(null, G__20890);
      }();
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = function() {
          var G__20892 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20892) : p.call(null, G__20892);
        }();
        if (cljs.core.truth_(or__4307__auto____$1)) {
          return or__4307__auto____$1;
        } else {
          var G__20893 = z;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20893) : p.call(null, G__20893);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__21055__delegate = function(x, y, z, args) {
        var or__4307__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__21055 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__21056__i = 0, G__21056__a = new Array(arguments.length - 3);
          while (G__21056__i < G__21056__a.length) {
            G__21056__a[G__21056__i] = arguments[G__21056__i + 3];
            ++G__21056__i;
          }
          args = new cljs.core.IndexedSeq(G__21056__a, 0);
        }
        return G__21055__delegate.call(this, x, y, z, args);
      };
      G__21055.cljs$lang$maxFixedArity = 3;
      G__21055.cljs$lang$applyTo = function(arglist__21057) {
        var x = cljs.core.first(arglist__21057);
        arglist__21057 = cljs.core.next(arglist__21057);
        var y = cljs.core.first(arglist__21057);
        arglist__21057 = cljs.core.next(arglist__21057);
        var z = cljs.core.first(arglist__21057);
        var args = cljs.core.rest(arglist__21057);
        return G__21055__delegate(x, y, z, args);
      };
      G__21055.cljs$core$IFn$_invoke$arity$variadic = G__21055__delegate;
      return G__21055;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__21058 = null;
          if (arguments.length > 3) {
            var G__21059__i = 0, G__21059__a = new Array(arguments.length - 3);
            while (G__21059__i < G__21059__a.length) {
              G__21059__a[G__21059__i] = arguments[G__21059__i + 3];
              ++G__21059__i;
            }
            G__21058 = new cljs.core.IndexedSeq(G__21059__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21058);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__4307__auto__ = function() {
        var G__20925 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20925) : p1.call(null, G__20925);
      }();
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        var G__20926 = x;
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20926) : p2.call(null, G__20926);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__4307__auto__ = function() {
        var G__20928 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20928) : p1.call(null, G__20928);
      }();
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = function() {
          var G__20930 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20930) : p1.call(null, G__20930);
        }();
        if (cljs.core.truth_(or__4307__auto____$1)) {
          return or__4307__auto____$1;
        } else {
          var or__4307__auto____$2 = function() {
            var G__20932 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20932) : p2.call(null, G__20932);
          }();
          if (cljs.core.truth_(or__4307__auto____$2)) {
            return or__4307__auto____$2;
          } else {
            var G__20933 = y;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20933) : p2.call(null, G__20933);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__4307__auto__ = function() {
        var G__20935 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20935) : p1.call(null, G__20935);
      }();
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = function() {
          var G__20937 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20937) : p1.call(null, G__20937);
        }();
        if (cljs.core.truth_(or__4307__auto____$1)) {
          return or__4307__auto____$1;
        } else {
          var or__4307__auto____$2 = function() {
            var G__20939 = z;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20939) : p1.call(null, G__20939);
          }();
          if (cljs.core.truth_(or__4307__auto____$2)) {
            return or__4307__auto____$2;
          } else {
            var or__4307__auto____$3 = function() {
              var G__20941 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20941) : p2.call(null, G__20941);
            }();
            if (cljs.core.truth_(or__4307__auto____$3)) {
              return or__4307__auto____$3;
            } else {
              var or__4307__auto____$4 = function() {
                var G__20943 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20943) : p2.call(null, G__20943);
              }();
              if (cljs.core.truth_(or__4307__auto____$4)) {
                return or__4307__auto____$4;
              } else {
                var G__20944 = z;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20944) : p2.call(null, G__20944);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__21060__delegate = function(x, y, z, args) {
        var or__4307__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return cljs.core.some(function(or__4307__auto__) {
            return function(p1__20858_SHARP_) {
              var or__4307__auto____$1 = function() {
                var G__20946 = p1__20858_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20946) : p1.call(null, G__20946);
              }();
              if (cljs.core.truth_(or__4307__auto____$1)) {
                return or__4307__auto____$1;
              } else {
                var G__20947 = p1__20858_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20947) : p2.call(null, G__20947);
              }
            };
          }(or__4307__auto__), args);
        }
      };
      var G__21060 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__21061__i = 0, G__21061__a = new Array(arguments.length - 3);
          while (G__21061__i < G__21061__a.length) {
            G__21061__a[G__21061__i] = arguments[G__21061__i + 3];
            ++G__21061__i;
          }
          args = new cljs.core.IndexedSeq(G__21061__a, 0);
        }
        return G__21060__delegate.call(this, x, y, z, args);
      };
      G__21060.cljs$lang$maxFixedArity = 3;
      G__21060.cljs$lang$applyTo = function(arglist__21062) {
        var x = cljs.core.first(arglist__21062);
        arglist__21062 = cljs.core.next(arglist__21062);
        var y = cljs.core.first(arglist__21062);
        arglist__21062 = cljs.core.next(arglist__21062);
        var z = cljs.core.first(arglist__21062);
        var args = cljs.core.rest(arglist__21062);
        return G__21060__delegate(x, y, z, args);
      };
      G__21060.cljs$core$IFn$_invoke$arity$variadic = G__21060__delegate;
      return G__21060;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__21063 = null;
          if (arguments.length > 3) {
            var G__21064__i = 0, G__21064__a = new Array(arguments.length - 3);
            while (G__21064__i < G__21064__a.length) {
              G__21064__a[G__21064__i] = arguments[G__21064__i + 3];
              ++G__21064__i;
            }
            G__21063 = new cljs.core.IndexedSeq(G__21064__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21063);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__4307__auto__ = function() {
        var G__20993 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20993) : p1.call(null, G__20993);
      }();
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = function() {
          var G__20995 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20995) : p2.call(null, G__20995);
        }();
        if (cljs.core.truth_(or__4307__auto____$1)) {
          return or__4307__auto____$1;
        } else {
          var G__20996 = x;
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20996) : p3.call(null, G__20996);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__4307__auto__ = function() {
        var G__20998 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20998) : p1.call(null, G__20998);
      }();
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = function() {
          var G__21000 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__21000) : p2.call(null, G__21000);
        }();
        if (cljs.core.truth_(or__4307__auto____$1)) {
          return or__4307__auto____$1;
        } else {
          var or__4307__auto____$2 = function() {
            var G__21002 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__21002) : p3.call(null, G__21002);
          }();
          if (cljs.core.truth_(or__4307__auto____$2)) {
            return or__4307__auto____$2;
          } else {
            var or__4307__auto____$3 = function() {
              var G__21004 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__21004) : p1.call(null, G__21004);
            }();
            if (cljs.core.truth_(or__4307__auto____$3)) {
              return or__4307__auto____$3;
            } else {
              var or__4307__auto____$4 = function() {
                var G__21006 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__21006) : p2.call(null, G__21006);
              }();
              if (cljs.core.truth_(or__4307__auto____$4)) {
                return or__4307__auto____$4;
              } else {
                var G__21007 = y;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__21007) : p3.call(null, G__21007);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__4307__auto__ = function() {
        var G__21009 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__21009) : p1.call(null, G__21009);
      }();
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = function() {
          var G__21011 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__21011) : p2.call(null, G__21011);
        }();
        if (cljs.core.truth_(or__4307__auto____$1)) {
          return or__4307__auto____$1;
        } else {
          var or__4307__auto____$2 = function() {
            var G__21013 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__21013) : p3.call(null, G__21013);
          }();
          if (cljs.core.truth_(or__4307__auto____$2)) {
            return or__4307__auto____$2;
          } else {
            var or__4307__auto____$3 = function() {
              var G__21015 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__21015) : p1.call(null, G__21015);
            }();
            if (cljs.core.truth_(or__4307__auto____$3)) {
              return or__4307__auto____$3;
            } else {
              var or__4307__auto____$4 = function() {
                var G__21017 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__21017) : p2.call(null, G__21017);
              }();
              if (cljs.core.truth_(or__4307__auto____$4)) {
                return or__4307__auto____$4;
              } else {
                var or__4307__auto____$5 = function() {
                  var G__21019 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__21019) : p3.call(null, G__21019);
                }();
                if (cljs.core.truth_(or__4307__auto____$5)) {
                  return or__4307__auto____$5;
                } else {
                  var or__4307__auto____$6 = function() {
                    var G__21021 = z;
                    return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__21021) : p1.call(null, G__21021);
                  }();
                  if (cljs.core.truth_(or__4307__auto____$6)) {
                    return or__4307__auto____$6;
                  } else {
                    var or__4307__auto____$7 = function() {
                      var G__21023 = z;
                      return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__21023) : p2.call(null, G__21023);
                    }();
                    if (cljs.core.truth_(or__4307__auto____$7)) {
                      return or__4307__auto____$7;
                    } else {
                      var G__21024 = z;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__21024) : p3.call(null, G__21024);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__21065__delegate = function(x, y, z, args) {
        var or__4307__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return cljs.core.some(function(or__4307__auto__) {
            return function(p1__20859_SHARP_) {
              var or__4307__auto____$1 = function() {
                var G__21026 = p1__20859_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__21026) : p1.call(null, G__21026);
              }();
              if (cljs.core.truth_(or__4307__auto____$1)) {
                return or__4307__auto____$1;
              } else {
                var or__4307__auto____$2 = function() {
                  var G__21028 = p1__20859_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__21028) : p2.call(null, G__21028);
                }();
                if (cljs.core.truth_(or__4307__auto____$2)) {
                  return or__4307__auto____$2;
                } else {
                  var G__21029 = p1__20859_SHARP_;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__21029) : p3.call(null, G__21029);
                }
              }
            };
          }(or__4307__auto__), args);
        }
      };
      var G__21065 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__21066__i = 0, G__21066__a = new Array(arguments.length - 3);
          while (G__21066__i < G__21066__a.length) {
            G__21066__a[G__21066__i] = arguments[G__21066__i + 3];
            ++G__21066__i;
          }
          args = new cljs.core.IndexedSeq(G__21066__a, 0);
        }
        return G__21065__delegate.call(this, x, y, z, args);
      };
      G__21065.cljs$lang$maxFixedArity = 3;
      G__21065.cljs$lang$applyTo = function(arglist__21067) {
        var x = cljs.core.first(arglist__21067);
        arglist__21067 = cljs.core.next(arglist__21067);
        var y = cljs.core.first(arglist__21067);
        arglist__21067 = cljs.core.next(arglist__21067);
        var z = cljs.core.first(arglist__21067);
        var args = cljs.core.rest(arglist__21067);
        return G__21065__delegate(x, y, z, args);
      };
      G__21065.cljs$core$IFn$_invoke$arity$variadic = G__21065__delegate;
      return G__21065;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__21068 = null;
          if (arguments.length > 3) {
            var G__21069__i = 0, G__21069__a = new Array(arguments.length - 3);
            while (G__21069__i < G__21069__a.length) {
              G__21069__a[G__21069__i] = arguments[G__21069__i + 3];
              ++G__21069__i;
            }
            G__21068 = new cljs.core.IndexedSeq(G__21069__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21068);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__20860_SHARP_) {
            var G__21045 = x;
            return p1__20860_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20860_SHARP_.cljs$core$IFn$_invoke$arity$1(G__21045) : p1__20860_SHARP_.call(null, G__21045);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__20861_SHARP_) {
            var or__4307__auto__ = function() {
              var G__21047 = x;
              return p1__20861_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20861_SHARP_.cljs$core$IFn$_invoke$arity$1(G__21047) : p1__20861_SHARP_.call(null, G__21047);
            }();
            if (cljs.core.truth_(or__4307__auto__)) {
              return or__4307__auto__;
            } else {
              var G__21048 = y;
              return p1__20861_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20861_SHARP_.cljs$core$IFn$_invoke$arity$1(G__21048) : p1__20861_SHARP_.call(null, G__21048);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__20862_SHARP_) {
            var or__4307__auto__ = function() {
              var G__21050 = x;
              return p1__20862_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20862_SHARP_.cljs$core$IFn$_invoke$arity$1(G__21050) : p1__20862_SHARP_.call(null, G__21050);
            }();
            if (cljs.core.truth_(or__4307__auto__)) {
              return or__4307__auto__;
            } else {
              var or__4307__auto____$1 = function() {
                var G__21052 = y;
                return p1__20862_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20862_SHARP_.cljs$core$IFn$_invoke$arity$1(G__21052) : p1__20862_SHARP_.call(null, G__21052);
              }();
              if (cljs.core.truth_(or__4307__auto____$1)) {
                return or__4307__auto____$1;
              } else {
                var G__21053 = z;
                return p1__20862_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20862_SHARP_.cljs$core$IFn$_invoke$arity$1(G__21053) : p1__20862_SHARP_.call(null, G__21053);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__21070__delegate = function(x, y, z, args) {
          var or__4307__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4307__auto__)) {
            return or__4307__auto__;
          } else {
            return cljs.core.some(function(or__4307__auto__, ps__$1) {
              return function(p1__20863_SHARP_) {
                return cljs.core.some(p1__20863_SHARP_, args);
              };
            }(or__4307__auto__, ps__$1), ps__$1);
          }
        };
        var G__21070 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__21071__i = 0, G__21071__a = new Array(arguments.length - 3);
            while (G__21071__i < G__21071__a.length) {
              G__21071__a[G__21071__i] = arguments[G__21071__i + 3];
              ++G__21071__i;
            }
            args = new cljs.core.IndexedSeq(G__21071__a, 0);
          }
          return G__21070__delegate.call(this, x, y, z, args);
        };
        G__21070.cljs$lang$maxFixedArity = 3;
        G__21070.cljs$lang$applyTo = function(arglist__21072) {
          var x = cljs.core.first(arglist__21072);
          arglist__21072 = cljs.core.next(arglist__21072);
          var y = cljs.core.first(arglist__21072);
          arglist__21072 = cljs.core.next(arglist__21072);
          var z = cljs.core.first(arglist__21072);
          var args = cljs.core.rest(arglist__21072);
          return G__21070__delegate(x, y, z, args);
        };
        G__21070.cljs$core$IFn$_invoke$arity$variadic = G__21070__delegate;
        return G__21070;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__21073 = null;
            if (arguments.length > 3) {
              var G__21074__i = 0, G__21074__a = new Array(arguments.length - 3);
              while (G__21074__i < G__21074__a.length) {
                G__21074__a[G__21074__i] = arguments[G__21074__i + 3];
                ++G__21074__i;
              }
              G__21073 = new cljs.core.IndexedSeq(G__21074__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21073);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq20864) {
  var G__20865 = cljs.core.first(seq20864);
  var seq20864__$1 = cljs.core.next(seq20864);
  var G__20866 = cljs.core.first(seq20864__$1);
  var seq20864__$2 = cljs.core.next(seq20864__$1);
  var G__20867 = cljs.core.first(seq20864__$2);
  var seq20864__$3 = cljs.core.next(seq20864__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__20865, G__20866, G__20867, seq20864__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map() {
  var G__21082 = arguments.length;
  switch(G__21082) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5358__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__21098 = null;
      var G__21098__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__21098__1 = function(result) {
        var G__21083 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21083) : rf.call(null, G__21083);
      };
      var G__21098__2 = function(result, input) {
        var G__21084 = result;
        var G__21085 = function() {
          var G__21086 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21086) : f.call(null, G__21086);
        }();
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21084, G__21085) : rf.call(null, G__21084, G__21085);
      };
      var G__21098__3 = function() {
        var G__21099__delegate = function(result, input, inputs) {
          var G__21087 = result;
          var G__21088 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21087, G__21088) : rf.call(null, G__21087, G__21088);
        };
        var G__21099 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__21100__i = 0, G__21100__a = new Array(arguments.length - 2);
            while (G__21100__i < G__21100__a.length) {
              G__21100__a[G__21100__i] = arguments[G__21100__i + 2];
              ++G__21100__i;
            }
            inputs = new cljs.core.IndexedSeq(G__21100__a, 0);
          }
          return G__21099__delegate.call(this, result, input, inputs);
        };
        G__21099.cljs$lang$maxFixedArity = 2;
        G__21099.cljs$lang$applyTo = function(arglist__21101) {
          var result = cljs.core.first(arglist__21101);
          arglist__21101 = cljs.core.next(arglist__21101);
          var input = cljs.core.first(arglist__21101);
          var inputs = cljs.core.rest(arglist__21101);
          return G__21099__delegate(result, input, inputs);
        };
        G__21099.cljs$core$IFn$_invoke$arity$variadic = G__21099__delegate;
        return G__21099;
      }();
      G__21098 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__21098__0.call(this);
          case 1:
            return G__21098__1.call(this, result);
          case 2:
            return G__21098__2.call(this, result, input);
          default:
            var G__21102 = null;
            if (arguments.length > 2) {
              var G__21103__i = 0, G__21103__a = new Array(arguments.length - 2);
              while (G__21103__i < G__21103__a.length) {
                G__21103__a[G__21103__i] = arguments[G__21103__i + 2];
                ++G__21103__i;
              }
              G__21102 = new cljs.core.IndexedSeq(G__21103__a, 0);
            }
            return G__21098__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__21102);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21098.cljs$lang$maxFixedArity = 2;
      G__21098.cljs$lang$applyTo = G__21098__3.cljs$lang$applyTo;
      G__21098.cljs$core$IFn$_invoke$arity$0 = G__21098__0;
      G__21098.cljs$core$IFn$_invoke$arity$1 = G__21098__1;
      G__21098.cljs$core$IFn$_invoke$arity$2 = G__21098__2;
      G__21098.cljs$core$IFn$_invoke$arity$variadic = G__21098__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__21098;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5192__auto___21104 = size;
        var i_21105 = 0;
        while (true) {
          if (i_21105 < n__5192__auto___21104) {
            cljs.core.chunk_append(b, function() {
              var G__21089 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_21105);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21089) : f.call(null, G__21089);
            }());
            var G__21106 = i_21105 + 1;
            i_21105 = G__21106;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__21090 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21090) : f.call(null, G__21090);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__21091 = cljs.core.first(s1);
        var G__21092 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21091, G__21092) : f.call(null, G__21091, G__21092);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__21093 = cljs.core.first(s1);
        var G__21094 = cljs.core.first(s2);
        var G__21095 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21093, G__21094, G__21095) : f.call(null, G__21093, G__21094, G__21095);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__21075_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__21075_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq21076) {
  var G__21077 = cljs.core.first(seq21076);
  var seq21076__$1 = cljs.core.next(seq21076);
  var G__21078 = cljs.core.first(seq21076__$1);
  var seq21076__$2 = cljs.core.next(seq21076__$1);
  var G__21079 = cljs.core.first(seq21076__$2);
  var seq21076__$3 = cljs.core.next(seq21076__$2);
  var G__21080 = cljs.core.first(seq21076__$3);
  var seq21076__$4 = cljs.core.next(seq21076__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__21077, G__21078, G__21079, G__21080, seq21076__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take() {
  var G__21108 = arguments.length;
  switch(G__21108) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__21113 = null;
        var G__21113__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21113__1 = function(result) {
          var G__21109 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21109) : rf.call(null, G__21109);
        };
        var G__21113__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? function() {
            var G__21110 = result;
            var G__21111 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21110, G__21111) : rf.call(null, G__21110, G__21111);
          }() : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__21113 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21113__0.call(this);
            case 1:
              return G__21113__1.call(this, result);
            case 2:
              return G__21113__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21113.cljs$core$IFn$_invoke$arity$0 = G__21113__0;
        G__21113.cljs$core$IFn$_invoke$arity$1 = G__21113__1;
        G__21113.cljs$core$IFn$_invoke$arity$2 = G__21113__2;
        return G__21113;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4423__auto__ = cljs.core.seq(coll);
      if (temp__4423__auto__) {
        var s = temp__4423__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop() {
  var G__21115 = arguments.length;
  switch(G__21115) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__21120 = null;
        var G__21120__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21120__1 = function(result) {
          var G__21116 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21116) : rf.call(null, G__21116);
        };
        var G__21120__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            var G__21117 = result;
            var G__21118 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21117, G__21118) : rf.call(null, G__21117, G__21118);
          }
        };
        G__21120 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21120__0.call(this);
            case 1:
              return G__21120__1.call(this, result);
            case 2:
              return G__21120__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21120.cljs$core$IFn$_invoke$arity$0 = G__21120__0;
        G__21120.cljs$core$IFn$_invoke$arity$1 = G__21120__1;
        G__21120.cljs$core$IFn$_invoke$arity$2 = G__21120__2;
        return G__21120;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__21121 = n__$1 - 1;
        var G__21122 = cljs.core.rest(s);
        n__$1 = G__21121;
        coll__$1 = G__21122;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last() {
  var G__21124 = arguments.length;
  switch(G__21124) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__21126 = cljs.core.next(s);
      var G__21127 = cljs.core.next(lead);
      s = G__21126;
      lead = G__21127;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while() {
  var G__21129 = arguments.length;
  switch(G__21129) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__21137 = null;
        var G__21137__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21137__1 = function(result) {
          var G__21130 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21130) : rf.call(null, G__21130);
        };
        var G__21137__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__4295__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__4295__auto__)) {
              var G__21131 = input;
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__21131) : pred.call(null, G__21131);
            } else {
              return and__4295__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            var G__21132 = result;
            var G__21133 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21132, G__21133) : rf.call(null, G__21132, G__21133);
          }
        };
        G__21137 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21137__0.call(this);
            case 1:
              return G__21137__1.call(this, result);
            case 2:
              return G__21137__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21137.cljs$core$IFn$_invoke$arity$0 = G__21137__0;
        G__21137.cljs$core$IFn$_invoke$arity$1 = G__21137__1;
        G__21137.cljs$core$IFn$_invoke$arity$2 = G__21137__2;
        return G__21137;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__4295__auto__ = s;
        if (and__4295__auto__) {
          var G__21135 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__21135) : pred__$1.call(null, G__21135);
        } else {
          return and__4295__auto__;
        }
      }())) {
        var G__21138 = pred__$1;
        var G__21139 = cljs.core.rest(s);
        pred__$1 = G__21138;
        coll__$1 = G__21139;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat() {
  var G__21142 = arguments.length;
  switch(G__21142) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly() {
  var G__21145 = arguments.length;
  switch(G__21145) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, function() {
      var G__21150 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21150) : f.call(null, G__21150);
    }());
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave() {
  var G__21155 = arguments.length;
  switch(G__21155) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5358__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq21151) {
  var G__21152 = cljs.core.first(seq21151);
  var seq21151__$1 = cljs.core.next(seq21151);
  var G__21153 = cljs.core.first(seq21151__$1);
  var seq21151__$2 = cljs.core.next(seq21151__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__21152, G__21153, seq21151__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose() {
  var G__21158 = arguments.length;
  switch(G__21158) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__21167 = null;
        var G__21167__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21167__1 = function(result) {
          var G__21159 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21159) : rf.call(null, G__21159);
        };
        var G__21167__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = function() {
              var G__21160 = result;
              var G__21161 = sep;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21160, G__21161) : rf.call(null, G__21160, G__21161);
            }();
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              var G__21162 = sepr;
              var G__21163 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21162, G__21163) : rf.call(null, G__21162, G__21163);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            var G__21164 = result;
            var G__21165 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21164, G__21165) : rf.call(null, G__21164, G__21165);
          }
        };
        G__21167 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21167__0.call(this);
            case 1:
              return G__21167__1.call(this, result);
            case 2:
              return G__21167__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21167.cljs$core$IFn$_invoke$arity$0 = G__21167__0;
        G__21167.cljs$core$IFn$_invoke$arity$1 = G__21167__1;
        G__21167.cljs$core$IFn$_invoke$arity$2 = G__21167__2;
        return G__21167;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4421__auto__ = cljs.core.seq(coll);
      if (temp__4421__auto__) {
        var coll__$1 = temp__4421__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat() {
  var G__21179 = arguments.length;
  switch(G__21179) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5358__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq21176) {
  var G__21177 = cljs.core.first(seq21176);
  var seq21176__$1 = cljs.core.next(seq21176);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__21177, seq21176__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter() {
  var G__21182 = arguments.length;
  switch(G__21182) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__21190 = null;
      var G__21190__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__21190__1 = function(result) {
        var G__21183 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21183) : rf.call(null, G__21183);
      };
      var G__21190__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__21184 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__21184) : pred.call(null, G__21184);
        }())) {
          var G__21185 = result;
          var G__21186 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21185, G__21186) : rf.call(null, G__21185, G__21186);
        } else {
          return result;
        }
      };
      G__21190 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__21190__0.call(this);
          case 1:
            return G__21190__1.call(this, result);
          case 2:
            return G__21190__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21190.cljs$core$IFn$_invoke$arity$0 = G__21190__0;
      G__21190.cljs$core$IFn$_invoke$arity$1 = G__21190__1;
      G__21190.cljs$core$IFn$_invoke$arity$2 = G__21190__2;
      return G__21190;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5192__auto___21191 = size;
        var i_21192 = 0;
        while (true) {
          if (i_21192 < n__5192__auto___21191) {
            if (cljs.core.truth_(function() {
              var G__21187 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_21192);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__21187) : pred.call(null, G__21187);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_21192));
            } else {
            }
            var G__21193 = i_21192 + 1;
            i_21192 = G__21193;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(function() {
          var G__21188 = f;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__21188) : pred.call(null, G__21188);
        }())) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove() {
  var G__21195 = arguments.length;
  switch(G__21195) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__21203 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__21203) : branch_QMARK_.call(null, G__21203);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([function() {
        var G__21204 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__21204) : children.call(null, G__21204);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__21205_SHARP_) {
    return !cljs.core.sequential_QMARK_(p1__21205_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into() {
  var G__21207 = arguments.length;
  switch(G__21207) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__21208 = to;
      if (G__21208) {
        var bit__4974__auto__ = G__21208.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4974__auto__ || G__21208.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (function() {
    var G__21209 = to;
    if (G__21209) {
      var bit__4974__auto__ = G__21209.cljs$lang$protocol_mask$partition1$ & 4;
      if (bit__4974__auto__ || G__21209.cljs$core$IEditableCollection$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv() {
  var G__21217 = arguments.length;
  switch(G__21217) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5358__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
      var G__21218 = o;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21218) : f.call(null, G__21218);
    }());
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq21211) {
  var G__21212 = cljs.core.first(seq21211);
  var seq21211__$1 = cljs.core.next(seq21211);
  var G__21213 = cljs.core.first(seq21211__$1);
  var seq21211__$2 = cljs.core.next(seq21211__$1);
  var G__21214 = cljs.core.first(seq21211__$2);
  var seq21211__$3 = cljs.core.next(seq21211__$2);
  var G__21215 = cljs.core.first(seq21211__$3);
  var seq21211__$4 = cljs.core.next(seq21211__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__21212, G__21213, G__21214, G__21215, seq21211__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__21221 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__21221) : pred.call(null, G__21221);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition() {
  var G__21223 = arguments.length;
  switch(G__21223) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in() {
  var G__21226 = arguments.length;
  switch(G__21226) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!function() {
        var G__21227 = m__$1;
        if (G__21227) {
          var bit__4981__auto__ = G__21227.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4981__auto__ || G__21227.cljs$core$ILookup$) {
            return true;
          } else {
            if (!G__21227.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__21227);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__21227);
        }
      }()) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__21229 = sentinel;
          var G__21230 = m__$2;
          var G__21231 = cljs.core.next(ks__$1);
          sentinel = G__21229;
          m__$1 = G__21230;
          ks__$1 = G__21231;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__21232, v) {
  var vec__21237 = p__21232;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21237, 0, null);
  var ks = cljs.core.nthnext(vec__21237, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in() {
  var G__21246 = arguments.length;
  switch(G__21246) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5358__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__21247, f) {
  var vec__21248 = p__21247;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21248, 0, null);
  var ks = cljs.core.nthnext(vec__21248, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__21249 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21249) : f.call(null, G__21249);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__21250, f, a) {
  var vec__21251 = p__21250;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21251, 0, null);
  var ks = cljs.core.nthnext(vec__21251, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__21252 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__21253 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21252, G__21253) : f.call(null, G__21252, G__21253);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__21254, f, a, b) {
  var vec__21255 = p__21254;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21255, 0, null);
  var ks = cljs.core.nthnext(vec__21255, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__21256 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__21257 = a;
      var G__21258 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21256, G__21257, G__21258) : f.call(null, G__21256, G__21257, G__21258);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__21259, f, a, b, c) {
  var vec__21260 = p__21259;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21260, 0, null);
  var ks = cljs.core.nthnext(vec__21260, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__21261 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__21262 = a;
      var G__21263 = b;
      var G__21264 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__21261, G__21262, G__21263, G__21264) : f.call(null, G__21261, G__21262, G__21263, G__21264);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__21265, f, a, b, c, args) {
  var vec__21266 = p__21265;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21266, 0, null);
  var ks = cljs.core.nthnext(vec__21266, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq21238) {
  var G__21239 = cljs.core.first(seq21238);
  var seq21238__$1 = cljs.core.next(seq21238);
  var G__21240 = cljs.core.first(seq21238__$1);
  var seq21238__$2 = cljs.core.next(seq21238__$1);
  var G__21241 = cljs.core.first(seq21238__$2);
  var seq21238__$3 = cljs.core.next(seq21238__$2);
  var G__21242 = cljs.core.first(seq21238__$3);
  var seq21238__$4 = cljs.core.next(seq21238__$3);
  var G__21243 = cljs.core.first(seq21238__$4);
  var seq21238__$5 = cljs.core.next(seq21238__$4);
  var G__21244 = cljs.core.first(seq21238__$5);
  var seq21238__$6 = cljs.core.next(seq21238__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__21239, G__21240, G__21241, G__21242, G__21243, G__21244, seq21238__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update() {
  var G__21276 = arguments.length;
  switch(G__21276) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5358__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__21277 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21277) : f.call(null, G__21277);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__21278 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__21279 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21278, G__21279) : f.call(null, G__21278, G__21279);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__21280 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__21281 = x;
    var G__21282 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21280, G__21281, G__21282) : f.call(null, G__21280, G__21281, G__21282);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__21283 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__21284 = x;
    var G__21285 = y;
    var G__21286 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__21283, G__21284, G__21285, G__21286) : f.call(null, G__21283, G__21284, G__21285, G__21286);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq21268) {
  var G__21269 = cljs.core.first(seq21268);
  var seq21268__$1 = cljs.core.next(seq21268);
  var G__21270 = cljs.core.first(seq21268__$1);
  var seq21268__$2 = cljs.core.next(seq21268__$1);
  var G__21271 = cljs.core.first(seq21268__$2);
  var seq21268__$3 = cljs.core.next(seq21268__$2);
  var G__21272 = cljs.core.first(seq21268__$3);
  var seq21268__$4 = cljs.core.next(seq21268__$3);
  var G__21273 = cljs.core.first(seq21268__$4);
  var seq21268__$5 = cljs.core.next(seq21268__$4);
  var G__21274 = cljs.core.first(seq21268__$5);
  var seq21268__$6 = cljs.core.next(seq21268__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__21269, G__21270, G__21271, G__21272, G__21273, G__21274, seq21268__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__21288 = ll - 5;
      var G__21289 = r;
      ll = G__21288;
      ret = G__21289;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__21294 = cljs.core.pv_aget(node, 0);
      var G__21295 = level - 5;
      node = G__21294;
      level = G__21295;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__21296 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__21297 = level - 5;
        node = G__21296;
        level = G__21297;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__21307 = init__$2;
              var G__21308 = j + i;
              var G__21309 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21307, G__21308, G__21309) : f.call(null, G__21307, G__21308, G__21309);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__21320 = j + 1;
              var G__21321 = init__$3;
              j = G__21320;
              init__$2 = G__21321;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__21310 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21310) : cljs.core.deref.call(null, G__21310);
      } else {
        var G__21322 = i + len;
        var G__21323 = init__$2;
        i = G__21322;
        init__$1 = G__21323;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__21311 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__21311) : cljs.core.tv_editable_root.call(null, G__21311);
  }(), function() {
    var G__21312 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__21312) : cljs.core.tv_editable_tail.call(null, G__21312);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__21313 = init__$2;
              var G__21314 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21313, G__21314) : f.call(null, G__21313, G__21314);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__21324 = j + 1;
              var G__21325 = init__$3;
              j = G__21324;
              init__$2 = G__21325;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__21315 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21315) : cljs.core.deref.call(null, G__21315);
      } else {
        var G__21326 = i + len;
        var G__21327 = init__$2;
        i = G__21326;
        init__$1 = G__21327;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__21316 = coll__$1;
      var G__21317 = cljs.core.first_array_for_longvec(coll__$1);
      var G__21318 = 0;
      var G__21319 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__21316, G__21317, G__21318, G__21319) : cljs.core.chunked_seq.call(null, G__21316, G__21317, G__21318, G__21319);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__5192__auto___21328 = len;
    var i_21329 = 0;
    while (true) {
      if (i_21329 < n__5192__auto___21328) {
        new_tail[i_21329] = self__.tail[i_21329];
        var G__21330 = i_21329 + 1;
        i_21329 = G__21330;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__21331 = null;
  var G__21331__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__21331__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__21331 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21331__2.call(this, self__, k);
      case 3:
        return G__21331__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21331.cljs$core$IFn$_invoke$arity$2 = G__21331__2;
  G__21331.cljs$core$IFn$_invoke$arity$3 = G__21331__3;
  return G__21331;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args21306) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21306)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__21332 = i + 1;
        var G__21333 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__21332;
        out = G__21333;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq21334) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21334));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__21335 = self__.vec;
      var G__21336 = self__.node;
      var G__21337 = self__.i;
      var G__21338 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__21335, G__21336, G__21337, G__21338) : cljs.core.chunked_seq.call(null, G__21335, G__21336, G__21337, G__21338);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__21339 = self__.vec;
    var G__21340 = self__.i + self__.off;
    var G__21341 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__21339, G__21340, G__21341) : cljs.core.subvec.call(null, G__21339, G__21340, G__21341);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__21342 = self__.vec;
    var G__21343 = self__.i + self__.off;
    var G__21344 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__21342, G__21343, G__21344) : cljs.core.subvec.call(null, G__21342, G__21343, G__21344);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__21345 = self__.vec;
      var G__21346 = self__.node;
      var G__21347 = self__.i;
      var G__21348 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__21345, G__21346, G__21347, G__21348) : cljs.core.chunked_seq.call(null, G__21345, G__21346, G__21347, G__21348);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__21349 = self__.vec;
    var G__21350 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__21351 = end;
    var G__21352 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__21349, G__21350, G__21351, G__21352) : cljs.core.chunked_seq.call(null, G__21349, G__21350, G__21351, G__21352);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__21353 = self__.vec;
  var G__21354 = self__.node;
  var G__21355 = self__.i;
  var G__21356 = self__.off;
  var G__21357 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__21353, G__21354, G__21355, G__21356, G__21357) : cljs.core.chunked_seq.call(null, G__21353, G__21354, G__21355, G__21356, G__21357);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__21358 = self__.vec;
    var G__21359 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__21360 = end;
    var G__21361 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__21358, G__21359, G__21360, G__21361) : cljs.core.chunked_seq.call(null, G__21358, G__21359, G__21360, G__21361);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vec", "vec", 982683596, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq() {
  var G__21363 = arguments.length;
  switch(G__21363) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__21366 = init__$1;
        var G__21367 = j;
        var G__21368 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21366, G__21367, G__21368) : f.call(null, G__21366, G__21367, G__21368);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__21369 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21369) : cljs.core.deref.call(null, G__21369);
      } else {
        var G__21391 = i + 1;
        var G__21392 = j + 1;
        var G__21393 = init__$2;
        i = G__21391;
        j = G__21392;
        init__$1 = G__21393;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__21370 = self__.meta;
  var G__21371 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__21372 = self__.start;
  var G__21373 = function() {
    var x__4619__auto__ = self__.end;
    var y__4620__auto__ = v_pos + 1;
    return x__4619__auto__ > y__4620__auto__ ? x__4619__auto__ : y__4620__auto__;
  }();
  var G__21374 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__21370, G__21371, G__21372, G__21373, G__21374) : cljs.core.build_subvec.call(null, G__21370, G__21371, G__21372, G__21373, G__21374);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__21375 = self__.meta;
    var G__21376 = self__.v;
    var G__21377 = self__.start;
    var G__21378 = self__.end - 1;
    var G__21379 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__21375, G__21376, G__21377, G__21378, G__21379) : cljs.core.build_subvec.call(null, G__21375, G__21376, G__21377, G__21378, G__21379);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__21381 = meta__$1;
  var G__21382 = self__.v;
  var G__21383 = self__.start;
  var G__21384 = self__.end;
  var G__21385 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__21381, G__21382, G__21383, G__21384, G__21385) : cljs.core.build_subvec.call(null, G__21381, G__21382, G__21383, G__21384, G__21385);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__21386 = self__.meta;
  var G__21387 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__21388 = self__.start;
  var G__21389 = self__.end + 1;
  var G__21390 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__21386, G__21387, G__21388, G__21389, G__21390) : cljs.core.build_subvec.call(null, G__21386, G__21387, G__21388, G__21389, G__21390);
};
cljs.core.Subvec.prototype.call = function() {
  var G__21394 = null;
  var G__21394__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__21394__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__21394 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21394__2.call(this, self__, k);
      case 3:
        return G__21394__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21394.cljs$core$IFn$_invoke$arity$2 = G__21394__2;
  G__21394.cljs$core$IFn$_invoke$arity$3 = G__21394__3;
  return G__21394;
}();
cljs.core.Subvec.prototype.apply = function(self__, args21365) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21365)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__21395 = meta;
      var G__21396 = v.v;
      var G__21397 = v.start + start;
      var G__21398 = v.start + end;
      var G__21399 = __hash;
      meta = G__21395;
      v = G__21396;
      start = G__21397;
      end = G__21398;
      __hash = G__21399;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec() {
  var G__21401 = arguments.length;
  switch(G__21401) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj21406 = {};
    return obj21406;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__21414 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__21415 = level - 5;
        node = G__21414;
        level = G__21415;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__21419 = null;
  var G__21419__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__21419__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__21419 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21419__2.call(this, self__, k);
      case 3:
        return G__21419__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21419.cljs$core$IFn$_invoke$arity$2 = G__21419__2;
  G__21419.cljs$core$IFn$_invoke$arity$3 = G__21419__3;
  return G__21419;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args21416) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21416)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null)], null);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4421__auto__ = cljs.core.next(self__.front);
  if (temp__4421__auto__) {
    var f1 = temp__4421__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4421__auto__ = cljs.core.next(self__.front);
    if (temp__4421__auto__) {
      var f1 = temp__4421__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4307__auto__ = self__.front;
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4307__auto__ = self__.rear;
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__21420 = i + incr;
        i = G__21420;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return -1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__21421 = i + 1;
      var G__21422 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__21421;
      out = G__21422;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = function() {
    var obj21426 = {};
    return obj21426;
  }();
  var l = ks.length;
  var i_21427 = 0;
  while (true) {
    if (i_21427 < l) {
      var k_21428 = ks[i_21427];
      new_obj[k_21428] = obj[k_21428];
      var G__21429 = i_21427 + 1;
      i_21427 = G__21429;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4295__auto__ = function() {
      var G__21433 = k;
      return goog.isString(G__21433);
    }();
    if (cljs.core.truth_(and__4295__auto__)) {
      return !(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4295__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__21434 = init__$1;
        var G__21435 = k;
        var G__21436 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21434, G__21435, G__21436) : f.call(null, G__21434, G__21435, G__21436);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__21437 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21437) : cljs.core.deref.call(null, G__21437);
      } else {
        var G__21443 = cljs.core.rest(keys__$1);
        var G__21444 = init__$2;
        keys__$1 = G__21443;
        init__$1 = G__21444;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4295__auto__ = function() {
      var G__21439 = k;
      return goog.isString(G__21439);
    }();
    if (cljs.core.truth_(and__4295__auto__)) {
      return !(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4295__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__21440 = k;
    return goog.isString(G__21440);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4295__auto__ = function() {
      var G__21442 = k;
      return goog.isString(G__21442);
    }();
    if (cljs.core.truth_(and__4295__auto__)) {
      return !(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4295__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__21430_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__21430_SHARP_, self__.strobj[p1__21430_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__21445 = null;
  var G__21445__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__21445__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__21445 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21445__2.call(this, self__, k);
      case 3:
        return G__21445__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21445.cljs$core$IFn$_invoke$arity$2 = G__21445__2;
  G__21445.cljs$core$IFn$_invoke$arity$3 = G__21445__3;
  return G__21445;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args21431) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21431)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "strobj", "strobj", 1088091283, null), new cljs.core.Symbol(null, "update-count", "update-count", -411982269, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj21447 = {};
  return obj21447;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__21448 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21448, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21448, 1, null);
    self__.s = cljs.core.next(self__.s);
    return {"value":[k, v], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null)], null);
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":[x, x], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null)], null);
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__21449 = i + 2;
        i = G__21449;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__21450 = i + 2;
        i = G__21450;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__21451 = i + 2;
        i = G__21451;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__21452 = i + 2;
        i = G__21452;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__21453 = i + 2;
        i = G__21453;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__4307__auto__ = function() {
        var G__21457 = k;
        return goog.isString(G__21457);
      }();
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_21458 = 0;
  while (true) {
    if (i_21458 < l) {
      narr[i_21458] = arr[i_21458];
      var G__21459 = i_21458 + 1;
      i_21458 = G__21459;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return (self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null)], null);
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__21461 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__21461) : cljs.core.keys.call(null, G__21461);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__21462 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__21462) : cljs.core.vals.call(null, G__21462);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__21463 = cljs.core.seq(coll);
  var chunk__21464 = null;
  var count__21465 = 0;
  var i__21466 = 0;
  while (true) {
    if (i__21466 < count__21465) {
      var vec__21467 = chunk__21464.cljs$core$IIndexed$_nth$arity$2(null, i__21466);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21467, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21467, 1, null);
      var G__21468_21481 = v;
      var G__21469_21482 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21468_21481, G__21469_21482) : f.call(null, G__21468_21481, G__21469_21482);
      var G__21483 = seq__21463;
      var G__21484 = chunk__21464;
      var G__21485 = count__21465;
      var G__21486 = i__21466 + 1;
      seq__21463 = G__21483;
      chunk__21464 = G__21484;
      count__21465 = G__21485;
      i__21466 = G__21486;
      continue;
    } else {
      var temp__4423__auto__ = cljs.core.seq(seq__21463);
      if (temp__4423__auto__) {
        var seq__21463__$1 = temp__4423__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__21463__$1)) {
          var c__5092__auto__ = cljs.core.chunk_first(seq__21463__$1);
          var G__21487 = cljs.core.chunk_rest(seq__21463__$1);
          var G__21488 = c__5092__auto__;
          var G__21489 = cljs.core.count(c__5092__auto__);
          var G__21490 = 0;
          seq__21463 = G__21487;
          chunk__21464 = G__21488;
          count__21465 = G__21489;
          i__21466 = G__21490;
          continue;
        } else {
          var vec__21470 = cljs.core.first(seq__21463__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21470, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21470, 1, null);
          var G__21471_21491 = v;
          var G__21472_21492 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21471_21491, G__21472_21492) : f.call(null, G__21471_21491, G__21472_21492);
          var G__21493 = cljs.core.next(seq__21463__$1);
          var G__21494 = null;
          var G__21495 = 0;
          var G__21496 = 0;
          seq__21463 = G__21493;
          chunk__21464 = G__21494;
          count__21465 = G__21495;
          i__21466 = G__21496;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__21473 = init__$1;
        var G__21474 = self__.arr[i];
        var G__21475 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21473, G__21474, G__21475) : f.call(null, G__21473, G__21474, G__21475);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__21476 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21476) : cljs.core.deref.call(null, G__21476);
      } else {
        var G__21497 = i + 2;
        var G__21498 = init__$2;
        i = G__21497;
        init__$1 = G__21498;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__21477 = other;
    if (G__21477) {
      var bit__4974__auto__ = G__21477.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4974__auto__ || G__21477.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__21499 = i + 2;
              i = G__21499;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj21479 = {};
    return obj21479;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__21500 = s + 2;
            var G__21501 = d;
            s = G__21500;
            d = G__21501;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__21502 = s + 2;
            var G__21503 = d + 2;
            s = G__21502;
            d = G__21503;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__21480 = cljs.core.aclone(self__.arr);
        G__21480[idx + 1] = v;
        return G__21480;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__21504 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__21505 = cljs.core.next(es);
          ret = G__21504;
          es = G__21505;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__21506 = null;
  var G__21506__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__21506__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__21506 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21506__2.call(this, self__, k);
      case 3:
        return G__21506__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21506.cljs$core$IFn$_invoke$arity$2 = G__21506__2;
  G__21506.cljs$core$IFn$_invoke$arity$3 = G__21506__3;
  return G__21506;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args21460) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21460)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_21507 = 0;
    while (true) {
      if (i_21507 < arr__$1.length) {
        var k_21508 = arr__$1[i_21507];
        var v_21509 = arr__$1[i_21507 + 1];
        var idx_21510 = cljs.core.array_index_of(ret, k_21508);
        if (idx_21510 === -1) {
          ret.push(k_21508);
          ret.push(v_21509);
        } else {
        }
        var G__21511 = i_21507 + 2;
        i_21507 = G__21511;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var arr__$3 = function() {
    var cnt = arr__$2.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
  }();
  return arr__$3;
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__21512 = o;
      if (G__21512) {
        var bit__4981__auto__ = G__21512.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4981__auto__ || G__21512.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__21512.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__21512);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__21512);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__21513 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__21513) : cljs.core.key.call(null, G__21513);
      }(), function() {
        var G__21514 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__21514) : cljs.core.val.call(null, G__21514);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4421__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4421__auto__)) {
          var e = temp__4421__auto__;
          var G__21520 = cljs.core.next(es);
          var G__21521 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__21515 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__21515) : cljs.core.key.call(null, G__21515);
          }(), function() {
            var G__21516 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__21516) : cljs.core.val.call(null, G__21516);
          }());
          es = G__21520;
          tcoll__$2 = G__21521;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__21517 = self__.len;
          var G__21518 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__21517, G__21518) : cljs.core.array__GT_transient_hash_map.call(null, G__21517, G__21518);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__21519_21522 = self__.arr;
      G__21519_21522.pop();
      G__21519_21522.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "editable?", "editable?", -164945806, null), new cljs.core.Symbol(null, "len", "len", -1230778691, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__21523 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__21524 = i + 2;
      out = G__21523;
      i = G__21524;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set() {
  var G__21526 = arguments.length;
  switch(G__21526) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__21527 = cljs.core.aclone(arr);
  G__21527[i] = a;
  return G__21527;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__21528 = cljs.core.aclone(arr);
  G__21528[i] = a;
  G__21528[j] = b;
  return G__21528;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set() {
  var G__21531 = arguments.length;
  switch(G__21531) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__21537 = init__$1;
          var G__21538 = k;
          var G__21539 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21537, G__21538, G__21539) : f.call(null, G__21537, G__21538, G__21539);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__21540 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21540) : cljs.core.deref.call(null, G__21540);
      } else {
        var G__21541 = i + 2;
        var G__21542 = init__$2;
        i = G__21541;
        init__$1 = G__21542;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__21543 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__21543) : cljs.core.create_inode_seq.call(null, G__21543);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_21557 = 0;
        var j_21558 = 0;
        while (true) {
          if (i_21557 < 32) {
            if ((self__.bitmap >>> i_21557 & 1) === 0) {
              var G__21559 = i_21557 + 1;
              var G__21560 = j_21558;
              i_21557 = G__21559;
              j_21558 = G__21560;
              continue;
            } else {
              nodes[i_21557] = !(self__.arr[j_21558] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_21558]), self__.arr[j_21558], self__.arr[j_21558 + 1], added_leaf_QMARK_) : self__.arr[j_21558 + 1];
              var G__21561 = i_21557 + 1;
              var G__21562 = j_21558 + 2;
              i_21557 = G__21561;
              j_21558 = G__21562;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__21544 = edit__$1;
          var G__21545 = shift + 5;
          var G__21546 = key_or_nil;
          var G__21547 = val_or_node;
          var G__21548 = hash;
          var G__21549 = key;
          var G__21550 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__21544, G__21545, G__21546, G__21547, G__21548, G__21549, G__21550) : cljs.core.create_node.call(null, G__21544, G__21545, G__21546, G__21547, G__21548, G__21549, G__21550);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_21563 = 0;
      var j_21564 = 0;
      while (true) {
        if (i_21563 < 32) {
          if ((self__.bitmap >>> i_21563 & 1) === 0) {
            var G__21565 = i_21563 + 1;
            var G__21566 = j_21564;
            i_21563 = G__21565;
            j_21564 = G__21566;
            continue;
          } else {
            nodes[i_21563] = !(self__.arr[j_21564] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_21564]), self__.arr[j_21564], self__.arr[j_21564 + 1], added_leaf_QMARK_) : self__.arr[j_21564 + 1];
            var G__21567 = i_21563 + 1;
            var G__21568 = j_21564 + 2;
            i_21563 = G__21567;
            j_21564 = G__21568;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__21551 = shift + 5;
          var G__21552 = key_or_nil;
          var G__21553 = val_or_node;
          var G__21554 = hash;
          var G__21555 = key;
          var G__21556 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__21551, G__21552, G__21553, G__21554, G__21555, G__21556) : cljs.core.create_node.call(null, G__21551, G__21552, G__21553, G__21554, G__21555, G__21556);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "bitmap", "bitmap", 501334601, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__21569 = i + 1;
        var G__21570 = j + 2;
        var G__21571 = bitmap | 1 << i;
        i = G__21569;
        j = G__21570;
        bitmap = G__21571;
        continue;
      } else {
        var G__21572 = i + 1;
        var G__21573 = j;
        var G__21574 = bitmap;
        i = G__21572;
        j = G__21573;
        bitmap = G__21574;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__21575 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__21575) : cljs.core.create_array_node_seq.call(null, G__21575);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__21576 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21576) : cljs.core.deref.call(null, G__21576);
        } else {
          var G__21577 = i + 1;
          var G__21578 = init__$2;
          i = G__21577;
          init__$1 = G__21578;
          continue;
        }
      } else {
        var G__21579 = i + 1;
        var G__21580 = init__$1;
        i = G__21579;
        init__$1 = G__21580;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__21581 = i + 2;
        i = G__21581;
        continue;
      }
    } else {
      return -1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__21582 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__21582) : cljs.core.create_inode_seq.call(null, G__21582);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "collision-hash", "collision-hash", -35831342, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node() {
  var G__21584 = arguments.length;
  switch(G__21584) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__21586 = self__.nodes;
    var G__21587 = self__.i + 2;
    var G__21588 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__21586, G__21587, G__21588) : cljs.core.create_inode_seq.call(null, G__21586, G__21587, G__21588);
  } else {
    var G__21589 = self__.nodes;
    var G__21590 = self__.i;
    var G__21591 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__21589, G__21590, G__21591) : cljs.core.create_inode_seq.call(null, G__21589, G__21590, G__21591);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq() {
  var G__21593 = arguments.length;
  switch(G__21593) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4421__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4421__auto__)) {
            var node = temp__4421__auto__;
            var temp__4421__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4421__auto____$1)) {
              var node_seq = temp__4421__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__21595 = j + 2;
              j = G__21595;
              continue;
            }
          } else {
            var G__21596 = j + 2;
            j = G__21596;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__21597 = null;
  var G__21598 = self__.nodes;
  var G__21599 = self__.i;
  var G__21600 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__21597, G__21598, G__21599, G__21600) : cljs.core.create_array_node_seq.call(null, G__21597, G__21598, G__21599, G__21600);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq() {
  var G__21602 = arguments.length;
  switch(G__21602) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4421__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4421__auto__)) {
          var nj = temp__4421__auto__;
          var temp__4421__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4421__auto____$1)) {
            var ns = temp__4421__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__21604 = j + 1;
            j = G__21604;
            continue;
          }
        } else {
          var G__21605 = j + 1;
          j = G__21605;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__21607 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__21607) : cljs.core.keys.call(null, G__21607);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__21608 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__21608) : cljs.core.vals.call(null, G__21608);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__21609 = cljs.core.seq(coll);
  var chunk__21610 = null;
  var count__21611 = 0;
  var i__21612 = 0;
  while (true) {
    if (i__21612 < count__21611) {
      var vec__21613 = chunk__21610.cljs$core$IIndexed$_nth$arity$2(null, i__21612);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21613, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21613, 1, null);
      var G__21614_21625 = v;
      var G__21615_21626 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21614_21625, G__21615_21626) : f.call(null, G__21614_21625, G__21615_21626);
      var G__21627 = seq__21609;
      var G__21628 = chunk__21610;
      var G__21629 = count__21611;
      var G__21630 = i__21612 + 1;
      seq__21609 = G__21627;
      chunk__21610 = G__21628;
      count__21611 = G__21629;
      i__21612 = G__21630;
      continue;
    } else {
      var temp__4423__auto__ = cljs.core.seq(seq__21609);
      if (temp__4423__auto__) {
        var seq__21609__$1 = temp__4423__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__21609__$1)) {
          var c__5092__auto__ = cljs.core.chunk_first(seq__21609__$1);
          var G__21631 = cljs.core.chunk_rest(seq__21609__$1);
          var G__21632 = c__5092__auto__;
          var G__21633 = cljs.core.count(c__5092__auto__);
          var G__21634 = 0;
          seq__21609 = G__21631;
          chunk__21610 = G__21632;
          count__21611 = G__21633;
          i__21612 = G__21634;
          continue;
        } else {
          var vec__21616 = cljs.core.first(seq__21609__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21616, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21616, 1, null);
          var G__21617_21635 = v;
          var G__21618_21636 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21617_21635, G__21618_21636) : f.call(null, G__21617_21635, G__21618_21636);
          var G__21637 = cljs.core.next(seq__21609__$1);
          var G__21638 = null;
          var G__21639 = 0;
          var G__21640 = 0;
          seq__21609 = G__21637;
          chunk__21610 = G__21638;
          count__21611 = G__21639;
          i__21612 = G__21640;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__21619 = init;
    var G__21620 = null;
    var G__21621 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21619, G__21620, G__21621) : f.call(null, G__21619, G__21620, G__21621);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__21622 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21622) : cljs.core.deref.call(null, G__21622);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj21624 = {};
    return obj21624;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return !(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__21641 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__21642 = cljs.core.next(es);
          ret = G__21641;
          es = G__21642;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__21643 = null;
  var G__21643__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__21643__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__21643 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21643__2.call(this, self__, k);
      case 3:
        return G__21643__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21643.cljs$core$IFn$_invoke$arity$2 = G__21643__2;
  G__21643.cljs$core$IFn$_invoke$arity$3 = G__21643__3;
  return G__21643;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args21606) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21606)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__21644 = i + 2;
      var G__21645 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__21644;
      ret = G__21645;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__21646 = i + 1;
      var G__21647 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__21646;
      out = G__21647;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__21648 = o;
      if (G__21648) {
        var bit__4981__auto__ = G__21648.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4981__auto__ || G__21648.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__21648.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__21648);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__21648);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__21649 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__21649) : cljs.core.key.call(null, G__21649);
      }(), function() {
        var G__21650 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__21650) : cljs.core.val.call(null, G__21650);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4421__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4421__auto__)) {
          var e = temp__4421__auto__;
          var G__21653 = cljs.core.next(es);
          var G__21654 = tcoll__$1.assoc_BANG_(function() {
            var G__21651 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__21651) : cljs.core.key.call(null, G__21651);
          }(), function() {
            var G__21652 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__21652) : cljs.core.val.call(null, G__21652);
          }());
          es = G__21653;
          tcoll__$1 = G__21654;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null)], null);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__21655 = ascending_QMARK_ ? t.left : t.right;
      var G__21656 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__21655;
      stack__$1 = G__21656;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "stack", "stack", 847125597, null), new cljs.core.Symbol(null, "ascending?", "ascending?", -1938452653, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__21669 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21669) : cljs.core.deref.call(null, G__21669);
  } else {
    var init__$2 = function() {
      var G__21670 = init__$1;
      var G__21671 = node.key;
      var G__21672 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21670, G__21671, G__21672) : f.call(null, G__21670, G__21671, G__21672);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__21673 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21673) : cljs.core.deref.call(null, G__21673);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__21674 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21674) : cljs.core.deref.call(null, G__21674);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__21676 = null;
  var G__21676__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__21676__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__21676 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21676__2.call(this, self__, k);
      case 3:
        return G__21676__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21676.cljs$core$IFn$_invoke$arity$2 = G__21676__2;
  G__21676.cljs$core$IFn$_invoke$arity$3 = G__21676__3;
  return G__21676;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args21675) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21675)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__21678 = null;
  var G__21678__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__21678__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__21678 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21678__2.call(this, self__, k);
      case 3:
        return G__21678__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21678.cljs$core$IFn$_invoke$arity$2 = G__21678__2;
  G__21678.cljs$core$IFn$_invoke$arity$3 = G__21678__3;
  return G__21678;
}();
cljs.core.RedNode.prototype.apply = function(self__, args21677) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21677)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__21691 = k;
      var G__21692 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__21691, G__21692) : comp.call(null, G__21691, G__21692);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__21711 = k;
      var G__21712 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__21711, G__21712) : comp.call(null, G__21711, G__21712);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__21723 = k;
    var G__21724 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__21723, G__21724) : comp.call(null, G__21723, G__21724);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__21726 = cljs.core.seq(coll);
  var chunk__21727 = null;
  var count__21728 = 0;
  var i__21729 = 0;
  while (true) {
    if (i__21729 < count__21728) {
      var vec__21730 = chunk__21727.cljs$core$IIndexed$_nth$arity$2(null, i__21729);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21730, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21730, 1, null);
      var G__21731_21743 = v;
      var G__21732_21744 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21731_21743, G__21732_21744) : f.call(null, G__21731_21743, G__21732_21744);
      var G__21745 = seq__21726;
      var G__21746 = chunk__21727;
      var G__21747 = count__21728;
      var G__21748 = i__21729 + 1;
      seq__21726 = G__21745;
      chunk__21727 = G__21746;
      count__21728 = G__21747;
      i__21729 = G__21748;
      continue;
    } else {
      var temp__4423__auto__ = cljs.core.seq(seq__21726);
      if (temp__4423__auto__) {
        var seq__21726__$1 = temp__4423__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__21726__$1)) {
          var c__5092__auto__ = cljs.core.chunk_first(seq__21726__$1);
          var G__21749 = cljs.core.chunk_rest(seq__21726__$1);
          var G__21750 = c__5092__auto__;
          var G__21751 = cljs.core.count(c__5092__auto__);
          var G__21752 = 0;
          seq__21726 = G__21749;
          chunk__21727 = G__21750;
          count__21728 = G__21751;
          i__21729 = G__21752;
          continue;
        } else {
          var vec__21733 = cljs.core.first(seq__21726__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21733, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21733, 1, null);
          var G__21734_21753 = v;
          var G__21735_21754 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21734_21753, G__21735_21754) : f.call(null, G__21734_21753, G__21735_21754);
          var G__21755 = cljs.core.next(seq__21726__$1);
          var G__21756 = null;
          var G__21757 = 0;
          var G__21758 = 0;
          seq__21726 = G__21755;
          chunk__21727 = G__21756;
          count__21728 = G__21757;
          i__21729 = G__21758;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__21736 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__21736) : cljs.core.keys.call(null, G__21736);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__21737 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__21737) : cljs.core.vals.call(null, G__21737);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__21738 = k;
        var G__21739 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__21738, G__21739) : self__.comp.call(null, G__21738, G__21739);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__21759 = t.left;
          t = G__21759;
          continue;
        } else {
          var G__21760 = t.right;
          t = G__21760;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__21761 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__21762 = cljs.core.next(es);
          ret = G__21761;
          es = G__21762;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__21763 = null;
  var G__21763__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__21763__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__21763 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21763__2.call(this, self__, k);
      case 3:
        return G__21763__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21763.cljs$core$IFn$_invoke$arity$2 = G__21763__2;
  G__21763.cljs$core$IFn$_invoke$arity$3 = G__21763__3;
  return G__21763;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args21725) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21725)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__21740 = k;
          var G__21741 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__21740, G__21741) : self__.comp.call(null, G__21740, G__21741);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__21764 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__21765 = t.left;
              stack = G__21764;
              t = G__21765;
              continue;
            } else {
              var G__21766 = stack;
              var G__21767 = t.right;
              stack = G__21766;
              t = G__21767;
              continue;
            }
          } else {
            if (c > 0) {
              var G__21768 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__21769 = t.right;
              stack = G__21768;
              t = G__21769;
              continue;
            } else {
              var G__21770 = stack;
              var G__21771 = t.left;
              stack = G__21770;
              t = G__21771;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__21742 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__21742) : cljs.core.key.call(null, G__21742);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "comp", "comp", -1462482139, null), new cljs.core.Symbol(null, "tree", "tree", 1444219499, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__21773 = cljs.core.nnext(in$);
      var G__21774 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__21773;
      out = G__21774;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq21772) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21772));
};
cljs.core.array_map = function cljs$core$array_map() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq21775) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21775));
};
cljs.core.obj_map = function cljs$core$obj_map() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = function() {
    var obj21778 = {};
    return obj21778;
  }();
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__21779 = cljs.core.nnext(kvs);
      kvs = G__21779;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq21776) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21776));
};
cljs.core.sorted_map = function cljs$core$sorted_map() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__21781 = cljs.core.nnext(in$);
      var G__21782 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__21781;
      out = G__21782;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq21780) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21780));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__21785 = cljs.core.nnext(in$);
      var G__21786 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__21785;
      out = G__21786;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq21783) {
  var G__21784 = cljs.core.first(seq21783);
  var seq21783__$1 = cljs.core.next(seq21783);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__21784, seq21783__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__21787 = self__.mseq;
    if (G__21787) {
      var bit__4981__auto__ = G__21787.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4981__auto__ || G__21787.cljs$core$INext$) {
        return true;
      } else {
        if (!G__21787.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21787);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21787);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__21788 = self__.mseq;
    if (G__21788) {
      var bit__4981__auto__ = G__21788.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4981__auto__ || G__21788.cljs$core$INext$) {
        return true;
      } else {
        if (!G__21788.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21788);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21788);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4423__auto__ = cljs.core.seq(hash_map);
  if (temp__4423__auto__) {
    var mseq = temp__4423__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__21789 = self__.mseq;
    if (G__21789) {
      var bit__4981__auto__ = G__21789.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4981__auto__ || G__21789.cljs$core$INext$) {
        return true;
      } else {
        if (!G__21789.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21789);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21789);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__21790 = self__.mseq;
    if (G__21790) {
      var bit__4981__auto__ = G__21790.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4981__auto__ || G__21790.cljs$core$INext$) {
        return true;
      } else {
        if (!G__21790.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21790);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21790);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4423__auto__ = cljs.core.seq(hash_map);
  if (temp__4423__auto__) {
    var mseq = temp__4423__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__21791_SHARP_, p2__21792_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__4307__auto__ = p1__21791_SHARP_;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__21792_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq21793) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21793));
};
cljs.core.merge_with = function cljs$core$merge_with() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__21796 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__21797 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21796, G__21797) : f.call(null, G__21796, G__21797);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__4307__auto__ = m1;
          if (cljs.core.truth_(or__4307__auto__)) {
            return or__4307__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq21794) {
  var G__21795 = cljs.core.first(seq21794);
  var seq21794__$1 = cljs.core.next(seq21794);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__21795, seq21794__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__21798 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__21799 = cljs.core.next(keys);
      ret = G__21798;
      keys = G__21799;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__21802 = cljs.core.seq(coll);
  var chunk__21803 = null;
  var count__21804 = 0;
  var i__21805 = 0;
  while (true) {
    if (i__21805 < count__21804) {
      var vec__21806 = chunk__21803.cljs$core$IIndexed$_nth$arity$2(null, i__21805);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21806, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21806, 1, null);
      var G__21807_21812 = v;
      var G__21808_21813 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21807_21812, G__21808_21813) : f.call(null, G__21807_21812, G__21808_21813);
      var G__21814 = seq__21802;
      var G__21815 = chunk__21803;
      var G__21816 = count__21804;
      var G__21817 = i__21805 + 1;
      seq__21802 = G__21814;
      chunk__21803 = G__21815;
      count__21804 = G__21816;
      i__21805 = G__21817;
      continue;
    } else {
      var temp__4423__auto__ = cljs.core.seq(seq__21802);
      if (temp__4423__auto__) {
        var seq__21802__$1 = temp__4423__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__21802__$1)) {
          var c__5092__auto__ = cljs.core.chunk_first(seq__21802__$1);
          var G__21818 = cljs.core.chunk_rest(seq__21802__$1);
          var G__21819 = c__5092__auto__;
          var G__21820 = cljs.core.count(c__5092__auto__);
          var G__21821 = 0;
          seq__21802 = G__21818;
          chunk__21803 = G__21819;
          count__21804 = G__21820;
          i__21805 = G__21821;
          continue;
        } else {
          var vec__21809 = cljs.core.first(seq__21802__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21809, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21809, 1, null);
          var G__21810_21822 = v;
          var G__21811_21823 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21810_21822, G__21811_21823) : f.call(null, G__21810_21822, G__21811_21823);
          var G__21824 = cljs.core.next(seq__21802__$1);
          var G__21825 = null;
          var G__21826 = 0;
          var G__21827 = 0;
          seq__21802 = G__21824;
          chunk__21803 = G__21825;
          count__21804 = G__21826;
          i__21805 = G__21827;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__21800_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__21800_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__21828 = null;
  var G__21828__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__21828__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__21828 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21828__2.call(this, self__, k);
      case 3:
        return G__21828__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21828.cljs$core$IFn$_invoke$arity$2 = G__21828__2;
  G__21828.cljs$core$IFn$_invoke$arity$3 = G__21828__3;
  return G__21828;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args21801) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21801)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "hash-map", "hash-map", -439030950, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__21829 = i + 1;
        var G__21830 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__21829;
        out = G__21830;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__21831 = i + 1;
        var G__21832 = cljs.core._conj_BANG_(out, items[i]);
        i = G__21831;
        out = G__21832;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__21834 = null;
  var G__21834__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__21834__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__21834 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21834__2.call(this, self__, k);
      case 3:
        return G__21834__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21834.cljs$core$IFn$_invoke$arity$2 = G__21834__2;
  G__21834.cljs$core$IFn$_invoke$arity$3 = G__21834__3;
  return G__21834;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args21833) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21833)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "transient-map", "transient-map", 351764893, null)], null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__21837 = cljs.core.seq(coll);
  var chunk__21838 = null;
  var count__21839 = 0;
  var i__21840 = 0;
  while (true) {
    if (i__21840 < count__21839) {
      var vec__21841 = chunk__21838.cljs$core$IIndexed$_nth$arity$2(null, i__21840);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21841, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21841, 1, null);
      var G__21842_21847 = v;
      var G__21843_21848 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21842_21847, G__21843_21848) : f.call(null, G__21842_21847, G__21843_21848);
      var G__21849 = seq__21837;
      var G__21850 = chunk__21838;
      var G__21851 = count__21839;
      var G__21852 = i__21840 + 1;
      seq__21837 = G__21849;
      chunk__21838 = G__21850;
      count__21839 = G__21851;
      i__21840 = G__21852;
      continue;
    } else {
      var temp__4423__auto__ = cljs.core.seq(seq__21837);
      if (temp__4423__auto__) {
        var seq__21837__$1 = temp__4423__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__21837__$1)) {
          var c__5092__auto__ = cljs.core.chunk_first(seq__21837__$1);
          var G__21853 = cljs.core.chunk_rest(seq__21837__$1);
          var G__21854 = c__5092__auto__;
          var G__21855 = cljs.core.count(c__5092__auto__);
          var G__21856 = 0;
          seq__21837 = G__21853;
          chunk__21838 = G__21854;
          count__21839 = G__21855;
          i__21840 = G__21856;
          continue;
        } else {
          var vec__21844 = cljs.core.first(seq__21837__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21844, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21844, 1, null);
          var G__21845_21857 = v;
          var G__21846_21858 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21845_21857, G__21846_21858) : f.call(null, G__21845_21857, G__21846_21858);
          var G__21859 = cljs.core.next(seq__21837__$1);
          var G__21860 = null;
          var G__21861 = 0;
          var G__21862 = 0;
          seq__21837 = G__21859;
          chunk__21838 = G__21860;
          count__21839 = G__21861;
          i__21840 = G__21862;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__21835_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__21835_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__21863 = null;
  var G__21863__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__21863__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__21863 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21863__2.call(this, self__, k);
      case 3:
        return G__21863__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21863.cljs$core$IFn$_invoke$arity$2 = G__21863__2;
  G__21863.cljs$core$IFn$_invoke$arity$3 = G__21863__3;
  return G__21863;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args21836) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21836)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "tree-map", "tree-map", 1373073049, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__5186__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__5186__auto__.length) {
        var G__21864 = i + 1;
        var G__21865 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__21864;
        res = G__21865;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__21866 = cljs.core.next(in$__$1);
          var G__21867 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__21866;
          out = G__21867;
          continue;
        } else {
          return cljs.core.persistent_BANG_(out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set() {
  var G__21870 = arguments.length;
  switch(G__21870) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5358__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq21868) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21868));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq21872) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21872));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq21873) {
  var G__21874 = cljs.core.first(seq21873);
  var seq21873__$1 = cljs.core.next(seq21873);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__21874, seq21873__$1);
};
cljs.core.replace = function cljs$core$replace() {
  var G__21878 = arguments.length;
  switch(G__21878) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__21875_SHARP_) {
    var temp__4421__auto__ = cljs.core.find(smap, p1__21875_SHARP_);
    if (cljs.core.truth_(temp__4421__auto__)) {
      var e = temp__4421__auto__;
      return cljs.core.val(e);
    } else {
      return p1__21875_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4421__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4421__auto__)) {
          var e = temp__4421__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__21876_SHARP_) {
      var temp__4421__auto__ = cljs.core.find(smap, p1__21876_SHARP_);
      if (cljs.core.truth_(temp__4421__auto__)) {
        var e = temp__4421__auto__;
        return cljs.core.second(e);
      } else {
        return p1__21876_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct() {
  var G__21881 = arguments.length;
  switch(G__21881) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__21893 = null;
        var G__21893__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21893__1 = function(result) {
          var G__21882 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21882) : rf.call(null, G__21882);
        };
        var G__21893__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(function() {
            var G__21883 = seen;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21883) : cljs.core.deref.call(null, G__21883);
          }(), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            var G__21884 = result;
            var G__21885 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21884, G__21885) : rf.call(null, G__21884, G__21885);
          }
        };
        G__21893 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21893__0.call(this);
            case 1:
              return G__21893__1.call(this, result);
            case 2:
              return G__21893__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21893.cljs$core$IFn$_invoke$arity$0 = G__21893__0;
        G__21893.cljs$core$IFn$_invoke$arity$1 = G__21893__1;
        G__21893.cljs$core$IFn$_invoke$arity$2 = G__21893__2;
        return G__21893;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__21890, seen__$1) {
        while (true) {
          var vec__21891 = p__21890;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21891, 0, null);
          var xs__$1 = vec__21891;
          var temp__4423__auto__ = cljs.core.seq(xs__$1);
          if (temp__4423__auto__) {
            var s = temp__4423__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__21894 = cljs.core.rest(s);
              var G__21895 = seen__$1;
              p__21890 = G__21894;
              seen__$1 = G__21895;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__21896 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__21897 = cljs.core.next(s__$1);
      ret = G__21896;
      s__$1 = G__21897;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (function() {
    var G__21899 = x;
    if (G__21899) {
      var bit__4974__auto__ = G__21899.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4974__auto__ || G__21899.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__21900 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__21901 = cljs.core.next(ks);
      var G__21902 = cljs.core.next(vs);
      map = G__21900;
      ks = G__21901;
      vs = G__21902;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key() {
  var G__21910 = arguments.length;
  switch(G__21910) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5358__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__21911 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__21911) : k.call(null, G__21911);
  }() > function() {
    var G__21912 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__21912) : k.call(null, G__21912);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__21903_SHARP_, p2__21904_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__21903_SHARP_, p2__21904_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq21905) {
  var G__21906 = cljs.core.first(seq21905);
  var seq21905__$1 = cljs.core.next(seq21905);
  var G__21907 = cljs.core.first(seq21905__$1);
  var seq21905__$2 = cljs.core.next(seq21905__$1);
  var G__21908 = cljs.core.first(seq21905__$2);
  var seq21905__$3 = cljs.core.next(seq21905__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__21906, G__21907, G__21908, seq21905__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key() {
  var G__21921 = arguments.length;
  switch(G__21921) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5358__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__21922 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__21922) : k.call(null, G__21922);
  }() < function() {
    var G__21923 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__21923) : k.call(null, G__21923);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__21914_SHARP_, p2__21915_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__21914_SHARP_, p2__21915_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq21916) {
  var G__21917 = cljs.core.first(seq21916);
  var seq21916__$1 = cljs.core.next(seq21916);
  var G__21918 = cljs.core.first(seq21916__$1);
  var seq21916__$2 = cljs.core.next(seq21916__$1);
  var G__21919 = cljs.core.first(seq21916__$2);
  var seq21916__$3 = cljs.core.next(seq21916__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__21917, G__21918, G__21919, seq21916__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all() {
  var G__21926 = arguments.length;
  switch(G__21926) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__21933 = null;
        var G__21933__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21933__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__21927 = result;
              var G__21928 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21927, G__21928) : rf.call(null, G__21927, G__21928);
            }());
          }();
          var G__21929 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21929) : rf.call(null, G__21929);
        };
        var G__21933__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var G__21930 = result;
            var G__21931 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21930, G__21931) : rf.call(null, G__21930, G__21931);
          } else {
            return result;
          }
        };
        G__21933 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21933__0.call(this);
            case 1:
              return G__21933__1.call(this, result);
            case 2:
              return G__21933__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21933.cljs$core$IFn$_invoke$arity$0 = G__21933__0;
        G__21933.cljs$core$IFn$_invoke$arity$1 = G__21933__1;
        G__21933.cljs$core$IFn$_invoke$arity$2 = G__21933__2;
        return G__21933;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while() {
  var G__21935 = arguments.length;
  switch(G__21935) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__21942 = null;
      var G__21942__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__21942__1 = function(result) {
        var G__21936 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21936) : rf.call(null, G__21936);
      };
      var G__21942__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__21937 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__21937) : pred.call(null, G__21937);
        }())) {
          var G__21938 = result;
          var G__21939 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21938, G__21939) : rf.call(null, G__21938, G__21939);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__21942 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__21942__0.call(this);
          case 1:
            return G__21942__1.call(this, result);
          case 2:
            return G__21942__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21942.cljs$core$IFn$_invoke$arity$0 = G__21942__0;
      G__21942.cljs$core$IFn$_invoke$arity$1 = G__21942__1;
      G__21942.cljs$core$IFn$_invoke$arity$2 = G__21942__2;
      return G__21942;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      if (cljs.core.truth_(function() {
        var G__21940 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__21940) : pred.call(null, G__21940);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__21947 = function() {
      var G__21949 = cljs.core._entry_key(sc, e);
      var G__21950 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__21949, G__21950) : comp.call(null, G__21949, G__21950);
    }();
    var G__21948 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__21947, G__21948) : test.call(null, G__21947, G__21948);
  };
};
cljs.core.subseq = function cljs$core$subseq() {
  var G__21952 = arguments.length;
  switch(G__21952) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4423__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var vec__21953 = temp__4423__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21953, 0, null);
      var s = vec__21953;
      if (cljs.core.truth_(function() {
        var G__21954 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__21954) : include.call(null, G__21954);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4423__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var vec__21955 = temp__4423__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21955, 0, null);
    var s = vec__21955;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq() {
  var G__21958 = arguments.length;
  switch(G__21958) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4423__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var vec__21959 = temp__4423__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21959, 0, null);
      var s = vec__21959;
      if (cljs.core.truth_(function() {
        var G__21960 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__21960) : include.call(null, G__21960);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4423__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var vec__21961 = temp__4423__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21961, 0, null);
    var s = vec__21961;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null)], null);
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__21963 = (self__.end - self__.start) / self__.step;
    return Math.ceil(G__21963);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__21964 = ret;
        var G__21965 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21964, G__21965) : f.call(null, G__21964, G__21965);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__21966 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21966) : cljs.core.deref.call(null, G__21966);
      } else {
        var G__21967 = i + self__.step;
        var G__21968 = ret__$1;
        i = G__21967;
        ret = G__21968;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.range = function cljs$core$range() {
  var G__21970 = arguments.length;
  switch(G__21970) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth() {
  var G__21973 = arguments.length;
  switch(G__21973) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__21978 = null;
        var G__21978__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21978__1 = function(result) {
          var G__21974 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21974) : rf.call(null, G__21974);
        };
        var G__21978__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            var G__21975 = result;
            var G__21976 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21975, G__21976) : rf.call(null, G__21975, G__21976);
          } else {
            return result;
          }
        };
        G__21978 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21978__0.call(this);
            case 1:
              return G__21978__1.call(this, result);
            case 2:
              return G__21978__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21978.cljs$core$IFn$_invoke$arity$0 = G__21978__0;
        G__21978.cljs$core$IFn$_invoke$arity$1 = G__21978__1;
        G__21978.cljs$core$IFn$_invoke$arity$2 = G__21978__2;
        return G__21978;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by() {
  var G__21981 = arguments.length;
  switch(G__21981) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__21992 = null;
        var G__21992__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21992__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__21982 = result;
              var G__21983 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21982, G__21983) : rf.call(null, G__21982, G__21983);
            }());
          }();
          var G__21984 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21984) : rf.call(null, G__21984);
        };
        var G__21992__2 = function(result, input) {
          var pval = function() {
            var G__21985 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21985) : cljs.core.deref.call(null, G__21985);
          }();
          var val = function() {
            var G__21986 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21986) : f.call(null, G__21986);
          }();
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = function() {
              var G__21987 = result;
              var G__21988 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21987, G__21988) : rf.call(null, G__21987, G__21988);
            }();
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__21992 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21992__0.call(this);
            case 1:
              return G__21992__1.call(this, result);
            case 2:
              return G__21992__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21992.cljs$core$IFn$_invoke$arity$0 = G__21992__0;
        G__21992.cljs$core$IFn$_invoke$arity$1 = G__21992__1;
        G__21992.cljs$core$IFn$_invoke$arity$2 = G__21992__2;
        return G__21992;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      var fst = cljs.core.first(s);
      var fv = function() {
        var G__21989 = fst;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21989) : f.call(null, G__21989);
      }();
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4423__auto__) {
        return function(p1__21979_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
            var G__21990 = p1__21979_SHARP_;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21990) : f.call(null, G__21990);
          }());
        };
      }(fst, fv, s, temp__4423__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions() {
  var G__21994 = arguments.length;
  switch(G__21994) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4421__auto__ = cljs.core.seq(coll);
    if (temp__4421__auto__) {
      var s = temp__4421__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__21995 = init;
        var G__21996 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21995, G__21996) : f.call(null, G__21995, G__21996);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt() {
  var G__22013 = arguments.length;
  switch(G__22013) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5358__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__22057 = null;
    var G__22057__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }()], null);
    };
    var G__22057__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__22014 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__22014) : f.call(null, G__22014);
      }()], null);
    };
    var G__22057__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__22015 = x;
        var G__22016 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__22015, G__22016) : f.call(null, G__22015, G__22016);
      }()], null);
    };
    var G__22057__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__22017 = x;
        var G__22018 = y;
        var G__22019 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__22017, G__22018, G__22019) : f.call(null, G__22017, G__22018, G__22019);
      }()], null);
    };
    var G__22057__4 = function() {
      var G__22058__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__22058 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__22059__i = 0, G__22059__a = new Array(arguments.length - 3);
          while (G__22059__i < G__22059__a.length) {
            G__22059__a[G__22059__i] = arguments[G__22059__i + 3];
            ++G__22059__i;
          }
          args = new cljs.core.IndexedSeq(G__22059__a, 0);
        }
        return G__22058__delegate.call(this, x, y, z, args);
      };
      G__22058.cljs$lang$maxFixedArity = 3;
      G__22058.cljs$lang$applyTo = function(arglist__22060) {
        var x = cljs.core.first(arglist__22060);
        arglist__22060 = cljs.core.next(arglist__22060);
        var y = cljs.core.first(arglist__22060);
        arglist__22060 = cljs.core.next(arglist__22060);
        var z = cljs.core.first(arglist__22060);
        var args = cljs.core.rest(arglist__22060);
        return G__22058__delegate(x, y, z, args);
      };
      G__22058.cljs$core$IFn$_invoke$arity$variadic = G__22058__delegate;
      return G__22058;
    }();
    G__22057 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__22057__0.call(this);
        case 1:
          return G__22057__1.call(this, x);
        case 2:
          return G__22057__2.call(this, x, y);
        case 3:
          return G__22057__3.call(this, x, y, z);
        default:
          var G__22061 = null;
          if (arguments.length > 3) {
            var G__22062__i = 0, G__22062__a = new Array(arguments.length - 3);
            while (G__22062__i < G__22062__a.length) {
              G__22062__a[G__22062__i] = arguments[G__22062__i + 3];
              ++G__22062__i;
            }
            G__22061 = new cljs.core.IndexedSeq(G__22062__a, 0);
          }
          return G__22057__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__22061);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__22057.cljs$lang$maxFixedArity = 3;
    G__22057.cljs$lang$applyTo = G__22057__4.cljs$lang$applyTo;
    G__22057.cljs$core$IFn$_invoke$arity$0 = G__22057__0;
    G__22057.cljs$core$IFn$_invoke$arity$1 = G__22057__1;
    G__22057.cljs$core$IFn$_invoke$arity$2 = G__22057__2;
    G__22057.cljs$core$IFn$_invoke$arity$3 = G__22057__3;
    G__22057.cljs$core$IFn$_invoke$arity$variadic = G__22057__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__22057;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__22063 = null;
    var G__22063__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }()], null);
    };
    var G__22063__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__22020 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__22020) : f.call(null, G__22020);
      }(), function() {
        var G__22021 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__22021) : g.call(null, G__22021);
      }()], null);
    };
    var G__22063__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__22022 = x;
        var G__22023 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__22022, G__22023) : f.call(null, G__22022, G__22023);
      }(), function() {
        var G__22024 = x;
        var G__22025 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__22024, G__22025) : g.call(null, G__22024, G__22025);
      }()], null);
    };
    var G__22063__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__22026 = x;
        var G__22027 = y;
        var G__22028 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__22026, G__22027, G__22028) : f.call(null, G__22026, G__22027, G__22028);
      }(), function() {
        var G__22029 = x;
        var G__22030 = y;
        var G__22031 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__22029, G__22030, G__22031) : g.call(null, G__22029, G__22030, G__22031);
      }()], null);
    };
    var G__22063__4 = function() {
      var G__22064__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__22064 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__22065__i = 0, G__22065__a = new Array(arguments.length - 3);
          while (G__22065__i < G__22065__a.length) {
            G__22065__a[G__22065__i] = arguments[G__22065__i + 3];
            ++G__22065__i;
          }
          args = new cljs.core.IndexedSeq(G__22065__a, 0);
        }
        return G__22064__delegate.call(this, x, y, z, args);
      };
      G__22064.cljs$lang$maxFixedArity = 3;
      G__22064.cljs$lang$applyTo = function(arglist__22066) {
        var x = cljs.core.first(arglist__22066);
        arglist__22066 = cljs.core.next(arglist__22066);
        var y = cljs.core.first(arglist__22066);
        arglist__22066 = cljs.core.next(arglist__22066);
        var z = cljs.core.first(arglist__22066);
        var args = cljs.core.rest(arglist__22066);
        return G__22064__delegate(x, y, z, args);
      };
      G__22064.cljs$core$IFn$_invoke$arity$variadic = G__22064__delegate;
      return G__22064;
    }();
    G__22063 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__22063__0.call(this);
        case 1:
          return G__22063__1.call(this, x);
        case 2:
          return G__22063__2.call(this, x, y);
        case 3:
          return G__22063__3.call(this, x, y, z);
        default:
          var G__22067 = null;
          if (arguments.length > 3) {
            var G__22068__i = 0, G__22068__a = new Array(arguments.length - 3);
            while (G__22068__i < G__22068__a.length) {
              G__22068__a[G__22068__i] = arguments[G__22068__i + 3];
              ++G__22068__i;
            }
            G__22067 = new cljs.core.IndexedSeq(G__22068__a, 0);
          }
          return G__22063__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__22067);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__22063.cljs$lang$maxFixedArity = 3;
    G__22063.cljs$lang$applyTo = G__22063__4.cljs$lang$applyTo;
    G__22063.cljs$core$IFn$_invoke$arity$0 = G__22063__0;
    G__22063.cljs$core$IFn$_invoke$arity$1 = G__22063__1;
    G__22063.cljs$core$IFn$_invoke$arity$2 = G__22063__2;
    G__22063.cljs$core$IFn$_invoke$arity$3 = G__22063__3;
    G__22063.cljs$core$IFn$_invoke$arity$variadic = G__22063__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__22063;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__22069 = null;
    var G__22069__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }(), function() {
        return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
      }()], null);
    };
    var G__22069__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__22032 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__22032) : f.call(null, G__22032);
      }(), function() {
        var G__22033 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__22033) : g.call(null, G__22033);
      }(), function() {
        var G__22034 = x;
        return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__22034) : h.call(null, G__22034);
      }()], null);
    };
    var G__22069__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__22035 = x;
        var G__22036 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__22035, G__22036) : f.call(null, G__22035, G__22036);
      }(), function() {
        var G__22037 = x;
        var G__22038 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__22037, G__22038) : g.call(null, G__22037, G__22038);
      }(), function() {
        var G__22039 = x;
        var G__22040 = y;
        return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__22039, G__22040) : h.call(null, G__22039, G__22040);
      }()], null);
    };
    var G__22069__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__22041 = x;
        var G__22042 = y;
        var G__22043 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__22041, G__22042, G__22043) : f.call(null, G__22041, G__22042, G__22043);
      }(), function() {
        var G__22044 = x;
        var G__22045 = y;
        var G__22046 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__22044, G__22045, G__22046) : g.call(null, G__22044, G__22045, G__22046);
      }(), function() {
        var G__22047 = x;
        var G__22048 = y;
        var G__22049 = z;
        return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__22047, G__22048, G__22049) : h.call(null, G__22047, G__22048, G__22049);
      }()], null);
    };
    var G__22069__4 = function() {
      var G__22070__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__22070 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__22071__i = 0, G__22071__a = new Array(arguments.length - 3);
          while (G__22071__i < G__22071__a.length) {
            G__22071__a[G__22071__i] = arguments[G__22071__i + 3];
            ++G__22071__i;
          }
          args = new cljs.core.IndexedSeq(G__22071__a, 0);
        }
        return G__22070__delegate.call(this, x, y, z, args);
      };
      G__22070.cljs$lang$maxFixedArity = 3;
      G__22070.cljs$lang$applyTo = function(arglist__22072) {
        var x = cljs.core.first(arglist__22072);
        arglist__22072 = cljs.core.next(arglist__22072);
        var y = cljs.core.first(arglist__22072);
        arglist__22072 = cljs.core.next(arglist__22072);
        var z = cljs.core.first(arglist__22072);
        var args = cljs.core.rest(arglist__22072);
        return G__22070__delegate(x, y, z, args);
      };
      G__22070.cljs$core$IFn$_invoke$arity$variadic = G__22070__delegate;
      return G__22070;
    }();
    G__22069 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__22069__0.call(this);
        case 1:
          return G__22069__1.call(this, x);
        case 2:
          return G__22069__2.call(this, x, y);
        case 3:
          return G__22069__3.call(this, x, y, z);
        default:
          var G__22073 = null;
          if (arguments.length > 3) {
            var G__22074__i = 0, G__22074__a = new Array(arguments.length - 3);
            while (G__22074__i < G__22074__a.length) {
              G__22074__a[G__22074__i] = arguments[G__22074__i + 3];
              ++G__22074__i;
            }
            G__22073 = new cljs.core.IndexedSeq(G__22074__a, 0);
          }
          return G__22069__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__22073);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__22069.cljs$lang$maxFixedArity = 3;
    G__22069.cljs$lang$applyTo = G__22069__4.cljs$lang$applyTo;
    G__22069.cljs$core$IFn$_invoke$arity$0 = G__22069__0;
    G__22069.cljs$core$IFn$_invoke$arity$1 = G__22069__1;
    G__22069.cljs$core$IFn$_invoke$arity$2 = G__22069__2;
    G__22069.cljs$core$IFn$_invoke$arity$3 = G__22069__3;
    G__22069.cljs$core$IFn$_invoke$arity$variadic = G__22069__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__22069;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__22075 = null;
      var G__22075__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__21998_SHARP_, p2__21999_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__21998_SHARP_, function() {
              return p2__21999_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__21999_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__21999_SHARP_.call(null);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__22075__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__22000_SHARP_, p2__22001_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__22000_SHARP_, function() {
              var G__22050 = x;
              return p2__22001_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__22001_SHARP_.cljs$core$IFn$_invoke$arity$1(G__22050) : p2__22001_SHARP_.call(null, G__22050);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__22075__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__22002_SHARP_, p2__22003_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__22002_SHARP_, function() {
              var G__22051 = x;
              var G__22052 = y;
              return p2__22003_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__22003_SHARP_.cljs$core$IFn$_invoke$arity$2(G__22051, G__22052) : p2__22003_SHARP_.call(null, G__22051, G__22052);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__22075__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__22004_SHARP_, p2__22005_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__22004_SHARP_, function() {
              var G__22053 = x;
              var G__22054 = y;
              var G__22055 = z;
              return p2__22005_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__22005_SHARP_.cljs$core$IFn$_invoke$arity$3(G__22053, G__22054, G__22055) : p2__22005_SHARP_.call(null, G__22053, G__22054, G__22055);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__22075__4 = function() {
        var G__22076__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__22006_SHARP_, p2__22007_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__22006_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__22007_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__22076 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__22077__i = 0, G__22077__a = new Array(arguments.length - 3);
            while (G__22077__i < G__22077__a.length) {
              G__22077__a[G__22077__i] = arguments[G__22077__i + 3];
              ++G__22077__i;
            }
            args = new cljs.core.IndexedSeq(G__22077__a, 0);
          }
          return G__22076__delegate.call(this, x, y, z, args);
        };
        G__22076.cljs$lang$maxFixedArity = 3;
        G__22076.cljs$lang$applyTo = function(arglist__22078) {
          var x = cljs.core.first(arglist__22078);
          arglist__22078 = cljs.core.next(arglist__22078);
          var y = cljs.core.first(arglist__22078);
          arglist__22078 = cljs.core.next(arglist__22078);
          var z = cljs.core.first(arglist__22078);
          var args = cljs.core.rest(arglist__22078);
          return G__22076__delegate(x, y, z, args);
        };
        G__22076.cljs$core$IFn$_invoke$arity$variadic = G__22076__delegate;
        return G__22076;
      }();
      G__22075 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__22075__0.call(this);
          case 1:
            return G__22075__1.call(this, x);
          case 2:
            return G__22075__2.call(this, x, y);
          case 3:
            return G__22075__3.call(this, x, y, z);
          default:
            var G__22079 = null;
            if (arguments.length > 3) {
              var G__22080__i = 0, G__22080__a = new Array(arguments.length - 3);
              while (G__22080__i < G__22080__a.length) {
                G__22080__a[G__22080__i] = arguments[G__22080__i + 3];
                ++G__22080__i;
              }
              G__22079 = new cljs.core.IndexedSeq(G__22080__a, 0);
            }
            return G__22075__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__22079);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__22075.cljs$lang$maxFixedArity = 3;
      G__22075.cljs$lang$applyTo = G__22075__4.cljs$lang$applyTo;
      G__22075.cljs$core$IFn$_invoke$arity$0 = G__22075__0;
      G__22075.cljs$core$IFn$_invoke$arity$1 = G__22075__1;
      G__22075.cljs$core$IFn$_invoke$arity$2 = G__22075__2;
      G__22075.cljs$core$IFn$_invoke$arity$3 = G__22075__3;
      G__22075.cljs$core$IFn$_invoke$arity$variadic = G__22075__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__22075;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq22008) {
  var G__22009 = cljs.core.first(seq22008);
  var seq22008__$1 = cljs.core.next(seq22008);
  var G__22010 = cljs.core.first(seq22008__$1);
  var seq22008__$2 = cljs.core.next(seq22008__$1);
  var G__22011 = cljs.core.first(seq22008__$2);
  var seq22008__$3 = cljs.core.next(seq22008__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__22009, G__22010, G__22011, seq22008__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun() {
  var G__22082 = arguments.length;
  switch(G__22082) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__22084 = cljs.core.next(coll);
      coll = G__22084;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__22085 = n - 1;
      var G__22086 = cljs.core.next(coll);
      n = G__22085;
      coll = G__22086;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall() {
  var G__22088 = arguments.length;
  switch(G__22088) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__22093 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__22093, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__22093, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4307__auto__ = flags;
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_22101 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4307__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4307__auto__)) {
              return or__4307__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__22102_22108 = cljs.core.first(coll);
          var G__22103_22109 = writer;
          var G__22104_22110 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__22102_22108, G__22103_22109, G__22104_22110) : print_one.call(null, G__22102_22108, G__22103_22109, G__22104_22110);
        } else {
        }
        var coll_22111__$1 = cljs.core.next(coll);
        var n_22112 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_22111__$1 && (n_22112 == null || !(n_22112 === 0))) {
            cljs.core._write(writer, sep);
            var G__22105_22113 = cljs.core.first(coll_22111__$1);
            var G__22106_22114 = writer;
            var G__22107_22115 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__22105_22113, G__22106_22114, G__22107_22115) : print_one.call(null, G__22105_22113, G__22106_22114, G__22107_22115);
            var G__22116 = cljs.core.next(coll_22111__$1);
            var G__22117 = n_22112 - 1;
            coll_22111__$1 = G__22116;
            n_22112 = G__22117;
            continue;
          } else {
            if (cljs.core.seq(coll_22111__$1) && n_22112 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4307__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4307__auto__)) {
                  return or__4307__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_22101;
  }
};
cljs.core.write_all = function cljs$core$write_all() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__22120 = cljs.core.seq(ss);
  var chunk__22121 = null;
  var count__22122 = 0;
  var i__22123 = 0;
  while (true) {
    if (i__22123 < count__22122) {
      var s = chunk__22121.cljs$core$IIndexed$_nth$arity$2(null, i__22123);
      cljs.core._write(writer, s);
      var G__22124 = seq__22120;
      var G__22125 = chunk__22121;
      var G__22126 = count__22122;
      var G__22127 = i__22123 + 1;
      seq__22120 = G__22124;
      chunk__22121 = G__22125;
      count__22122 = G__22126;
      i__22123 = G__22127;
      continue;
    } else {
      var temp__4423__auto__ = cljs.core.seq(seq__22120);
      if (temp__4423__auto__) {
        var seq__22120__$1 = temp__4423__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__22120__$1)) {
          var c__5092__auto__ = cljs.core.chunk_first(seq__22120__$1);
          var G__22128 = cljs.core.chunk_rest(seq__22120__$1);
          var G__22129 = c__5092__auto__;
          var G__22130 = cljs.core.count(c__5092__auto__);
          var G__22131 = 0;
          seq__22120 = G__22128;
          chunk__22121 = G__22129;
          count__22122 = G__22130;
          i__22123 = G__22131;
          continue;
        } else {
          var s = cljs.core.first(seq__22120__$1);
          cljs.core._write(writer, s);
          var G__22132 = cljs.core.next(seq__22120__$1);
          var G__22133 = null;
          var G__22134 = 0;
          var G__22135 = 0;
          seq__22120 = G__22132;
          chunk__22121 = G__22133;
          count__22122 = G__22134;
          i__22123 = G__22135;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq22118) {
  var G__22119 = cljs.core.first(seq22118);
  var seq22118__$1 = cljs.core.next(seq22118);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__22119, seq22118__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj22137 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj22137;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return [cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__22140 = '[\\\\"\b\f\n\r\t]';
    var G__22141 = "g";
    return RegExp(G__22140, G__22141);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__4295__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__4295__auto__)) {
          var and__4295__auto____$1 = function() {
            var G__22155 = obj;
            if (G__22155) {
              var bit__4981__auto__ = G__22155.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4981__auto__ || G__22155.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__22155.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__22155);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__22155);
            }
          }();
          if (and__4295__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__4295__auto____$1;
          }
        } else {
          return and__4295__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__22156_22166 = cljs.core.meta(obj);
        var G__22157_22167 = writer;
        var G__22158_22168 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__22156_22166, G__22157_22167, G__22158_22168) : cljs.core.pr_writer.call(null, G__22156_22166, G__22157_22167, G__22158_22168);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__22159 = obj;
            if (G__22159) {
              var bit__4974__auto__ = G__22159.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4974__auto__ || G__22159.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__22160 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__22161 = cljs.core.pr_writer;
                var G__22162 = writer;
                var G__22163 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__22160, G__22161, G__22162, G__22163) : cljs.core.print_map.call(null, G__22160, G__22161, G__22162, G__22163);
              } else {
                if (cljs.core.array_QMARK_(obj)) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__22164 = obj;
                    return goog.isString(G__22164);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__22169 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__22169;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.truth_(cljs.core.regexp_QMARK_(obj))) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__22165 = obj;
                            if (G__22165) {
                              var bit__4981__auto__ = G__22165.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4981__auto__ || G__22165.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__22165.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__22165);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__22165);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4421__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4421__auto__)) {
    var alt_impl = temp__4421__auto__;
    var G__22173 = obj;
    var G__22174 = writer;
    var G__22175 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__22173, G__22174, G__22175) : alt_impl.call(null, G__22173, G__22174, G__22175);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__22180 = cljs.core.seq(cljs.core.next(objs));
  var chunk__22181 = null;
  var count__22182 = 0;
  var i__22183 = 0;
  while (true) {
    if (i__22183 < count__22182) {
      var obj = chunk__22181.cljs$core$IIndexed$_nth$arity$2(null, i__22183);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__22184 = seq__22180;
      var G__22185 = chunk__22181;
      var G__22186 = count__22182;
      var G__22187 = i__22183 + 1;
      seq__22180 = G__22184;
      chunk__22181 = G__22185;
      count__22182 = G__22186;
      i__22183 = G__22187;
      continue;
    } else {
      var temp__4423__auto__ = cljs.core.seq(seq__22180);
      if (temp__4423__auto__) {
        var seq__22180__$1 = temp__4423__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__22180__$1)) {
          var c__5092__auto__ = cljs.core.chunk_first(seq__22180__$1);
          var G__22188 = cljs.core.chunk_rest(seq__22180__$1);
          var G__22189 = c__5092__auto__;
          var G__22190 = cljs.core.count(c__5092__auto__);
          var G__22191 = 0;
          seq__22180 = G__22188;
          chunk__22181 = G__22189;
          count__22182 = G__22190;
          i__22183 = G__22191;
          continue;
        } else {
          var obj = cljs.core.first(seq__22180__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__22192 = cljs.core.next(seq__22180__$1);
          var G__22193 = null;
          var G__22194 = 0;
          var G__22195 = 0;
          seq__22180 = G__22192;
          chunk__22181 = G__22193;
          count__22182 = G__22194;
          i__22183 = G__22195;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return [cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return [cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function cljs$core$pr_str() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq22196) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq22196));
};
cljs.core.prn_str = function cljs$core$prn_str() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq22197) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq22197));
};
cljs.core.pr = function cljs$core$pr() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq22198) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq22198));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__22199__i = 0, G__22199__a = new Array(arguments.length - 0);
      while (G__22199__i < G__22199__a.length) {
        G__22199__a[G__22199__i] = arguments[G__22199__i + 0];
        ++G__22199__i;
      }
      objs = new cljs.core.IndexedSeq(G__22199__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__22200) {
    var objs = cljs.core.seq(arglist__22200);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq22201) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq22201));
};
cljs.core.println = function cljs$core$println() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq22202) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq22202));
};
cljs.core.println_str = function cljs$core$println_str() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq22203) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq22203));
};
cljs.core.prn = function cljs$core$prn() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq22204) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq22204));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__22211_22217 = cljs.core.key(e);
    var G__22212_22218 = w;
    var G__22213_22219 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__22211_22217, G__22212_22218, G__22213_22219) : print_one.call(null, G__22211_22217, G__22212_22218, G__22213_22219);
    cljs.core._write(w, " ");
    var G__22214 = cljs.core.val(e);
    var G__22215 = w;
    var G__22216 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__22214, G__22215, G__22216) : print_one.call(null, G__22214, G__22215, G__22216);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_() {
  var argseq__5347__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5347__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq22220) {
  var G__22221 = cljs.core.first(seq22220);
  var seq22220__$1 = cljs.core.next(seq22220);
  var G__22222 = cljs.core.first(seq22220__$1);
  var seq22220__$2 = cljs.core.next(seq22220__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__22221, G__22222, seq22220__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym() {
  var G__22224 = arguments.length;
  switch(G__22224) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = function() {
      var G__22225 = 0;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__22225) : cljs.core.atom.call(null, G__22225);
    }();
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "value", "value", 1946509744, null)], null);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__22228 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22228) : cljs.core.deref.call(null, G__22228);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__22229_SHARP_, p2__22230_SHARP_) {
    var ret = function() {
      var G__22233 = p1__22229_SHARP_;
      var G__22234 = p2__22230_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__22233, G__22234) : rf.call(null, G__22233, G__22234);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__22237 = null;
      var G__22237__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__22237__1 = function(result) {
        var G__22236 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__22236) : rf.call(null, G__22236);
      };
      var G__22237__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__22237 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__22237__0.call(this);
          case 1:
            return G__22237__1.call(this, result);
          case 2:
            return G__22237__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__22237.cljs$core$IFn$_invoke$arity$0 = G__22237__0;
      G__22237.cljs$core$IFn$_invoke$arity$1 = G__22237__1;
      G__22237.cljs$core$IFn$_invoke$arity$2 = G__22237__2;
      return G__22237;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe() {
  var G__22239 = arguments.length;
  switch(G__22239) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__22245 = null;
        var G__22245__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__22245__1 = function(result) {
          var G__22240 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__22240) : rf.call(null, G__22240);
        };
        var G__22245__2 = function(result, input) {
          var prior = function() {
            var G__22241 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22241) : cljs.core.deref.call(null, G__22241);
          }();
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            var G__22242 = result;
            var G__22243 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__22242, G__22243) : rf.call(null, G__22242, G__22243);
          }
        };
        G__22245 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__22245__0.call(this);
            case 1:
              return G__22245__1.call(this, result);
            case 2:
              return G__22245__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__22245.cljs$core$IFn$_invoke$arity$0 = G__22245__0;
        G__22245.cljs$core$IFn$_invoke$arity$1 = G__22245__1;
        G__22245.cljs$core$IFn$_invoke$arity$2 = G__22245__2;
        return G__22245;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample() {
  var G__22247 = arguments.length;
  switch(G__22247) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "coll", "coll", -1006698606, null)], null);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5283__auto__ = this;
  return cljs.core.es6_iterator(this__5283__auto__);
};
cljs.core.eduction = function cljs$core$eduction() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
  return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
};
cljs.core.eduction.cljs$lang$maxFixedArity = 0;
cljs.core.eduction.cljs$lang$applyTo = function(seq22249) {
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq22249));
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__22251_SHARP_, p2__22250_SHARP_) {
    var G__22253 = p2__22250_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__22253) : proc.call(null, G__22253);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj22255 = {};
  return obj22255;
}();
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (function() {
    var and__4295__auto__ = x;
    if (and__4295__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4943__auto__ = x == null ? null : x;
    return function() {
      var or__4307__auto__ = cljs.core._clj__GT_js[function() {
        var G__22259 = x__4943__auto__;
        return goog.typeOf(G__22259);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (function() {
    var and__4295__auto__ = x;
    if (and__4295__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4943__auto__ = x == null ? null : x;
    return function() {
      var or__4307__auto__ = cljs.core._key__GT_js[function() {
        var G__22263 = x__4943__auto__;
        return goog.typeOf(G__22263);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (function() {
    var G__22266 = k;
    if (G__22266) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__22266.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__22266.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__22266);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__22266);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__22267 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__22267) : cljs.core.clj__GT_js.call(null, G__22267);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__22283 = x;
      if (G__22283) {
        var bit__4981__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4307__auto__ = bit__4981__auto__;
          if (cljs.core.truth_(or__4307__auto__)) {
            return or__4307__auto__;
          } else {
            return G__22283.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__22283.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__22283);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__22283);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return [cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj22285 = {};
              return obj22285;
            }();
            var seq__22286_22296 = cljs.core.seq(x);
            var chunk__22287_22297 = null;
            var count__22288_22298 = 0;
            var i__22289_22299 = 0;
            while (true) {
              if (i__22289_22299 < count__22288_22298) {
                var vec__22290_22300 = chunk__22287_22297.cljs$core$IIndexed$_nth$arity$2(null, i__22289_22299);
                var k_22301 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__22290_22300, 0, null);
                var v_22302 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__22290_22300, 1, null);
                m[cljs.core.key__GT_js(k_22301)] = cljs$core$clj__GT_js(v_22302);
                var G__22303 = seq__22286_22296;
                var G__22304 = chunk__22287_22297;
                var G__22305 = count__22288_22298;
                var G__22306 = i__22289_22299 + 1;
                seq__22286_22296 = G__22303;
                chunk__22287_22297 = G__22304;
                count__22288_22298 = G__22305;
                i__22289_22299 = G__22306;
                continue;
              } else {
                var temp__4423__auto___22307 = cljs.core.seq(seq__22286_22296);
                if (temp__4423__auto___22307) {
                  var seq__22286_22308__$1 = temp__4423__auto___22307;
                  if (cljs.core.chunked_seq_QMARK_(seq__22286_22308__$1)) {
                    var c__5092__auto___22309 = cljs.core.chunk_first(seq__22286_22308__$1);
                    var G__22310 = cljs.core.chunk_rest(seq__22286_22308__$1);
                    var G__22311 = c__5092__auto___22309;
                    var G__22312 = cljs.core.count(c__5092__auto___22309);
                    var G__22313 = 0;
                    seq__22286_22296 = G__22310;
                    chunk__22287_22297 = G__22311;
                    count__22288_22298 = G__22312;
                    i__22289_22299 = G__22313;
                    continue;
                  } else {
                    var vec__22291_22314 = cljs.core.first(seq__22286_22308__$1);
                    var k_22315 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__22291_22314, 0, null);
                    var v_22316 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__22291_22314, 1, null);
                    m[cljs.core.key__GT_js(k_22315)] = cljs$core$clj__GT_js(v_22316);
                    var G__22317 = cljs.core.next(seq__22286_22308__$1);
                    var G__22318 = null;
                    var G__22319 = 0;
                    var G__22320 = 0;
                    seq__22286_22296 = G__22317;
                    chunk__22287_22297 = G__22318;
                    count__22288_22298 = G__22319;
                    i__22289_22299 = G__22320;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__22292_22321 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__22293_22322 = null;
              var count__22294_22323 = 0;
              var i__22295_22324 = 0;
              while (true) {
                if (i__22295_22324 < count__22294_22323) {
                  var x_22325__$1 = chunk__22293_22322.cljs$core$IIndexed$_nth$arity$2(null, i__22295_22324);
                  arr.push(x_22325__$1);
                  var G__22326 = seq__22292_22321;
                  var G__22327 = chunk__22293_22322;
                  var G__22328 = count__22294_22323;
                  var G__22329 = i__22295_22324 + 1;
                  seq__22292_22321 = G__22326;
                  chunk__22293_22322 = G__22327;
                  count__22294_22323 = G__22328;
                  i__22295_22324 = G__22329;
                  continue;
                } else {
                  var temp__4423__auto___22330 = cljs.core.seq(seq__22292_22321);
                  if (temp__4423__auto___22330) {
                    var seq__22292_22331__$1 = temp__4423__auto___22330;
                    if (cljs.core.chunked_seq_QMARK_(seq__22292_22331__$1)) {
                      var c__5092__auto___22332 = cljs.core.chunk_first(seq__22292_22331__$1);
                      var G__22333 = cljs.core.chunk_rest(seq__22292_22331__$1);
                      var G__22334 = c__5092__auto___22332;
                      var G__22335 = cljs.core.count(c__5092__auto___22332);
                      var G__22336 = 0;
                      seq__22292_22321 = G__22333;
                      chunk__22293_22322 = G__22334;
                      count__22294_22323 = G__22335;
                      i__22295_22324 = G__22336;
                      continue;
                    } else {
                      var x_22337__$1 = cljs.core.first(seq__22292_22331__$1);
                      arr.push(x_22337__$1);
                      var G__22338 = cljs.core.next(seq__22292_22331__$1);
                      var G__22339 = null;
                      var G__22340 = 0;
                      var G__22341 = 0;
                      seq__22292_22321 = G__22338;
                      chunk__22293_22322 = G__22339;
                      count__22294_22323 = G__22340;
                      i__22295_22324 = G__22341;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj22343 = {};
  return obj22343;
}();
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (function() {
    var and__4295__auto__ = x;
    if (and__4295__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4943__auto__ = x == null ? null : x;
    return function() {
      var or__4307__auto__ = cljs.core._js__GT_clj[function() {
        var G__22347 = x__4943__auto__;
        return goog.typeOf(G__22347);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj() {
  var G__22351 = arguments.length;
  switch(G__22351) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5358__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__22352 = opts;
  var map__22352__$1 = cljs.core.seq_QMARK_(map__22352) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__22352) : map__22352;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__22352__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__22352, map__22352__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (function() {
        var G__22368 = x__$1;
        if (G__22368) {
          var bit__4981__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4307__auto__ = bit__4981__auto__;
            if (cljs.core.truth_(or__4307__auto__)) {
              return or__4307__auto__;
            } else {
              return G__22368.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__22368.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__22368);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__22368);
        }
      }()) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__5061__auto__ = function(map__22352, map__22352__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__22369(s__22370) {
                      return new cljs.core.LazySeq(null, function(map__22352, map__22352__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__22370__$1 = s__22370;
                          while (true) {
                            var temp__4423__auto__ = cljs.core.seq(s__22370__$1);
                            if (temp__4423__auto__) {
                              var s__22370__$2 = temp__4423__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__22370__$2)) {
                                var c__5059__auto__ = cljs.core.chunk_first(s__22370__$2);
                                var size__5060__auto__ = cljs.core.count(c__5059__auto__);
                                var b__22372 = cljs.core.chunk_buffer(size__5060__auto__);
                                if (function() {
                                  var i__22371 = 0;
                                  while (true) {
                                    if (i__22371 < size__5060__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__5059__auto__, i__22371);
                                      cljs.core.chunk_append(b__22372, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                        var G__22377 = k;
                                        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__22377) : keyfn.call(null, G__22377);
                                      }(), cljs$core$thisfn(x__$1[k])], null));
                                      var G__22380 = i__22371 + 1;
                                      i__22371 = G__22380;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__22372), cljs$core$thisfn_$_iter__22369(cljs.core.chunk_rest(s__22370__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__22372), null);
                                }
                              } else {
                                var k = cljs.core.first(s__22370__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                  var G__22378 = k;
                                  return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__22378) : keyfn.call(null, G__22378);
                                }(), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__22369(cljs.core.rest(s__22370__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__22352, map__22352__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__22352, map__22352__$1, keywordize_keys, keyfn);
                  return iter__5061__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__22352, map__22352__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq22348) {
  var G__22349 = cljs.core.first(seq22348);
  var seq22348__$1 = cljs.core.next(seq22348);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__22349, seq22348__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__22383 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__22383) : cljs.core.atom.call(null, G__22383);
  }();
  return function(mem) {
    return function() {
      var G__22385__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__22384 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22384) : cljs.core.deref.call(null, G__22384);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__22385 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__22386__i = 0, G__22386__a = new Array(arguments.length - 0);
          while (G__22386__i < G__22386__a.length) {
            G__22386__a[G__22386__i] = arguments[G__22386__i + 0];
            ++G__22386__i;
          }
          args = new cljs.core.IndexedSeq(G__22386__a, 0);
        }
        return G__22385__delegate.call(this, args);
      };
      G__22385.cljs$lang$maxFixedArity = 0;
      G__22385.cljs$lang$applyTo = function(arglist__22387) {
        var args = cljs.core.seq(arglist__22387);
        return G__22385__delegate(args);
      };
      G__22385.cljs$core$IFn$_invoke$arity$variadic = G__22385__delegate;
      return G__22385;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline() {
  var G__22391 = arguments.length;
  switch(G__22391) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5358__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }();
    if (cljs.core.fn_QMARK_(ret)) {
      var G__22393 = ret;
      f = G__22393;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq22388) {
  var G__22389 = cljs.core.first(seq22388);
  var seq22388__$1 = cljs.core.next(seq22388);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__22389, seq22388__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand() {
  var G__22395 = arguments.length;
  switch(G__22395) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function() {
    return Math.random();
  }() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__22398 = function() {
    return Math.random();
  }() * n;
  return Math.floor(G__22398);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__22400 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__22400) : f.call(null, G__22400);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__22402 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__22402) : cljs.core.atom.call(null, G__22402);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq22403) {
  var G__22404 = cljs.core.first(seq22403);
  var seq22403__$1 = cljs.core.next(seq22403);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__22404, seq22403__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_() {
  var G__22406 = arguments.length;
  switch(G__22406) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__22407 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22407) : cljs.core.deref.call(null, G__22407);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__4307__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__4307__auto__) {
    return or__4307__auto__;
  } else {
    var or__4307__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__4307__auto____$1) {
      return or__4307__auto____$1;
    } else {
      var and__4295__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__4295__auto__) {
        var and__4295__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__4295__auto____$1) {
          var and__4295__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__4295__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__22433 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                  var G__22430 = i;
                  return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__22430) : child.call(null, G__22430);
                }(), function() {
                  var G__22431 = i;
                  return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__22431) : parent.call(null, G__22431);
                }());
                var G__22434 = i + 1;
                ret = G__22433;
                i = G__22434;
                continue;
              }
              break;
            }
          } else {
            return and__4295__auto____$2;
          }
        } else {
          return and__4295__auto____$1;
        }
      } else {
        return and__4295__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents() {
  var G__22436 = arguments.length;
  switch(G__22436) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__22437 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22437) : cljs.core.deref.call(null, G__22437);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors() {
  var G__22440 = arguments.length;
  switch(G__22440) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__22441 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22441) : cljs.core.deref.call(null, G__22441);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants() {
  var G__22444 = arguments.length;
  switch(G__22444) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__22445 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22445) : cljs.core.deref.call(null, G__22445);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive() {
  var G__22448 = arguments.length;
  switch(G__22448) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
            var G__22449 = target;
            return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__22449) : targets.call(null, G__22449);
          }())));
        };
      }(tp, td, ta), m, cljs.core.cons(source, function() {
        var G__22450 = source;
        return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__22450) : sources.call(null, G__22450);
      }()));
    };
  }(tp, td, ta);
  var or__4307__auto__ = cljs.core.contains_QMARK_(function() {
    var G__22454 = tag;
    return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__22454) : tp.call(null, G__22454);
  }(), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(function() {
      var G__22455 = tag;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__22455) : ta.call(null, G__22455);
    }(), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(function() {
      var G__22456 = parent;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__22456) : ta.call(null, G__22456);
    }(), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__4307__auto__)) {
    return or__4307__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive() {
  var G__22462 = arguments.length;
  switch(G__22462) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(function() {
    var G__22463 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__22463) : parentMap.call(null, G__22463);
  }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
    var G__22464 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__22464) : parentMap.call(null, G__22464);
  }(), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__22458_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__22458_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__22458_SHARP_), cljs.core.second(p1__22458_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(function() {
    var G__22465 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__22465) : parentMap.call(null, G__22465);
  }(), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__22459_SHARP_, p2__22460_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__22459_SHARP_, p2__22460_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__22469 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22469) : cljs.core.deref.call(null, G__22469);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__22470 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22470) : cljs.core.deref.call(null, G__22470);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__22486 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22486) : cljs.core.deref.call(null, G__22486);
  }().call(null, x);
  var or__4307__auto__ = cljs.core.truth_(function() {
    var and__4295__auto__ = xprefs;
    if (cljs.core.truth_(and__4295__auto__)) {
      var G__22488 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__22488) : xprefs.call(null, G__22488);
    } else {
      return and__4295__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4307__auto__)) {
    return or__4307__auto__;
  } else {
    var or__4307__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__22489 = cljs.core.rest(ps);
          ps = G__22489;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4307__auto____$1)) {
      return or__4307__auto____$1;
    } else {
      var or__4307__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__22490 = cljs.core.rest(ps);
            ps = G__22490;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4307__auto____$2)) {
        return or__4307__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4307__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4307__auto__)) {
    return or__4307__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__22504) {
    var vec__22505 = p__22504;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__22505, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__22505, 1, null);
    var e = vec__22505;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__22506 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22506) : cljs.core.deref.call(null, G__22506);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4307__auto__ = be == null;
        if (or__4307__auto__) {
          return or__4307__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__22507 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22507) : cljs.core.deref.call(null, G__22507);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__22508 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22508) : cljs.core.deref.call(null, G__22508);
    }(), function() {
      var G__22509 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__22509) : cljs.core.deref.call(null, G__22509);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj22511 = {};
  return obj22511;
}();
cljs.core._reset = function cljs$core$_reset(mf) {
  if (function() {
    var and__4295__auto__ = mf;
    if (and__4295__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4943__auto__ = mf == null ? null : mf;
    return function() {
      var or__4307__auto__ = cljs.core._reset[function() {
        var G__22515 = x__4943__auto__;
        return goog.typeOf(G__22515);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._reset["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (function() {
    var and__4295__auto__ = mf;
    if (and__4295__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4943__auto__ = mf == null ? null : mf;
    return function() {
      var or__4307__auto__ = cljs.core._add_method[function() {
        var G__22519 = x__4943__auto__;
        return goog.typeOf(G__22519);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._add_method["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (function() {
    var and__4295__auto__ = mf;
    if (and__4295__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4943__auto__ = mf == null ? null : mf;
    return function() {
      var or__4307__auto__ = cljs.core._remove_method[function() {
        var G__22523 = x__4943__auto__;
        return goog.typeOf(G__22523);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._remove_method["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__4295__auto__ = mf;
    if (and__4295__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4943__auto__ = mf == null ? null : mf;
    return function() {
      var or__4307__auto__ = cljs.core._prefer_method[function() {
        var G__22527 = x__4943__auto__;
        return goog.typeOf(G__22527);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._prefer_method["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (function() {
    var and__4295__auto__ = mf;
    if (and__4295__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4943__auto__ = mf == null ? null : mf;
    return function() {
      var or__4307__auto__ = cljs.core._get_method[function() {
        var G__22531 = x__4943__auto__;
        return goog.typeOf(G__22531);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._get_method["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (function() {
    var and__4295__auto__ = mf;
    if (and__4295__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4943__auto__ = mf == null ? null : mf;
    return function() {
      var or__4307__auto__ = cljs.core._methods[function() {
        var G__22535 = x__4943__auto__;
        return goog.typeOf(G__22535);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._methods["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (function() {
    var and__4295__auto__ = mf;
    if (and__4295__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4943__auto__ = mf == null ? null : mf;
    return function() {
      var or__4307__auto__ = cljs.core._prefers[function() {
        var G__22539 = x__4943__auto__;
        return goog.typeOf(G__22539);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._prefers["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (function() {
    var and__4295__auto__ = mf;
    if (and__4295__auto__) {
      return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__4943__auto__ = mf == null ? null : mf;
    return function() {
      var or__4307__auto__ = cljs.core._default_dispatch_val[function() {
        var G__22543 = x__4943__auto__;
        return goog.typeOf(G__22543);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._default_dispatch_val["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (function() {
    var and__4295__auto__ = mf;
    if (and__4295__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__4943__auto__ = mf == null ? null : mf;
    return function() {
      var or__4307__auto__ = cljs.core._dispatch_fn[function() {
        var G__22547 = x__4943__auto__;
        return goog.typeOf(G__22547);
      }()];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core._dispatch_fn["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__23396 = null;
  var G__23396__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__23396__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22549 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__22549) : self__.dispatch_fn.call(null, G__22549);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22550 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__22550) : target_fn.call(null, G__22550);
  };
  var G__23396__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22551 = a;
      var G__22552 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__22551, G__22552) : self__.dispatch_fn.call(null, G__22551, G__22552);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22553 = a;
    var G__22554 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__22553, G__22554) : target_fn.call(null, G__22553, G__22554);
  };
  var G__23396__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22555 = a;
      var G__22556 = b;
      var G__22557 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__22555, G__22556, G__22557) : self__.dispatch_fn.call(null, G__22555, G__22556, G__22557);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22558 = a;
    var G__22559 = b;
    var G__22560 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__22558, G__22559, G__22560) : target_fn.call(null, G__22558, G__22559, G__22560);
  };
  var G__23396__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22561 = a;
      var G__22562 = b;
      var G__22563 = c;
      var G__22564 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__22561, G__22562, G__22563, G__22564) : self__.dispatch_fn.call(null, G__22561, G__22562, G__22563, G__22564);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22565 = a;
    var G__22566 = b;
    var G__22567 = c;
    var G__22568 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__22565, G__22566, G__22567, G__22568) : target_fn.call(null, G__22565, G__22566, G__22567, G__22568);
  };
  var G__23396__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22569 = a;
      var G__22570 = b;
      var G__22571 = c;
      var G__22572 = d;
      var G__22573 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__22569, G__22570, G__22571, G__22572, G__22573) : self__.dispatch_fn.call(null, G__22569, G__22570, G__22571, G__22572, G__22573);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22574 = a;
    var G__22575 = b;
    var G__22576 = c;
    var G__22577 = d;
    var G__22578 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__22574, G__22575, G__22576, G__22577, G__22578) : target_fn.call(null, G__22574, G__22575, G__22576, G__22577, G__22578);
  };
  var G__23396__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22579 = a;
      var G__22580 = b;
      var G__22581 = c;
      var G__22582 = d;
      var G__22583 = e;
      var G__22584 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__22579, G__22580, G__22581, G__22582, G__22583, G__22584) : self__.dispatch_fn.call(null, G__22579, G__22580, G__22581, G__22582, G__22583, G__22584);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22585 = a;
    var G__22586 = b;
    var G__22587 = c;
    var G__22588 = d;
    var G__22589 = e;
    var G__22590 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__22585, G__22586, G__22587, G__22588, G__22589, G__22590) : target_fn.call(null, G__22585, G__22586, G__22587, G__22588, G__22589, G__22590);
  };
  var G__23396__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22591 = a;
      var G__22592 = b;
      var G__22593 = c;
      var G__22594 = d;
      var G__22595 = e;
      var G__22596 = f;
      var G__22597 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__22591, G__22592, G__22593, G__22594, G__22595, G__22596, G__22597) : self__.dispatch_fn.call(null, G__22591, G__22592, G__22593, G__22594, G__22595, G__22596, G__22597);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22598 = a;
    var G__22599 = b;
    var G__22600 = c;
    var G__22601 = d;
    var G__22602 = e;
    var G__22603 = f;
    var G__22604 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__22598, G__22599, G__22600, G__22601, G__22602, G__22603, G__22604) : target_fn.call(null, G__22598, G__22599, G__22600, G__22601, G__22602, G__22603, G__22604);
  };
  var G__23396__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22605 = a;
      var G__22606 = b;
      var G__22607 = c;
      var G__22608 = d;
      var G__22609 = e;
      var G__22610 = f;
      var G__22611 = g;
      var G__22612 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__22605, G__22606, G__22607, G__22608, G__22609, G__22610, G__22611, G__22612) : self__.dispatch_fn.call(null, G__22605, G__22606, G__22607, G__22608, G__22609, G__22610, G__22611, G__22612);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22613 = a;
    var G__22614 = b;
    var G__22615 = c;
    var G__22616 = d;
    var G__22617 = e;
    var G__22618 = f;
    var G__22619 = g;
    var G__22620 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__22613, G__22614, G__22615, G__22616, G__22617, G__22618, G__22619, G__22620) : target_fn.call(null, G__22613, G__22614, G__22615, G__22616, G__22617, G__22618, G__22619, G__22620);
  };
  var G__23396__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22621 = a;
      var G__22622 = b;
      var G__22623 = c;
      var G__22624 = d;
      var G__22625 = e;
      var G__22626 = f;
      var G__22627 = g;
      var G__22628 = h;
      var G__22629 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__22621, G__22622, G__22623, G__22624, G__22625, G__22626, G__22627, G__22628, G__22629) : self__.dispatch_fn.call(null, G__22621, G__22622, G__22623, G__22624, G__22625, G__22626, G__22627, G__22628, G__22629);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22630 = a;
    var G__22631 = b;
    var G__22632 = c;
    var G__22633 = d;
    var G__22634 = e;
    var G__22635 = f;
    var G__22636 = g;
    var G__22637 = h;
    var G__22638 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__22630, G__22631, G__22632, G__22633, G__22634, G__22635, G__22636, G__22637, G__22638) : target_fn.call(null, G__22630, G__22631, G__22632, G__22633, G__22634, G__22635, G__22636, G__22637, G__22638);
  };
  var G__23396__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22639 = a;
      var G__22640 = b;
      var G__22641 = c;
      var G__22642 = d;
      var G__22643 = e;
      var G__22644 = f;
      var G__22645 = g;
      var G__22646 = h;
      var G__22647 = i;
      var G__22648 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__22639, G__22640, G__22641, G__22642, G__22643, G__22644, G__22645, G__22646, G__22647, G__22648) : self__.dispatch_fn.call(null, G__22639, G__22640, G__22641, G__22642, G__22643, G__22644, G__22645, G__22646, G__22647, G__22648);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22649 = a;
    var G__22650 = b;
    var G__22651 = c;
    var G__22652 = d;
    var G__22653 = e;
    var G__22654 = f;
    var G__22655 = g;
    var G__22656 = h;
    var G__22657 = i;
    var G__22658 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__22649, G__22650, G__22651, G__22652, G__22653, G__22654, G__22655, G__22656, G__22657, G__22658) : target_fn.call(null, G__22649, G__22650, G__22651, G__22652, G__22653, G__22654, G__22655, G__22656, G__22657, G__22658);
  };
  var G__23396__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22659 = a;
      var G__22660 = b;
      var G__22661 = c;
      var G__22662 = d;
      var G__22663 = e;
      var G__22664 = f;
      var G__22665 = g;
      var G__22666 = h;
      var G__22667 = i;
      var G__22668 = j;
      var G__22669 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__22659, G__22660, G__22661, G__22662, G__22663, G__22664, G__22665, G__22666, G__22667, G__22668, G__22669) : self__.dispatch_fn.call(null, G__22659, G__22660, G__22661, G__22662, G__22663, G__22664, G__22665, G__22666, G__22667, G__22668, G__22669);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22670 = a;
    var G__22671 = b;
    var G__22672 = c;
    var G__22673 = d;
    var G__22674 = e;
    var G__22675 = f;
    var G__22676 = g;
    var G__22677 = h;
    var G__22678 = i;
    var G__22679 = j;
    var G__22680 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__22670, G__22671, G__22672, G__22673, G__22674, G__22675, G__22676, G__22677, G__22678, G__22679, G__22680) : target_fn.call(null, G__22670, G__22671, G__22672, G__22673, G__22674, G__22675, G__22676, G__22677, G__22678, G__22679, G__22680);
  };
  var G__23396__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22681 = a;
      var G__22682 = b;
      var G__22683 = c;
      var G__22684 = d;
      var G__22685 = e;
      var G__22686 = f;
      var G__22687 = g;
      var G__22688 = h;
      var G__22689 = i;
      var G__22690 = j;
      var G__22691 = k;
      var G__22692 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__22681, G__22682, G__22683, G__22684, G__22685, G__22686, G__22687, G__22688, G__22689, G__22690, G__22691, G__22692) : self__.dispatch_fn.call(null, G__22681, G__22682, G__22683, G__22684, G__22685, G__22686, G__22687, G__22688, G__22689, G__22690, G__22691, G__22692);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22693 = a;
    var G__22694 = b;
    var G__22695 = c;
    var G__22696 = d;
    var G__22697 = e;
    var G__22698 = f;
    var G__22699 = g;
    var G__22700 = h;
    var G__22701 = i;
    var G__22702 = j;
    var G__22703 = k;
    var G__22704 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__22693, G__22694, G__22695, G__22696, G__22697, G__22698, G__22699, G__22700, G__22701, G__22702, G__22703, G__22704) : target_fn.call(null, G__22693, G__22694, G__22695, G__22696, G__22697, G__22698, G__22699, G__22700, G__22701, G__22702, G__22703, G__22704);
  };
  var G__23396__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22705 = a;
      var G__22706 = b;
      var G__22707 = c;
      var G__22708 = d;
      var G__22709 = e;
      var G__22710 = f;
      var G__22711 = g;
      var G__22712 = h;
      var G__22713 = i;
      var G__22714 = j;
      var G__22715 = k;
      var G__22716 = l;
      var G__22717 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__22705, G__22706, G__22707, G__22708, G__22709, G__22710, G__22711, G__22712, G__22713, G__22714, G__22715, G__22716, G__22717) : self__.dispatch_fn.call(null, G__22705, G__22706, G__22707, G__22708, G__22709, G__22710, G__22711, G__22712, G__22713, G__22714, G__22715, G__22716, G__22717);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22718 = a;
    var G__22719 = b;
    var G__22720 = c;
    var G__22721 = d;
    var G__22722 = e;
    var G__22723 = f;
    var G__22724 = g;
    var G__22725 = h;
    var G__22726 = i;
    var G__22727 = j;
    var G__22728 = k;
    var G__22729 = l;
    var G__22730 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__22718, G__22719, G__22720, G__22721, G__22722, G__22723, G__22724, G__22725, G__22726, G__22727, G__22728, G__22729, G__22730) : target_fn.call(null, G__22718, G__22719, G__22720, G__22721, G__22722, G__22723, G__22724, G__22725, G__22726, G__22727, G__22728, G__22729, G__22730);
  };
  var G__23396__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22731 = a;
      var G__22732 = b;
      var G__22733 = c;
      var G__22734 = d;
      var G__22735 = e;
      var G__22736 = f;
      var G__22737 = g;
      var G__22738 = h;
      var G__22739 = i;
      var G__22740 = j;
      var G__22741 = k;
      var G__22742 = l;
      var G__22743 = m;
      var G__22744 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__22731, G__22732, G__22733, G__22734, G__22735, G__22736, G__22737, G__22738, G__22739, G__22740, G__22741, G__22742, G__22743, G__22744) : self__.dispatch_fn.call(null, G__22731, G__22732, G__22733, G__22734, G__22735, G__22736, G__22737, G__22738, G__22739, G__22740, G__22741, G__22742, G__22743, G__22744);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22745 = a;
    var G__22746 = b;
    var G__22747 = c;
    var G__22748 = d;
    var G__22749 = e;
    var G__22750 = f;
    var G__22751 = g;
    var G__22752 = h;
    var G__22753 = i;
    var G__22754 = j;
    var G__22755 = k;
    var G__22756 = l;
    var G__22757 = m;
    var G__22758 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__22745, G__22746, G__22747, G__22748, G__22749, G__22750, G__22751, G__22752, G__22753, G__22754, G__22755, G__22756, G__22757, G__22758) : target_fn.call(null, G__22745, G__22746, G__22747, G__22748, G__22749, G__22750, G__22751, G__22752, G__22753, G__22754, G__22755, G__22756, G__22757, G__22758);
  };
  var G__23396__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22759 = a;
      var G__22760 = b;
      var G__22761 = c;
      var G__22762 = d;
      var G__22763 = e;
      var G__22764 = f;
      var G__22765 = g;
      var G__22766 = h;
      var G__22767 = i;
      var G__22768 = j;
      var G__22769 = k;
      var G__22770 = l;
      var G__22771 = m;
      var G__22772 = n;
      var G__22773 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__22759, G__22760, G__22761, G__22762, G__22763, G__22764, G__22765, G__22766, G__22767, G__22768, G__22769, G__22770, G__22771, G__22772, G__22773) : self__.dispatch_fn.call(null, G__22759, G__22760, G__22761, G__22762, G__22763, G__22764, G__22765, G__22766, G__22767, G__22768, G__22769, G__22770, G__22771, G__22772, G__22773);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22774 = a;
    var G__22775 = b;
    var G__22776 = c;
    var G__22777 = d;
    var G__22778 = e;
    var G__22779 = f;
    var G__22780 = g;
    var G__22781 = h;
    var G__22782 = i;
    var G__22783 = j;
    var G__22784 = k;
    var G__22785 = l;
    var G__22786 = m;
    var G__22787 = n;
    var G__22788 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__22774, G__22775, G__22776, G__22777, G__22778, G__22779, G__22780, G__22781, G__22782, G__22783, G__22784, G__22785, G__22786, G__22787, G__22788) : target_fn.call(null, G__22774, G__22775, G__22776, G__22777, G__22778, G__22779, G__22780, G__22781, G__22782, G__22783, G__22784, G__22785, G__22786, G__22787, G__22788);
  };
  var G__23396__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22789 = a;
      var G__22790 = b;
      var G__22791 = c;
      var G__22792 = d;
      var G__22793 = e;
      var G__22794 = f;
      var G__22795 = g;
      var G__22796 = h;
      var G__22797 = i;
      var G__22798 = j;
      var G__22799 = k;
      var G__22800 = l;
      var G__22801 = m;
      var G__22802 = n;
      var G__22803 = o;
      var G__22804 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__22789, G__22790, G__22791, G__22792, G__22793, G__22794, G__22795, G__22796, G__22797, G__22798, G__22799, G__22800, G__22801, G__22802, G__22803, G__22804) : self__.dispatch_fn.call(null, G__22789, G__22790, G__22791, G__22792, G__22793, G__22794, G__22795, G__22796, G__22797, G__22798, G__22799, G__22800, G__22801, G__22802, G__22803, G__22804);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22805 = a;
    var G__22806 = b;
    var G__22807 = c;
    var G__22808 = d;
    var G__22809 = e;
    var G__22810 = f;
    var G__22811 = g;
    var G__22812 = h;
    var G__22813 = i;
    var G__22814 = j;
    var G__22815 = k;
    var G__22816 = l;
    var G__22817 = m;
    var G__22818 = n;
    var G__22819 = o;
    var G__22820 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__22805, G__22806, G__22807, G__22808, G__22809, G__22810, G__22811, G__22812, G__22813, G__22814, G__22815, G__22816, G__22817, G__22818, G__22819, G__22820) : target_fn.call(null, G__22805, G__22806, G__22807, G__22808, G__22809, G__22810, G__22811, G__22812, G__22813, G__22814, G__22815, G__22816, G__22817, G__22818, G__22819, G__22820);
  };
  var G__23396__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22821 = a;
      var G__22822 = b;
      var G__22823 = c;
      var G__22824 = d;
      var G__22825 = e;
      var G__22826 = f;
      var G__22827 = g;
      var G__22828 = h;
      var G__22829 = i;
      var G__22830 = j;
      var G__22831 = k;
      var G__22832 = l;
      var G__22833 = m;
      var G__22834 = n;
      var G__22835 = o;
      var G__22836 = p;
      var G__22837 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__22821, G__22822, G__22823, G__22824, G__22825, G__22826, G__22827, G__22828, G__22829, G__22830, G__22831, G__22832, G__22833, G__22834, G__22835, G__22836, G__22837) : self__.dispatch_fn.call(null, G__22821, G__22822, G__22823, G__22824, G__22825, G__22826, G__22827, G__22828, G__22829, G__22830, G__22831, G__22832, G__22833, G__22834, G__22835, G__22836, G__22837);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22838 = a;
    var G__22839 = b;
    var G__22840 = c;
    var G__22841 = d;
    var G__22842 = e;
    var G__22843 = f;
    var G__22844 = g;
    var G__22845 = h;
    var G__22846 = i;
    var G__22847 = j;
    var G__22848 = k;
    var G__22849 = l;
    var G__22850 = m;
    var G__22851 = n;
    var G__22852 = o;
    var G__22853 = p;
    var G__22854 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__22838, G__22839, G__22840, G__22841, G__22842, G__22843, G__22844, G__22845, G__22846, G__22847, G__22848, G__22849, G__22850, G__22851, G__22852, G__22853, G__22854) : target_fn.call(null, G__22838, G__22839, G__22840, G__22841, G__22842, G__22843, G__22844, G__22845, G__22846, G__22847, G__22848, G__22849, G__22850, G__22851, G__22852, G__22853, G__22854);
  };
  var G__23396__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22855 = a;
      var G__22856 = b;
      var G__22857 = c;
      var G__22858 = d;
      var G__22859 = e;
      var G__22860 = f;
      var G__22861 = g;
      var G__22862 = h;
      var G__22863 = i;
      var G__22864 = j;
      var G__22865 = k;
      var G__22866 = l;
      var G__22867 = m;
      var G__22868 = n;
      var G__22869 = o;
      var G__22870 = p;
      var G__22871 = q;
      var G__22872 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__22855, G__22856, G__22857, G__22858, G__22859, G__22860, G__22861, G__22862, G__22863, G__22864, G__22865, G__22866, G__22867, G__22868, G__22869, G__22870, G__22871, G__22872) : self__.dispatch_fn.call(null, G__22855, G__22856, G__22857, G__22858, G__22859, G__22860, G__22861, G__22862, G__22863, G__22864, G__22865, G__22866, G__22867, G__22868, G__22869, G__22870, G__22871, G__22872);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22873 = a;
    var G__22874 = b;
    var G__22875 = c;
    var G__22876 = d;
    var G__22877 = e;
    var G__22878 = f;
    var G__22879 = g;
    var G__22880 = h;
    var G__22881 = i;
    var G__22882 = j;
    var G__22883 = k;
    var G__22884 = l;
    var G__22885 = m;
    var G__22886 = n;
    var G__22887 = o;
    var G__22888 = p;
    var G__22889 = q;
    var G__22890 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__22873, G__22874, G__22875, G__22876, G__22877, G__22878, G__22879, G__22880, G__22881, G__22882, G__22883, G__22884, G__22885, G__22886, G__22887, G__22888, G__22889, G__22890) : target_fn.call(null, G__22873, G__22874, G__22875, G__22876, G__22877, G__22878, G__22879, G__22880, G__22881, G__22882, G__22883, G__22884, G__22885, G__22886, G__22887, G__22888, G__22889, G__22890);
  };
  var G__23396__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22891 = a;
      var G__22892 = b;
      var G__22893 = c;
      var G__22894 = d;
      var G__22895 = e;
      var G__22896 = f;
      var G__22897 = g;
      var G__22898 = h;
      var G__22899 = i;
      var G__22900 = j;
      var G__22901 = k;
      var G__22902 = l;
      var G__22903 = m;
      var G__22904 = n;
      var G__22905 = o;
      var G__22906 = p;
      var G__22907 = q;
      var G__22908 = r;
      var G__22909 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__22891, G__22892, G__22893, G__22894, G__22895, G__22896, G__22897, G__22898, G__22899, G__22900, G__22901, G__22902, G__22903, G__22904, G__22905, G__22906, G__22907, G__22908, G__22909) : self__.dispatch_fn.call(null, G__22891, G__22892, G__22893, G__22894, G__22895, G__22896, G__22897, G__22898, G__22899, G__22900, G__22901, G__22902, G__22903, G__22904, G__22905, G__22906, G__22907, 
      G__22908, G__22909);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22910 = a;
    var G__22911 = b;
    var G__22912 = c;
    var G__22913 = d;
    var G__22914 = e;
    var G__22915 = f;
    var G__22916 = g;
    var G__22917 = h;
    var G__22918 = i;
    var G__22919 = j;
    var G__22920 = k;
    var G__22921 = l;
    var G__22922 = m;
    var G__22923 = n;
    var G__22924 = o;
    var G__22925 = p;
    var G__22926 = q;
    var G__22927 = r;
    var G__22928 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__22910, G__22911, G__22912, G__22913, G__22914, G__22915, G__22916, G__22917, G__22918, G__22919, G__22920, G__22921, G__22922, G__22923, G__22924, G__22925, G__22926, G__22927, G__22928) : target_fn.call(null, G__22910, G__22911, G__22912, G__22913, G__22914, G__22915, G__22916, G__22917, G__22918, G__22919, G__22920, G__22921, G__22922, G__22923, G__22924, G__22925, G__22926, G__22927, G__22928);
  };
  var G__23396__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22929 = a;
      var G__22930 = b;
      var G__22931 = c;
      var G__22932 = d;
      var G__22933 = e;
      var G__22934 = f;
      var G__22935 = g;
      var G__22936 = h;
      var G__22937 = i;
      var G__22938 = j;
      var G__22939 = k;
      var G__22940 = l;
      var G__22941 = m;
      var G__22942 = n;
      var G__22943 = o;
      var G__22944 = p;
      var G__22945 = q;
      var G__22946 = r;
      var G__22947 = s;
      var G__22948 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__22929, G__22930, G__22931, G__22932, G__22933, G__22934, G__22935, G__22936, G__22937, G__22938, G__22939, G__22940, G__22941, G__22942, G__22943, G__22944, G__22945, G__22946, G__22947, G__22948) : self__.dispatch_fn.call(null, G__22929, G__22930, G__22931, G__22932, G__22933, G__22934, G__22935, G__22936, G__22937, G__22938, G__22939, G__22940, G__22941, G__22942, G__22943, G__22944, 
      G__22945, G__22946, G__22947, G__22948);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22949 = a;
    var G__22950 = b;
    var G__22951 = c;
    var G__22952 = d;
    var G__22953 = e;
    var G__22954 = f;
    var G__22955 = g;
    var G__22956 = h;
    var G__22957 = i;
    var G__22958 = j;
    var G__22959 = k;
    var G__22960 = l;
    var G__22961 = m;
    var G__22962 = n;
    var G__22963 = o;
    var G__22964 = p;
    var G__22965 = q;
    var G__22966 = r;
    var G__22967 = s;
    var G__22968 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__22949, G__22950, G__22951, G__22952, G__22953, G__22954, G__22955, G__22956, G__22957, G__22958, G__22959, G__22960, G__22961, G__22962, G__22963, G__22964, G__22965, G__22966, G__22967, G__22968) : target_fn.call(null, G__22949, G__22950, G__22951, G__22952, G__22953, G__22954, G__22955, G__22956, G__22957, G__22958, G__22959, G__22960, G__22961, G__22962, G__22963, G__22964, G__22965, G__22966, G__22967, 
    G__22968);
  };
  var G__23396__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__23396 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__23396__1.call(this, self__);
      case 2:
        return G__23396__2.call(this, self__, a);
      case 3:
        return G__23396__3.call(this, self__, a, b);
      case 4:
        return G__23396__4.call(this, self__, a, b, c);
      case 5:
        return G__23396__5.call(this, self__, a, b, c, d);
      case 6:
        return G__23396__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__23396__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__23396__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__23396__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__23396__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__23396__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__23396__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__23396__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__23396__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__23396__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__23396__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__23396__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__23396__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__23396__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__23396__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__23396__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__23396__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23396.cljs$core$IFn$_invoke$arity$1 = G__23396__1;
  G__23396.cljs$core$IFn$_invoke$arity$2 = G__23396__2;
  G__23396.cljs$core$IFn$_invoke$arity$3 = G__23396__3;
  G__23396.cljs$core$IFn$_invoke$arity$4 = G__23396__4;
  G__23396.cljs$core$IFn$_invoke$arity$5 = G__23396__5;
  G__23396.cljs$core$IFn$_invoke$arity$6 = G__23396__6;
  G__23396.cljs$core$IFn$_invoke$arity$7 = G__23396__7;
  G__23396.cljs$core$IFn$_invoke$arity$8 = G__23396__8;
  G__23396.cljs$core$IFn$_invoke$arity$9 = G__23396__9;
  G__23396.cljs$core$IFn$_invoke$arity$10 = G__23396__10;
  G__23396.cljs$core$IFn$_invoke$arity$11 = G__23396__11;
  G__23396.cljs$core$IFn$_invoke$arity$12 = G__23396__12;
  G__23396.cljs$core$IFn$_invoke$arity$13 = G__23396__13;
  G__23396.cljs$core$IFn$_invoke$arity$14 = G__23396__14;
  G__23396.cljs$core$IFn$_invoke$arity$15 = G__23396__15;
  G__23396.cljs$core$IFn$_invoke$arity$16 = G__23396__16;
  G__23396.cljs$core$IFn$_invoke$arity$17 = G__23396__17;
  G__23396.cljs$core$IFn$_invoke$arity$18 = G__23396__18;
  G__23396.cljs$core$IFn$_invoke$arity$19 = G__23396__19;
  G__23396.cljs$core$IFn$_invoke$arity$20 = G__23396__20;
  G__23396.cljs$core$IFn$_invoke$arity$21 = G__23396__21;
  G__23396.cljs$core$IFn$_invoke$arity$22 = G__23396__22;
  return G__23396;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args22548) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args22548)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22969 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__22969) : self__.dispatch_fn.call(null, G__22969);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22970 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__22970) : target_fn.call(null, G__22970);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22971 = a;
    var G__22972 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__22971, G__22972) : self__.dispatch_fn.call(null, G__22971, G__22972);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22973 = a;
  var G__22974 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__22973, G__22974) : target_fn.call(null, G__22973, G__22974);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22975 = a;
    var G__22976 = b;
    var G__22977 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__22975, G__22976, G__22977) : self__.dispatch_fn.call(null, G__22975, G__22976, G__22977);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22978 = a;
  var G__22979 = b;
  var G__22980 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__22978, G__22979, G__22980) : target_fn.call(null, G__22978, G__22979, G__22980);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22981 = a;
    var G__22982 = b;
    var G__22983 = c;
    var G__22984 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__22981, G__22982, G__22983, G__22984) : self__.dispatch_fn.call(null, G__22981, G__22982, G__22983, G__22984);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22985 = a;
  var G__22986 = b;
  var G__22987 = c;
  var G__22988 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__22985, G__22986, G__22987, G__22988) : target_fn.call(null, G__22985, G__22986, G__22987, G__22988);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22989 = a;
    var G__22990 = b;
    var G__22991 = c;
    var G__22992 = d;
    var G__22993 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__22989, G__22990, G__22991, G__22992, G__22993) : self__.dispatch_fn.call(null, G__22989, G__22990, G__22991, G__22992, G__22993);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22994 = a;
  var G__22995 = b;
  var G__22996 = c;
  var G__22997 = d;
  var G__22998 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__22994, G__22995, G__22996, G__22997, G__22998) : target_fn.call(null, G__22994, G__22995, G__22996, G__22997, G__22998);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22999 = a;
    var G__23000 = b;
    var G__23001 = c;
    var G__23002 = d;
    var G__23003 = e;
    var G__23004 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__22999, G__23000, G__23001, G__23002, G__23003, G__23004) : self__.dispatch_fn.call(null, G__22999, G__23000, G__23001, G__23002, G__23003, G__23004);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23005 = a;
  var G__23006 = b;
  var G__23007 = c;
  var G__23008 = d;
  var G__23009 = e;
  var G__23010 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__23005, G__23006, G__23007, G__23008, G__23009, G__23010) : target_fn.call(null, G__23005, G__23006, G__23007, G__23008, G__23009, G__23010);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23011 = a;
    var G__23012 = b;
    var G__23013 = c;
    var G__23014 = d;
    var G__23015 = e;
    var G__23016 = f;
    var G__23017 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__23011, G__23012, G__23013, G__23014, G__23015, G__23016, G__23017) : self__.dispatch_fn.call(null, G__23011, G__23012, G__23013, G__23014, G__23015, G__23016, G__23017);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23018 = a;
  var G__23019 = b;
  var G__23020 = c;
  var G__23021 = d;
  var G__23022 = e;
  var G__23023 = f;
  var G__23024 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__23018, G__23019, G__23020, G__23021, G__23022, G__23023, G__23024) : target_fn.call(null, G__23018, G__23019, G__23020, G__23021, G__23022, G__23023, G__23024);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23025 = a;
    var G__23026 = b;
    var G__23027 = c;
    var G__23028 = d;
    var G__23029 = e;
    var G__23030 = f;
    var G__23031 = g;
    var G__23032 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__23025, G__23026, G__23027, G__23028, G__23029, G__23030, G__23031, G__23032) : self__.dispatch_fn.call(null, G__23025, G__23026, G__23027, G__23028, G__23029, G__23030, G__23031, G__23032);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23033 = a;
  var G__23034 = b;
  var G__23035 = c;
  var G__23036 = d;
  var G__23037 = e;
  var G__23038 = f;
  var G__23039 = g;
  var G__23040 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__23033, G__23034, G__23035, G__23036, G__23037, G__23038, G__23039, G__23040) : target_fn.call(null, G__23033, G__23034, G__23035, G__23036, G__23037, G__23038, G__23039, G__23040);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23041 = a;
    var G__23042 = b;
    var G__23043 = c;
    var G__23044 = d;
    var G__23045 = e;
    var G__23046 = f;
    var G__23047 = g;
    var G__23048 = h;
    var G__23049 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__23041, G__23042, G__23043, G__23044, G__23045, G__23046, G__23047, G__23048, G__23049) : self__.dispatch_fn.call(null, G__23041, G__23042, G__23043, G__23044, G__23045, G__23046, G__23047, G__23048, G__23049);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23050 = a;
  var G__23051 = b;
  var G__23052 = c;
  var G__23053 = d;
  var G__23054 = e;
  var G__23055 = f;
  var G__23056 = g;
  var G__23057 = h;
  var G__23058 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__23050, G__23051, G__23052, G__23053, G__23054, G__23055, G__23056, G__23057, G__23058) : target_fn.call(null, G__23050, G__23051, G__23052, G__23053, G__23054, G__23055, G__23056, G__23057, G__23058);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23059 = a;
    var G__23060 = b;
    var G__23061 = c;
    var G__23062 = d;
    var G__23063 = e;
    var G__23064 = f;
    var G__23065 = g;
    var G__23066 = h;
    var G__23067 = i;
    var G__23068 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__23059, G__23060, G__23061, G__23062, G__23063, G__23064, G__23065, G__23066, G__23067, G__23068) : self__.dispatch_fn.call(null, G__23059, G__23060, G__23061, G__23062, G__23063, G__23064, G__23065, G__23066, G__23067, G__23068);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23069 = a;
  var G__23070 = b;
  var G__23071 = c;
  var G__23072 = d;
  var G__23073 = e;
  var G__23074 = f;
  var G__23075 = g;
  var G__23076 = h;
  var G__23077 = i;
  var G__23078 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__23069, G__23070, G__23071, G__23072, G__23073, G__23074, G__23075, G__23076, G__23077, G__23078) : target_fn.call(null, G__23069, G__23070, G__23071, G__23072, G__23073, G__23074, G__23075, G__23076, G__23077, G__23078);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23079 = a;
    var G__23080 = b;
    var G__23081 = c;
    var G__23082 = d;
    var G__23083 = e;
    var G__23084 = f;
    var G__23085 = g;
    var G__23086 = h;
    var G__23087 = i;
    var G__23088 = j;
    var G__23089 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__23079, G__23080, G__23081, G__23082, G__23083, G__23084, G__23085, G__23086, G__23087, G__23088, G__23089) : self__.dispatch_fn.call(null, G__23079, G__23080, G__23081, G__23082, G__23083, G__23084, G__23085, G__23086, G__23087, G__23088, G__23089);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23090 = a;
  var G__23091 = b;
  var G__23092 = c;
  var G__23093 = d;
  var G__23094 = e;
  var G__23095 = f;
  var G__23096 = g;
  var G__23097 = h;
  var G__23098 = i;
  var G__23099 = j;
  var G__23100 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__23090, G__23091, G__23092, G__23093, G__23094, G__23095, G__23096, G__23097, G__23098, G__23099, G__23100) : target_fn.call(null, G__23090, G__23091, G__23092, G__23093, G__23094, G__23095, G__23096, G__23097, G__23098, G__23099, G__23100);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23101 = a;
    var G__23102 = b;
    var G__23103 = c;
    var G__23104 = d;
    var G__23105 = e;
    var G__23106 = f;
    var G__23107 = g;
    var G__23108 = h;
    var G__23109 = i;
    var G__23110 = j;
    var G__23111 = k;
    var G__23112 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__23101, G__23102, G__23103, G__23104, G__23105, G__23106, G__23107, G__23108, G__23109, G__23110, G__23111, G__23112) : self__.dispatch_fn.call(null, G__23101, G__23102, G__23103, G__23104, G__23105, G__23106, G__23107, G__23108, G__23109, G__23110, G__23111, G__23112);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23113 = a;
  var G__23114 = b;
  var G__23115 = c;
  var G__23116 = d;
  var G__23117 = e;
  var G__23118 = f;
  var G__23119 = g;
  var G__23120 = h;
  var G__23121 = i;
  var G__23122 = j;
  var G__23123 = k;
  var G__23124 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__23113, G__23114, G__23115, G__23116, G__23117, G__23118, G__23119, G__23120, G__23121, G__23122, G__23123, G__23124) : target_fn.call(null, G__23113, G__23114, G__23115, G__23116, G__23117, G__23118, G__23119, G__23120, G__23121, G__23122, G__23123, G__23124);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23125 = a;
    var G__23126 = b;
    var G__23127 = c;
    var G__23128 = d;
    var G__23129 = e;
    var G__23130 = f;
    var G__23131 = g;
    var G__23132 = h;
    var G__23133 = i;
    var G__23134 = j;
    var G__23135 = k;
    var G__23136 = l;
    var G__23137 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__23125, G__23126, G__23127, G__23128, G__23129, G__23130, G__23131, G__23132, G__23133, G__23134, G__23135, G__23136, G__23137) : self__.dispatch_fn.call(null, G__23125, G__23126, G__23127, G__23128, G__23129, G__23130, G__23131, G__23132, G__23133, G__23134, G__23135, G__23136, G__23137);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23138 = a;
  var G__23139 = b;
  var G__23140 = c;
  var G__23141 = d;
  var G__23142 = e;
  var G__23143 = f;
  var G__23144 = g;
  var G__23145 = h;
  var G__23146 = i;
  var G__23147 = j;
  var G__23148 = k;
  var G__23149 = l;
  var G__23150 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__23138, G__23139, G__23140, G__23141, G__23142, G__23143, G__23144, G__23145, G__23146, G__23147, G__23148, G__23149, G__23150) : target_fn.call(null, G__23138, G__23139, G__23140, G__23141, G__23142, G__23143, G__23144, G__23145, G__23146, G__23147, G__23148, G__23149, G__23150);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23151 = a;
    var G__23152 = b;
    var G__23153 = c;
    var G__23154 = d;
    var G__23155 = e;
    var G__23156 = f;
    var G__23157 = g;
    var G__23158 = h;
    var G__23159 = i;
    var G__23160 = j;
    var G__23161 = k;
    var G__23162 = l;
    var G__23163 = m;
    var G__23164 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__23151, G__23152, G__23153, G__23154, G__23155, G__23156, G__23157, G__23158, G__23159, G__23160, G__23161, G__23162, G__23163, G__23164) : self__.dispatch_fn.call(null, G__23151, G__23152, G__23153, G__23154, G__23155, G__23156, G__23157, G__23158, G__23159, G__23160, G__23161, G__23162, G__23163, G__23164);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23165 = a;
  var G__23166 = b;
  var G__23167 = c;
  var G__23168 = d;
  var G__23169 = e;
  var G__23170 = f;
  var G__23171 = g;
  var G__23172 = h;
  var G__23173 = i;
  var G__23174 = j;
  var G__23175 = k;
  var G__23176 = l;
  var G__23177 = m;
  var G__23178 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__23165, G__23166, G__23167, G__23168, G__23169, G__23170, G__23171, G__23172, G__23173, G__23174, G__23175, G__23176, G__23177, G__23178) : target_fn.call(null, G__23165, G__23166, G__23167, G__23168, G__23169, G__23170, G__23171, G__23172, G__23173, G__23174, G__23175, G__23176, G__23177, G__23178);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23179 = a;
    var G__23180 = b;
    var G__23181 = c;
    var G__23182 = d;
    var G__23183 = e;
    var G__23184 = f;
    var G__23185 = g;
    var G__23186 = h;
    var G__23187 = i;
    var G__23188 = j;
    var G__23189 = k;
    var G__23190 = l;
    var G__23191 = m;
    var G__23192 = n;
    var G__23193 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__23179, G__23180, G__23181, G__23182, G__23183, G__23184, G__23185, G__23186, G__23187, G__23188, G__23189, G__23190, G__23191, G__23192, G__23193) : self__.dispatch_fn.call(null, G__23179, G__23180, G__23181, G__23182, G__23183, G__23184, G__23185, G__23186, G__23187, G__23188, G__23189, G__23190, G__23191, G__23192, G__23193);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23194 = a;
  var G__23195 = b;
  var G__23196 = c;
  var G__23197 = d;
  var G__23198 = e;
  var G__23199 = f;
  var G__23200 = g;
  var G__23201 = h;
  var G__23202 = i;
  var G__23203 = j;
  var G__23204 = k;
  var G__23205 = l;
  var G__23206 = m;
  var G__23207 = n;
  var G__23208 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__23194, G__23195, G__23196, G__23197, G__23198, G__23199, G__23200, G__23201, G__23202, G__23203, G__23204, G__23205, G__23206, G__23207, G__23208) : target_fn.call(null, G__23194, G__23195, G__23196, G__23197, G__23198, G__23199, G__23200, G__23201, G__23202, G__23203, G__23204, G__23205, G__23206, G__23207, G__23208);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23209 = a;
    var G__23210 = b;
    var G__23211 = c;
    var G__23212 = d;
    var G__23213 = e;
    var G__23214 = f;
    var G__23215 = g;
    var G__23216 = h;
    var G__23217 = i;
    var G__23218 = j;
    var G__23219 = k;
    var G__23220 = l;
    var G__23221 = m;
    var G__23222 = n;
    var G__23223 = o;
    var G__23224 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__23209, G__23210, G__23211, G__23212, G__23213, G__23214, G__23215, G__23216, G__23217, G__23218, G__23219, G__23220, G__23221, G__23222, G__23223, G__23224) : self__.dispatch_fn.call(null, G__23209, G__23210, G__23211, G__23212, G__23213, G__23214, G__23215, G__23216, G__23217, G__23218, G__23219, G__23220, G__23221, G__23222, G__23223, G__23224);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23225 = a;
  var G__23226 = b;
  var G__23227 = c;
  var G__23228 = d;
  var G__23229 = e;
  var G__23230 = f;
  var G__23231 = g;
  var G__23232 = h;
  var G__23233 = i;
  var G__23234 = j;
  var G__23235 = k;
  var G__23236 = l;
  var G__23237 = m;
  var G__23238 = n;
  var G__23239 = o;
  var G__23240 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__23225, G__23226, G__23227, G__23228, G__23229, G__23230, G__23231, G__23232, G__23233, G__23234, G__23235, G__23236, G__23237, G__23238, G__23239, G__23240) : target_fn.call(null, G__23225, G__23226, G__23227, G__23228, G__23229, G__23230, G__23231, G__23232, G__23233, G__23234, G__23235, G__23236, G__23237, G__23238, G__23239, G__23240);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23241 = a;
    var G__23242 = b;
    var G__23243 = c;
    var G__23244 = d;
    var G__23245 = e;
    var G__23246 = f;
    var G__23247 = g;
    var G__23248 = h;
    var G__23249 = i;
    var G__23250 = j;
    var G__23251 = k;
    var G__23252 = l;
    var G__23253 = m;
    var G__23254 = n;
    var G__23255 = o;
    var G__23256 = p;
    var G__23257 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__23241, G__23242, G__23243, G__23244, G__23245, G__23246, G__23247, G__23248, G__23249, G__23250, G__23251, G__23252, G__23253, G__23254, G__23255, G__23256, G__23257) : self__.dispatch_fn.call(null, G__23241, G__23242, G__23243, G__23244, G__23245, G__23246, G__23247, G__23248, G__23249, G__23250, G__23251, G__23252, G__23253, G__23254, G__23255, G__23256, G__23257);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23258 = a;
  var G__23259 = b;
  var G__23260 = c;
  var G__23261 = d;
  var G__23262 = e;
  var G__23263 = f;
  var G__23264 = g;
  var G__23265 = h;
  var G__23266 = i;
  var G__23267 = j;
  var G__23268 = k;
  var G__23269 = l;
  var G__23270 = m;
  var G__23271 = n;
  var G__23272 = o;
  var G__23273 = p;
  var G__23274 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__23258, G__23259, G__23260, G__23261, G__23262, G__23263, G__23264, G__23265, G__23266, G__23267, G__23268, G__23269, G__23270, G__23271, G__23272, G__23273, G__23274) : target_fn.call(null, G__23258, G__23259, G__23260, G__23261, G__23262, G__23263, G__23264, G__23265, G__23266, G__23267, G__23268, G__23269, G__23270, G__23271, G__23272, G__23273, G__23274);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23275 = a;
    var G__23276 = b;
    var G__23277 = c;
    var G__23278 = d;
    var G__23279 = e;
    var G__23280 = f;
    var G__23281 = g;
    var G__23282 = h;
    var G__23283 = i;
    var G__23284 = j;
    var G__23285 = k;
    var G__23286 = l;
    var G__23287 = m;
    var G__23288 = n;
    var G__23289 = o;
    var G__23290 = p;
    var G__23291 = q;
    var G__23292 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__23275, G__23276, G__23277, G__23278, G__23279, G__23280, G__23281, G__23282, G__23283, G__23284, G__23285, G__23286, G__23287, G__23288, G__23289, G__23290, G__23291, G__23292) : self__.dispatch_fn.call(null, G__23275, G__23276, G__23277, G__23278, G__23279, G__23280, G__23281, G__23282, G__23283, G__23284, G__23285, G__23286, G__23287, G__23288, G__23289, G__23290, G__23291, G__23292);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23293 = a;
  var G__23294 = b;
  var G__23295 = c;
  var G__23296 = d;
  var G__23297 = e;
  var G__23298 = f;
  var G__23299 = g;
  var G__23300 = h;
  var G__23301 = i;
  var G__23302 = j;
  var G__23303 = k;
  var G__23304 = l;
  var G__23305 = m;
  var G__23306 = n;
  var G__23307 = o;
  var G__23308 = p;
  var G__23309 = q;
  var G__23310 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__23293, G__23294, G__23295, G__23296, G__23297, G__23298, G__23299, G__23300, G__23301, G__23302, G__23303, G__23304, G__23305, G__23306, G__23307, G__23308, G__23309, G__23310) : target_fn.call(null, G__23293, G__23294, G__23295, G__23296, G__23297, G__23298, G__23299, G__23300, G__23301, G__23302, G__23303, G__23304, G__23305, G__23306, G__23307, G__23308, G__23309, G__23310);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23311 = a;
    var G__23312 = b;
    var G__23313 = c;
    var G__23314 = d;
    var G__23315 = e;
    var G__23316 = f;
    var G__23317 = g;
    var G__23318 = h;
    var G__23319 = i;
    var G__23320 = j;
    var G__23321 = k;
    var G__23322 = l;
    var G__23323 = m;
    var G__23324 = n;
    var G__23325 = o;
    var G__23326 = p;
    var G__23327 = q;
    var G__23328 = r;
    var G__23329 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__23311, G__23312, G__23313, G__23314, G__23315, G__23316, G__23317, G__23318, G__23319, G__23320, G__23321, G__23322, G__23323, G__23324, G__23325, G__23326, G__23327, G__23328, G__23329) : self__.dispatch_fn.call(null, G__23311, G__23312, G__23313, G__23314, G__23315, G__23316, G__23317, G__23318, G__23319, G__23320, G__23321, G__23322, G__23323, G__23324, G__23325, G__23326, G__23327, 
    G__23328, G__23329);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23330 = a;
  var G__23331 = b;
  var G__23332 = c;
  var G__23333 = d;
  var G__23334 = e;
  var G__23335 = f;
  var G__23336 = g;
  var G__23337 = h;
  var G__23338 = i;
  var G__23339 = j;
  var G__23340 = k;
  var G__23341 = l;
  var G__23342 = m;
  var G__23343 = n;
  var G__23344 = o;
  var G__23345 = p;
  var G__23346 = q;
  var G__23347 = r;
  var G__23348 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__23330, G__23331, G__23332, G__23333, G__23334, G__23335, G__23336, G__23337, G__23338, G__23339, G__23340, G__23341, G__23342, G__23343, G__23344, G__23345, G__23346, G__23347, G__23348) : target_fn.call(null, G__23330, G__23331, G__23332, G__23333, G__23334, G__23335, G__23336, G__23337, G__23338, G__23339, G__23340, G__23341, G__23342, G__23343, G__23344, G__23345, G__23346, G__23347, G__23348);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__23349 = a;
    var G__23350 = b;
    var G__23351 = c;
    var G__23352 = d;
    var G__23353 = e;
    var G__23354 = f;
    var G__23355 = g;
    var G__23356 = h;
    var G__23357 = i;
    var G__23358 = j;
    var G__23359 = k;
    var G__23360 = l;
    var G__23361 = m;
    var G__23362 = n;
    var G__23363 = o;
    var G__23364 = p;
    var G__23365 = q;
    var G__23366 = r;
    var G__23367 = s;
    var G__23368 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__23349, G__23350, G__23351, G__23352, G__23353, G__23354, G__23355, G__23356, G__23357, G__23358, G__23359, G__23360, G__23361, G__23362, G__23363, G__23364, G__23365, G__23366, G__23367, G__23368) : self__.dispatch_fn.call(null, G__23349, G__23350, G__23351, G__23352, G__23353, G__23354, G__23355, G__23356, G__23357, G__23358, G__23359, G__23360, G__23361, G__23362, G__23363, G__23364, 
    G__23365, G__23366, G__23367, G__23368);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__23369 = a;
  var G__23370 = b;
  var G__23371 = c;
  var G__23372 = d;
  var G__23373 = e;
  var G__23374 = f;
  var G__23375 = g;
  var G__23376 = h;
  var G__23377 = i;
  var G__23378 = j;
  var G__23379 = k;
  var G__23380 = l;
  var G__23381 = m;
  var G__23382 = n;
  var G__23383 = o;
  var G__23384 = p;
  var G__23385 = q;
  var G__23386 = r;
  var G__23387 = s;
  var G__23388 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__23369, G__23370, G__23371, G__23372, G__23373, G__23374, G__23375, G__23376, G__23377, G__23378, G__23379, G__23380, G__23381, G__23382, G__23383, G__23384, G__23385, G__23386, G__23387, G__23388) : target_fn.call(null, G__23369, G__23370, G__23371, G__23372, G__23373, G__23374, G__23375, G__23376, G__23377, G__23378, G__23379, G__23380, G__23381, G__23382, G__23383, G__23384, G__23385, G__23386, G__23387, 
  G__23388);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__23389 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23389) : cljs.core.deref.call(null, G__23389);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__23390 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23390) : cljs.core.deref.call(null, G__23390);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__23392 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23392) : cljs.core.deref.call(null, G__23392);
  }(), function() {
    var G__23393 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23393) : cljs.core.deref.call(null, G__23393);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4421__auto__ = function() {
    var G__23394 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23394) : cljs.core.deref.call(null, G__23394);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4421__auto__)) {
    var target_fn = temp__4421__auto__;
    return target_fn;
  } else {
    var temp__4421__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4421__auto____$1)) {
      var target_fn = temp__4421__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__23395 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23395) : cljs.core.deref.call(null, G__23395);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__23391 = this$__$1;
  return goog.getUid(G__23391);
};
cljs.core.MultiFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "dispatch-fn", "dispatch-fn", -1401088155, null), new cljs.core.Symbol(null, "default-dispatch-val", "default-dispatch-val", -1231201266, null), new cljs.core.Symbol(null, "hierarchy", "hierarchy", 587061186, null), new cljs.core.Symbol(null, "method-table", "method-table", -1878263165, null), new cljs.core.Symbol(null, 
  "prefer-table", "prefer-table", 462168584, null), new cljs.core.Symbol(null, "method-cache", "method-cache", 1230193905, null), new cljs.core.Symbol(null, "cached-hierarchy", "cached-hierarchy", -1085460203, null)], null);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__23397 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__23397);
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__23398 = self__.uuid;
  var G__23399 = other.uuid;
  return goog.array.defaultCompare(G__23398, G__23399);
};
cljs.core.UUID.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null)], null);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error;
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info() {
  var G__23401 = arguments.length;
  switch(G__23401) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__23407 = x;
      var G__23408 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__23407, G__23408) : pred.call(null, G__23407, G__23408);
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(function() {
        var G__23409 = y;
        var G__23410 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__23409, G__23410) : pred.call(null, G__23409, G__23410);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
cljs.core.TaggedLiteral = function(tag, form) {
  this.tag = tag;
  this.form = form;
  this.cljs$lang$protocol_mask$partition0$ = 6291712;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form, other.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return 31 * cljs.core.hash(self__.tag) + cljs.core.hash(self__.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this$__$1, v, null);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var G__23411 = v instanceof cljs.core.Keyword ? v.fqn : null;
  switch(G__23411) {
    case "tag":
      return self__.tag;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return not_found;
  }
};
cljs.core.TaggedLiteral.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.core.TaggedLiteral.cljs$lang$type = true;
cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write(writer__4887__auto__, "cljs.core/TaggedLiteral");
};
cljs.core.__GT_TaggedLiteral = function cljs$core$__GT_TaggedLiteral(tag, form) {
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.tagged_literal_QMARK_ = function cljs$core$tagged_literal_QMARK_(value) {
  return value instanceof cljs.core.TaggedLiteral;
};
cljs.core.tagged_literal = function cljs$core$tagged_literal(tag, form) {
  if (tag instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "symbol?", "symbol?", 1820680511, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))], 0)))].join(""));
  }
  return new cljs.core.TaggedLiteral(tag, form);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw [cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join() {
  var G__13292 = arguments.length;
  switch(G__13292) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (coll__$1) {
      var G__13294 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var G__13295 = cljs.core.next.call(null, coll__$1);
      sb = G__13294;
      coll__$1 = G__13295;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (coll__$1) {
      sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__13296 = sb;
      var G__13297 = coll__$2;
      sb = G__13296;
      coll__$1 = G__13297;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return [cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__13298 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__13298;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__13302 = cljs.core._EQ_;
    var expr__13303 = limit;
    if (cljs.core.truth_(pred__13302.call(null, 1, expr__13303))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__13302.call(null, 2, expr__13303))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split() {
  var G__13306 = arguments.length;
  switch(G__13306) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (cljs.core._EQ_.call(null, limit__$1, 1)) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var temp__4421__auto__ = cljs.core.re_find.call(null, re, s__$1);
        if (cljs.core.truth_(temp__4421__auto__)) {
          var m = temp__4421__auto__;
          var index = s__$1.indexOf(m);
          var G__13308 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__13309 = limit__$1 - 1;
          var G__13310 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__13308;
          limit__$1 = G__13309;
          parts = G__13310;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__13311 = index - 1;
        index = G__13311;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4421__auto___13312 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4421__auto___13312)) {
        var replacement_13313 = temp__4421__auto___13312;
        buffer.append([cljs.core.str(replacement_13313)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__13314 = index + 1;
      index = G__13314;
      continue;
    }
    break;
  }
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
cljs.reader.PushbackReader = function() {
  var obj14221 = {};
  return obj14221;
}();
cljs.reader.read_char = function cljs$reader$read_char(reader) {
  if (function() {
    var and__4295__auto__ = reader;
    if (and__4295__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4943__auto__ = reader == null ? null : reader;
    return function() {
      var or__4307__auto__ = cljs.reader.read_char[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.reader.read_char["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function cljs$reader$unread(reader, ch) {
  if (function() {
    var and__4295__auto__ = reader;
    if (and__4295__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4943__auto__ = reader == null ? null : reader;
    return function() {
      var or__4307__auto__ = cljs.reader.unread[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.reader.unread["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "buffer", "buffer", -2037140571, null), new cljs.core.Symbol(null, "idx", "idx", -1600747296, null)], null);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function cljs$reader$__GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function cljs$reader$push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function cljs$reader$whitespace_QMARK_(ch) {
  var or__4307__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__4307__auto__)) {
    return or__4307__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function cljs$reader$numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function cljs$reader$comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function cljs$reader$number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function cljs$reader$reader_error() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic = function(rdr, msg) {
  throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
};
cljs.reader.reader_error.cljs$lang$maxFixedArity = 1;
cljs.reader.reader_error.cljs$lang$applyTo = function(seq14222) {
  var G__14223 = cljs.core.first.call(null, seq14222);
  var seq14222__$1 = cljs.core.next.call(null, seq14222);
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(G__14223, seq14222__$1);
};
cljs.reader.macro_terminating_QMARK_ = function cljs$reader$macro_terminating_QMARK_(ch) {
  var and__4295__auto__ = !(ch === "#");
  if (and__4295__auto__) {
    var and__4295__auto____$1 = !(ch === "'");
    if (and__4295__auto____$1) {
      var and__4295__auto____$2 = !(ch === ":");
      if (and__4295__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__4295__auto____$2;
      }
    } else {
      return and__4295__auto____$1;
    }
  } else {
    return and__4295__auto__;
  }
};
cljs.reader.read_token = function cljs$reader$read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__14224 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__14225 = cljs.reader.read_char.call(null, rdr);
      sb = G__14224;
      ch = G__14225;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function cljs$reader$skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function cljs$reader$re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function cljs$reader$match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return -parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function cljs$reader$match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function cljs$reader$match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function cljs$reader$match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function cljs$reader$escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return '"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function cljs$reader$read_2_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function cljs$reader$read_4_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function cljs$reader$validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function cljs$reader$make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function cljs$reader$escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function cljs$reader$read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__14226 = cljs.reader.read_char.call(null, rdr);
      ch = G__14226;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function cljs$reader$read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4421__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4421__auto__)) {
        var macrofn = temp__4421__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__14227 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__14227;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__14228 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__14228;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function cljs$reader$not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function cljs$reader$read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4421__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4421__auto__)) {
      var obj = temp__4421__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function cljs$reader$read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function cljs$reader$read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function cljs$reader$read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function cljs$reader$read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function cljs$reader$read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__4307__auto__ = ch == null;
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__4307__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__14229 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__14230 = cljs.reader.read_char.call(null, reader);
      buffer = G__14229;
      ch = G__14230;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function cljs$reader$read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__14231 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__14232 = cljs.reader.read_char.call(null, reader);
        buffer = G__14231;
        ch = G__14232;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__14233 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__14234 = cljs.reader.read_char.call(null, reader);
          buffer = G__14233;
          ch = G__14234;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function cljs$reader$read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__14239 = function() {
            var G__14237 = buffer;
            G__14237.append(nch);
            return G__14237;
          }();
          var G__14240 = cljs.reader.read_char.call(null, reader);
          buffer = G__14239;
          ch = G__14240;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__14241 = function() {
            var G__14238 = buffer;
            G__14238.append(ch);
            return G__14238;
          }();
          var G__14242 = cljs.reader.read_char.call(null, reader);
          buffer = G__14241;
          ch = G__14242;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function cljs$reader$special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function cljs$reader$read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__4295__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__4295__auto__)) {
      return !(token.length === 1);
    } else {
      return and__4295__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function cljs$reader$read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function cljs$reader$desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function cljs$reader$wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function cljs$reader$throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function cljs$reader$read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__14244 = o;
    if (G__14244) {
      var bit__4981__auto__ = G__14244.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4981__auto__ || G__14244.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__14244.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__14244);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__14244);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function cljs$reader$read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function cljs$reader$read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function cljs$reader$read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function cljs$reader$macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function cljs$reader$dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function cljs$reader$read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__14245 = reader;
        var G__14246 = eof_is_error;
        var G__14247 = sentinel;
        var G__14248 = is_recursive;
        reader = G__14245;
        eof_is_error = G__14246;
        sentinel = G__14247;
        is_recursive = G__14248;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__14249 = cljs.reader.read_comment.call(null, reader, ch);
          var G__14250 = eof_is_error;
          var G__14251 = sentinel;
          var G__14252 = is_recursive;
          reader = G__14249;
          eof_is_error = G__14250;
          sentinel = G__14251;
          is_recursive = G__14252;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__14253 = reader;
            var G__14254 = eof_is_error;
            var G__14255 = sentinel;
            var G__14256 = is_recursive;
            reader = G__14253;
            eof_is_error = G__14254;
            sentinel = G__14255;
            is_recursive = G__14256;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function cljs$reader$read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function cljs$reader$zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__14257 = b.append("0");
          b = G__14257;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function cljs$reader$divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function cljs$reader$indivisible_QMARK_(num, div) {
  return cljs.core.not.call(null, cljs.reader.divisible_QMARK_.call(null, num, div));
};
cljs.reader.leap_year_QMARK_ = function cljs$reader$leap_year_QMARK_(year) {
  var and__4295__auto__ = cljs.reader.divisible_QMARK_.call(null, year, 4);
  if (cljs.core.truth_(and__4295__auto__)) {
    var or__4307__auto__ = cljs.reader.indivisible_QMARK_.call(null, year, 100);
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return cljs.reader.divisible_QMARK_.call(null, year, 400);
    }
  } else {
    return and__4295__auto__;
  }
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function cljs$reader$parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function cljs$reader$check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function cljs$reader$parse_and_validate_timestamp(s) {
  var vec__14259 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__14259, 0, null);
  var years = cljs.core.nth.call(null, vec__14259, 1, null);
  var months = cljs.core.nth.call(null, vec__14259, 2, null);
  var days = cljs.core.nth.call(null, vec__14259, 3, null);
  var hours = cljs.core.nth.call(null, vec__14259, 4, null);
  var minutes = cljs.core.nth.call(null, vec__14259, 5, null);
  var seconds = cljs.core.nth.call(null, vec__14259, 6, null);
  var fraction = cljs.core.nth.call(null, vec__14259, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__14259, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__14259, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__14259, 10, null);
  var v = vec__14259;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__4307__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__4307__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__4307__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__4307__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__4307__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__4307__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__4307__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__4307__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function cljs$reader$parse_timestamp(ts) {
  var temp__4421__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4421__auto__)) {
    var vec__14261 = temp__4421__auto__;
    var years = cljs.core.nth.call(null, vec__14261, 0, null);
    var months = cljs.core.nth.call(null, vec__14261, 1, null);
    var days = cljs.core.nth.call(null, vec__14261, 2, null);
    var hours = cljs.core.nth.call(null, vec__14261, 3, null);
    var minutes = cljs.core.nth.call(null, vec__14261, 4, null);
    var seconds = cljs.core.nth.call(null, vec__14261, 5, null);
    var ms = cljs.core.nth.call(null, vec__14261, 6, null);
    var offset = cljs.core.nth.call(null, vec__14261, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function cljs$reader$read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function cljs$reader$read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function cljs$reader$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__14274_14286 = cljs.core.seq.call(null, form);
    var chunk__14275_14287 = null;
    var count__14276_14288 = 0;
    var i__14277_14289 = 0;
    while (true) {
      if (i__14277_14289 < count__14276_14288) {
        var x_14290 = cljs.core._nth.call(null, chunk__14275_14287, i__14277_14289);
        arr.push(x_14290);
        var G__14291 = seq__14274_14286;
        var G__14292 = chunk__14275_14287;
        var G__14293 = count__14276_14288;
        var G__14294 = i__14277_14289 + 1;
        seq__14274_14286 = G__14291;
        chunk__14275_14287 = G__14292;
        count__14276_14288 = G__14293;
        i__14277_14289 = G__14294;
        continue;
      } else {
        var temp__4423__auto___14295 = cljs.core.seq.call(null, seq__14274_14286);
        if (temp__4423__auto___14295) {
          var seq__14274_14296__$1 = temp__4423__auto___14295;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14274_14296__$1)) {
            var c__5092__auto___14297 = cljs.core.chunk_first.call(null, seq__14274_14296__$1);
            var G__14298 = cljs.core.chunk_rest.call(null, seq__14274_14296__$1);
            var G__14299 = c__5092__auto___14297;
            var G__14300 = cljs.core.count.call(null, c__5092__auto___14297);
            var G__14301 = 0;
            seq__14274_14286 = G__14298;
            chunk__14275_14287 = G__14299;
            count__14276_14288 = G__14300;
            i__14277_14289 = G__14301;
            continue;
          } else {
            var x_14302 = cljs.core.first.call(null, seq__14274_14296__$1);
            arr.push(x_14302);
            var G__14303 = cljs.core.next.call(null, seq__14274_14296__$1);
            var G__14304 = null;
            var G__14305 = 0;
            var G__14306 = 0;
            seq__14274_14286 = G__14303;
            chunk__14275_14287 = G__14304;
            count__14276_14288 = G__14305;
            i__14277_14289 = G__14306;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj14279 = {};
        return obj14279;
      }();
      var seq__14280_14307 = cljs.core.seq.call(null, form);
      var chunk__14281_14308 = null;
      var count__14282_14309 = 0;
      var i__14283_14310 = 0;
      while (true) {
        if (i__14283_14310 < count__14282_14309) {
          var vec__14284_14311 = cljs.core._nth.call(null, chunk__14281_14308, i__14283_14310);
          var k_14312 = cljs.core.nth.call(null, vec__14284_14311, 0, null);
          var v_14313 = cljs.core.nth.call(null, vec__14284_14311, 1, null);
          obj[cljs.core.name.call(null, k_14312)] = v_14313;
          var G__14314 = seq__14280_14307;
          var G__14315 = chunk__14281_14308;
          var G__14316 = count__14282_14309;
          var G__14317 = i__14283_14310 + 1;
          seq__14280_14307 = G__14314;
          chunk__14281_14308 = G__14315;
          count__14282_14309 = G__14316;
          i__14283_14310 = G__14317;
          continue;
        } else {
          var temp__4423__auto___14318 = cljs.core.seq.call(null, seq__14280_14307);
          if (temp__4423__auto___14318) {
            var seq__14280_14319__$1 = temp__4423__auto___14318;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14280_14319__$1)) {
              var c__5092__auto___14320 = cljs.core.chunk_first.call(null, seq__14280_14319__$1);
              var G__14321 = cljs.core.chunk_rest.call(null, seq__14280_14319__$1);
              var G__14322 = c__5092__auto___14320;
              var G__14323 = cljs.core.count.call(null, c__5092__auto___14320);
              var G__14324 = 0;
              seq__14280_14307 = G__14321;
              chunk__14281_14308 = G__14322;
              count__14282_14309 = G__14323;
              i__14283_14310 = G__14324;
              continue;
            } else {
              var vec__14285_14325 = cljs.core.first.call(null, seq__14280_14319__$1);
              var k_14326 = cljs.core.nth.call(null, vec__14285_14325, 0, null);
              var v_14327 = cljs.core.nth.call(null, vec__14285_14325, 1, null);
              obj[cljs.core.name.call(null, k_14326)] = v_14327;
              var G__14328 = cljs.core.next.call(null, seq__14280_14319__$1);
              var G__14329 = null;
              var G__14330 = 0;
              var G__14331 = 0;
              seq__14280_14307 = G__14328;
              chunk__14281_14308 = G__14329;
              count__14282_14309 = G__14330;
              i__14283_14310 = G__14331;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function cljs$reader$read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function cljs$reader$maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function cljs$reader$register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function cljs$reader$deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function cljs$reader$register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function cljs$reader$deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("tailrecursion.cljson");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("clojure.string");
tailrecursion.cljson.EncodeTagged = function() {
  var obj15131 = {};
  return obj15131;
}();
tailrecursion.cljson._encode = function tailrecursion$cljson$_encode(o) {
  if (function() {
    var and__4295__auto__ = o;
    if (and__4295__auto__) {
      return o.tailrecursion$cljson$EncodeTagged$_encode$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return o.tailrecursion$cljson$EncodeTagged$_encode$arity$1(o);
  } else {
    var x__4943__auto__ = o == null ? null : o;
    return function() {
      var or__4307__auto__ = tailrecursion.cljson._encode[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = tailrecursion.cljson._encode["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "EncodeTagged.-encode", o);
        }
      }
    }().call(null, o);
  }
};
tailrecursion.cljson.clj__GT_cljson = function tailrecursion$cljson$clj__GT_cljson(v) {
  return JSON.stringify(tailrecursion.cljson.encode.call(null, v));
};
tailrecursion.cljson.cljson__GT_clj = function tailrecursion$cljson$cljson__GT_clj(s) {
  return tailrecursion.cljson.decode.call(null, JSON.parse(s));
};
tailrecursion.cljson.enc_coll = function tailrecursion$cljson$enc_coll(tag, val) {
  var len = cljs.core.count.call(null, val);
  var out = [tag];
  var i = 0;
  var c = val;
  while (true) {
    if (i < len) {
      var i__$1 = i + 1;
      out[i__$1] = cljs.core.first.call(null, c);
      var G__15132 = i__$1;
      var G__15133 = cljs.core.rest.call(null, c);
      i = G__15132;
      c = G__15133;
      continue;
    } else {
      return out;
    }
    break;
  }
};
Date.prototype.tailrecursion$cljson$EncodeTagged$ = true;
Date.prototype.tailrecursion$cljson$EncodeTagged$_encode$arity$1 = function(o) {
  var o__$1 = this;
  return ["inst", cljs.core.subs.call(null, cljs.core.pr_str.call(null, o__$1), 7, 36)];
};
cljs.core.UUID.prototype.tailrecursion$cljson$EncodeTagged$ = true;
cljs.core.UUID.prototype.tailrecursion$cljson$EncodeTagged$_encode$arity$1 = function(o) {
  var o__$1 = this;
  return ["uuid", o__$1.uuid];
};
tailrecursion.cljson.interpret = function tailrecursion$cljson$interpret(x) {
  var temp__4423__auto__ = cljs.core.second.call(null, cljs.core.re_matches.call(null, /#([^<].*)/, cljs.core.pr_str.call(null, x)));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var match = temp__4423__auto__;
    var tag = cljs.reader.read_string.call(null, match);
    var val = cljs.reader.read_string.call(null, cljs.core.subs.call(null, match, [cljs.core.str(tag)].join("").length));
    return [[cljs.core.str(tag)].join(""), tailrecursion.cljson.encode.call(null, val)];
  } else {
    return null;
  }
};
tailrecursion.cljson.encode = function tailrecursion$cljson$encode(x) {
  var temp__4421__auto__ = function() {
    var and__4295__auto__ = cljs.core._STAR_print_meta_STAR_;
    if (cljs.core.truth_(and__4295__auto__)) {
      return cljs.core.meta.call(null, x);
    } else {
      return and__4295__auto__;
    }
  }();
  if (cljs.core.truth_(temp__4421__auto__)) {
    var m = temp__4421__auto__;
    return ["z", tailrecursion$cljson$encode.call(null, m), tailrecursion$cljson$encode.call(null, cljs.core.with_meta.call(null, x, null))];
  } else {
    if (function() {
      var G__15137 = x;
      if (G__15137) {
        var bit__4981__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4307__auto__ = bit__4981__auto__;
          if (cljs.core.truth_(or__4307__auto__)) {
            return or__4307__auto__;
          } else {
            return G__15137.tailrecursion$cljson$EncodeTagged$;
          }
        }())) {
          return true;
        } else {
          if (!G__15137.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, tailrecursion.cljson.EncodeTagged, G__15137);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, tailrecursion.cljson.EncodeTagged, G__15137);
      }
    }()) {
      return tailrecursion.cljson._encode.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return ["k", cljs.core.subs.call(null, [cljs.core.str(x)].join(""), 1)];
      } else {
        if (x instanceof cljs.core.Symbol) {
          return ["y", [cljs.core.str(x)].join("")];
        } else {
          if (cljs.core.vector_QMARK_.call(null, x)) {
            return tailrecursion.cljson.enc_coll.call(null, "v", cljs.core.map.call(null, tailrecursion$cljson$encode, x));
          } else {
            if (cljs.core.seq_QMARK_.call(null, x)) {
              return tailrecursion.cljson.enc_coll.call(null, "l", cljs.core.map.call(null, tailrecursion$cljson$encode, x));
            } else {
              if (cljs.core.map_QMARK_.call(null, x) && !function() {
                var G__15139 = x;
                if (G__15139) {
                  var bit__4981__auto__ = G__15139.cljs$lang$protocol_mask$partition0$ & 67108864;
                  if (bit__4981__auto__ || G__15139.cljs$core$IRecord$) {
                    return true;
                  } else {
                    if (!G__15139.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, G__15139);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, G__15139);
                }
              }()) {
                return tailrecursion.cljson.enc_coll.call(null, "m", cljs.core.map.call(null, tailrecursion$cljson$encode, cljs.core.apply.call(null, cljs.core.concat, x)));
              } else {
                if (cljs.core.set_QMARK_.call(null, x)) {
                  return tailrecursion.cljson.enc_coll.call(null, "s", cljs.core.map.call(null, tailrecursion$cljson$encode, x));
                } else {
                  if (typeof x === "string" || typeof x === "number" || x == null || cljs.core._EQ_.call(null, true, x) || cljs.core._EQ_.call(null, false, x)) {
                    return x;
                  } else {
                    var or__4307__auto__ = tailrecursion.cljson.interpret.call(null, x);
                    if (cljs.core.truth_(or__4307__auto__)) {
                      return or__4307__auto__;
                    } else {
                      throw new Error([cljs.core.str("No cljson encoding for type '"), cljs.core.str(cljs.core.type.call(null, x)), cljs.core.str("'.")].join(""));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
tailrecursion.cljson.decode_tagged = function tailrecursion$cljson$decode_tagged(o) {
  var tag = o[0];
  var G__15141 = tag;
  switch(G__15141) {
    case "v":
      var i = 1;
      var len = o.length;
      var out = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
      while (true) {
        if (i < len) {
          var G__15143 = i + 1;
          var G__15144 = len;
          var G__15145 = cljs.core.conj_BANG_.call(null, out, tailrecursion.cljson.decode.call(null, o[i]));
          i = G__15143;
          len = G__15144;
          out = G__15145;
          continue;
        } else {
          return cljs.core.persistent_BANG_.call(null, out);
        }
        break;
      }
      break;
    case "m":
      var i = 1;
      var len = o.length;
      var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
      while (true) {
        if (i < len) {
          var G__15146 = i + 2;
          var G__15147 = len;
          var G__15148 = cljs.core.assoc_BANG_.call(null, out, tailrecursion.cljson.decode.call(null, o[i]), tailrecursion.cljson.decode.call(null, o[i + 1]));
          i = G__15146;
          len = G__15147;
          out = G__15148;
          continue;
        } else {
          return cljs.core.persistent_BANG_.call(null, out);
        }
        break;
      }
      break;
    case "l":
      var i = o.length - 1;
      var out = cljs.core.List.EMPTY;
      while (true) {
        if (i > 0) {
          var G__15149 = i - 1;
          var G__15150 = cljs.core.conj.call(null, out, tailrecursion.cljson.decode.call(null, o[i]));
          i = G__15149;
          out = G__15150;
          continue;
        } else {
          return out;
        }
        break;
      }
      break;
    case "s":
      var i = 1;
      var len = o.length;
      var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (i < len) {
          var G__15151 = i + 1;
          var G__15152 = len;
          var G__15153 = cljs.core.conj_BANG_.call(null, out, tailrecursion.cljson.decode.call(null, o[i]));
          i = G__15151;
          len = G__15152;
          out = G__15153;
          continue;
        } else {
          return cljs.core.persistent_BANG_.call(null, out);
        }
        break;
      }
      break;
    case "k":
      return cljs.core.keyword.call(null, o[1]);
      break;
    case "y":
      var val = o[1];
      var idx = val.indexOf("/");
      if (idx < 0) {
        return cljs.core.symbol.call(null, val);
      } else {
        return cljs.core.symbol.call(null, val.slice(0, idx), val.slice(idx + 1));
      }
      break;
    case "z":
      var m = tailrecursion.cljson.decode.call(null, o[1]);
      var v = tailrecursion.cljson.decode.call(null, o[2]);
      return cljs.core.with_meta.call(null, v, m);
      break;
    default:
      var temp__4421__auto__ = function() {
        var or__4307__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag);
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
        }
      }();
      if (cljs.core.truth_(temp__4421__auto__)) {
        var reader = temp__4421__auto__;
        return reader.call(null, tailrecursion.cljson.decode.call(null, o[1]));
      } else {
        throw new Error([cljs.core.str("No reader function for tag '"), cljs.core.str(tag), cljs.core.str("'.")].join(""));
      }
    ;
  }
};
tailrecursion.cljson.decode = function tailrecursion$cljson$decode(v) {
  if (cljs.core.array_QMARK_.call(null, v)) {
    return tailrecursion.cljson.decode_tagged.call(null, v);
  } else {
    return v;
  }
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.equalTo = function(value, opt_useLooseComparison) {
  return function(other) {
    return opt_useLooseComparison ? value == other : value === other;
  };
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return !f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return (goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
goog.iter.StopIteration = "StopIteration" in goog.global ? goog.global["StopIteration"] : {message:"StopIteration", stack:""};
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  return goog.iter.chainFromIterable(arguments);
};
goog.iter.chainFromIterable = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var val = iterator.next();
    if (f.call(opt_obj, val, undefined, iterator)) {
      return val;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2, opt_equalsFn) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  return goog.iter.every(pairs, function(pair) {
    return equalsFn(pair[0], pair[1]);
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return !arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return !!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return [this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return [];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return !goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return (this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (version != selfObj.version_) {
      throw Error("The map has changed since the iterator was created");
    }
    if (i >= selfObj.keys_.length) {
      throw goog.iter.StopIteration;
    }
    var key = selfObj.keys_[i++];
    return opt_keys ? key : selfObj.map_[key];
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.object");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge") || goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchIE_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
};
goog.labs.userAgent.browser.matchCoast_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Coast");
};
goog.labs.userAgent.browser.matchIosWebview_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchOpera_() && !goog.labs.userAgent.browser.matchIE_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });
  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || "";
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return lookUpValueWithKeys(["Version", "Opera", "OPR"]);
  }
  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(["Chrome", "CriOS"]);
  }
  var tuple = versionTuples[2];
  return tuple && tuple[1] || "";
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var edge = /Edge\/([\d\.]+)/.exec(userAgent);
  if (edge) {
    return edge[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isEdge = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
  if (!goog.labs.userAgent.engine.isEdge()) {
    return tuples[1];
  }
  for (var i = 0;i < tuples.length;i++) {
    var tuple = tuples[i];
    if (tuple[0] == "Edge") {
      return tuple;
    }
  }
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.platform.isAndroid = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.platform.isIpod = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPod");
};
goog.labs.userAgent.platform.isIphone = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIpad = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIos = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
};
goog.labs.userAgent.platform.isMacintosh = function() {
  return goog.labs.userAgent.util.matchUserAgent("Macintosh");
};
goog.labs.userAgent.platform.isLinux = function() {
  return goog.labs.userAgent.util.matchUserAgent("Linux");
};
goog.labs.userAgent.platform.isWindows = function() {
  return goog.labs.userAgent.util.matchUserAgent("Windows");
};
goog.labs.userAgent.platform.isChromeOS = function() {
  return goog.labs.userAgent.util.matchUserAgent("CrOS");
};
goog.labs.userAgent.platform.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  var version = "", re;
  if (goog.labs.userAgent.platform.isWindows()) {
    re = /Windows (?:NT|Phone) ([0-9.]+)/;
    var match = re.exec(userAgentString);
    if (match) {
      version = match[1];
    } else {
      version = "0.0";
    }
  } else {
    if (goog.labs.userAgent.platform.isIos()) {
      re = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/;
      var match = re.exec(userAgentString);
      version = match && match[1].replace(/_/g, ".");
    } else {
      if (goog.labs.userAgent.platform.isMacintosh()) {
        re = /Mac OS X ([0-9_.]+)/;
        var match = re.exec(userAgentString);
        version = match ? match[1].replace(/_/g, ".") : "10";
      } else {
        if (goog.labs.userAgent.platform.isAndroid()) {
          re = /Android\s+([^\);]+)(\)|;)/;
          var match = re.exec(userAgentString);
          version = match && match[1];
        } else {
          if (goog.labs.userAgent.platform.isChromeOS()) {
            re = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/;
            var match = re.exec(userAgentString);
            version = match && match[1];
          }
        }
      }
    }
  }
  return version || "";
};
goog.labs.userAgent.platform.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), version) >= 0;
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
goog.userAgent.isLegacyLinux_ = function() {
  return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
};
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
goog.userAgent.isX11_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return !!navigator && goog.string.contains(navigator["appVersion"] || "", "X11");
};
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.determineVersion_ = function() {
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  var version = "";
  var arr = goog.userAgent.getVersionRegexResult_();
  if (arr) {
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE && !goog.labs.userAgent.engine.isEdge()) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getVersionRegexResult_ = function() {
  var userAgent = goog.userAgent.getUserAgentString();
  if (goog.userAgent.GECKO) {
    return /rv\:([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.IE && goog.labs.userAgent.engine.isEdge()) {
    return /Edge\/([\d\.]+)/.exec(userAgent);
  }
  if (goog.userAgent.IE) {
    return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.WEBKIT) {
    return /WebKit\/(\S+)/.exec(userAgent);
  }
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && (goog.labs.userAgent.engine.isEdge() || goog.userAgent.DOCUMENT_MODE >= documentMode);
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  var mode = goog.userAgent.getDocumentMode_();
  if (!doc || !goog.userAgent.IE || !mode && goog.labs.userAgent.engine.isEdge()) {
    return undefined;
  }
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return (uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri, opt_preserveReserved) {
  if (!uri) {
    return uri;
  }
  return opt_preserveReserved ? decodeURI(uri) : decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri), true);
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri), true);
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.parseQueryData = function(encodedQuery, callback) {
  var pairs = encodedQuery.split("\x26");
  for (var i = 0;i < pairs.length;i++) {
    var indexOfEquals = pairs[i].indexOf("\x3d");
    var name = null;
    var value = null;
    if (indexOfEquals >= 0) {
      name = pairs[i].substring(0, indexOfEquals);
      value = pairs[i].substring(indexOfEquals + 1);
    } else {
      name = pairs[i];
    }
    callback(name, value ? goog.string.urlDecode(value) : "");
  }
};
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return -1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  this.scheme_ = "";
  this.userInfo_ = "";
  this.domain_ = "";
  this.port_ = null;
  this.path_ = "";
  this.fragment_ = "";
  this.isReadOnly_ = false;
  this.ignoreCase_ = false;
  this.queryData_;
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), "@");
    }
    out.push(goog.Uri.removeDoubleEncoding_(goog.string.urlEncode(domain)));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_, true));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme, true) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return !!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return !!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain, true) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return !!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath, true) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return !!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, values);
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return (this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return !!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return (!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val, opt_preserveReserved) {
  if (!val) {
    return "";
  }
  return opt_preserveReserved ? decodeURI(val.replace(/%25/g, "%2525")) : decodeURIComponent(val);
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra, opt_removeDoubleEncoding) {
  if (goog.isString(unescapedPart)) {
    var encoded = encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
    if (opt_removeDoubleEncoding) {
      encoded = goog.Uri.removeDoubleEncoding_(encoded);
    }
    return encoded;
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.removeDoubleEncoding_ = function(doubleEncodedString) {
  return doubleEncodedString.replace(/%25([0-9a-fA-F]{2})/g, "%$1");
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.keyMap_ = null;
  this.count_ = null;
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var self = this;
      goog.uri.utils.parseQueryData(this.encodedQuery_, function(name, value) {
        self.add(goog.string.urlDecode(name), value);
      });
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = this.keyMap_.getValues();
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("goog.Thenable");
goog.Thenable = function() {
};
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
};
goog.Thenable.IMPLEMENTED_BY_PROP = "$goog_Thenable";
goog.Thenable.addImplementation = function(ctor) {
  goog.exportProperty(ctor.prototype, "then", ctor.prototype.then);
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    ctor.prototype.$goog_Thenable = true;
  }
};
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return !!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return !!object.$goog_Thenable;
  } catch (e) {
    return false;
  }
};
goog.provide("goog.async.FreeList");
goog.async.FreeList = goog.defineClass(null, {constructor:function(create, reset, limit) {
  this.limit_ = limit;
  this.create_ = create;
  this.reset_ = reset;
  this.occupants_ = 0;
  this.head_ = null;
}, get:function() {
  var item;
  if (this.occupants_ > 0) {
    this.occupants_--;
    item = this.head_;
    this.head_ = item.next;
    item.next = null;
  } else {
    item = this.create_();
  }
  return item;
}, put:function(item) {
  this.reset_(item);
  if (this.occupants_ < this.limit_) {
    this.occupants_++;
    item.next = this.head_;
    this.head_ = item;
  }
}, occupants:function() {
  return this.occupants_;
}});
goog.provide("goog.async.WorkItem");
goog.provide("goog.async.WorkQueue");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.async.WorkQueue = function() {
  this.workHead_ = null;
  this.workTail_ = null;
};
goog.define("goog.async.WorkQueue.DEFAULT_MAX_UNUSED", 100);
goog.async.WorkQueue.freelist_ = new goog.async.FreeList(function() {
  return new goog.async.WorkItem;
}, function(item) {
  item.reset();
}, goog.async.WorkQueue.DEFAULT_MAX_UNUSED);
goog.async.WorkQueue.prototype.add = function(fn, scope) {
  var item = this.getUnusedItem_();
  item.set(fn, scope);
  if (this.workTail_) {
    this.workTail_.next = item;
    this.workTail_ = item;
  } else {
    goog.asserts.assert(!this.workHead_);
    this.workHead_ = item;
    this.workTail_ = item;
  }
};
goog.async.WorkQueue.prototype.remove = function() {
  var item = null;
  if (this.workHead_) {
    item = this.workHead_;
    this.workHead_ = this.workHead_.next;
    if (!this.workHead_) {
      this.workTail_ = null;
    }
    item.next = null;
  }
  return item;
};
goog.async.WorkQueue.prototype.returnUnused = function(item) {
  goog.async.WorkQueue.freelist_.put(item);
};
goog.async.WorkQueue.prototype.getUnusedItem_ = function() {
  return goog.async.WorkQueue.freelist_.get();
};
goog.async.WorkItem = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.async.WorkItem.prototype.set = function(fn, scope) {
  this.fn = fn;
  this.scope = scope;
  this.next = null;
};
goog.async.WorkItem.prototype.reset = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEMPLATE:"TEMPLATE", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context, opt_useSetImmediate) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate) && (opt_useSetImmediate || !goog.global.Window || !goog.global.Window.prototype || goog.global.Window.prototype.setImmediate != goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener && !goog.labs.userAgent.engine.isPresto()) {
    Channel = function() {
      var iframe = document.createElement(goog.dom.TagName.IFRAME);
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (origin != "*" && e.origin != origin || e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined" && !goog.labs.userAgent.browser.isIE()) {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      if (goog.isDef(head.next)) {
        head = head.next;
        var cb = head.cb;
        head.cb = null;
        cb();
      }
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement(goog.dom.TagName.SCRIPT)) {
    return function(cb) {
      var script = document.createElement(goog.dom.TagName.SCRIPT);
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("goog.testing.watchers");
goog.testing.watchers.resetWatchers_ = [];
goog.testing.watchers.signalClockReset = function() {
  var watchers = goog.testing.watchers.resetWatchers_;
  for (var i = 0;i < watchers.length;i++) {
    goog.testing.watchers.resetWatchers_[i]();
  }
};
goog.testing.watchers.watchClockReset = function(fn) {
  goog.testing.watchers.resetWatchers_.push(fn);
};
goog.provide("goog.async.run");
goog.require("goog.async.WorkQueue");
goog.require("goog.async.nextTick");
goog.require("goog.async.throwException");
goog.require("goog.testing.watchers");
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }
  goog.async.run.workQueue_.add(callback, opt_context);
};
goog.async.run.initializeRunner_ = function() {
  if (goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve();
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};
goog.async.run.forceNextTick = function() {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
  };
};
goog.async.run.schedule_;
goog.async.run.workQueueScheduled_ = false;
goog.async.run.workQueue_ = new goog.async.WorkQueue;
if (goog.DEBUG) {
  goog.async.run.resetQueue_ = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = new goog.async.WorkQueue;
  };
  goog.testing.watchers.watchClockReset(goog.async.run.resetQueue_);
}
goog.async.run.processWorkQueue = function() {
  var item = null;
  while (item = goog.async.run.workQueue_.remove()) {
    try {
      item.fn.call(item.scope);
    } catch (e) {
      goog.async.throwException(e);
    }
    goog.async.run.workQueue_.returnUnused(item);
  }
  goog.async.run.workQueueScheduled_ = false;
};
goog.provide("goog.promise.Resolver");
goog.promise.Resolver = function() {
};
goog.promise.Resolver.prototype.promise;
goog.promise.Resolver.prototype.resolve;
goog.promise.Resolver.prototype.reject;
goog.provide("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.require("goog.async.run");
goog.require("goog.async.throwException");
goog.require("goog.debug.Error");
goog.require("goog.promise.Resolver");
goog.Promise = function(resolver, opt_context) {
  this.state_ = goog.Promise.State_.PENDING;
  this.result_ = undefined;
  this.parent_ = null;
  this.callbackEntries_ = null;
  this.callbackEntriesTail_ = null;
  this.executing_ = false;
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    this.unhandledRejectionId_ = 0;
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      this.hadUnhandledRejection_ = false;
    }
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.stack_ = [];
    this.addStackTrace_(new Error("created"));
    this.currentStep_ = 0;
  }
  if (resolver == goog.Promise.RESOLVE_FAST_PATH_) {
    this.resolve_(goog.Promise.State_.FULFILLED, opt_context);
  } else {
    try {
      var self = this;
      resolver.call(opt_context, function(value) {
        self.resolve_(goog.Promise.State_.FULFILLED, value);
      }, function(reason) {
        if (goog.DEBUG && !(reason instanceof goog.Promise.CancellationError)) {
          try {
            if (reason instanceof Error) {
              throw reason;
            } else {
              throw new Error("Promise rejected.");
            }
          } catch (e) {
          }
        }
        self.resolve_(goog.Promise.State_.REJECTED, reason);
      });
    } catch (e) {
      this.resolve_(goog.Promise.State_.REJECTED, e);
    }
  }
};
goog.define("goog.Promise.LONG_STACK_TRACES", false);
goog.define("goog.Promise.UNHANDLED_REJECTION_DELAY", 0);
goog.Promise.State_ = {PENDING:0, BLOCKED:1, FULFILLED:2, REJECTED:3};
goog.Promise.CallbackEntry_ = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.next = null;
  this.always = false;
};
goog.Promise.CallbackEntry_.prototype.reset = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.always = false;
};
goog.define("goog.Promise.DEFAULT_MAX_UNUSED", 100);
goog.Promise.freelist_ = new goog.async.FreeList(function() {
  return new goog.Promise.CallbackEntry_;
}, function(item) {
  item.reset();
}, goog.Promise.DEFAULT_MAX_UNUSED);
goog.Promise.getCallbackEntry_ = function(onFulfilled, onRejected, context) {
  var entry = goog.Promise.freelist_.get();
  entry.onFulfilled = onFulfilled;
  entry.onRejected = onRejected;
  entry.context = context;
  return entry;
};
goog.Promise.returnEntry_ = function(entry) {
  goog.Promise.freelist_.put(entry);
};
goog.Promise.RESOLVE_FAST_PATH_ = function() {
};
goog.Promise.resolve = function(opt_value) {
  return new goog.Promise(goog.Promise.RESOLVE_FAST_PATH_, opt_value);
};
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise;promise = promises[i];i++) {
      goog.Promise.maybeThenVoid_(promise, resolve, reject);
    }
  });
};
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];
    if (!toFulfill) {
      resolve(values);
      return;
    }
    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };
    var onReject = function(reason) {
      reject(reason);
    };
    for (var i = 0, promise;promise = promises[i];i++) {
      goog.Promise.maybeThenVoid_(promise, goog.partial(onFulfill, i), onReject);
    }
  });
};
goog.Promise.allSettled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toSettle = promises.length;
    var results = [];
    if (!toSettle) {
      resolve(results);
      return;
    }
    var onSettled = function(index, fulfilled, result) {
      toSettle--;
      results[index] = fulfilled ? {fulfilled:true, value:result} : {fulfilled:false, reason:result};
      if (toSettle == 0) {
        resolve(results);
      }
    };
    for (var i = 0, promise;promise = promises[i];i++) {
      goog.Promise.maybeThenVoid_(promise, goog.partial(onSettled, i, true), goog.partial(onSettled, i, false));
    }
  });
};
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];
    if (!toReject) {
      resolve(undefined);
      return;
    }
    var onFulfill = function(value) {
      resolve(value);
    };
    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };
    for (var i = 0, promise;promise = promises[i];i++) {
      goog.Promise.maybeThenVoid_(promise, onFulfill, goog.partial(onReject, i));
    }
  });
};
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};
goog.Promise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  return this.addChildPromise_(goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null, goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);
};
goog.Thenable.addImplementation(goog.Promise);
goog.Promise.prototype.thenVoid = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  this.addCallbackEntry_(goog.Promise.getCallbackEntry_(opt_onFulfilled || goog.nullFunction, opt_onRejected || null, opt_context));
};
goog.Promise.maybeThenVoid_ = function(promise, onFulfilled, onRejected, opt_context) {
  if (promise instanceof goog.Promise) {
    promise.thenVoid(onFulfilled, onRejected, opt_context);
  } else {
    promise.then(onFulfilled, onRejected, opt_context);
  }
};
goog.Promise.prototype.thenAlways = function(onSettled, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenAlways"));
  }
  var entry = goog.Promise.getCallbackEntry_(onSettled, onSettled, opt_context);
  entry.always = true;
  this.addCallbackEntry_(entry);
  return this;
};
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenCatch"));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    goog.async.run(function() {
      var err = new goog.Promise.CancellationError(opt_message);
      this.cancelInternal_(err);
    }, this);
  }
};
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      this.parent_.cancelChild_(this, err);
      this.parent_ = null;
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childEntry = null;
  var beforeChildEntry = null;
  for (var entry = this.callbackEntries_;entry;entry = entry.next) {
    if (!entry.always) {
      childCount++;
      if (entry.child == childPromise) {
        childEntry = entry;
      }
      if (childEntry && childCount > 1) {
        break;
      }
    }
    if (!childEntry) {
      beforeChildEntry = entry;
    }
  }
  if (childEntry) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      if (beforeChildEntry) {
        this.removeEntryAfter_(beforeChildEntry);
      } else {
        this.popEntry_();
      }
      this.executeCallback_(childEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if (!this.hasEntry_() && (this.state_ == goog.Promise.State_.FULFILLED || this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  this.queueEntry_(callbackEntry);
};
goog.Promise.prototype.addChildPromise_ = function(onFulfilled, onRejected, opt_context) {
  var callbackEntry = goog.Promise.getCallbackEntry_(null, null, null);
  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (!goog.isDef(result) && reason instanceof goog.Promise.CancellationError) {
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });
  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_(callbackEntry);
  return callbackEntry.child;
};
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }
  if (this == x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError("Promise cannot resolve to itself");
  } else {
    if (goog.Thenable.isImplementedBy(x)) {
      x = (x);
      this.state_ = goog.Promise.State_.BLOCKED;
      goog.Promise.maybeThenVoid_(x, this.unblockAndFulfill_, this.unblockAndReject_, this);
      return;
    } else {
      if (goog.isObject(x)) {
        try {
          var then = x["then"];
          if (goog.isFunction(then)) {
            this.tryThen_(x, then);
            return;
          }
        } catch (e) {
          state = goog.Promise.State_.REJECTED;
          x = e;
        }
      }
    }
  }
  this.result_ = x;
  this.state_ = state;
  this.parent_ = null;
  this.scheduleCallbacks_();
  if (state == goog.Promise.State_.REJECTED && !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};
goog.Promise.prototype.tryThen_ = function(thenable, then) {
  this.state_ = goog.Promise.State_.BLOCKED;
  var promise = this;
  var called = false;
  var resolve = function(value) {
    if (!called) {
      called = true;
      promise.unblockAndFulfill_(value);
    }
  };
  var reject = function(reason) {
    if (!called) {
      called = true;
      promise.unblockAndReject_(reason);
    }
  };
  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};
goog.Promise.prototype.hasEntry_ = function() {
  return !!this.callbackEntries_;
};
goog.Promise.prototype.queueEntry_ = function(entry) {
  goog.asserts.assert(entry.onFulfilled != null);
  if (this.callbackEntriesTail_) {
    this.callbackEntriesTail_.next = entry;
    this.callbackEntriesTail_ = entry;
  } else {
    this.callbackEntries_ = entry;
    this.callbackEntriesTail_ = entry;
  }
};
goog.Promise.prototype.popEntry_ = function() {
  var entry = null;
  if (this.callbackEntries_) {
    entry = this.callbackEntries_;
    this.callbackEntries_ = entry.next;
    entry.next = null;
  }
  if (!this.callbackEntries_) {
    this.callbackEntriesTail_ = null;
  }
  if (entry != null) {
    goog.asserts.assert(entry.onFulfilled != null);
  }
  return entry;
};
goog.Promise.prototype.removeEntryAfter_ = function(previous) {
  goog.asserts.assert(this.callbackEntries_);
  goog.asserts.assert(previous != null);
  if (previous.next == this.callbackEntriesTail_) {
    this.callbackEntriesTail_ = previous;
  }
  previous.next = previous.next.next;
};
goog.Promise.prototype.executeCallbacks_ = function() {
  var entry = null;
  while (entry = this.popEntry_()) {
    if (goog.Promise.LONG_STACK_TRACES) {
      this.currentStep_++;
    }
    this.executeCallback_(entry, this.state_, this.result_);
  }
  this.executing_ = false;
};
goog.Promise.prototype.executeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.REJECTED && callbackEntry.onRejected && !callbackEntry.always) {
    this.removeUnhandledRejection_();
  }
  if (callbackEntry.child) {
    callbackEntry.child.parent_ = null;
    goog.Promise.invokeCallback_(callbackEntry, state, result);
  } else {
    try {
      callbackEntry.always ? callbackEntry.onFulfilled.call(callbackEntry.context) : goog.Promise.invokeCallback_(callbackEntry, state, result);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  }
  goog.Promise.returnEntry_(callbackEntry);
};
goog.Promise.invokeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled.call(callbackEntry.context, result);
  } else {
    if (callbackEntry.onRejected) {
      callbackEntry.onRejected.call(callbackEntry.context, result);
    }
  }
};
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
    var trace = err.stack.split("\n", 4)[3];
    var message = err.message;
    message += Array(11 - message.length).join(" ");
    this.stack_.push(message + trace);
  }
};
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && err && goog.isString(err.stack) && this.stack_.length) {
    var longTrace = ["Promise trace:"];
    for (var promise = this;promise;promise = promise.parent_) {
      for (var i = this.currentStep_;i >= 0;i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push("Value: " + "[" + (promise.state_ == goog.Promise.State_.REJECTED ? "REJECTED" : "FULFILLED") + "] " + "\x3c" + String(promise.result_) + "\x3e");
    }
    err.stack += "\n\n" + longTrace.join("\n");
  }
};
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this;p && p.unhandledRejectionId_;p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      for (var p = this;p && p.hadUnhandledRejection_;p = p.parent_) {
        p.hadUnhandledRejection_ = false;
      }
    }
  }
};
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      promise.hadUnhandledRejection_ = true;
      goog.async.run(function() {
        if (promise.hadUnhandledRejection_) {
          promise.appendLongStack_(reason);
          goog.Promise.handleRejection_.call(null, reason);
        }
      });
    }
  }
};
goog.Promise.handleRejection_ = goog.async.throwException;
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, "constructor", opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);
goog.Promise.CancellationError.prototype.name = "cancel";
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  this.promise = promise;
  this.resolve = resolve;
  this.reject = reject;
};
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CanceledError");
goog.require("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  this.sequence_ = [];
  this.onCancelFunction_ = opt_onCancelFunction;
  this.defaultScope_ = opt_defaultScope || null;
  this.fired_ = false;
  this.hadError_ = false;
  this.result_ = undefined;
  this.blocked_ = false;
  this.blocking_ = false;
  this.silentlyCanceled_ = false;
  this.unhandledErrorId_ = 0;
  this.parent_ = null;
  this.branches_ = 0;
  if (goog.async.Deferred.LONG_STACK_TRACES) {
    this.constructorStack_ = null;
    if (Error.captureStackTrace) {
      var target = {stack:""};
      Error.captureStackTrace(target, goog.async.Deferred);
      if (typeof target.stack == "string") {
        this.constructorStack_ = target.stack.replace(/^[^\n]*\n/, "");
      }
    }
  }
};
goog.define("goog.async.Deferred.STRICT_ERRORS", false);
goog.define("goog.async.Deferred.LONG_STACK_TRACES", false);
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.onCancelFunction_) {
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCanceled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CanceledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCanceled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCanceled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true, opt_result);
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.makeStackTraceLong_(opt_result);
  this.updateResult_(false, opt_result);
};
goog.async.Deferred.prototype.makeStackTraceLong_ = function(error) {
  if (!goog.async.Deferred.LONG_STACK_TRACES) {
    return;
  }
  if (this.constructorStack_ && goog.isObject(error) && error.stack && /^[^\n]+(\n   [^\n]+)+/.test(error.stack)) {
    error.stack = error.stack + "\nDEFERRED OPERATION:\n" + this.constructorStack_;
  }
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "An execution sequence may not be initiated with a blocking Deferred.");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.addFinally = function(f, opt_scope) {
  var self = this;
  return this.addCallbacks(f, function(err) {
    var result = f.call(self, err);
    if (!goog.isDef(result)) {
      throw err;
    }
    return result;
  }, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, "Blocking Deferreds can not be re-used");
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  var resolve, reject;
  var promise = new goog.Promise(function(res, rej) {
    resolve = res;
    reject = rej;
  });
  this.addCallbacks(resolve, function(reason) {
    if (reason instanceof goog.async.Deferred.CanceledError) {
      promise.cancel();
    } else {
      reject(reason);
    }
  });
  return promise.then(opt_onFulfilled, opt_onRejected, opt_context);
};
goog.Thenable.addImplementation(goog.async.Deferred);
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  if (!(otherDeferred instanceof goog.async.Deferred)) {
    return this.addCallback(function() {
      return otherDeferred;
    });
  }
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    return goog.isFunction(sequenceRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledErrorId_ && this.hasFired() && this.hasErrback_()) {
    goog.async.Deferred.unscheduleError_(this.unhandledErrorId_);
    this.unhandledErrorId_ = 0;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;
  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();
    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (goog.Thenable.isImplementedBy(res) || typeof goog.global["Promise"] === "function" && res instanceof goog.global["Promise"]) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        this.makeStackTraceLong_(res);
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isNewlyBlocked) {
    var onCallback = goog.bind(this.continue_, this, true);
    var onErrback = goog.bind(this.continue_, this, false);
    if (res instanceof goog.async.Deferred) {
      res.addCallbacks(onCallback, onErrback);
      res.blocking_ = true;
    } else {
      res.then(onCallback, onErrback);
    }
  } else {
    if (goog.async.Deferred.STRICT_ERRORS && this.isError(res) && !(res instanceof goog.async.Deferred.CanceledError)) {
      this.hadError_ = true;
      unhandledException = true;
    }
  }
  if (unhandledException) {
    this.unhandledErrorId_ = goog.async.Deferred.scheduleError_(res);
  }
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d;
};
goog.async.Deferred.fromPromise = function(promise) {
  var d = new goog.async.Deferred;
  d.callback();
  d.addCallback(function() {
    return promise;
  });
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.canceled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CanceledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CanceledError, goog.debug.Error);
goog.async.Deferred.CanceledError.prototype.message = "Deferred was canceled";
goog.async.Deferred.CanceledError.prototype.name = "CanceledError";
goog.async.Deferred.Error_ = function(error) {
  this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);
  this.error_ = error;
};
goog.async.Deferred.Error_.prototype.throwError = function() {
  goog.asserts.assert(goog.async.Deferred.errorMap_[this.id_], "Cannot throw an error that is not scheduled.");
  delete goog.async.Deferred.errorMap_[this.id_];
  throw this.error_;
};
goog.async.Deferred.Error_.prototype.resetTimer = function() {
  goog.global.clearTimeout(this.id_);
};
goog.async.Deferred.errorMap_ = {};
goog.async.Deferred.scheduleError_ = function(error) {
  var deferredError = new goog.async.Deferred.Error_(error);
  goog.async.Deferred.errorMap_[deferredError.id_] = deferredError;
  return deferredError.id_;
};
goog.async.Deferred.unscheduleError_ = function(id) {
  var error = goog.async.Deferred.errorMap_[id];
  if (error) {
    error.resetTimer();
    delete goog.async.Deferred.errorMap_[id];
  }
};
goog.async.Deferred.assertNoErrors = function() {
  var map = goog.async.Deferred.errorMap_;
  for (var key in map) {
    var error = map[key];
    error.resetTimer();
    error.throwError();
  }
};
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.tags");
goog.require("goog.object");
goog.dom.tags.VOID_TAGS_ = goog.object.createSet(("area,base,br,col,command," + "embed,hr,img,input,keygen,link,meta,param,source,track,wbr").split(","));
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide("goog.string.TypedString");
goog.string.TypedString = function() {
};
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide("goog.string.Const");
goog.require("goog.asserts");
goog.require("goog.string.TypedString");
goog.string.Const = function() {
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = "";
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.string.Const.prototype.toString = function() {
  return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
};
goog.string.Const.unwrap = function(stringConst) {
  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {
    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail("expected object of type Const, got '" + stringConst + "'");
    return "type_error:Const";
  }
};
goog.string.Const.from = function(s) {
  return goog.string.Const.create__googStringSecurityPrivate_(s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.create__googStringSecurityPrivate_ = function(s) {
  var stringConst = new goog.string.Const;
  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = s;
  return stringConst;
};
goog.provide("goog.html.SafeStyle");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyle = function() {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(styleString);
  goog.asserts.assert(goog.string.endsWith(styleString, ";"), "Last character of style string is not ';': " + styleString);
  goog.asserts.assert(goog.string.contains(styleString, ":"), "Style string must contain at least one ':', to " + 'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.checkStyle_ = function(style) {
  goog.asserts.assert(!/[<>]/.test(style), "Forbidden characters in style string: " + style);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
  };
}
goog.html.SafeStyle.unwrap = function(safeStyle) {
  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyle, got '" + safeStyle + "'");
    return "type_error:SafeStyle";
  }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {
  return (new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(style);
};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(style) {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return this;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function(map) {
  var style = "";
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw Error("Name allows only [-_a-zA-Z0-9], got: " + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (value instanceof goog.string.Const) {
      value = goog.string.Const.unwrap(value);
      goog.asserts.assert(!/[{;}]/.test(value), "Value does not allow [{;}].");
    } else {
      if (!goog.html.SafeStyle.VALUE_RE_.test(value)) {
        goog.asserts.fail("String value allows only [-,.\"'%_!# a-zA-Z0-9], got: " + value);
        value = goog.html.SafeStyle.INNOCUOUS_STRING;
      } else {
        if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {
          goog.asserts.fail("String value requires balanced quotes, got: " + value);
          value = goog.html.SafeStyle.INNOCUOUS_STRING;
        }
      }
    }
    style += name + ":" + value + ";";
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(style);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.hasBalancedQuotes_ = function(value) {
  var outsideSingle = true;
  var outsideDouble = true;
  for (var i = 0;i < value.length;i++) {
    var c = value.charAt(i);
    if (c == "'" && outsideDouble) {
      outsideSingle = !outsideSingle;
    } else {
      if (c == '"' && outsideSingle) {
        outsideDouble = !outsideDouble;
      }
    }
  }
  return outsideSingle && outsideDouble;
};
goog.html.SafeStyle.VALUE_RE_ = /^[-,."'%_!# a-zA-Z0-9]+$/;
goog.html.SafeStyle.concat = function(var_args) {
  var style = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide("goog.html.SafeStyleSheet");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyleSheet = function() {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyleSheet.concat = function(var_args) {
  var result = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      result += goog.html.SafeStyleSheet.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(result);
};
goog.html.SafeStyleSheet.fromConstant = function(styleSheet) {
  var styleSheetString = goog.string.Const.unwrap(styleSheet);
  if (styleSheetString.length === 0) {
    return goog.html.SafeStyleSheet.EMPTY;
  }
  goog.asserts.assert(!goog.string.contains(styleSheetString, "\x3c"), "Forbidden '\x3c' character in style sheet string: " + styleSheetString);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheetString);
};
goog.html.SafeStyleSheet.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyleSheet.prototype.toString = function() {
    return "SafeStyleSheet{" + this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + "}";
  };
}
goog.html.SafeStyleSheet.unwrap = function(safeStyleSheet) {
  if (safeStyleSheet instanceof goog.html.SafeStyleSheet && safeStyleSheet.constructor === goog.html.SafeStyleSheet && safeStyleSheet.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyleSheet, got '" + safeStyleSheet + "'");
    return "type_error:SafeStyleSheet";
  }
};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse = function(styleSheet) {
  return (new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(styleSheet);
};
goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(styleSheet) {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = styleSheet;
  return this;
};
goog.html.SafeStyleSheet.EMPTY = goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.fs.url");
goog.fs.url.createObjectUrl = function(blob) {
  return goog.fs.url.getUrlObject_().createObjectURL(blob);
};
goog.fs.url.revokeObjectUrl = function(url) {
  goog.fs.url.getUrlObject_().revokeObjectURL(url);
};
goog.fs.url.UrlObject_;
goog.fs.url.getUrlObject_ = function() {
  var urlObject = goog.fs.url.findUrlObject_();
  if (urlObject != null) {
    return urlObject;
  } else {
    throw Error("This browser doesn't seem to support blob URLs");
  }
};
goog.fs.url.findUrlObject_ = function() {
  if (goog.isDef(goog.global.URL) && goog.isDef(goog.global.URL.createObjectURL)) {
    return (goog.global.URL);
  } else {
    if (goog.isDef(goog.global.webkitURL) && goog.isDef(goog.global.webkitURL.createObjectURL)) {
      return (goog.global.webkitURL);
    } else {
      if (goog.isDef(goog.global.createObjectURL)) {
        return (goog.global);
      } else {
        return null;
      }
    }
  }
};
goog.fs.url.browserSupportsObjectUrls = function() {
  return goog.fs.url.findUrlObject_() != null;
};
goog.provide("goog.i18n.bidi");
goog.provide("goog.i18n.bidi.Dir");
goog.provide("goog.i18n.bidi.DirectionalString");
goog.provide("goog.i18n.bidi.Format");
goog.define("goog.i18n.bidi.FORCE_RTL", false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 
2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || goog.LOCALE.length >= 3 && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_");
goog.i18n.bidi.Format = {LRE:"\u202a", RLE:"\u202b", PDF:"\u202c", LRM:"\u200e", RLM:"\u200f"};
goog.i18n.bidi.Dir = {LTR:1, RTL:-1, NEUTRAL:0};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == "number") {
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ? goog.i18n.bidi.Dir.RTL : opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else {
    if (givenDir == null) {
      return null;
    } else {
      return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
  }
};
goog.i18n.bidi.ltrChars_ = "A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff" + "\u200e\u2c00-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";
goog.i18n.bidi.rtlChars_ = "\u0591-\u07ff\u200f\ufb1d-\ufdff\ufe70-\ufefc";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, "") : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return !goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp("^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|" + ".*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))" + "(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardHtmlRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(&lt;.*?(&gt;)+)/g;
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInHtml = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  if (useRtl) {
    return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3drtl\x3e$\x26\x3c/span\x3e");
  }
  return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3dltr\x3e$\x26\x3c/span\x3e");
};
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$\x26" + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3drtl");
  }
  return "\n\x3cspan dir\x3drtl\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3dltr");
  }
  return "\n\x3cspan dir\x3dltr\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1\u05f3");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /\d/;
goog.i18n.bidi.rtlDetectionThreshold_ = .4;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  var rtlCount = 0;
  var totalCount = 0;
  var hasWeaklyLtr = false;
  var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_);
  for (var i = 0;i < tokens.length;i++) {
    var token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else {
      if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
        hasWeaklyLtr = true;
      } else {
        if (goog.i18n.bidi.hasAnyLtr(token)) {
          totalCount++;
        } else {
          if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
          }
        }
      }
    }
  }
  return totalCount == 0 ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      element.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      element.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr";
    }
  }
};
goog.i18n.bidi.setElementDirByTextDirectionality = function(element, text) {
  switch(goog.i18n.bidi.estimateDirection(text)) {
    case goog.i18n.bidi.Dir.LTR:
      element.dir = "ltr";
      break;
    case goog.i18n.bidi.Dir.RTL:
      element.dir = "rtl";
      break;
    default:
      element.removeAttribute("dir");
  }
};
goog.i18n.bidi.DirectionalString = function() {
};
goog.i18n.bidi.DirectionalString.prototype.implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide("goog.html.SafeUrl");
goog.require("goog.asserts");
goog.require("goog.fs.url");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeUrl = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeUrl.unwrap = function(safeUrl) {
  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeUrl, got '" + safeUrl + "'");
    return "type_error:SafeUrl";
  }
};
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_BLOB_TYPE_PATTERN_ = /^image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)$/i;
goog.html.SafeUrl.fromBlob = function(blob) {
  var url = goog.html.SAFE_BLOB_TYPE_PATTERN_.test(blob.type) ? goog.fs.url.createObjectUrl(blob) : goog.html.SafeUrl.INNOCUOUS_STRING;
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  } else {
    url = goog.html.SafeUrl.normalize_(url);
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.normalize_ = function(url) {
  try {
    var normalized = encodeURI(url);
  } catch (e) {
    return goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return normalized.replace(goog.html.SafeUrl.NORMALIZE_MATCHER_, function(match) {
    return goog.html.SafeUrl.NORMALIZE_REPLACER_MAP_[match];
  });
};
goog.html.SafeUrl.NORMALIZE_MATCHER_ = /[()']|%5B|%5D|%25/g;
goog.html.SafeUrl.NORMALIZE_REPLACER_MAP_ = {"'":"%27", "(":"%28", ")":"%29", "%5B":"[", "%5D":"]", "%25":"%"};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var safeUrl = new goog.html.SafeUrl;
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
};
goog.provide("goog.html.TrustedResourceUrl");
goog.require("goog.asserts");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.TrustedResourceUrl = function() {
  this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = "";
  this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;
goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.TrustedResourceUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.TrustedResourceUrl.prototype.toString = function() {
    return "TrustedResourceUrl{" + this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + "}";
  };
}
goog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {
  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl && trustedResourceUrl.constructor === goog.html.TrustedResourceUrl && trustedResourceUrl.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type TrustedResourceUrl, got '" + trustedResourceUrl + "'");
    return "type_error:TrustedResourceUrl";
  }
};
goog.html.TrustedResourceUrl.fromConstant = function(url) {
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var trustedResourceUrl = new goog.html.TrustedResourceUrl;
  trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = url;
  return trustedResourceUrl;
};
goog.provide("goog.html.SafeHtml");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.TagName");
goog.require("goog.dom.tags");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeHtml = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
  this.dir_ = null;
};
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeHtml.unwrap = function(safeHtml) {
  if (safeHtml instanceof goog.html.SafeHtml && safeHtml.constructor === goog.html.SafeHtml && safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeHtml, got '" + safeHtml + "'");
    return "type_error:SafeHtml";
  }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var dir = null;
  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.whitespaceEscape(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet("action", "cite", "data", "formaction", "href", "manifest", "poster", "src");
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet(goog.dom.TagName.EMBED, goog.dom.TagName.IFRAME, goog.dom.TagName.LINK, goog.dom.TagName.OBJECT, goog.dom.TagName.SCRIPT, goog.dom.TagName.STYLE, goog.dom.TagName.TEMPLATE);
goog.html.SafeHtml.AttributeValue_;
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw Error("Invalid tag name \x3c" + tagName + "\x3e.");
  }
  if (tagName.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw Error("Tag name \x3c" + tagName + "\x3e is not allowed for SafeHtml.");
  }
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(tagName, opt_attributes, opt_content);
};
goog.html.SafeHtml.createIframe = function(opt_src, opt_srcdoc, opt_attributes, opt_content) {
  var fixedAttributes = {};
  fixedAttributes["src"] = opt_src || null;
  fixedAttributes["srcdoc"] = opt_srcdoc || null;
  var defaultAttributes = {"sandbox":""};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", attributes, opt_content);
};
goog.html.SafeHtml.createStyle = function(styleSheet, opt_attributes) {
  var fixedAttributes = {"type":"text/css"};
  var defaultAttributes = {};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  var content = "";
  styleSheet = goog.array.concat(styleSheet);
  for (var i = 0;i < styleSheet.length;i++) {
    content += goog.html.SafeStyleSheet.unwrap(styleSheet[i]);
  }
  var htmlContent = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, goog.i18n.bidi.Dir.NEUTRAL);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style", attributes, htmlContent);
};
goog.html.SafeHtml.getAttrNameAndValue_ = function(tagName, name, value) {
  if (value instanceof goog.string.Const) {
    value = goog.string.Const.unwrap(value);
  } else {
    if (name.toLowerCase() == "style") {
      value = goog.html.SafeHtml.getStyleValue_(value);
    } else {
      if (/^on/i.test(name)) {
        throw Error('Attribute "' + name + '" requires goog.string.Const value, "' + value + '" given.');
      } else {
        if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
          if (value instanceof goog.html.TrustedResourceUrl) {
            value = goog.html.TrustedResourceUrl.unwrap(value);
          } else {
            if (value instanceof goog.html.SafeUrl) {
              value = goog.html.SafeUrl.unwrap(value);
            } else {
              throw Error('Attribute "' + name + '" on tag "' + tagName + '" requires goog.html.SafeUrl or goog.string.Const value, "' + value + '" given.');
            }
          }
        }
      }
    }
  }
  if (value.implementsGoogStringTypedString) {
    value = value.getTypedStringValue();
  }
  goog.asserts.assert(goog.isString(value) || goog.isNumber(value), "String or number value expected, got " + typeof value + " with value: " + value);
  return name + '\x3d"' + goog.string.htmlEscape(String(value)) + '"';
};
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw Error('The "style" attribute requires goog.html.SafeStyle or map ' + "of style properties, " + typeof value + " given: " + value);
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes, opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.concat = function(var_args) {
  var dir = goog.i18n.bidi.Dir.NEUTRAL;
  var content = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content += goog.html.SafeHtml.unwrap(html);
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else {
        if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
          dir = null;
        }
      }
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, dir);
};
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(html, dir) {
  return (new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(html, dir);
};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(html, dir) {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
  this.dir_ = dir;
  return this;
};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse = function(tagName, opt_attributes, opt_content) {
  var dir = null;
  var result = "\x3c" + tagName;
  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw Error('Invalid attribute name "' + name + '".');
      }
      var value = opt_attributes[name];
      if (!goog.isDefAndNotNull(value)) {
        continue;
      }
      result += " " + goog.html.SafeHtml.getAttrNameAndValue_(tagName, name, value);
    }
  }
  var content = opt_content;
  if (!goog.isDefAndNotNull(content)) {
    content = [];
  } else {
    if (!goog.isArray(content)) {
      content = [content];
    }
  }
  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length, "Void tag \x3c" + tagName + "\x3e does not allow content.");
    result += "\x3e";
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += "\x3e" + goog.html.SafeHtml.unwrap(html) + "\x3c/" + tagName + "\x3e";
    dir = html.getDirection();
  }
  var dirAttribute = opt_attributes && opt_attributes["dir"];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.combineAttributes = function(fixedAttributes, defaultAttributes, opt_attributes) {
  var combinedAttributes = {};
  var name;
  for (name in fixedAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = fixedAttributes[name];
  }
  for (name in defaultAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = defaultAttributes[name];
  }
  for (name in opt_attributes) {
    var nameLower = name.toLowerCase();
    if (nameLower in fixedAttributes) {
      throw Error('Cannot override "' + nameLower + '" attribute, got "' + name + '" with value "' + opt_attributes[name] + '"');
    }
    if (nameLower in defaultAttributes) {
      delete combinedAttributes[nameLower];
    }
    combinedAttributes[name] = opt_attributes[name];
  }
  return combinedAttributes;
};
goog.html.SafeHtml.DOCTYPE_HTML = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3c!DOCTYPE html\x3e", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.provide("goog.dom.safe");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.dom.safe.setInnerHtml = function(elem, html) {
  elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setAnchorHref = function(anchor, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setEmbedSrc = function(embed, url) {
  embed.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setFrameSrc = function(frame, url) {
  frame.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setIframeSrc = function(iframe, url) {
  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {
  link.rel = rel;
  if (goog.string.caseInsensitiveContains(rel, "stylesheet")) {
    goog.asserts.assert(url instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because "rel" contains "stylesheet"');
    link.href = goog.html.TrustedResourceUrl.unwrap(url);
  } else {
    if (url instanceof goog.html.TrustedResourceUrl) {
      link.href = goog.html.TrustedResourceUrl.unwrap(url);
    } else {
      if (url instanceof goog.html.SafeUrl) {
        link.href = goog.html.SafeUrl.unwrap(url);
      } else {
        link.href = goog.html.SafeUrl.sanitize(url).getTypedStringValue();
      }
    }
  }
};
goog.dom.safe.setObjectData = function(object, url) {
  object.data = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setScriptSrc = function(script, url) {
  script.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLocationHref = function(loc, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.openInWindow = function(url, opt_openerWin, opt_name, opt_specs, opt_replace) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  var win = opt_openerWin || window;
  return win.open(goog.html.SafeUrl.unwrap(safeUrl), opt_name ? goog.string.Const.unwrap(opt_name) : "", opt_specs, opt_replace);
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return (this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return !this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToCover = function(target) {
  var s = this.aspectRatio() <= target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.html.SafeHtml");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Unicode");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (parent.getElementsByClassName) {
    retVal = parent.getElementsByClassName(className)[0];
  } else {
    if (goog.dom.canUseQuerySelector_(parent)) {
      retVal = parent.querySelector("." + className);
    } else {
      retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
    }
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return !!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!(docEl && body)) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var table = (doc.createElement(goog.dom.TagName.TABLE));
  var tbody = table.appendChild(doc.createElement(goog.dom.TagName.TBODY));
  for (var i = 0;i < rows;i++) {
    var tr = doc.createElement(goog.dom.TagName.TR);
    for (var j = 0;j < columns;j++) {
      var td = doc.createElement(goog.dom.TagName.TD);
      if (fillWithNbsp) {
        goog.dom.setTextContent(td, goog.string.Unicode.NBSP);
      }
      tr.appendChild(td);
    }
    tbody.appendChild(tr);
  }
  return table;
};
goog.dom.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(document, html);
};
goog.dom.safeHtmlToNode_ = function(doc, html) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    goog.dom.safe.setInnerHtml(tempDiv, goog.html.SafeHtml.concat(goog.html.SafeHtml.create("br"), html));
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    goog.dom.safe.setInnerHtml(tempDiv, html);
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.childrenToNode_ = function(doc, tempDiv) {
  if (tempDiv.childNodes.length == 1) {
    return tempDiv.removeChild(tempDiv.firstChild);
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return (element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return (goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return (node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return (node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return (node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return (node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return (node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return -1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return -1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return (isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return -1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return -1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return (node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement(goog.dom.TagName.DIV);
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class, opt_maxSearchSteps) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return (goog.dom.getAncestor(element, function(node) {
    return (!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true, opt_maxSearchSteps));
};
goog.dom.getAncestorByClass = function(element, className, opt_maxSearchSteps) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className, opt_maxSearchSteps);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    goog.asserts.assert(element.name != "parentNode");
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.getPixelRatio = function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
};
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(this.document_, html);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.net.jsloader");
goog.provide("goog.net.jsloader.Error");
goog.provide("goog.net.jsloader.ErrorCode");
goog.provide("goog.net.jsloader.Options");
goog.require("goog.array");
goog.require("goog.async.Deferred");
goog.require("goog.debug.Error");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.net.jsloader.GLOBAL_VERIFY_OBJS_ = "closure_verification";
goog.net.jsloader.DEFAULT_TIMEOUT = 5E3;
goog.net.jsloader.Options;
goog.net.jsloader.scriptsToLoad_ = [];
goog.net.jsloader.loadMany = function(uris, opt_options) {
  if (!uris.length) {
    return;
  }
  var isAnotherModuleLoading = goog.net.jsloader.scriptsToLoad_.length;
  goog.array.extend(goog.net.jsloader.scriptsToLoad_, uris);
  if (isAnotherModuleLoading) {
    return;
  }
  uris = goog.net.jsloader.scriptsToLoad_;
  var popAndLoadNextScript = function() {
    var uri = uris.shift();
    var deferred = goog.net.jsloader.load(uri, opt_options);
    if (uris.length) {
      deferred.addBoth(popAndLoadNextScript);
    }
  };
  popAndLoadNextScript();
};
goog.net.jsloader.load = function(uri, opt_options) {
  var options = opt_options || {};
  var doc = options.document || document;
  var script = goog.dom.createElement(goog.dom.TagName.SCRIPT);
  var request = {script_:script, timeout_:undefined};
  var deferred = new goog.async.Deferred(goog.net.jsloader.cancel_, request);
  var timeout = null;
  var timeoutDuration = goog.isDefAndNotNull(options.timeout) ? options.timeout : goog.net.jsloader.DEFAULT_TIMEOUT;
  if (timeoutDuration > 0) {
    timeout = window.setTimeout(function() {
      goog.net.jsloader.cleanup_(script, true);
      deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.TIMEOUT, "Timeout reached for loading script " + uri));
    }, timeoutDuration);
    request.timeout_ = timeout;
  }
  script.onload = script.onreadystatechange = function() {
    if (!script.readyState || script.readyState == "loaded" || script.readyState == "complete") {
      var removeScriptNode = options.cleanupWhenDone || false;
      goog.net.jsloader.cleanup_(script, removeScriptNode, timeout);
      deferred.callback(null);
    }
  };
  script.onerror = function() {
    goog.net.jsloader.cleanup_(script, true, timeout);
    deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.LOAD_ERROR, "Error while loading script " + uri));
  };
  goog.dom.setProperties(script, {"type":"text/javascript", "charset":"UTF-8", "src":uri});
  var scriptParent = goog.net.jsloader.getScriptParentElement_(doc);
  scriptParent.appendChild(script);
  return deferred;
};
goog.net.jsloader.loadAndVerify = function(uri, verificationObjName, options) {
  if (!goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_]) {
    goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_] = {};
  }
  var verifyObjs = goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_];
  if (goog.isDef(verifyObjs[verificationObjName])) {
    return goog.async.Deferred.fail(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.VERIFY_OBJECT_ALREADY_EXISTS, "Verification object " + verificationObjName + " already defined."));
  }
  var sendDeferred = goog.net.jsloader.load(uri, options);
  var deferred = new goog.async.Deferred(goog.bind(sendDeferred.cancel, sendDeferred));
  sendDeferred.addCallback(function() {
    var result = verifyObjs[verificationObjName];
    if (goog.isDef(result)) {
      deferred.callback(result);
      delete verifyObjs[verificationObjName];
    } else {
      deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.VERIFY_ERROR, "Script " + uri + " loaded, but verification object " + verificationObjName + " was not defined."));
    }
  });
  sendDeferred.addErrback(function(error) {
    if (goog.isDef(verifyObjs[verificationObjName])) {
      delete verifyObjs[verificationObjName];
    }
    deferred.errback(error);
  });
  return deferred;
};
goog.net.jsloader.getScriptParentElement_ = function(doc) {
  var headElements = doc.getElementsByTagName(goog.dom.TagName.HEAD);
  if (!headElements || goog.array.isEmpty(headElements)) {
    return doc.documentElement;
  } else {
    return headElements[0];
  }
};
goog.net.jsloader.cancel_ = function() {
  var request = this;
  if (request && request.script_) {
    var scriptNode = request.script_;
    if (scriptNode && scriptNode.tagName == goog.dom.TagName.SCRIPT) {
      goog.net.jsloader.cleanup_(scriptNode, true, request.timeout_);
    }
  }
};
goog.net.jsloader.cleanup_ = function(scriptNode, removeScriptNode, opt_timeout) {
  if (goog.isDefAndNotNull(opt_timeout)) {
    goog.global.clearTimeout(opt_timeout);
  }
  scriptNode.onload = goog.nullFunction;
  scriptNode.onerror = goog.nullFunction;
  scriptNode.onreadystatechange = goog.nullFunction;
  if (removeScriptNode) {
    window.setTimeout(function() {
      goog.dom.removeNode(scriptNode);
    }, 0);
  }
};
goog.net.jsloader.ErrorCode = {LOAD_ERROR:0, TIMEOUT:1, VERIFY_ERROR:2, VERIFY_OBJECT_ALREADY_EXISTS:3};
goog.net.jsloader.Error = function(code, opt_message) {
  var msg = "Jsloader error (code #" + code + ")";
  if (opt_message) {
    msg += ": " + opt_message;
  }
  goog.net.jsloader.Error.base(this, "constructor", msg);
  this.code = code;
};
goog.inherits(goog.net.jsloader.Error, goog.debug.Error);
goog.provide("goog.net.Jsonp");
goog.require("goog.Uri");
goog.require("goog.net.jsloader");
goog.net.Jsonp = function(uri, opt_callbackParamName) {
  this.uri_ = new goog.Uri(uri);
  this.callbackParamName_ = opt_callbackParamName ? opt_callbackParamName : "callback";
  this.timeout_ = 5E3;
};
goog.net.Jsonp.CALLBACKS = "_callbacks_";
goog.net.Jsonp.scriptCounter_ = 0;
goog.net.Jsonp.prototype.setRequestTimeout = function(timeout) {
  this.timeout_ = timeout;
};
goog.net.Jsonp.prototype.getRequestTimeout = function() {
  return this.timeout_;
};
goog.net.Jsonp.prototype.send = function(opt_payload, opt_replyCallback, opt_errorCallback, opt_callbackParamValue) {
  var payload = opt_payload || null;
  var id = opt_callbackParamValue || "_" + (goog.net.Jsonp.scriptCounter_++).toString(36) + goog.now().toString(36);
  if (!goog.global[goog.net.Jsonp.CALLBACKS]) {
    goog.global[goog.net.Jsonp.CALLBACKS] = {};
  }
  var uri = this.uri_.clone();
  if (payload) {
    goog.net.Jsonp.addPayloadToUri_(payload, uri);
  }
  if (opt_replyCallback) {
    var reply = goog.net.Jsonp.newReplyHandler_(id, opt_replyCallback);
    goog.global[goog.net.Jsonp.CALLBACKS][id] = reply;
    uri.setParameterValues(this.callbackParamName_, goog.net.Jsonp.CALLBACKS + "." + id);
  }
  var deferred = goog.net.jsloader.load(uri.toString(), {timeout:this.timeout_, cleanupWhenDone:true});
  var error = goog.net.Jsonp.newErrorHandler_(id, payload, opt_errorCallback);
  deferred.addErrback(error);
  return {id_:id, deferred_:deferred};
};
goog.net.Jsonp.prototype.cancel = function(request) {
  if (request) {
    if (request.deferred_) {
      request.deferred_.cancel();
    }
    if (request.id_) {
      goog.net.Jsonp.cleanup_(request.id_, false);
    }
  }
};
goog.net.Jsonp.newErrorHandler_ = function(id, payload, opt_errorCallback) {
  return function() {
    goog.net.Jsonp.cleanup_(id, false);
    if (opt_errorCallback) {
      opt_errorCallback(payload);
    }
  };
};
goog.net.Jsonp.newReplyHandler_ = function(id, replyCallback) {
  var handler = function(var_args) {
    goog.net.Jsonp.cleanup_(id, true);
    replyCallback.apply(undefined, arguments);
  };
  return handler;
};
goog.net.Jsonp.cleanup_ = function(id, deleteReplyHandler) {
  if (goog.global[goog.net.Jsonp.CALLBACKS][id]) {
    if (deleteReplyHandler) {
      delete goog.global[goog.net.Jsonp.CALLBACKS][id];
    } else {
      goog.global[goog.net.Jsonp.CALLBACKS][id] = goog.nullFunction;
    }
  }
};
goog.net.Jsonp.addPayloadToUri_ = function(payload, uri) {
  for (var name in payload) {
    if (!payload.hasOwnProperty || payload.hasOwnProperty(name)) {
      uri.setParameterValues(name, payload[name]);
    }
  }
  return uri;
};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
  this.disposed_ = this.disposed_;
  this.onDisposeCallbacks_ = this.onDisposeCallbacks_;
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (this.disposed_) {
    callback.call(opt_scope);
    return;
  }
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", WHEEL:"wheel", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", 
CHANGE:"change", RESET:"reset", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", 
LOSECAPTURE:"losecapture", ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXT:"text", 
TEXTINPUT:"textInput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", 
DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return !!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return !!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return ++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return -1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return [];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return !!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = true;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          var result = goog.events.fireListener(listener, eventObject);
          retval = retval && result !== false;
        }
      }
    }
  }
  return retval;
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, true, evt);
          retval = retval && result;
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, false, evt);
          retval = retval && result;
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.Promise");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.INVALID_TIMEOUT_ID_ = -1;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return goog.Timer.INVALID_TIMEOUT_ID_;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.Timer.promise = function(delay, opt_result) {
  var timerKey = null;
  return (new goog.Promise(function(resolve, reject) {
    timerKey = goog.Timer.callOnce(function() {
      resolve(opt_result);
    }, delay);
    if (timerKey == goog.Timer.INVALID_TIMEOUT_ID_) {
      reject(new Error("Failed to schedule timer."));
    }
  })).thenCatch(function(error) {
    goog.Timer.clear(timerKey);
    throw error;
  });
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return (eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return (eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return (new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  if (object == null) {
    sb.push("null");
    return;
  }
  if (typeof object == "object") {
    if (goog.isArray(object)) {
      this.serializeArray((object), sb);
      return;
    } else {
      if (object instanceof String || object instanceof Number || object instanceof Boolean) {
        object = object.valueOf();
      } else {
        this.serializeObject_((object), sb);
        return;
      }
    }
  }
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    var rv = goog.json.Serializer.charToJsonCharCache_[c];
    if (!rv) {
      rv = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1);
      goog.json.Serializer.charToJsonCharCache_[c] = rv;
    }
    return rv;
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.html.SafeScript");
goog.require("goog.asserts");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeScript = function() {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeScript.prototype.implementsGoogStringTypedString = true;
goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeScript.fromConstant = function(script) {
  var scriptString = goog.string.Const.unwrap(script);
  if (scriptString.length === 0) {
    return goog.html.SafeScript.EMPTY;
  }
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(scriptString);
};
goog.html.SafeScript.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeScriptWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeScript.prototype.toString = function() {
    return "SafeScript{" + this.privateDoNotAccessOrElseSafeScriptWrappedValue_ + "}";
  };
}
goog.html.SafeScript.unwrap = function(safeScript) {
  if (safeScript instanceof goog.html.SafeScript && safeScript.constructor === goog.html.SafeScript && safeScript.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeScript.privateDoNotAccessOrElseSafeScriptWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeScript, got '" + safeScript + "'");
    return "type_error:SafeScript";
  }
};
goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse = function(script) {
  return (new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(script);
};
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(script) {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = script;
  return this;
};
goog.html.SafeScript.EMPTY = goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.html.uncheckedconversions");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeScript");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract = function(justification, html, opt_dir) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(html, opt_dir || null);
};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract = function(justification, script) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmpty(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(script);
};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract = function(justification, style) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract = function(justification, styleSheet) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);
};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.uncheckedconversions");
goog.require("goog.string.Const");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  var html = goog.debug.exposeExceptionAsHtml(err, opt_fn);
  return goog.html.SafeHtml.unwrap(html);
};
goog.debug.exposeExceptionAsHtml = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var viewSourceUrl = goog.debug.createViewSourceUrl_(e.fileName);
    var error = goog.html.SafeHtml.concat(goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Message: " + e.message + "\nUrl: "), goog.html.SafeHtml.create("a", {href:viewSourceUrl, target:"_new"}, e.fileName), goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + e.stack + "-\x3e " + "[end]\n\nJS stack traversal:\n" + goog.debug.getStacktrace(opt_fn) + "-\x3e "));
    return error;
  } catch (e2) {
    return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Exception trying to expose exception! You win, we lose. " + e2);
  }
};
goog.debug.createViewSourceUrl_ = function(opt_fileName) {
  if (!goog.isDefAndNotNull(opt_fileName)) {
    opt_fileName = "";
  }
  if (!/^https?:\/\//i.test(opt_fileName)) {
    return goog.html.SafeUrl.fromConstant(goog.string.Const.from("sanitizedviewsrc"));
  }
  var sanitizedFileName = goog.html.SafeUrl.sanitize(opt_fileName);
  return goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("view-source scheme plus HTTP/HTTPS URL"), "view-source:" + goog.html.SafeUrl.unwrap(sanitizedFileName));
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return {"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return {"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.runtimeType = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return !!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return (goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, PRECONDITION_REQUIRED:428, TOO_MANY_REQUESTS:429, REQUEST_HEADER_FIELDS_TOO_LARGE:431, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, NETWORK_AUTHENTICATION_REQUIRED:511, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return (this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return !!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return -1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmptyOrWhitespace(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.crypt");
goog.require("goog.array");
goog.require("goog.asserts");
goog.crypt.stringToByteArray = function(str) {
  var output = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    while (c > 255) {
      output[p++] = c & 255;
      c >>= 8;
    }
    output[p++] = c;
  }
  return output;
};
goog.crypt.byteArrayToString = function(bytes) {
  var CHUNK_SIZE = 8192;
  if (bytes.length < CHUNK_SIZE) {
    return String.fromCharCode.apply(null, bytes);
  }
  var str = "";
  for (var i = 0;i < bytes.length;i += CHUNK_SIZE) {
    var chunk = goog.array.slice(bytes, i, i + CHUNK_SIZE);
    str += String.fromCharCode.apply(null, chunk);
  }
  return str;
};
goog.crypt.byteArrayToHex = function(array) {
  return goog.array.map(array, function(numByte) {
    var hexByte = numByte.toString(16);
    return hexByte.length > 1 ? hexByte : "0" + hexByte;
  }).join("");
};
goog.crypt.hexToByteArray = function(hexString) {
  goog.asserts.assert(hexString.length % 2 == 0, "Key string length must be multiple of 2");
  var arr = [];
  for (var i = 0;i < hexString.length;i += 2) {
    arr.push(parseInt(hexString.substring(i, i + 2), 16));
  }
  return arr;
};
goog.crypt.stringToUtf8ByteArray = function(str) {
  str = str.replace(/\r\n/g, "\n");
  var out = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else {
      if (c < 2048) {
        out[p++] = c >> 6 | 192;
        out[p++] = c & 63 | 128;
      } else {
        out[p++] = c >> 12 | 224;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      }
    }
  }
  return out;
};
goog.crypt.utf8ByteArrayToString = function(bytes) {
  var out = [], pos = 0, c = 0;
  while (pos < bytes.length) {
    var c1 = bytes[pos++];
    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else {
      if (c1 > 191 && c1 < 224) {
        var c2 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
      } else {
        var c2 = bytes[pos++];
        var c3 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
      }
    }
  }
  return out.join("");
};
goog.crypt.xorByteArray = function(bytes1, bytes2) {
  goog.asserts.assert(bytes1.length == bytes2.length, "XOR array lengths must match");
  var result = [];
  for (var i = 0;i < bytes1.length;i++) {
    result.push(bytes1[i] ^ bytes2[i]);
  }
  return result;
};
goog.provide("goog.crypt.base64");
goog.require("goog.crypt");
goog.require("goog.userAgent");
goog.crypt.base64.byteToCharMap_ = null;
goog.crypt.base64.charToByteMap_ = null;
goog.crypt.base64.byteToCharMapWebSafe_ = null;
goog.crypt.base64.charToByteMapWebSafe_ = null;
goog.crypt.base64.ENCODED_VALS_BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz" + "0123456789";
goog.crypt.base64.ENCODED_VALS = goog.crypt.base64.ENCODED_VALS_BASE + "+/\x3d";
goog.crypt.base64.ENCODED_VALS_WEBSAFE = goog.crypt.base64.ENCODED_VALS_BASE + "-_.";
goog.crypt.base64.HAS_NATIVE_SUPPORT = goog.userAgent.GECKO || goog.userAgent.WEBKIT || goog.userAgent.OPERA || typeof goog.global.atob == "function";
goog.crypt.base64.encodeByteArray = function(input, opt_webSafe) {
  if (!goog.isArrayLike(input)) {
    throw Error("encodeByteArray takes an array as a parameter");
  }
  goog.crypt.base64.init_();
  var byteToCharMap = opt_webSafe ? goog.crypt.base64.byteToCharMapWebSafe_ : goog.crypt.base64.byteToCharMap_;
  var output = [];
  for (var i = 0;i < input.length;i += 3) {
    var byte1 = input[i];
    var haveByte2 = i + 1 < input.length;
    var byte2 = haveByte2 ? input[i + 1] : 0;
    var haveByte3 = i + 2 < input.length;
    var byte3 = haveByte3 ? input[i + 2] : 0;
    var outByte1 = byte1 >> 2;
    var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
    var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
    var outByte4 = byte3 & 63;
    if (!haveByte3) {
      outByte4 = 64;
      if (!haveByte2) {
        outByte3 = 64;
      }
    }
    output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
  }
  return output.join("");
};
goog.crypt.base64.encodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.btoa(input);
  }
  return goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(input), opt_webSafe);
};
goog.crypt.base64.decodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.atob(input);
  }
  return goog.crypt.byteArrayToString(goog.crypt.base64.decodeStringToByteArray(input, opt_webSafe));
};
goog.crypt.base64.decodeStringToByteArray = function(input, opt_webSafe) {
  goog.crypt.base64.init_();
  var charToByteMap = opt_webSafe ? goog.crypt.base64.charToByteMapWebSafe_ : goog.crypt.base64.charToByteMap_;
  var output = [];
  for (var i = 0;i < input.length;) {
    var byte1 = charToByteMap[input.charAt(i++)];
    var haveByte2 = i < input.length;
    var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
    ++i;
    var haveByte3 = i < input.length;
    var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
    ++i;
    var haveByte4 = i < input.length;
    var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
    ++i;
    if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
      throw Error();
    }
    var outByte1 = byte1 << 2 | byte2 >> 4;
    output.push(outByte1);
    if (byte3 != 64) {
      var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
      output.push(outByte2);
      if (byte4 != 64) {
        var outByte3 = byte3 << 6 & 192 | byte4;
        output.push(outByte3);
      }
    }
  }
  return output;
};
goog.crypt.base64.init_ = function() {
  if (!goog.crypt.base64.byteToCharMap_) {
    goog.crypt.base64.byteToCharMap_ = {};
    goog.crypt.base64.charToByteMap_ = {};
    goog.crypt.base64.byteToCharMapWebSafe_ = {};
    goog.crypt.base64.charToByteMapWebSafe_ = {};
    for (var i = 0;i < goog.crypt.base64.ENCODED_VALS.length;i++) {
      goog.crypt.base64.byteToCharMap_[i] = goog.crypt.base64.ENCODED_VALS.charAt(i);
      goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[i]] = i;
      goog.crypt.base64.byteToCharMapWebSafe_[i] = goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i);
      goog.crypt.base64.charToByteMapWebSafe_[goog.crypt.base64.byteToCharMapWebSafe_[i]] = i;
      if (i >= goog.crypt.base64.ENCODED_VALS_BASE.length) {
        goog.crypt.base64.charToByteMap_[goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
        goog.crypt.base64.charToByteMapWebSafe_[goog.crypt.base64.ENCODED_VALS.charAt(i)] = i;
      }
    }
  }
};
goog.provide("no.en.core");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("goog.crypt.base64");
no.en.core.port_number = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "http", "http", 382524695), 80, new cljs.core.Keyword(null, "https", "https", -1983909665), 443, new cljs.core.Keyword(null, "mysql", "mysql", -1431590210), 3306, new cljs.core.Keyword(null, "postgresql", "postgresql", -1568339962), 5432, new cljs.core.Keyword(null, "rabbitmq", "rabbitmq", 1046897371), 5672], null);
no.en.core.url_regex = /([^:]+):\/\/(([^:]+):([^@]+)@)?(([^:\/]+)(:([0-9]+))?((\/[^?]*)(\?([^#]*))?)?)(\#(.*))?/;
no.en.core.split_by_regex = function no$en$core$split_by_regex(s, pattern) {
  if (cljs.core.sequential_QMARK_.call(null, s)) {
    return s;
  } else {
    if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, s))) {
      return clojure.string.split.call(null, s, pattern);
    } else {
      return null;
    }
  }
};
no.en.core.split_by_comma = function no$en$core$split_by_comma(s) {
  return no.en.core.split_by_regex.call(null, s, /\s*,\s*/);
};
no.en.core.utf8_string = function no$en$core$utf8_string(bytes) {
  throw cljs.core.ex_info.call(null, "utf8-string not implemented yet", bytes);
};
no.en.core.base64_encode = function no$en$core$base64_encode(bytes) {
  if (cljs.core.truth_(bytes)) {
    return goog.crypt.base64.encodeString(bytes, false);
  } else {
    return null;
  }
};
no.en.core.base64_decode = function no$en$core$base64_decode(s) {
  if (cljs.core.truth_(s)) {
    return goog.crypt.base64.decodeString(s, false);
  } else {
    return null;
  }
};
no.en.core.compact_map = function no$en$core$compact_map(m) {
  return cljs.core.reduce.call(null, function(m__$1, k) {
    var v = cljs.core.get.call(null, m__$1, k);
    if (v == null || (cljs.core.map_QMARK_.call(null, v) || cljs.core.sequential_QMARK_.call(null, v)) && cljs.core.empty_QMARK_.call(null, v)) {
      return cljs.core.dissoc.call(null, m__$1, k);
    } else {
      return m__$1;
    }
  }, m, cljs.core.keys.call(null, m));
};
no.en.core.url_encode = function no$en$core$url_encode() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic = function(s, p__15297) {
  var vec__15298 = p__15297;
  var encoding = cljs.core.nth.call(null, vec__15298, 0, null);
  if (cljs.core.truth_(s)) {
    return clojure.string.replace.call(null, encodeURIComponent([cljs.core.str(s)].join("")), "*", "%2A");
  } else {
    return null;
  }
};
no.en.core.url_encode.cljs$lang$maxFixedArity = 1;
no.en.core.url_encode.cljs$lang$applyTo = function(seq15295) {
  var G__15296 = cljs.core.first.call(null, seq15295);
  var seq15295__$1 = cljs.core.next.call(null, seq15295);
  return no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic(G__15296, seq15295__$1);
};
no.en.core.url_decode = function no$en$core$url_decode() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic = function(s, p__15301) {
  var vec__15302 = p__15301;
  var encoding = cljs.core.nth.call(null, vec__15302, 0, null);
  if (cljs.core.truth_(s)) {
    return decodeURIComponent(s);
  } else {
    return null;
  }
};
no.en.core.url_decode.cljs$lang$maxFixedArity = 1;
no.en.core.url_decode.cljs$lang$applyTo = function(seq15299) {
  var G__15300 = cljs.core.first.call(null, seq15299);
  var seq15299__$1 = cljs.core.next.call(null, seq15299);
  return no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic(G__15300, seq15299__$1);
};
no.en.core.pow = function no$en$core$pow(n, x) {
  return Math.pow(n, x);
};
no.en.core.byte_scale = cljs.core.PersistentHashMap.fromArrays(["T", "K", "G", "M", "Y", "Z", "E", "B", "P"], [no.en.core.pow.call(null, 1024, 4), no.en.core.pow.call(null, 1024, 1), no.en.core.pow.call(null, 1024, 3), no.en.core.pow.call(null, 1024, 2), no.en.core.pow.call(null, 1024, 8), no.en.core.pow.call(null, 1024, 7), no.en.core.pow.call(null, 1024, 6), no.en.core.pow.call(null, 1024, 0), no.en.core.pow.call(null, 1024, 5)]);
no.en.core.apply_unit = function no$en$core$apply_unit(number, unit) {
  if (typeof unit === "string") {
    var G__15305 = clojure.string.upper_case.call(null, unit);
    switch(G__15305) {
      default:
        var G__15306 = unit;
        switch(G__15306) {
          case "M":
            return number * 1E6;
            break;
          case "B":
            return number * 1E9;
            break;
          default:
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(unit)].join(""));;
        }
      ;
    }
  } else {
    return number;
  }
};
no.en.core.parse_number = function no$en$core$parse_number(s, parse_fn) {
  var temp__4421__auto__ = cljs.core.re_matches.call(null, /\s*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)(M|B)?.*/, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4421__auto__)) {
    var matches = temp__4421__auto__;
    var number = parse_fn.call(null, cljs.core.nth.call(null, matches, 1));
    var unit = cljs.core.nth.call(null, matches, 3);
    if (cljs.core.not.call(null, isNaN(number))) {
      return no.en.core.apply_unit.call(null, number, unit);
    } else {
      return null;
    }
  } else {
    return null;
  }
};
no.en.core.parse_bytes = function no$en$core$parse_bytes(s) {
  var temp__4421__auto__ = cljs.core.re_matches.call(null, /\s*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)(B|K|M|G|T|P|E|Z|Y)?.*/, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4421__auto__)) {
    var matches = temp__4421__auto__;
    var number = cljs.reader.read_string.call(null, cljs.core.nth.call(null, matches, 1));
    var unit = cljs.core.nth.call(null, matches, 3);
    return cljs.core.long$.call(null, cljs.core.long$.call(null, cljs.reader.read_string.call(null, [cljs.core.str(cljs.core.nth.call(null, matches, 1))].join(""))) * cljs.core.get.call(null, no.en.core.byte_scale, clojure.string.upper_case.call(null, function() {
      var or__4307__auto__ = unit;
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return "";
      }
    }()), 1));
  } else {
    return null;
  }
};
no.en.core.parse_integer = function no$en$core$parse_integer(s) {
  return no.en.core.parse_number.call(null, s, function(p1__15309_SHARP_) {
    return parseInt(p1__15309_SHARP_);
  });
};
no.en.core.parse_long = function no$en$core$parse_long(s) {
  return no.en.core.parse_number.call(null, s, function(p1__15310_SHARP_) {
    return parseInt(p1__15310_SHARP_);
  });
};
no.en.core.parse_double = function no$en$core$parse_double(s) {
  return no.en.core.parse_number.call(null, s, function(p1__15311_SHARP_) {
    return parseFloat(p1__15311_SHARP_);
  });
};
no.en.core.parse_float = function no$en$core$parse_float(s) {
  return no.en.core.parse_number.call(null, s, function(p1__15312_SHARP_) {
    return parseFloat(p1__15312_SHARP_);
  });
};
no.en.core.format_query_params = function no$en$core$format_query_params(m) {
  var params = clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p1__15315_SHARP_) {
    return clojure.string.join.call(null, "\x3d", p1__15315_SHARP_);
  }, cljs.core.map.call(null, function(p1__15314_SHARP_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [no.en.core.url_encode.call(null, cljs.core.name.call(null, cljs.core.first.call(null, p1__15314_SHARP_))), no.en.core.url_encode.call(null, cljs.core.second.call(null, p1__15314_SHARP_))], null);
  }, cljs.core.remove.call(null, function(p1__15313_SHARP_) {
    return clojure.string.blank_QMARK_.call(null, [cljs.core.str(cljs.core.second.call(null, p1__15313_SHARP_))].join(""));
  }, cljs.core.sort_by.call(null, cljs.core.first, cljs.core.seq.call(null, m))))));
  if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, params))) {
    return params;
  } else {
    return null;
  }
};
no.en.core.format_url = function no$en$core$format_url(m) {
  if (!cljs.core.empty_QMARK_.call(null, m)) {
    var query_params = (new cljs.core.Keyword(null, "query-params", "query-params", 900640534)).cljs$core$IFn$_invoke$arity$1(m);
    return [cljs.core.str(cljs.core.truth_((new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m)) ? [cljs.core.str(cljs.core.name.call(null, (new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m))), cljs.core.str("://")].join("") : null), cljs.core.str(function() {
      var map__15317 = m;
      var map__15317__$1 = cljs.core.seq_QMARK_.call(null, map__15317) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15317) : map__15317;
      var user = cljs.core.get.call(null, map__15317__$1, new cljs.core.Keyword(null, "user", "user", 1532431356));
      var password = cljs.core.get.call(null, map__15317__$1, new cljs.core.Keyword(null, "password", "password", 417022471));
      if (cljs.core.truth_(user)) {
        return [cljs.core.str(cljs.core.truth_(user) ? user : null), cljs.core.str(cljs.core.truth_(password) ? [cljs.core.str(":"), cljs.core.str(password)].join("") : null), cljs.core.str("@")].join("");
      } else {
        return null;
      }
    }()), cljs.core.str((new cljs.core.Keyword(null, "server-name", "server-name", -1012104295)).cljs$core$IFn$_invoke$arity$1(m)), cljs.core.str(function() {
      var temp__4421__auto__ = (new cljs.core.Keyword(null, "server-port", "server-port", 663745648)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(temp__4421__auto__)) {
        var port = temp__4421__auto__;
        if (!cljs.core._EQ_.call(null, port, no.en.core.port_number.call(null, (new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m)))) {
          return [cljs.core.str(":"), cljs.core.str(port)].join("");
        } else {
          return null;
        }
      } else {
        return null;
      }
    }()), cljs.core.str((new cljs.core.Keyword(null, "uri", "uri", -774711847)).cljs$core$IFn$_invoke$arity$1(m) == null && !cljs.core.empty_QMARK_.call(null, query_params) ? "/" : (new cljs.core.Keyword(null, "uri", "uri", -774711847)).cljs$core$IFn$_invoke$arity$1(m)), cljs.core.str(!cljs.core.empty_QMARK_.call(null, query_params) ? [cljs.core.str("?"), cljs.core.str(no.en.core.format_query_params.call(null, query_params))].join("") : null), cljs.core.str(cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, 
    (new cljs.core.Keyword(null, "fragment", "fragment", 826775688)).cljs$core$IFn$_invoke$arity$1(m))) ? [cljs.core.str("#"), cljs.core.str((new cljs.core.Keyword(null, "fragment", "fragment", 826775688)).cljs$core$IFn$_invoke$arity$1(m))].join("") : null)].join("");
  } else {
    return null;
  }
};
no.en.core.parse_percent = function no$en$core$parse_percent(s) {
  return no.en.core.parse_double.call(null, clojure.string.replace.call(null, s, "%", ""));
};
no.en.core.pattern_quote = function no$en$core$pattern_quote(s) {
  return clojure.string.replace.call(null, cljs.core.name.call(null, s), /([\[\]\^\$\|\(\)\\\+\*\?\{\}\=\!.])/, "\\\\$1");
};
no.en.core.separator = function no$en$core$separator(s) {
  var temp__4421__auto__ = cljs.core.re_matches.call(null, /([a-z0-9_-]+)([^a-z0-9_-]+).*/i, s);
  if (cljs.core.truth_(temp__4421__auto__)) {
    var matches = temp__4421__auto__;
    return cljs.core.nth.call(null, matches, 2);
  } else {
    return null;
  }
};
no.en.core.parse_query_params = function no$en$core$parse_query_params(s) {
  if (cljs.core.truth_(s)) {
    return cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.mapcat.call(null, function(p1__15320_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, no.en.core.url_decode.call(null, cljs.core.first.call(null, p1__15320_SHARP_))), no.en.core.url_decode.call(null, cljs.core.second.call(null, p1__15320_SHARP_))], null);
    }, cljs.core.filter.call(null, function(p1__15319_SHARP_) {
      return cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, p1__15319_SHARP_));
    }, cljs.core.map.call(null, function(p1__15318_SHARP_) {
      return clojure.string.split.call(null, p1__15318_SHARP_, /=/);
    }, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /&/)))));
  } else {
    return null;
  }
};
no.en.core.parse_url = function no$en$core$parse_url(s) {
  var temp__4421__auto__ = cljs.core.re_matches.call(null, no.en.core.url_regex, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4421__auto__)) {
    var matches = temp__4421__auto__;
    var scheme = cljs.core.keyword.call(null, cljs.core.nth.call(null, matches, 1));
    return no.en.core.compact_map.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "password", "password", 417022471), new cljs.core.Keyword(null, "fragment", "fragment", 826775688), new cljs.core.Keyword(null, "server-port", "server-port", 663745648), new cljs.core.Keyword(null, "query-params", "query-params", 900640534), new cljs.core.Keyword(null, "uri", "uri", -774711847), new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), new cljs.core.Keyword(null, 
    "query-string", "query-string", -1018845061), new cljs.core.Keyword(null, "user", "user", 1532431356), new cljs.core.Keyword(null, "scheme", "scheme", 90199613)], [cljs.core.nth.call(null, matches, 4), cljs.core.nth.call(null, matches, 14), function() {
      var or__4307__auto__ = no.en.core.parse_integer.call(null, cljs.core.nth.call(null, matches, 8));
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return no.en.core.port_number.call(null, scheme);
      }
    }(), no.en.core.parse_query_params.call(null, cljs.core.nth.call(null, matches, 12)), cljs.core.nth.call(null, matches, 10), cljs.core.nth.call(null, matches, 6), cljs.core.nth.call(null, matches, 12), cljs.core.nth.call(null, matches, 3), scheme]));
  } else {
    return null;
  }
};
no.en.core.with_retries_STAR_ = function no$en$core$with_retries_STAR_(n, thunk) {
  var n__$1 = n;
  while (true) {
    var temp__4421__auto__ = function() {
      try {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [thunk.call(null)], null);
      } catch (e15322) {
        if (e15322 instanceof Error) {
          var e = e15322;
          if (n__$1 === 0) {
            throw e;
          } else {
            return null;
          }
        } else {
          throw e15322;
        }
      }
    }();
    if (cljs.core.truth_(temp__4421__auto__)) {
      var result = temp__4421__auto__;
      return result.call(null, 0);
    } else {
      var G__15323 = n__$1 - 1;
      n__$1 = G__15323;
      continue;
    }
    break;
  }
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d";
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
  util.btoa = function(input) {
    if (typeof btoa != "undefined") {
      return btoa(input);
    } else {
      var str = String(input);
      for (var block, charCode, idx = 0, map = util.chars, output = "";str.charAt(idx | 0) || (map = "\x3d", idx % 1);output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    }
  };
  util.atob = function(input) {
    if (typeof atob != "undefined") {
      return atob(input);
    } else {
      var str = String(input).replace(/=+$/, "");
      if (str.length % 4 == 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0, bs, buffer, idx = 0, output = "";buffer = str.charAt(idx++);~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = util.chars.indexOf(buffer);
      }
      return output;
    }
  };
  util.Uint8ToBase64 = function(u8Arr) {
    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = "", slice = null;
    while (index < length) {
      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
      result += String.fromCharCode.apply(null, slice);
      index += CHUNK_SIZE;
    }
    return util.btoa(result);
  };
  util.Base64ToUint8 = function(base64) {
    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);
    for (var i = 0;i < len;i++) {
      var ascii = binary_string.charCodeAt(i);
      bytes[i] = ascii;
    }
    return bytes;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.hashCodeProperty = "transit$hashCode$";
  eq.hashCodeCounter = 1;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      switch(typeof x) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        case "function":
          var code = x[eq.hashCodeProperty];
          if (code) {
            return code;
          } else {
            code = eq.hashCodeCounter;
            if (typeof Object.defineProperty != "undefined") {
              Object.defineProperty(x, eq.hashCodeProperty, {value:code, enumerable:false});
            } else {
              x[eq.hashCodeProperty] = code;
            }
            eq.hashCodeCounter++;
            return code;
          }
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.ZERO;
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.MAX_VALUE;
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.ZERO;
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.ZERO = goog.math.Long.fromInt(0);
goog.math.Long.ONE = goog.math.Long.fromInt(1);
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return (this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return -1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return -1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.MIN_VALUE;
  } else {
    return this.not().add(goog.math.Long.ONE);
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.ZERO;
  } else {
    if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.ONE;
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  types.TaggedValue = function(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740992");
  types.MIN_INT = Long.fromString("-9007199254740992");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this.name;
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this.name == other.name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype.toString = function() {
    return "[Symbol: " + this.name + "]";
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this.name == other.name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function(s) {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str, decoder) {
    if ((!decoder || decoder.preferBuffers !== false) && typeof Buffer != "undefined") {
      return new Buffer(str, "base64");
    } else {
      if (typeof Uint8Array != "undefined") {
        return util.Base64ToUint8(str);
      } else {
        return types.taggedValue("b", str);
      }
    }
  };
  types.isBinary = function(x) {
    if (typeof Buffer != "undefined" && x instanceof Buffer) {
      return true;
    } else {
      if (typeof Uint8Array != "undefined" && x instanceof Uint8Array) {
        return true;
      } else {
        return x instanceof types.TaggedValue && x.tag === "b";
      }
    }
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function(map, type) {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return {"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitMapIterator = function(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return {"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.mapEquals = function(me, you) {
    if ((you instanceof types.TransitMap || you instanceof types.TransitArrayMap) && me.size === you.size) {
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (you != null && typeof you === "object") {
        var ks = util.objectKeys(you), kslen = ks.length;
        if (me.size === kslen) {
          for (var i = 0;i < kslen;i++) {
            var k = ks[i];
            if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.TransitArrayMap = function(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return "[TransitArrayMap]";
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap["delete"](k);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries.splice(i, 2);
          this.size--;
          return;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return "[TransitMap]";
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        break;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return "[TransitSet]";
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    this.map["delete"](value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.List && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return -Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function() {
    this.idx = 0;
    this.gen++;
  };
  caching.writeCache = function() {
    return new caching.WriteCache;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
  caching.readCache = function() {
    return new caching.ReadCache;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      ;
      case "s":
      ;
      case "?":
      ;
      case "i":
      ;
      case "d":
      ;
      case "b":
      ;
      case "'":
      ;
      case "array":
      ;
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.preferBuffers = this.options["preferBuffers"] != null ? this.options["preferBuffers"] : this.defaults.preferBuffers;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v, d) {
    return types.nullValue();
  }, "?":function(v, d) {
    return types.boolValue(v);
  }, "b":function(v, d) {
    return types.binary(v, d);
  }, "i":function(v, d) {
    return types.intValue(v);
  }, "n":function(v, d) {
    return types.bigInteger(v);
  }, "d":function(v, d) {
    return types.floatValue(v);
  }, "f":function(v, d) {
    return types.bigDecimalValue(v);
  }, "c":function(v, d) {
    return types.charValue(v);
  }, ":":function(v, d) {
    return types.keyword(v);
  }, "$":function(v, d) {
    return types.symbol(v);
  }, "r":function(v, d) {
    return types.uri(v);
  }, "z":function(v, d) {
    return types.specialDouble(v);
  }, "'":function(v, d) {
    return v;
  }, "m":function(v, d) {
    return types.date(v);
  }, "t":function(v, d) {
    return types.verboseDate(v);
  }, "u":function(v, d) {
    return types.uuid(v);
  }, "set":function(v, d) {
    return types.set(v);
  }, "list":function(v, d) {
    return types.list(v);
  }, "link":function(v, d) {
    return types.link(v);
  }, "cmap":function(v, d) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true, preferBuffers:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, asMapKey, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true), this);
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, asMapKey, true), this);
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, asMapKey, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init();
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2), this);
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.BufferHandler = function() {
  };
  handlers.BufferHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.BufferHandler.prototype.rep = function(v) {
    return v.toString("base64");
  };
  handlers.BufferHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.Uint8ArrayHandler = function() {
  };
  handlers.Uint8ArrayHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.Uint8ArrayHandler.prototype.rep = function(v) {
    return util.Uint8ToBase64(v);
  };
  handlers.Uint8ArrayHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    if (typeof Buffer != "undefined") {
      hs.set(Buffer, new handlers.BufferHandler);
    }
    if (typeof Uint8Array != "undefined") {
      hs.set(Uint8Array, new handlers.Uint8ArrayHandler);
    }
    return hs;
  };
  handlers.Handlers = function() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.Handlers.prototype["get"] = handlers.Handlers.prototype.get;
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      ;
      case "string":
      ;
      case "boolean":
      ;
      case "number":
      ;
      case "array":
      ;
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        self.handlers.set(k, v);
      });
    }
    this.handlerForForeign = this.opts["handlerForForeign"];
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return [this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys(), step = null;
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.isForeignObject = function(x) {
    if (x.constructor["transit$isObject"]) {
      return true;
    }
    var ret = x.constructor.toString(), ret = ret.substr("function ".length), ret = ret.substr(0, ret.indexOf("(")), isObject = ret == "Object";
    if (typeof Object.defineProperty != "undefined") {
      Object.defineProperty(x.constructor, "transit$isObject", {value:isObject, enumerable:false});
    } else {
      x.constructor["transit$isObject"] = isObject;
    }
    return isObject;
  };
  writer.emitMap = function(em, obj, skip, cache) {
    if (obj.constructor === Object || obj.forEach != null || em.handlerForForeign && writer.isForeignObject(obj)) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            var ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          var ret = {}, ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var arr = em.unpack(obj), ret = ["^ "];
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return [tag, rep];
          }
        } else {
          var ret = ["^ "], ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return [em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
var TRANSIT_DEV = true;
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq, caching = com.cognitect.transit.caching;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      type = "json";
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashMapLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.readCache = caching.readCache;
  transit.writeCache = caching.writeCache;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = types.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", types.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
    goog.exportSymbol("transit.readCache", caching.readCache);
    goog.exportSymbol("transit.writeCache", caching.writeCache);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, decoder:decoder.decoder, UUIDfromString:types.UUIDfromString, 
    randomUUID:types.randomUUID, stringableKeys:writer.stringableKeys, readCache:caching.readCache, writeCache:caching.writeCache};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("com.cognitect.transit");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = true;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
cljs.core.UUID.prototype.cljs$core$IComparable$ = true;
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID || other instanceof com.cognitect.transit.types.UUID) {
    return cljs.core.compare.call(null, this$__$1.toString(), other.toString());
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IComparable$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID || other instanceof com.cognitect.transit.types.UUID) {
    return cljs.core.compare.call(null, this$__$1.toString(), other.toString());
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = true;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
goog.math.Long.prototype.cljs$core$IHash$ = true;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(uuid, writer, _) {
  var uuid__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(uuid__$1.toString()), cljs.core.str('"')].join(""));
};
cognitect.transit.opts_merge = function cognitect$transit$opts_merge(a, b) {
  var seq__14338_14342 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__14339_14343 = null;
  var count__14340_14344 = 0;
  var i__14341_14345 = 0;
  while (true) {
    if (i__14341_14345 < count__14340_14344) {
      var k_14346 = cljs.core._nth.call(null, chunk__14339_14343, i__14341_14345);
      var v_14347 = b[k_14346];
      a[k_14346] = v_14347;
      var G__14348 = seq__14338_14342;
      var G__14349 = chunk__14339_14343;
      var G__14350 = count__14340_14344;
      var G__14351 = i__14341_14345 + 1;
      seq__14338_14342 = G__14348;
      chunk__14339_14343 = G__14349;
      count__14340_14344 = G__14350;
      i__14341_14345 = G__14351;
      continue;
    } else {
      var temp__4423__auto___14352 = cljs.core.seq.call(null, seq__14338_14342);
      if (temp__4423__auto___14352) {
        var seq__14338_14353__$1 = temp__4423__auto___14352;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14338_14353__$1)) {
          var c__5092__auto___14354 = cljs.core.chunk_first.call(null, seq__14338_14353__$1);
          var G__14355 = cljs.core.chunk_rest.call(null, seq__14338_14353__$1);
          var G__14356 = c__5092__auto___14354;
          var G__14357 = cljs.core.count.call(null, c__5092__auto___14354);
          var G__14358 = 0;
          seq__14338_14342 = G__14355;
          chunk__14339_14343 = G__14356;
          count__14340_14344 = G__14357;
          i__14341_14345 = G__14358;
          continue;
        } else {
          var k_14359 = cljs.core.first.call(null, seq__14338_14353__$1);
          var v_14360 = b[k_14359];
          a[k_14359] = v_14360;
          var G__14361 = cljs.core.next.call(null, seq__14338_14353__$1);
          var G__14362 = null;
          var G__14363 = 0;
          var G__14364 = 0;
          seq__14338_14342 = G__14361;
          chunk__14339_14343 = G__14362;
          count__14340_14344 = G__14363;
          i__14341_14345 = G__14364;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function cognitect$transit$__GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function cognitect$transit$__GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function cognitect$transit$reader() {
  var G__14366 = arguments.length;
  switch(G__14366) {
    case 1:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.reader.call(null, type, null);
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
    return cljs.core.symbol.call(null, v);
  }, ":", function(v) {
    return cljs.core.keyword.call(null, v);
  }, "set", function(v) {
    return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
  }, "list", function(v) {
    return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
  }, "cmap", function(v) {
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < v.length) {
        var G__14368 = i + 2;
        var G__14369 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
        i = G__14368;
        ret = G__14369;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, ret);
      }
      break;
    }
  }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts))), "mapBuilder":new cognitect.transit.MapBuilder, "arrayBuilder":new cognitect.transit.VectorBuilder, "prefersStrings":false}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.reader.cljs$lang$maxFixedArity = 2;
cognitect.transit.read = function cognitect$transit$read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function cognitect$transit$__GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function cognitect$transit$__GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__14370_14374 = cljs.core.seq.call(null, v);
  var chunk__14371_14375 = null;
  var count__14372_14376 = 0;
  var i__14373_14377 = 0;
  while (true) {
    if (i__14373_14377 < count__14372_14376) {
      var x_14378 = cljs.core._nth.call(null, chunk__14371_14375, i__14373_14377);
      ret.push(x_14378);
      var G__14379 = seq__14370_14374;
      var G__14380 = chunk__14371_14375;
      var G__14381 = count__14372_14376;
      var G__14382 = i__14373_14377 + 1;
      seq__14370_14374 = G__14379;
      chunk__14371_14375 = G__14380;
      count__14372_14376 = G__14381;
      i__14373_14377 = G__14382;
      continue;
    } else {
      var temp__4423__auto___14383 = cljs.core.seq.call(null, seq__14370_14374);
      if (temp__4423__auto___14383) {
        var seq__14370_14384__$1 = temp__4423__auto___14383;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14370_14384__$1)) {
          var c__5092__auto___14385 = cljs.core.chunk_first.call(null, seq__14370_14384__$1);
          var G__14386 = cljs.core.chunk_rest.call(null, seq__14370_14384__$1);
          var G__14387 = c__5092__auto___14385;
          var G__14388 = cljs.core.count.call(null, c__5092__auto___14385);
          var G__14389 = 0;
          seq__14370_14374 = G__14386;
          chunk__14371_14375 = G__14387;
          count__14372_14376 = G__14388;
          i__14373_14377 = G__14389;
          continue;
        } else {
          var x_14390 = cljs.core.first.call(null, seq__14370_14384__$1);
          ret.push(x_14390);
          var G__14391 = cljs.core.next.call(null, seq__14370_14384__$1);
          var G__14392 = null;
          var G__14393 = 0;
          var G__14394 = 0;
          seq__14370_14374 = G__14391;
          chunk__14371_14375 = G__14392;
          count__14372_14376 = G__14393;
          i__14373_14377 = G__14394;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function cognitect$transit$__GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function cognitect$transit$__GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__14395_14399 = cljs.core.seq.call(null, v);
  var chunk__14396_14400 = null;
  var count__14397_14401 = 0;
  var i__14398_14402 = 0;
  while (true) {
    if (i__14398_14402 < count__14397_14401) {
      var x_14403 = cljs.core._nth.call(null, chunk__14396_14400, i__14398_14402);
      ret.push(x_14403);
      var G__14404 = seq__14395_14399;
      var G__14405 = chunk__14396_14400;
      var G__14406 = count__14397_14401;
      var G__14407 = i__14398_14402 + 1;
      seq__14395_14399 = G__14404;
      chunk__14396_14400 = G__14405;
      count__14397_14401 = G__14406;
      i__14398_14402 = G__14407;
      continue;
    } else {
      var temp__4423__auto___14408 = cljs.core.seq.call(null, seq__14395_14399);
      if (temp__4423__auto___14408) {
        var seq__14395_14409__$1 = temp__4423__auto___14408;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14395_14409__$1)) {
          var c__5092__auto___14410 = cljs.core.chunk_first.call(null, seq__14395_14409__$1);
          var G__14411 = cljs.core.chunk_rest.call(null, seq__14395_14409__$1);
          var G__14412 = c__5092__auto___14410;
          var G__14413 = cljs.core.count.call(null, c__5092__auto___14410);
          var G__14414 = 0;
          seq__14395_14399 = G__14411;
          chunk__14396_14400 = G__14412;
          count__14397_14401 = G__14413;
          i__14398_14402 = G__14414;
          continue;
        } else {
          var x_14415 = cljs.core.first.call(null, seq__14395_14409__$1);
          ret.push(x_14415);
          var G__14416 = cljs.core.next.call(null, seq__14395_14409__$1);
          var G__14417 = null;
          var G__14418 = 0;
          var G__14419 = 0;
          seq__14395_14399 = G__14416;
          chunk__14396_14400 = G__14417;
          count__14397_14401 = G__14418;
          i__14398_14402 = G__14419;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function cognitect$transit$__GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__14420_14424 = cljs.core.seq.call(null, v);
  var chunk__14421_14425 = null;
  var count__14422_14426 = 0;
  var i__14423_14427 = 0;
  while (true) {
    if (i__14423_14427 < count__14422_14426) {
      var x_14428 = cljs.core._nth.call(null, chunk__14421_14425, i__14423_14427);
      ret.push(x_14428);
      var G__14429 = seq__14420_14424;
      var G__14430 = chunk__14421_14425;
      var G__14431 = count__14422_14426;
      var G__14432 = i__14423_14427 + 1;
      seq__14420_14424 = G__14429;
      chunk__14421_14425 = G__14430;
      count__14422_14426 = G__14431;
      i__14423_14427 = G__14432;
      continue;
    } else {
      var temp__4423__auto___14433 = cljs.core.seq.call(null, seq__14420_14424);
      if (temp__4423__auto___14433) {
        var seq__14420_14434__$1 = temp__4423__auto___14433;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14420_14434__$1)) {
          var c__5092__auto___14435 = cljs.core.chunk_first.call(null, seq__14420_14434__$1);
          var G__14436 = cljs.core.chunk_rest.call(null, seq__14420_14434__$1);
          var G__14437 = c__5092__auto___14435;
          var G__14438 = cljs.core.count.call(null, c__5092__auto___14435);
          var G__14439 = 0;
          seq__14420_14424 = G__14436;
          chunk__14421_14425 = G__14437;
          count__14422_14426 = G__14438;
          i__14423_14427 = G__14439;
          continue;
        } else {
          var x_14440 = cljs.core.first.call(null, seq__14420_14434__$1);
          ret.push(x_14440);
          var G__14441 = cljs.core.next.call(null, seq__14420_14434__$1);
          var G__14442 = null;
          var G__14443 = 0;
          var G__14444 = 0;
          seq__14420_14424 = G__14441;
          chunk__14421_14425 = G__14442;
          count__14422_14426 = G__14443;
          i__14423_14427 = G__14444;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function cognitect$transit$__GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function cognitect$transit$__GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function cognitect$transit$writer() {
  var G__14446 = arguments.length;
  switch(G__14446) {
    case 1:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.writer.call(null, type, null);
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  var keyword_handler = new cognitect.transit.KeywordHandler;
  var symbol_handler = new cognitect.transit.SymbolHandler;
  var list_handler = new cognitect.transit.ListHandler;
  var map_handler = new cognitect.transit.MapHandler;
  var set_handler = new cognitect.transit.SetHandler;
  var vector_handler = new cognitect.transit.VectorHandler;
  var uuid_handler = new cognitect.transit.UUIDHandler;
  var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
  cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
  symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
  return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(m, kfn, vfn) {
      return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(obj, k, v) {
          var G__14447 = obj;
          G__14447.push(kfn.call(null, k), vfn.call(null, v));
          return G__14447;
        };
      }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
    var x14448 = cljs.core.clone.call(null, handlers);
    x14448.forEach = function(x14448, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(f) {
        var coll = this;
        var seq__14449 = cljs.core.seq.call(null, coll);
        var chunk__14450 = null;
        var count__14451 = 0;
        var i__14452 = 0;
        while (true) {
          if (i__14452 < count__14451) {
            var vec__14453 = cljs.core._nth.call(null, chunk__14450, i__14452);
            var k = cljs.core.nth.call(null, vec__14453, 0, null);
            var v = cljs.core.nth.call(null, vec__14453, 1, null);
            f.call(null, v, k);
            var G__14456 = seq__14449;
            var G__14457 = chunk__14450;
            var G__14458 = count__14451;
            var G__14459 = i__14452 + 1;
            seq__14449 = G__14456;
            chunk__14450 = G__14457;
            count__14451 = G__14458;
            i__14452 = G__14459;
            continue;
          } else {
            var temp__4423__auto__ = cljs.core.seq.call(null, seq__14449);
            if (temp__4423__auto__) {
              var seq__14449__$1 = temp__4423__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__14449__$1)) {
                var c__5092__auto__ = cljs.core.chunk_first.call(null, seq__14449__$1);
                var G__14460 = cljs.core.chunk_rest.call(null, seq__14449__$1);
                var G__14461 = c__5092__auto__;
                var G__14462 = cljs.core.count.call(null, c__5092__auto__);
                var G__14463 = 0;
                seq__14449 = G__14460;
                chunk__14450 = G__14461;
                count__14451 = G__14462;
                i__14452 = G__14463;
                continue;
              } else {
                var vec__14454 = cljs.core.first.call(null, seq__14449__$1);
                var k = cljs.core.nth.call(null, vec__14454, 0, null);
                var v = cljs.core.nth.call(null, vec__14454, 1, null);
                f.call(null, v, k);
                var G__14464 = cljs.core.next.call(null, seq__14449__$1);
                var G__14465 = null;
                var G__14466 = 0;
                var G__14467 = 0;
                seq__14449 = G__14464;
                chunk__14450 = G__14465;
                count__14451 = G__14466;
                i__14452 = G__14467;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(x14448, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
    return x14448;
  }(), "unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(x) {
      if (x instanceof cljs.core.PersistentArrayMap) {
        return x.arr;
      } else {
        return false;
      }
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.writer.cljs$lang$maxFixedArity = 2;
cognitect.transit.write = function cognitect$transit$write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function cognitect$transit$read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function cognitect$transit$write_handler() {
  var G__14469 = arguments.length;
  switch(G__14469) {
    case 2:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2 = function(tag_fn, rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, null, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3 = function(tag_fn, rep_fn, str_rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
  if (typeof cognitect.transit.t14470 !== "undefined") {
  } else {
    cognitect.transit.t14470 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn, meta14471) {
      this.tag_fn = tag_fn;
      this.rep_fn = rep_fn;
      this.str_rep_fn = str_rep_fn;
      this.verbose_handler_fn = verbose_handler_fn;
      this.meta14471 = meta14471;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cognitect.transit.t14470.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14472, meta14471__$1) {
      var self__ = this;
      var _14472__$1 = this;
      return new cognitect.transit.t14470(self__.tag_fn, self__.rep_fn, self__.str_rep_fn, self__.verbose_handler_fn, meta14471__$1);
    };
    cognitect.transit.t14470.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14472) {
      var self__ = this;
      var _14472__$1 = this;
      return self__.meta14471;
    };
    cognitect.transit.t14470.prototype.tag = function(o) {
      var self__ = this;
      var _ = this;
      return self__.tag_fn.call(null, o);
    };
    cognitect.transit.t14470.prototype.rep = function(o) {
      var self__ = this;
      var _ = this;
      return self__.rep_fn.call(null, o);
    };
    cognitect.transit.t14470.prototype.stringRep = function(o) {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.str_rep_fn)) {
        return self__.str_rep_fn.call(null, o);
      } else {
        return null;
      }
    };
    cognitect.transit.t14470.prototype.getVerboseHandler = function() {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.verbose_handler_fn)) {
        return self__.verbose_handler_fn.call(null);
      } else {
        return null;
      }
    };
    cognitect.transit.t14470.getBasis = function() {
      return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag-fn", "tag-fn", 242055482, null), new cljs.core.Symbol(null, "rep-fn", "rep-fn", -1724891035, null), new cljs.core.Symbol(null, "str-rep-fn", "str-rep-fn", -1179615016, null), new cljs.core.Symbol(null, "verbose-handler-fn", "verbose-handler-fn", 547340594, null), new cljs.core.Symbol(null, "meta14471", "meta14471", -1649413984, null)], null);
    };
    cognitect.transit.t14470.cljs$lang$type = true;
    cognitect.transit.t14470.cljs$lang$ctorStr = "cognitect.transit/t14470";
    cognitect.transit.t14470.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "cognitect.transit/t14470");
    };
    cognitect.transit.__GT_t14470 = function cognitect$transit$__GT_t14470(tag_fn__$1, rep_fn__$1, str_rep_fn__$1, verbose_handler_fn__$1, meta14471) {
      return new cognitect.transit.t14470(tag_fn__$1, rep_fn__$1, str_rep_fn__$1, verbose_handler_fn__$1, meta14471);
    };
  }
  return new cognitect.transit.t14470(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.write_handler.cljs$lang$maxFixedArity = 4;
cognitect.transit.tagged_value = function cognitect$transit$tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function cognitect$transit$tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function cognitect$transit$integer(s) {
  return com.cognitect.transit.types.intValue.call(null, s);
};
cognitect.transit.integer_QMARK_ = function cognitect$transit$integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function cognitect$transit$bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function cognitect$transit$bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function cognitect$transit$bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function cognitect$transit$bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function cognitect$transit$uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function cognitect$transit$uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function cognitect$transit$uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function cognitect$transit$uuid_QMARK_(x) {
  return com.cognitect.transit.types.isUUID.call(null, x);
};
cognitect.transit.binary = function cognitect$transit$binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function cognitect$transit$binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function cognitect$transit$quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function cognitect$transit$quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function cognitect$transit$link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function cognitect$transit$link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("cljs_http.util");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("clojure.string");
goog.require("cognitect.transit");
goog.require("goog.userAgent");
goog.require("no.en.core");
cljs_http.util.basic_auth = function cljs_http$util$basic_auth(credentials) {
  if (cljs.core.truth_(credentials)) {
    var vec__15283 = cljs.core.map_QMARK_.call(null, credentials) ? cljs.core.map.call(null, credentials, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "username", "username", 1605666410), new cljs.core.Keyword(null, "password", "password", 417022471)], null)) : credentials;
    var username = cljs.core.nth.call(null, vec__15283, 0, null);
    var password = cljs.core.nth.call(null, vec__15283, 1, null);
    return [cljs.core.str("Basic "), cljs.core.str(no.en.core.base64_encode.call(null, [cljs.core.str(username), cljs.core.str(":"), cljs.core.str(password)].join("")))].join("");
  } else {
    return null;
  }
};
cljs_http.util.build_url = function cljs_http$util$build_url(p__15284) {
  var map__15287 = p__15284;
  var map__15287__$1 = cljs.core.seq_QMARK_.call(null, map__15287) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15287) : map__15287;
  var scheme = cljs.core.get.call(null, map__15287__$1, new cljs.core.Keyword(null, "scheme", "scheme", 90199613));
  var server_name = cljs.core.get.call(null, map__15287__$1, new cljs.core.Keyword(null, "server-name", "server-name", -1012104295));
  var server_port = cljs.core.get.call(null, map__15287__$1, new cljs.core.Keyword(null, "server-port", "server-port", 663745648));
  var uri = cljs.core.get.call(null, map__15287__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var query_string = cljs.core.get.call(null, map__15287__$1, new cljs.core.Keyword(null, "query-string", "query-string", -1018845061));
  return [cljs.core.str(function() {
    var G__15288 = new goog.Uri;
    G__15288.setScheme(cljs.core.name.call(null, function() {
      var or__4307__auto__ = scheme;
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return new cljs.core.Keyword(null, "http", "http", 382524695);
      }
    }()));
    G__15288.setDomain(server_name);
    G__15288.setPort(server_port);
    G__15288.setPath(uri);
    G__15288.setQuery(query_string, true);
    return G__15288;
  }())].join("");
};
cljs_http.util.camelize = function cljs_http$util$camelize(s) {
  return clojure.string.join.call(null, "-", cljs.core.map.call(null, clojure.string.capitalize, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /-/)));
};
cljs_http.util.build_headers = function cljs_http$util$build_headers(m) {
  return cljs.core.clj__GT_js.call(null, cljs.core.zipmap.call(null, cljs.core.map.call(null, cljs_http.util.camelize, cljs.core.keys.call(null, m)), cljs.core.vals.call(null, m)));
};
cljs_http.util.user_agent = function cljs_http$util$user_agent() {
  return goog.userAgent.getUserAgentString();
};
cljs_http.util.android_QMARK_ = function cljs_http$util$android_QMARK_() {
  return cljs.core.re_matches.call(null, /.*android.*/i, cljs_http.util.user_agent.call(null));
};
cljs_http.util.transit_decode = function cljs_http$util$transit_decode(s, type, opts) {
  var rdr = cognitect.transit.reader.call(null, type, opts);
  return cognitect.transit.read.call(null, rdr, s);
};
cljs_http.util.transit_encode = function cljs_http$util$transit_encode(x, type, opts) {
  var wrtr = cognitect.transit.writer.call(null, type, opts);
  return cognitect.transit.write.call(null, wrtr, x);
};
cljs_http.util.json_decode = function cljs_http$util$json_decode(s) {
  var temp__4421__auto__ = cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, s)) ? JSON.parse(s) : null;
  if (cljs.core.truth_(temp__4421__auto__)) {
    var v = temp__4421__auto__;
    return cljs.core.js__GT_clj.call(null, v, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
  } else {
    return null;
  }
};
cljs_http.util.json_encode = function cljs_http$util$json_encode(x) {
  return JSON.stringify(cljs.core.clj__GT_js.call(null, x));
};
cljs_http.util.parse_headers = function cljs_http$util$parse_headers(headers) {
  return cljs.core.reduce.call(null, function(p1__15290_SHARP_, p2__15289_SHARP_) {
    var vec__15292 = clojure.string.split.call(null, p2__15289_SHARP_, /:\s+/);
    var k = cljs.core.nth.call(null, vec__15292, 0, null);
    var v = cljs.core.nth.call(null, vec__15292, 1, null);
    if (cljs.core.truth_(function() {
      var or__4307__auto__ = clojure.string.blank_QMARK_.call(null, k);
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return clojure.string.blank_QMARK_.call(null, v);
      }
    }())) {
      return p1__15290_SHARP_;
    } else {
      return cljs.core.assoc.call(null, p1__15290_SHARP_, clojure.string.lower_case.call(null, k), v);
    }
  }, cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, function() {
    var or__4307__auto__ = headers;
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return "";
    }
  }(), /(\n)|(\r)|(\r\n)|(\n\r)/));
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj14554 = {};
  return obj14554;
}();
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (function() {
    var and__4295__auto__ = port;
    if (and__4295__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4943__auto__ = port == null ? null : port;
    return function() {
      var or__4307__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj14556 = {};
  return obj14556;
}();
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__4295__auto__ = port;
    if (and__4295__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4943__auto__ = port == null ? null : port;
    return function() {
      var or__4307__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj14558 = {};
  return obj14558;
}();
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (function() {
    var and__4295__auto__ = chan;
    if (and__4295__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4943__auto__ = chan == null ? null : chan;
    return function() {
      var or__4307__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (function() {
    var and__4295__auto__ = chan;
    if (and__4295__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4943__auto__ = chan == null ? null : chan;
    return function() {
      var or__4307__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj14560 = {};
  return obj14560;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (function() {
    var and__4295__auto__ = h;
    if (and__4295__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4943__auto__ = h == null ? null : h;
    return function() {
      var or__4307__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (function() {
    var and__4295__auto__ = h;
    if (and__4295__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4943__auto__ = h == null ? null : h;
    return function() {
      var or__4307__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj14562 = {};
  return obj14562;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (function() {
    var and__4295__auto__ = b;
    if (and__4295__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4943__auto__ = b == null ? null : b;
    return function() {
      var or__4307__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (function() {
    var and__4295__auto__ = b;
    if (and__4295__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4943__auto__ = b == null ? null : b;
    return function() {
      var or__4307__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (function() {
    var and__4295__auto__ = b;
    if (and__4295__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4943__auto__ = b == null ? null : b;
    return function() {
      var or__4307__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function cljs$core$async$impl$protocols$add_BANG_() {
  var G__14564 = arguments.length;
  switch(G__14564) {
    case 1:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1 = function(b) {
  return b;
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2 = function(b, itm) {
  if (!(itm == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
  }
  return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
};
cljs.core.async.impl.protocols.add_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj14567 = {};
  return obj14567;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__18084 = cnt + 1;
      cnt = G__18084;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__5192__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__5192__auto__) {
      var v_18085 = this$.pop();
      if (keep_QMARK_.call(null, v_18085)) {
        this$.unshift(v_18085);
      } else {
      }
      var G__18086 = x + 1;
      x = G__18086;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "head", "head", 869147608, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.Symbol(null, "length", "length", -2065447907, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("goog.async.nextTick");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_18089 = 0;
  while (true) {
    var m_18090 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_18090 == null) {
    } else {
      m_18090.call(null);
      if (count_18089 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__18091 = count_18089 + 1;
        count_18089 = G__18091;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__4295__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__4295__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__4295__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t18097 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t18097 = function(box, val, meta18098) {
      this.box = box;
      this.val = val;
      this.meta18098 = meta18098;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.channels.t18097.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_18099, meta18098__$1) {
      var self__ = this;
      var _18099__$1 = this;
      return new cljs.core.async.impl.channels.t18097(self__.box, self__.val, meta18098__$1);
    };
    cljs.core.async.impl.channels.t18097.prototype.cljs$core$IMeta$_meta$arity$1 = function(_18099) {
      var self__ = this;
      var _18099__$1 = this;
      return self__.meta18098;
    };
    cljs.core.async.impl.channels.t18097.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t18097.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "box", "box", -1123515375, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "meta18098", "meta18098", 979436655, null)], null);
    };
    cljs.core.async.impl.channels.t18097.cljs$lang$type = true;
    cljs.core.async.impl.channels.t18097.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t18097";
    cljs.core.async.impl.channels.t18097.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async.impl.channels/t18097");
    };
    cljs.core.async.impl.channels.__GT_t18097 = function cljs$core$async$impl$channels$box_$___GT_t18097(box__$1, val__$1, meta18098) {
      return new cljs.core.async.impl.channels.t18097(box__$1, val__$1, meta18098);
    };
  }
  return new cljs.core.async.impl.channels.t18097(cljs$core$async$impl$channels$box, val, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "handler", "handler", 1444934915, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj18101 = {};
  return obj18101;
}();
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_18102 = self__.puts.pop();
    if (putter_18102 == null) {
    } else {
      var put_handler_18103 = putter_18102.handler;
      var val_18104 = putter_18102.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_18103)) {
        var put_cb_18105 = cljs.core.async.impl.protocols.commit.call(null, put_handler_18103);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_18105, put_handler_18103, val_18104, putter_18102, this$__$1) {
          return function() {
            return put_cb_18105.call(null, true);
          };
        }(put_cb_18105, put_handler_18103, val_18104, putter_18102, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__4295__auto__ = self__.buf;
      if (cljs.core.truth_(and__4295__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__4295__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_18106 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_18106)) {
            var take_cb_18107 = cljs.core.async.impl.protocols.commit.call(null, taker_18106);
            var val_18108__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_18107, val_18108__$1, taker_18106, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_18107.call(null, val_18108__$1);
              };
            }(take_cb_18107, val_18108__$1, taker_18106, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_18109 = self__.puts.pop();
          if (putter_18109 == null) {
          } else {
            var put_handler_18110 = putter_18109.handler;
            var val_18111 = putter_18109.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_18110)) {
              var put_cb_18112 = cljs.core.async.impl.protocols.commit.call(null, put_handler_18110);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_18112, put_handler_18110, val_18111, putter_18109, _, retval, this$__$1) {
                return function() {
                  return put_cb_18112.call(null, true);
                };
              }(put_cb_18112, put_handler_18110, val_18111, putter_18109, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_18111))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__4295__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__4295__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__4295__auto__;
            }
          }())) {
            var has_val = function() {
              var and__4295__auto__ = self__.buf;
              if (cljs.core.truth_(and__4295__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__4295__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, "takes", 
            "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__4295__auto__ = self__.buf;
      if (cljs.core.truth_(and__4295__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__4295__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_18113 = self__.takes.pop();
      if (taker_18113 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_18113)) {
          var take_cb_18114 = cljs.core.async.impl.protocols.commit.call(null, taker_18113);
          var val_18115 = cljs.core.truth_(function() {
            var and__4295__auto__ = self__.buf;
            if (cljs.core.truth_(and__4295__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__4295__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_18114, val_18115, taker_18113, this$__$1) {
            return function() {
              return take_cb_18114.call(null, val_18115);
            };
          }(take_cb_18114, val_18115, taker_18113, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.getBasis = function() {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "takes", "takes", 298247964, null), new cljs.core.Symbol(null, "dirty-takes", "dirty-takes", 575642138, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null), new cljs.core.Symbol(null, "dirty-puts", "dirty-puts", 57041148, null), new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "closed", "closed", 720856168, null), new cljs.core.Symbol(null, 
  "add!", "add!", 2046056845, null)], null);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__4307__auto__ = exh;
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function cljs$core$async$impl$channels$chan() {
  var G__18117 = arguments.length;
  switch(G__18117) {
    case 1:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1 = function(buf) {
  return cljs.core.async.impl.channels.chan.call(null, buf, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2 = function(buf, xform) {
  return cljs.core.async.impl.channels.chan.call(null, buf, xform, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3 = function(buf, xform, exh) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
    var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
    return function(add_BANG_) {
      return function() {
        var G__18121 = null;
        var G__18121__1 = function(buf__$1) {
          try {
            return add_BANG_.call(null, buf__$1);
          } catch (e18118) {
            var t = e18118;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        var G__18121__2 = function(buf__$1, val) {
          try {
            return add_BANG_.call(null, buf__$1, val);
          } catch (e18119) {
            var t = e18119;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        G__18121 = function(buf__$1, val) {
          switch(arguments.length) {
            case 1:
              return G__18121__1.call(this, buf__$1);
            case 2:
              return G__18121__2.call(this, buf__$1, val);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18121.cljs$core$IFn$_invoke$arity$1 = G__18121__1;
        G__18121.cljs$core$IFn$_invoke$arity$2 = G__18121__2;
        return G__18121;
      }();
    }(add_BANG_);
  }());
};
cljs.core.async.impl.channels.chan.cljs$lang$maxFixedArity = 3;
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t18043 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t18043 = function(fn_handler, f, meta18044) {
      this.fn_handler = fn_handler;
      this.f = f;
      this.meta18044 = meta18044;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.ioc_helpers.t18043.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_18045, meta18044__$1) {
      var self__ = this;
      var _18045__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t18043(self__.fn_handler, self__.f, meta18044__$1);
    };
    cljs.core.async.impl.ioc_helpers.t18043.prototype.cljs$core$IMeta$_meta$arity$1 = function(_18045) {
      var self__ = this;
      var _18045__$1 = this;
      return self__.meta18044;
    };
    cljs.core.async.impl.ioc_helpers.t18043.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t18043.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t18043.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t18043.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "fn-handler", "fn-handler", 648785851, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "meta18044", "meta18044", -713468670, null)], null);
    };
    cljs.core.async.impl.ioc_helpers.t18043.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t18043.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t18043";
    cljs.core.async.impl.ioc_helpers.t18043.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async.impl.ioc-helpers/t18043");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t18043 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t18043(fn_handler__$1, f__$1, meta18044) {
      return new cljs.core.async.impl.ioc_helpers.t18043(fn_handler__$1, f__$1, meta18044);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t18043(cljs$core$async$impl$ioc_helpers$fn_handler, f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e18047) {
    if (e18047 instanceof Object) {
      var ex = e18047;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e18047;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4421__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_18050_18052 = state;
    statearr_18050_18052[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_18050_18052[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4421__auto__)) {
    var cb = temp__4421__auto__;
    var statearr_18051_18053 = state;
    statearr_18051_18053[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_18051_18053[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4421__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_18056_18058 = state;
    statearr_18056_18058[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_18056_18058[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4421__auto__)) {
    var cb = temp__4421__auto__;
    var statearr_18057_18059 = state;
    statearr_18057_18059[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_18057_18059[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4902__auto__, k__4903__auto__) {
  var self__ = this;
  var this__4902__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4902__auto____$1, k__4903__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4904__auto__, k18061, else__4905__auto__) {
  var self__ = this;
  var this__4904__auto____$1 = this;
  var G__18063 = k18061 instanceof cljs.core.Keyword ? k18061.fqn : null;
  switch(G__18063) {
    case "catch-block":
      return self__.catch_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "prev":
      return self__.prev;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k18061, else__4905__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4916__auto__, writer__4917__auto__, opts__4918__auto__) {
  var self__ = this;
  var this__4916__auto____$1 = this;
  var pr_pair__4919__auto__ = function(this__4916__auto____$1) {
    return function(keyval__4920__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4917__auto__, cljs.core.pr_writer, "", " ", "", opts__4918__auto__, keyval__4920__auto__);
    };
  }(this__4916__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4917__auto__, pr_pair__4919__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4918__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4900__auto__) {
  var self__ = this;
  var this__4900__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4896__auto__) {
  var self__ = this;
  var this__4896__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4906__auto__) {
  var self__ = this;
  var this__4906__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4897__auto__) {
  var self__ = this;
  var this__4897__auto____$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_imap.call(null, this__4897__auto____$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4898__auto__, other__4899__auto__) {
  var self__ = this;
  var this__4898__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4295__auto__ = other__4899__auto__;
    if (cljs.core.truth_(and__4295__auto__)) {
      var and__4295__auto____$1 = this__4898__auto____$1.constructor === other__4899__auto__.constructor;
      if (and__4295__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4898__auto____$1, other__4899__auto__);
      } else {
        return and__4295__auto____$1;
      }
    } else {
      return and__4295__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4911__auto__, k__4912__auto__) {
  var self__ = this;
  var this__4911__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4912__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4911__auto____$1), self__.__meta), k__4912__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4912__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4909__auto__, k__4910__auto__, G__18060) {
  var self__ = this;
  var this__4909__auto____$1 = this;
  var pred__18064 = cljs.core.keyword_identical_QMARK_;
  var expr__18065 = k__4910__auto__;
  if (cljs.core.truth_(pred__18064.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__18065))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__18060, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__18064.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__18065))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__18060, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__18064.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__18065))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__18060, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__18064.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__18065))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__18060, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__18064.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__18065))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__18060, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4910__auto__, G__18060), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4914__auto__) {
  var self__ = this;
  var this__4914__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4901__auto__, G__18060) {
  var self__ = this;
  var this__4901__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__18060, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4907__auto__, entry__4908__auto__) {
  var self__ = this;
  var this__4907__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4908__auto__)) {
    return cljs.core._assoc.call(null, this__4907__auto____$1, cljs.core._nth.call(null, entry__4908__auto__, 0), cljs.core._nth.call(null, entry__4908__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4907__auto____$1, entry__4908__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "catch-block", "catch-block", -1479223021, null), new cljs.core.Symbol(null, "catch-exception", "catch-exception", -356775268, null), new cljs.core.Symbol(null, "finally-block", "finally-block", -1821453297, null), new cljs.core.Symbol(null, "continue-block", "continue-block", -211516323, null), new cljs.core.Symbol(null, "prev", "prev", 43462301, null)], null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4936__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4936__auto__, writer__4937__auto__) {
  return cljs.core._write.call(null, writer__4937__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__18062) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__18062), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__18062), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__18062), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__18062), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__18062), null, cljs.core.dissoc.call(null, G__18062, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_18069 = state;
  statearr_18069[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_18069;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__4295__auto__ = exception;
      if (cljs.core.truth_(and__4295__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__4295__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__4295__auto__ = exception;
        if (cljs.core.truth_(and__4295__auto__)) {
          var and__4295__auto____$1 = catch_block;
          if (cljs.core.truth_(and__4295__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__4295__auto____$1;
          }
        } else {
          return and__4295__auto__;
        }
      }())) {
        var statearr_18075 = state;
        statearr_18075[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_18075[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_18075[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_18075[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_18075;
      } else {
        if (cljs.core.truth_(function() {
          var and__4295__auto__ = exception;
          if (cljs.core.truth_(and__4295__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__4295__auto__;
          }
        }())) {
          var statearr_18076_18080 = state;
          statearr_18076_18080[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__18081 = state;
          state = G__18081;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__4295__auto__ = exception;
            if (cljs.core.truth_(and__4295__auto__)) {
              var and__4295__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__4295__auto____$1) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4295__auto____$1;
              }
            } else {
              return and__4295__auto__;
            }
          }())) {
            var statearr_18077 = state;
            statearr_18077[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_18077[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_18077;
          } else {
            if (cljs.core.truth_(function() {
              var and__4295__auto__ = cljs.core.not.call(null, exception);
              if (and__4295__auto__) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4295__auto__;
              }
            }())) {
              var statearr_18078 = state;
              statearr_18078[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_18078[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_18078;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_18079 = state;
                statearr_18079[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_18079[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_18079;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function cljs$core$async$impl$timers$random_level() {
  var G__18006 = arguments.length;
  switch(G__18006) {
    case 0:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.impl.timers.random_level.call(null, 0);
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1 = function(level) {
  while (true) {
    if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
      var G__18008 = level + 1;
      level = G__18008;
      continue;
    } else {
      return level;
    }
    break;
  }
};
cljs.core.async.impl.timers.random_level.cljs$lang$maxFixedArity = 1;
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "forward", "forward", 1083186224, null)], null);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function cljs$core$async$impl$timers$skip_list_node() {
  var G__18010 = arguments.length;
  switch(G__18010) {
    case 1:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1 = function(level) {
  return cljs.core.async.impl.timers.skip_list_node.call(null, null, null, level);
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3 = function(k, v, level) {
  var arr = new Array(level + 1);
  var i_18012 = 0;
  while (true) {
    if (i_18012 < arr.length) {
      arr[i_18012] = null;
      var G__18013 = i_18012 + 1;
      i_18012 = G__18013;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
};
cljs.core.async.impl.timers.skip_list_node.cljs$lang$maxFixedArity = 3;
cljs.core.async.impl.timers.least_greater_node = function cljs$core$async$impl$timers$least_greater_node() {
  var G__18015 = arguments.length;
  switch(G__18015) {
    case 3:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3 = function(x, k, level) {
  return cljs.core.async.impl.timers.least_greater_node.call(null, x, k, level, null);
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4 = function(x, k, level, update) {
  while (true) {
    if (!(level < 0)) {
      var x__$1 = function() {
        var x__$1 = x;
        while (true) {
          var temp__4421__auto__ = x__$1.forward[level];
          if (cljs.core.truth_(temp__4421__auto__)) {
            var x_SINGLEQUOTE_ = temp__4421__auto__;
            if (x_SINGLEQUOTE_.key < k) {
              var G__18017 = x_SINGLEQUOTE_;
              x__$1 = G__18017;
              continue;
            } else {
              return x__$1;
            }
          } else {
            return x__$1;
          }
          break;
        }
      }();
      if (update == null) {
      } else {
        update[level] = x__$1;
      }
      var G__18018 = x__$1;
      var G__18019 = k;
      var G__18020 = level - 1;
      var G__18021 = update;
      x = G__18018;
      k = G__18019;
      level = G__18020;
      update = G__18021;
      continue;
    } else {
      return x;
    }
    break;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$lang$maxFixedArity = 4;
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_18022 = self__.level + 1;
      while (true) {
        if (i_18022 <= new_level + 1) {
          update[i_18022] = self__.header;
          var G__18023 = i_18022 + 1;
          i_18022 = G__18023;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_18024 = 0;
    while (true) {
      if (i_18024 <= self__.level) {
        var links_18025 = update[i_18024].forward;
        if (links_18025[i_18024] === x__$1) {
          links_18025[i_18024] = x__$1.forward[i_18024];
          var G__18026 = i_18024 + 1;
          i_18024 = G__18026;
          continue;
        } else {
          var G__18027 = i_18024 + 1;
          i_18024 = G__18027;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__18028 = x_SINGLEQUOTE_;
              x__$1 = G__18028;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__18029 = nx;
        var G__18030 = level__$1 - 1;
        x = G__18029;
        level__$1 = G__18030;
        continue;
      } else {
        var G__18031 = x;
        var G__18032 = level__$1 - 1;
        x = G__18031;
        level__$1 = G__18032;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__18033 = x_SINGLEQUOTE_;
              x__$1 = G__18033;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__18034 = nx;
        var G__18035 = level__$1 - 1;
        x = G__18034;
        level__$1 = G__18035;
        continue;
      } else {
        var G__18036 = x;
        var G__18037 = level__$1 - 1;
        x = G__18036;
        level__$1 = G__18037;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "header", "header", 1759972661, null), new cljs.core.Symbol(null, "level", "level", -1363938217, null)], null);
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__4307__auto__ = cljs.core.truth_(function() {
    var and__4295__auto__ = me;
    if (cljs.core.truth_(and__4295__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__4295__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__4307__auto__)) {
    return or__4307__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__4307__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__4307__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(f) {
  if (typeof cljs.core.async.t15512 !== "undefined") {
  } else {
    cljs.core.async.t15512 = function(fn_handler, f, meta15513) {
      this.fn_handler = fn_handler;
      this.f = f;
      this.meta15513 = meta15513;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t15512.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15514, meta15513__$1) {
      var self__ = this;
      var _15514__$1 = this;
      return new cljs.core.async.t15512(self__.fn_handler, self__.f, meta15513__$1);
    };
    cljs.core.async.t15512.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15514) {
      var self__ = this;
      var _15514__$1 = this;
      return self__.meta15513;
    };
    cljs.core.async.t15512.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t15512.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t15512.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t15512.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "fn-handler", "fn-handler", 648785851, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "meta15513", "meta15513", 580072162, null)], null);
    };
    cljs.core.async.t15512.cljs$lang$type = true;
    cljs.core.async.t15512.cljs$lang$ctorStr = "cljs.core.async/t15512";
    cljs.core.async.t15512.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async/t15512");
    };
    cljs.core.async.__GT_t15512 = function cljs$core$async$fn_handler_$___GT_t15512(fn_handler__$1, f__$1, meta15513) {
      return new cljs.core.async.t15512(fn_handler__$1, f__$1, meta15513);
    };
  }
  return new cljs.core.async.t15512(cljs$core$async$fn_handler, f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  var G__15516 = buff;
  if (G__15516) {
    var bit__4981__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4307__auto__ = bit__4981__auto__;
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return G__15516.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__15516.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__15516);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__15516);
  }
};
cljs.core.async.chan = function cljs$core$async$chan() {
  var G__15518 = arguments.length;
  switch(G__15518) {
    case 0:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.chan.call(null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = function(buf_or_n) {
  return cljs.core.async.chan.call(null, buf_or_n, null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = function(buf_or_n, xform) {
  return cljs.core.async.chan.call(null, buf_or_n, xform, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = function(buf_or_n, xform, ex_handler) {
  var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
  if (cljs.core.truth_(xform)) {
    if (cljs.core.truth_(buf_or_n__$1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
    }
  } else {
  }
  return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
};
cljs.core.async.chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function cljs$core$async$take_BANG_() {
  var G__15521 = arguments.length;
  switch(G__15521) {
    case 2:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, fn1) {
  return cljs.core.async.take_BANG_.call(null, port, fn1, true);
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, fn1, on_caller_QMARK_) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(ret)) {
    var val_15523 = cljs.core.deref.call(null, ret);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, val_15523);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(val_15523, ret) {
        return function() {
          return fn1.call(null, val_15523);
        };
      }(val_15523, ret));
    }
  } else {
  }
  return null;
};
cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function cljs$core$async$put_BANG_() {
  var G__15525 = arguments.length;
  switch(G__15525) {
    case 2:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, val) {
  var temp__4421__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
  if (cljs.core.truth_(temp__4421__auto__)) {
    var ret = temp__4421__auto__;
    return cljs.core.deref.call(null, ret);
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, val, fn1) {
  return cljs.core.async.put_BANG_.call(null, port, val, fn1, true);
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = function(port, val, fn1, on_caller_QMARK_) {
  var temp__4421__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(temp__4421__auto__)) {
    var retb = temp__4421__auto__;
    var ret = cljs.core.deref.call(null, retb);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, ret);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4421__auto__) {
        return function() {
          return fn1.call(null, ret);
        };
      }(ret, retb, temp__4421__auto__));
    }
    return ret;
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__5192__auto___15527 = n;
  var x_15528 = 0;
  while (true) {
    if (x_15528 < n__5192__auto___15527) {
      a[x_15528] = 0;
      var G__15529 = x_15528 + 1;
      x_15528 = G__15529;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__15530 = i + 1;
      i = G__15530;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t15534 !== "undefined") {
  } else {
    cljs.core.async.t15534 = function(alt_flag, flag, meta15535) {
      this.alt_flag = alt_flag;
      this.flag = flag;
      this.meta15535 = meta15535;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t15534.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_15536, meta15535__$1) {
        var self__ = this;
        var _15536__$1 = this;
        return new cljs.core.async.t15534(self__.alt_flag, self__.flag, meta15535__$1);
      };
    }(flag);
    cljs.core.async.t15534.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_15536) {
        var self__ = this;
        var _15536__$1 = this;
        return self__.meta15535;
      };
    }(flag);
    cljs.core.async.t15534.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t15534.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t15534.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t15534.getBasis = function(flag) {
      return function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "alt-flag", "alt-flag", -1794972754, null), new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "meta15535", "meta15535", 835371693, null)], null);
      };
    }(flag);
    cljs.core.async.t15534.cljs$lang$type = true;
    cljs.core.async.t15534.cljs$lang$ctorStr = "cljs.core.async/t15534";
    cljs.core.async.t15534.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
        return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async/t15534");
      };
    }(flag);
    cljs.core.async.__GT_t15534 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t15534(alt_flag__$1, flag__$1, meta15535) {
        return new cljs.core.async.t15534(alt_flag__$1, flag__$1, meta15535);
      };
    }(flag);
  }
  return new cljs.core.async.t15534(cljs$core$async$alt_flag, flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t15540 !== "undefined") {
  } else {
    cljs.core.async.t15540 = function(alt_handler, flag, cb, meta15541) {
      this.alt_handler = alt_handler;
      this.flag = flag;
      this.cb = cb;
      this.meta15541 = meta15541;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t15540.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15542, meta15541__$1) {
      var self__ = this;
      var _15542__$1 = this;
      return new cljs.core.async.t15540(self__.alt_handler, self__.flag, self__.cb, meta15541__$1);
    };
    cljs.core.async.t15540.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15542) {
      var self__ = this;
      var _15542__$1 = this;
      return self__.meta15541;
    };
    cljs.core.async.t15540.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t15540.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t15540.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t15540.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "alt-handler", "alt-handler", 963786170, null), new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null), new cljs.core.Symbol(null, "meta15541", "meta15541", 497601828, null)], null);
    };
    cljs.core.async.t15540.cljs$lang$type = true;
    cljs.core.async.t15540.cljs$lang$ctorStr = "cljs.core.async/t15540";
    cljs.core.async.t15540.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async/t15540");
    };
    cljs.core.async.__GT_t15540 = function cljs$core$async$alt_handler_$___GT_t15540(alt_handler__$1, flag__$1, cb__$1, meta15541) {
      return new cljs.core.async.t15540(alt_handler__$1, flag__$1, cb__$1, meta15541);
    };
  }
  return new cljs.core.async.t15540(cljs$core$async$alt_handler, flag, cb, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__15543_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__15543_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__15544_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__15544_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__4307__auto__ = wport;
            if (cljs.core.truth_(or__4307__auto__)) {
              return or__4307__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__15545 = i + 1;
          i = G__15545;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__4307__auto__ = ret;
  if (cljs.core.truth_(or__4307__auto__)) {
    return or__4307__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4423__auto__ = function() {
        var and__4295__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__4295__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__4295__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4423__auto__)) {
        var got = temp__4423__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function cljs$core$async$alts_BANG_() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ports, p__15548) {
  var map__15549 = p__15548;
  var map__15549__$1 = cljs.core.seq_QMARK_.call(null, map__15549) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15549) : map__15549;
  var opts = map__15549__$1;
  throw new Error("alts! used not in (go ...) block");
};
cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.async.alts_BANG_.cljs$lang$applyTo = function(seq15546) {
  var G__15547 = cljs.core.first.call(null, seq15546);
  var seq15546__$1 = cljs.core.next.call(null, seq15546);
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__15547, seq15546__$1);
};
cljs.core.async.pipe = function cljs$core$async$pipe() {
  var G__15551 = arguments.length;
  switch(G__15551) {
    case 2:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = function(from, to) {
  return cljs.core.async.pipe.call(null, from, to, true);
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = function(from, to, close_QMARK_) {
  var c__8720__auto___15600 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___15600) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___15600) {
          return function(state_15575) {
            var state_val_15576 = state_15575[1];
            if (state_val_15576 === 7) {
              var inst_15571 = state_15575[2];
              var state_15575__$1 = state_15575;
              var statearr_15577_15601 = state_15575__$1;
              statearr_15577_15601[2] = inst_15571;
              statearr_15577_15601[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15576 === 1) {
                var state_15575__$1 = state_15575;
                var statearr_15578_15602 = state_15575__$1;
                statearr_15578_15602[2] = null;
                statearr_15578_15602[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15576 === 4) {
                  var inst_15554 = state_15575[7];
                  var inst_15554__$1 = state_15575[2];
                  var inst_15555 = inst_15554__$1 == null;
                  var state_15575__$1 = function() {
                    var statearr_15579 = state_15575;
                    statearr_15579[7] = inst_15554__$1;
                    return statearr_15579;
                  }();
                  if (cljs.core.truth_(inst_15555)) {
                    var statearr_15580_15603 = state_15575__$1;
                    statearr_15580_15603[1] = 5;
                  } else {
                    var statearr_15581_15604 = state_15575__$1;
                    statearr_15581_15604[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15576 === 13) {
                    var state_15575__$1 = state_15575;
                    var statearr_15582_15605 = state_15575__$1;
                    statearr_15582_15605[2] = null;
                    statearr_15582_15605[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15576 === 6) {
                      var inst_15554 = state_15575[7];
                      var state_15575__$1 = state_15575;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15575__$1, 11, to, inst_15554);
                    } else {
                      if (state_val_15576 === 3) {
                        var inst_15573 = state_15575[2];
                        var state_15575__$1 = state_15575;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15575__$1, inst_15573);
                      } else {
                        if (state_val_15576 === 12) {
                          var state_15575__$1 = state_15575;
                          var statearr_15583_15606 = state_15575__$1;
                          statearr_15583_15606[2] = null;
                          statearr_15583_15606[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15576 === 2) {
                            var state_15575__$1 = state_15575;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15575__$1, 4, from);
                          } else {
                            if (state_val_15576 === 11) {
                              var inst_15564 = state_15575[2];
                              var state_15575__$1 = state_15575;
                              if (cljs.core.truth_(inst_15564)) {
                                var statearr_15584_15607 = state_15575__$1;
                                statearr_15584_15607[1] = 12;
                              } else {
                                var statearr_15585_15608 = state_15575__$1;
                                statearr_15585_15608[1] = 13;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15576 === 9) {
                                var state_15575__$1 = state_15575;
                                var statearr_15586_15609 = state_15575__$1;
                                statearr_15586_15609[2] = null;
                                statearr_15586_15609[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15576 === 5) {
                                  var state_15575__$1 = state_15575;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_15587_15610 = state_15575__$1;
                                    statearr_15587_15610[1] = 8;
                                  } else {
                                    var statearr_15588_15611 = state_15575__$1;
                                    statearr_15588_15611[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15576 === 14) {
                                    var inst_15569 = state_15575[2];
                                    var state_15575__$1 = state_15575;
                                    var statearr_15589_15612 = state_15575__$1;
                                    statearr_15589_15612[2] = inst_15569;
                                    statearr_15589_15612[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15576 === 10) {
                                      var inst_15561 = state_15575[2];
                                      var state_15575__$1 = state_15575;
                                      var statearr_15590_15613 = state_15575__$1;
                                      statearr_15590_15613[2] = inst_15561;
                                      statearr_15590_15613[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15576 === 8) {
                                        var inst_15558 = cljs.core.async.close_BANG_.call(null, to);
                                        var state_15575__$1 = state_15575;
                                        var statearr_15591_15614 = state_15575__$1;
                                        statearr_15591_15614[2] = inst_15558;
                                        statearr_15591_15614[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___15600);
        return function(switch__8658__auto__, c__8720__auto___15600) {
          return function() {
            var cljs$core$async$state_machine__8659__auto__ = null;
            var cljs$core$async$state_machine__8659__auto____0 = function() {
              var statearr_15595 = [null, null, null, null, null, null, null, null];
              statearr_15595[0] = cljs$core$async$state_machine__8659__auto__;
              statearr_15595[1] = 1;
              return statearr_15595;
            };
            var cljs$core$async$state_machine__8659__auto____1 = function(state_15575) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_15575);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e15596) {
                    if (e15596 instanceof Object) {
                      var ex__8662__auto__ = e15596;
                      var statearr_15597_15615 = state_15575;
                      statearr_15597_15615[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15575);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15596;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15616 = state_15575;
                  state_15575 = G__15616;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8659__auto__ = function(state_15575) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8659__auto____1.call(this, state_15575);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8659__auto____0;
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8659__auto____1;
            return cljs$core$async$state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___15600);
      }();
      var state__8722__auto__ = function() {
        var statearr_15598 = f__8721__auto__.call(null);
        statearr_15598[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___15600;
        return statearr_15598;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___15600));
  return to;
};
cljs.core.async.pipe.cljs$lang$maxFixedArity = 3;
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__15800) {
      var vec__15801 = p__15800;
      var v = cljs.core.nth.call(null, vec__15801, 0, null);
      var p = cljs.core.nth.call(null, vec__15801, 1, null);
      var job = vec__15801;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__8720__auto___15983 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___15983, res, vec__15801, v, p, job, jobs, results) {
          return function() {
            var f__8721__auto__ = function() {
              var switch__8658__auto__ = function(c__8720__auto___15983, res, vec__15801, v, p, job, jobs, results) {
                return function(state_15806) {
                  var state_val_15807 = state_15806[1];
                  if (state_val_15807 === 1) {
                    var state_15806__$1 = state_15806;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15806__$1, 2, res, v);
                  } else {
                    if (state_val_15807 === 2) {
                      var inst_15803 = state_15806[2];
                      var inst_15804 = cljs.core.async.close_BANG_.call(null, res);
                      var state_15806__$1 = function() {
                        var statearr_15808 = state_15806;
                        statearr_15808[7] = inst_15803;
                        return statearr_15808;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15806__$1, inst_15804);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__8720__auto___15983, res, vec__15801, v, p, job, jobs, results);
              return function(switch__8658__auto__, c__8720__auto___15983, res, vec__15801, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0 = function() {
                    var statearr_15812 = [null, null, null, null, null, null, null, null];
                    statearr_15812[0] = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__;
                    statearr_15812[1] = 1;
                    return statearr_15812;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1 = function(state_15806) {
                    while (true) {
                      var ret_value__8660__auto__ = function() {
                        try {
                          while (true) {
                            var result__8661__auto__ = switch__8658__auto__.call(null, state_15806);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__8661__auto__;
                            }
                            break;
                          }
                        } catch (e15813) {
                          if (e15813 instanceof Object) {
                            var ex__8662__auto__ = e15813;
                            var statearr_15814_15984 = state_15806;
                            statearr_15814_15984[5] = ex__8662__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15806);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e15813;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__15985 = state_15806;
                        state_15806 = G__15985;
                        continue;
                      } else {
                        return ret_value__8660__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__ = function(state_15806) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1.call(this, state_15806);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__;
                }();
              }(switch__8658__auto__, c__8720__auto___15983, res, vec__15801, v, p, job, jobs, results);
            }();
            var state__8722__auto__ = function() {
              var statearr_15815 = f__8721__auto__.call(null);
              statearr_15815[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___15983;
              return statearr_15815;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
          };
        }(c__8720__auto___15983, res, vec__15801, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__15816) {
      var vec__15817 = p__15816;
      var v = cljs.core.nth.call(null, vec__15817, 0, null);
      var p = cljs.core.nth.call(null, vec__15817, 1, null);
      var job = vec__15817;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__5192__auto___15986 = n;
  var __15987 = 0;
  while (true) {
    if (__15987 < n__5192__auto___15986) {
      var G__15818_15988 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__15818_15988) {
        case "compute":
          var c__8720__auto___15990 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__15987, c__8720__auto___15990, G__15818_15988, n__5192__auto___15986, jobs, results, process, async) {
            return function() {
              var f__8721__auto__ = function() {
                var switch__8658__auto__ = function(__15987, c__8720__auto___15990, G__15818_15988, n__5192__auto___15986, jobs, results, process, async) {
                  return function(state_15831) {
                    var state_val_15832 = state_15831[1];
                    if (state_val_15832 === 1) {
                      var state_15831__$1 = state_15831;
                      var statearr_15833_15991 = state_15831__$1;
                      statearr_15833_15991[2] = null;
                      statearr_15833_15991[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15832 === 2) {
                        var state_15831__$1 = state_15831;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15831__$1, 4, jobs);
                      } else {
                        if (state_val_15832 === 3) {
                          var inst_15829 = state_15831[2];
                          var state_15831__$1 = state_15831;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15831__$1, inst_15829);
                        } else {
                          if (state_val_15832 === 4) {
                            var inst_15821 = state_15831[2];
                            var inst_15822 = process.call(null, inst_15821);
                            var state_15831__$1 = state_15831;
                            if (cljs.core.truth_(inst_15822)) {
                              var statearr_15834_15992 = state_15831__$1;
                              statearr_15834_15992[1] = 5;
                            } else {
                              var statearr_15835_15993 = state_15831__$1;
                              statearr_15835_15993[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15832 === 5) {
                              var state_15831__$1 = state_15831;
                              var statearr_15836_15994 = state_15831__$1;
                              statearr_15836_15994[2] = null;
                              statearr_15836_15994[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15832 === 6) {
                                var state_15831__$1 = state_15831;
                                var statearr_15837_15995 = state_15831__$1;
                                statearr_15837_15995[2] = null;
                                statearr_15837_15995[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15832 === 7) {
                                  var inst_15827 = state_15831[2];
                                  var state_15831__$1 = state_15831;
                                  var statearr_15838_15996 = state_15831__$1;
                                  statearr_15838_15996[2] = inst_15827;
                                  statearr_15838_15996[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__15987, c__8720__auto___15990, G__15818_15988, n__5192__auto___15986, jobs, results, process, async);
                return function(__15987, switch__8658__auto__, c__8720__auto___15990, G__15818_15988, n__5192__auto___15986, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0 = function() {
                      var statearr_15842 = [null, null, null, null, null, null, null];
                      statearr_15842[0] = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__;
                      statearr_15842[1] = 1;
                      return statearr_15842;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1 = function(state_15831) {
                      while (true) {
                        var ret_value__8660__auto__ = function() {
                          try {
                            while (true) {
                              var result__8661__auto__ = switch__8658__auto__.call(null, state_15831);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__8661__auto__;
                              }
                              break;
                            }
                          } catch (e15843) {
                            if (e15843 instanceof Object) {
                              var ex__8662__auto__ = e15843;
                              var statearr_15844_15997 = state_15831;
                              statearr_15844_15997[5] = ex__8662__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15831);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e15843;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__15998 = state_15831;
                          state_15831 = G__15998;
                          continue;
                        } else {
                          return ret_value__8660__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__ = function(state_15831) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1.call(this, state_15831);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__;
                  }();
                }(__15987, switch__8658__auto__, c__8720__auto___15990, G__15818_15988, n__5192__auto___15986, jobs, results, process, async);
              }();
              var state__8722__auto__ = function() {
                var statearr_15845 = f__8721__auto__.call(null);
                statearr_15845[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___15990;
                return statearr_15845;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
            };
          }(__15987, c__8720__auto___15990, G__15818_15988, n__5192__auto___15986, jobs, results, process, async));
          break;
        case "async":
          var c__8720__auto___15999 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__15987, c__8720__auto___15999, G__15818_15988, n__5192__auto___15986, jobs, results, process, async) {
            return function() {
              var f__8721__auto__ = function() {
                var switch__8658__auto__ = function(__15987, c__8720__auto___15999, G__15818_15988, n__5192__auto___15986, jobs, results, process, async) {
                  return function(state_15858) {
                    var state_val_15859 = state_15858[1];
                    if (state_val_15859 === 1) {
                      var state_15858__$1 = state_15858;
                      var statearr_15860_16000 = state_15858__$1;
                      statearr_15860_16000[2] = null;
                      statearr_15860_16000[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15859 === 2) {
                        var state_15858__$1 = state_15858;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15858__$1, 4, jobs);
                      } else {
                        if (state_val_15859 === 3) {
                          var inst_15856 = state_15858[2];
                          var state_15858__$1 = state_15858;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15858__$1, inst_15856);
                        } else {
                          if (state_val_15859 === 4) {
                            var inst_15848 = state_15858[2];
                            var inst_15849 = async.call(null, inst_15848);
                            var state_15858__$1 = state_15858;
                            if (cljs.core.truth_(inst_15849)) {
                              var statearr_15861_16001 = state_15858__$1;
                              statearr_15861_16001[1] = 5;
                            } else {
                              var statearr_15862_16002 = state_15858__$1;
                              statearr_15862_16002[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15859 === 5) {
                              var state_15858__$1 = state_15858;
                              var statearr_15863_16003 = state_15858__$1;
                              statearr_15863_16003[2] = null;
                              statearr_15863_16003[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15859 === 6) {
                                var state_15858__$1 = state_15858;
                                var statearr_15864_16004 = state_15858__$1;
                                statearr_15864_16004[2] = null;
                                statearr_15864_16004[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15859 === 7) {
                                  var inst_15854 = state_15858[2];
                                  var state_15858__$1 = state_15858;
                                  var statearr_15865_16005 = state_15858__$1;
                                  statearr_15865_16005[2] = inst_15854;
                                  statearr_15865_16005[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__15987, c__8720__auto___15999, G__15818_15988, n__5192__auto___15986, jobs, results, process, async);
                return function(__15987, switch__8658__auto__, c__8720__auto___15999, G__15818_15988, n__5192__auto___15986, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0 = function() {
                      var statearr_15869 = [null, null, null, null, null, null, null];
                      statearr_15869[0] = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__;
                      statearr_15869[1] = 1;
                      return statearr_15869;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1 = function(state_15858) {
                      while (true) {
                        var ret_value__8660__auto__ = function() {
                          try {
                            while (true) {
                              var result__8661__auto__ = switch__8658__auto__.call(null, state_15858);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__8661__auto__;
                              }
                              break;
                            }
                          } catch (e15870) {
                            if (e15870 instanceof Object) {
                              var ex__8662__auto__ = e15870;
                              var statearr_15871_16006 = state_15858;
                              statearr_15871_16006[5] = ex__8662__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15858);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e15870;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__16007 = state_15858;
                          state_15858 = G__16007;
                          continue;
                        } else {
                          return ret_value__8660__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__ = function(state_15858) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1.call(this, state_15858);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__;
                  }();
                }(__15987, switch__8658__auto__, c__8720__auto___15999, G__15818_15988, n__5192__auto___15986, jobs, results, process, async);
              }();
              var state__8722__auto__ = function() {
                var statearr_15872 = f__8721__auto__.call(null);
                statearr_15872[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___15999;
                return statearr_15872;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
            };
          }(__15987, c__8720__auto___15999, G__15818_15988, n__5192__auto___15986, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__16008 = __15987 + 1;
      __15987 = G__16008;
      continue;
    } else {
    }
    break;
  }
  var c__8720__auto___16009 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___16009, jobs, results, process, async) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___16009, jobs, results, process, async) {
          return function(state_15894) {
            var state_val_15895 = state_15894[1];
            if (state_val_15895 === 1) {
              var state_15894__$1 = state_15894;
              var statearr_15896_16010 = state_15894__$1;
              statearr_15896_16010[2] = null;
              statearr_15896_16010[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15895 === 2) {
                var state_15894__$1 = state_15894;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15894__$1, 4, from);
              } else {
                if (state_val_15895 === 3) {
                  var inst_15892 = state_15894[2];
                  var state_15894__$1 = state_15894;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15894__$1, inst_15892);
                } else {
                  if (state_val_15895 === 4) {
                    var inst_15875 = state_15894[7];
                    var inst_15875__$1 = state_15894[2];
                    var inst_15876 = inst_15875__$1 == null;
                    var state_15894__$1 = function() {
                      var statearr_15897 = state_15894;
                      statearr_15897[7] = inst_15875__$1;
                      return statearr_15897;
                    }();
                    if (cljs.core.truth_(inst_15876)) {
                      var statearr_15898_16011 = state_15894__$1;
                      statearr_15898_16011[1] = 5;
                    } else {
                      var statearr_15899_16012 = state_15894__$1;
                      statearr_15899_16012[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15895 === 5) {
                      var inst_15878 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_15894__$1 = state_15894;
                      var statearr_15900_16013 = state_15894__$1;
                      statearr_15900_16013[2] = inst_15878;
                      statearr_15900_16013[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15895 === 6) {
                        var inst_15875 = state_15894[7];
                        var inst_15880 = state_15894[8];
                        var inst_15880__$1 = cljs.core.async.chan.call(null, 1);
                        var inst_15881 = cljs.core.PersistentVector.EMPTY_NODE;
                        var inst_15882 = [inst_15875, inst_15880__$1];
                        var inst_15883 = new cljs.core.PersistentVector(null, 2, 5, inst_15881, inst_15882, null);
                        var state_15894__$1 = function() {
                          var statearr_15901 = state_15894;
                          statearr_15901[8] = inst_15880__$1;
                          return statearr_15901;
                        }();
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15894__$1, 8, jobs, inst_15883);
                      } else {
                        if (state_val_15895 === 7) {
                          var inst_15890 = state_15894[2];
                          var state_15894__$1 = state_15894;
                          var statearr_15902_16014 = state_15894__$1;
                          statearr_15902_16014[2] = inst_15890;
                          statearr_15902_16014[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15895 === 8) {
                            var inst_15880 = state_15894[8];
                            var inst_15885 = state_15894[2];
                            var state_15894__$1 = function() {
                              var statearr_15903 = state_15894;
                              statearr_15903[9] = inst_15885;
                              return statearr_15903;
                            }();
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15894__$1, 9, results, inst_15880);
                          } else {
                            if (state_val_15895 === 9) {
                              var inst_15887 = state_15894[2];
                              var state_15894__$1 = function() {
                                var statearr_15904 = state_15894;
                                statearr_15904[10] = inst_15887;
                                return statearr_15904;
                              }();
                              var statearr_15905_16015 = state_15894__$1;
                              statearr_15905_16015[2] = null;
                              statearr_15905_16015[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___16009, jobs, results, process, async);
        return function(switch__8658__auto__, c__8720__auto___16009, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0 = function() {
              var statearr_15909 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_15909[0] = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__;
              statearr_15909[1] = 1;
              return statearr_15909;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1 = function(state_15894) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_15894);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e15910) {
                    if (e15910 instanceof Object) {
                      var ex__8662__auto__ = e15910;
                      var statearr_15911_16016 = state_15894;
                      statearr_15911_16016[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15894);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15910;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16017 = state_15894;
                  state_15894 = G__16017;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__ = function(state_15894) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1.call(this, state_15894);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___16009, jobs, results, process, async);
      }();
      var state__8722__auto__ = function() {
        var statearr_15912 = f__8721__auto__.call(null);
        statearr_15912[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___16009;
        return statearr_15912;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___16009, jobs, results, process, async));
  var c__8720__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto__, jobs, results, process, async) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto__, jobs, results, process, async) {
          return function(state_15950) {
            var state_val_15951 = state_15950[1];
            if (state_val_15951 === 7) {
              var inst_15946 = state_15950[2];
              var state_15950__$1 = state_15950;
              var statearr_15952_16018 = state_15950__$1;
              statearr_15952_16018[2] = inst_15946;
              statearr_15952_16018[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15951 === 20) {
                var state_15950__$1 = state_15950;
                var statearr_15953_16019 = state_15950__$1;
                statearr_15953_16019[2] = null;
                statearr_15953_16019[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15951 === 1) {
                  var state_15950__$1 = state_15950;
                  var statearr_15954_16020 = state_15950__$1;
                  statearr_15954_16020[2] = null;
                  statearr_15954_16020[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15951 === 4) {
                    var inst_15915 = state_15950[7];
                    var inst_15915__$1 = state_15950[2];
                    var inst_15916 = inst_15915__$1 == null;
                    var state_15950__$1 = function() {
                      var statearr_15955 = state_15950;
                      statearr_15955[7] = inst_15915__$1;
                      return statearr_15955;
                    }();
                    if (cljs.core.truth_(inst_15916)) {
                      var statearr_15956_16021 = state_15950__$1;
                      statearr_15956_16021[1] = 5;
                    } else {
                      var statearr_15957_16022 = state_15950__$1;
                      statearr_15957_16022[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15951 === 15) {
                      var inst_15928 = state_15950[8];
                      var state_15950__$1 = state_15950;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15950__$1, 18, to, inst_15928);
                    } else {
                      if (state_val_15951 === 21) {
                        var inst_15941 = state_15950[2];
                        var state_15950__$1 = state_15950;
                        var statearr_15958_16023 = state_15950__$1;
                        statearr_15958_16023[2] = inst_15941;
                        statearr_15958_16023[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15951 === 13) {
                          var inst_15943 = state_15950[2];
                          var state_15950__$1 = function() {
                            var statearr_15959 = state_15950;
                            statearr_15959[9] = inst_15943;
                            return statearr_15959;
                          }();
                          var statearr_15960_16024 = state_15950__$1;
                          statearr_15960_16024[2] = null;
                          statearr_15960_16024[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15951 === 6) {
                            var inst_15915 = state_15950[7];
                            var state_15950__$1 = state_15950;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15950__$1, 11, inst_15915);
                          } else {
                            if (state_val_15951 === 17) {
                              var inst_15936 = state_15950[2];
                              var state_15950__$1 = state_15950;
                              if (cljs.core.truth_(inst_15936)) {
                                var statearr_15961_16025 = state_15950__$1;
                                statearr_15961_16025[1] = 19;
                              } else {
                                var statearr_15962_16026 = state_15950__$1;
                                statearr_15962_16026[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15951 === 3) {
                                var inst_15948 = state_15950[2];
                                var state_15950__$1 = state_15950;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15950__$1, inst_15948);
                              } else {
                                if (state_val_15951 === 12) {
                                  var inst_15925 = state_15950[10];
                                  var state_15950__$1 = state_15950;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15950__$1, 14, inst_15925);
                                } else {
                                  if (state_val_15951 === 2) {
                                    var state_15950__$1 = state_15950;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15950__$1, 4, results);
                                  } else {
                                    if (state_val_15951 === 19) {
                                      var state_15950__$1 = state_15950;
                                      var statearr_15963_16027 = state_15950__$1;
                                      statearr_15963_16027[2] = null;
                                      statearr_15963_16027[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15951 === 11) {
                                        var inst_15925 = state_15950[2];
                                        var state_15950__$1 = function() {
                                          var statearr_15964 = state_15950;
                                          statearr_15964[10] = inst_15925;
                                          return statearr_15964;
                                        }();
                                        var statearr_15965_16028 = state_15950__$1;
                                        statearr_15965_16028[2] = null;
                                        statearr_15965_16028[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15951 === 9) {
                                          var state_15950__$1 = state_15950;
                                          var statearr_15966_16029 = state_15950__$1;
                                          statearr_15966_16029[2] = null;
                                          statearr_15966_16029[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_15951 === 5) {
                                            var state_15950__$1 = state_15950;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_15967_16030 = state_15950__$1;
                                              statearr_15967_16030[1] = 8;
                                            } else {
                                              var statearr_15968_16031 = state_15950__$1;
                                              statearr_15968_16031[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_15951 === 14) {
                                              var inst_15928 = state_15950[8];
                                              var inst_15930 = state_15950[11];
                                              var inst_15928__$1 = state_15950[2];
                                              var inst_15929 = inst_15928__$1 == null;
                                              var inst_15930__$1 = cljs.core.not.call(null, inst_15929);
                                              var state_15950__$1 = function() {
                                                var statearr_15969 = state_15950;
                                                statearr_15969[8] = inst_15928__$1;
                                                statearr_15969[11] = inst_15930__$1;
                                                return statearr_15969;
                                              }();
                                              if (inst_15930__$1) {
                                                var statearr_15970_16032 = state_15950__$1;
                                                statearr_15970_16032[1] = 15;
                                              } else {
                                                var statearr_15971_16033 = state_15950__$1;
                                                statearr_15971_16033[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_15951 === 16) {
                                                var inst_15930 = state_15950[11];
                                                var state_15950__$1 = state_15950;
                                                var statearr_15972_16034 = state_15950__$1;
                                                statearr_15972_16034[2] = inst_15930;
                                                statearr_15972_16034[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_15951 === 10) {
                                                  var inst_15922 = state_15950[2];
                                                  var state_15950__$1 = state_15950;
                                                  var statearr_15973_16035 = state_15950__$1;
                                                  statearr_15973_16035[2] = inst_15922;
                                                  statearr_15973_16035[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_15951 === 18) {
                                                    var inst_15933 = state_15950[2];
                                                    var state_15950__$1 = state_15950;
                                                    var statearr_15974_16036 = state_15950__$1;
                                                    statearr_15974_16036[2] = inst_15933;
                                                    statearr_15974_16036[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_15951 === 8) {
                                                      var inst_15919 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_15950__$1 = state_15950;
                                                      var statearr_15975_16037 = state_15950__$1;
                                                      statearr_15975_16037[2] = inst_15919;
                                                      statearr_15975_16037[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto__, jobs, results, process, async);
        return function(switch__8658__auto__, c__8720__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0 = function() {
              var statearr_15979 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15979[0] = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__;
              statearr_15979[1] = 1;
              return statearr_15979;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1 = function(state_15950) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_15950);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e15980) {
                    if (e15980 instanceof Object) {
                      var ex__8662__auto__ = e15980;
                      var statearr_15981_16038 = state_15950;
                      statearr_15981_16038[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15950);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15980;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16039 = state_15950;
                  state_15950 = G__16039;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__ = function(state_15950) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1.call(this, state_15950);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__8659__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto__, jobs, results, process, async);
      }();
      var state__8722__auto__ = function() {
        var statearr_15982 = f__8721__auto__.call(null);
        statearr_15982[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto__;
        return statearr_15982;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto__, jobs, results, process, async));
  return c__8720__auto__;
};
cljs.core.async.pipeline_async = function cljs$core$async$pipeline_async() {
  var G__16041 = arguments.length;
  switch(G__16041) {
    case 4:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = function(n, to, af, from) {
  return cljs.core.async.pipeline_async.call(null, n, to, af, from, true);
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = function(n, to, af, from, close_QMARK_) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5;
cljs.core.async.pipeline = function cljs$core$async$pipeline() {
  var G__16044 = arguments.length;
  switch(G__16044) {
    case 4:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = function(n, to, xf, from) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, true);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = function(n, to, xf, from, close_QMARK_) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, close_QMARK_, null);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
};
cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6;
cljs.core.async.split = function cljs$core$async$split() {
  var G__16047 = arguments.length;
  switch(G__16047) {
    case 2:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.split.call(null, p, ch, null, null);
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
  var tc = cljs.core.async.chan.call(null, t_buf_or_n);
  var fc = cljs.core.async.chan.call(null, f_buf_or_n);
  var c__8720__auto___16099 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___16099, tc, fc) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___16099, tc, fc) {
          return function(state_16073) {
            var state_val_16074 = state_16073[1];
            if (state_val_16074 === 7) {
              var inst_16069 = state_16073[2];
              var state_16073__$1 = state_16073;
              var statearr_16075_16100 = state_16073__$1;
              statearr_16075_16100[2] = inst_16069;
              statearr_16075_16100[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16074 === 1) {
                var state_16073__$1 = state_16073;
                var statearr_16076_16101 = state_16073__$1;
                statearr_16076_16101[2] = null;
                statearr_16076_16101[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16074 === 4) {
                  var inst_16050 = state_16073[7];
                  var inst_16050__$1 = state_16073[2];
                  var inst_16051 = inst_16050__$1 == null;
                  var state_16073__$1 = function() {
                    var statearr_16077 = state_16073;
                    statearr_16077[7] = inst_16050__$1;
                    return statearr_16077;
                  }();
                  if (cljs.core.truth_(inst_16051)) {
                    var statearr_16078_16102 = state_16073__$1;
                    statearr_16078_16102[1] = 5;
                  } else {
                    var statearr_16079_16103 = state_16073__$1;
                    statearr_16079_16103[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16074 === 13) {
                    var state_16073__$1 = state_16073;
                    var statearr_16080_16104 = state_16073__$1;
                    statearr_16080_16104[2] = null;
                    statearr_16080_16104[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16074 === 6) {
                      var inst_16050 = state_16073[7];
                      var inst_16056 = p.call(null, inst_16050);
                      var state_16073__$1 = state_16073;
                      if (cljs.core.truth_(inst_16056)) {
                        var statearr_16081_16105 = state_16073__$1;
                        statearr_16081_16105[1] = 9;
                      } else {
                        var statearr_16082_16106 = state_16073__$1;
                        statearr_16082_16106[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16074 === 3) {
                        var inst_16071 = state_16073[2];
                        var state_16073__$1 = state_16073;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16073__$1, inst_16071);
                      } else {
                        if (state_val_16074 === 12) {
                          var state_16073__$1 = state_16073;
                          var statearr_16083_16107 = state_16073__$1;
                          statearr_16083_16107[2] = null;
                          statearr_16083_16107[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16074 === 2) {
                            var state_16073__$1 = state_16073;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16073__$1, 4, ch);
                          } else {
                            if (state_val_16074 === 11) {
                              var inst_16050 = state_16073[7];
                              var inst_16060 = state_16073[2];
                              var state_16073__$1 = state_16073;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16073__$1, 8, inst_16060, inst_16050);
                            } else {
                              if (state_val_16074 === 9) {
                                var state_16073__$1 = state_16073;
                                var statearr_16084_16108 = state_16073__$1;
                                statearr_16084_16108[2] = tc;
                                statearr_16084_16108[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16074 === 5) {
                                  var inst_16053 = cljs.core.async.close_BANG_.call(null, tc);
                                  var inst_16054 = cljs.core.async.close_BANG_.call(null, fc);
                                  var state_16073__$1 = function() {
                                    var statearr_16085 = state_16073;
                                    statearr_16085[8] = inst_16053;
                                    return statearr_16085;
                                  }();
                                  var statearr_16086_16109 = state_16073__$1;
                                  statearr_16086_16109[2] = inst_16054;
                                  statearr_16086_16109[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_16074 === 14) {
                                    var inst_16067 = state_16073[2];
                                    var state_16073__$1 = state_16073;
                                    var statearr_16087_16110 = state_16073__$1;
                                    statearr_16087_16110[2] = inst_16067;
                                    statearr_16087_16110[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16074 === 10) {
                                      var state_16073__$1 = state_16073;
                                      var statearr_16088_16111 = state_16073__$1;
                                      statearr_16088_16111[2] = fc;
                                      statearr_16088_16111[1] = 11;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_16074 === 8) {
                                        var inst_16062 = state_16073[2];
                                        var state_16073__$1 = state_16073;
                                        if (cljs.core.truth_(inst_16062)) {
                                          var statearr_16089_16112 = state_16073__$1;
                                          statearr_16089_16112[1] = 12;
                                        } else {
                                          var statearr_16090_16113 = state_16073__$1;
                                          statearr_16090_16113[1] = 13;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___16099, tc, fc);
        return function(switch__8658__auto__, c__8720__auto___16099, tc, fc) {
          return function() {
            var cljs$core$async$state_machine__8659__auto__ = null;
            var cljs$core$async$state_machine__8659__auto____0 = function() {
              var statearr_16094 = [null, null, null, null, null, null, null, null, null];
              statearr_16094[0] = cljs$core$async$state_machine__8659__auto__;
              statearr_16094[1] = 1;
              return statearr_16094;
            };
            var cljs$core$async$state_machine__8659__auto____1 = function(state_16073) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_16073);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e16095) {
                    if (e16095 instanceof Object) {
                      var ex__8662__auto__ = e16095;
                      var statearr_16096_16114 = state_16073;
                      statearr_16096_16114[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16073);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16095;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16115 = state_16073;
                  state_16073 = G__16115;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8659__auto__ = function(state_16073) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8659__auto____1.call(this, state_16073);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8659__auto____0;
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8659__auto____1;
            return cljs$core$async$state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___16099, tc, fc);
      }();
      var state__8722__auto__ = function() {
        var statearr_16097 = f__8721__auto__.call(null);
        statearr_16097[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___16099;
        return statearr_16097;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___16099, tc, fc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
};
cljs.core.async.split.cljs$lang$maxFixedArity = 4;
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__8720__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto__) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto__) {
          return function(state_16162) {
            var state_val_16163 = state_16162[1];
            if (state_val_16163 === 1) {
              var inst_16148 = init;
              var state_16162__$1 = function() {
                var statearr_16164 = state_16162;
                statearr_16164[7] = inst_16148;
                return statearr_16164;
              }();
              var statearr_16165_16180 = state_16162__$1;
              statearr_16165_16180[2] = null;
              statearr_16165_16180[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16163 === 2) {
                var state_16162__$1 = state_16162;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16162__$1, 4, ch);
              } else {
                if (state_val_16163 === 3) {
                  var inst_16160 = state_16162[2];
                  var state_16162__$1 = state_16162;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16162__$1, inst_16160);
                } else {
                  if (state_val_16163 === 4) {
                    var inst_16151 = state_16162[8];
                    var inst_16151__$1 = state_16162[2];
                    var inst_16152 = inst_16151__$1 == null;
                    var state_16162__$1 = function() {
                      var statearr_16166 = state_16162;
                      statearr_16166[8] = inst_16151__$1;
                      return statearr_16166;
                    }();
                    if (cljs.core.truth_(inst_16152)) {
                      var statearr_16167_16181 = state_16162__$1;
                      statearr_16167_16181[1] = 5;
                    } else {
                      var statearr_16168_16182 = state_16162__$1;
                      statearr_16168_16182[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16163 === 5) {
                      var inst_16148 = state_16162[7];
                      var state_16162__$1 = state_16162;
                      var statearr_16169_16183 = state_16162__$1;
                      statearr_16169_16183[2] = inst_16148;
                      statearr_16169_16183[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16163 === 6) {
                        var inst_16151 = state_16162[8];
                        var inst_16148 = state_16162[7];
                        var inst_16155 = f.call(null, inst_16148, inst_16151);
                        var inst_16148__$1 = inst_16155;
                        var state_16162__$1 = function() {
                          var statearr_16170 = state_16162;
                          statearr_16170[7] = inst_16148__$1;
                          return statearr_16170;
                        }();
                        var statearr_16171_16184 = state_16162__$1;
                        statearr_16171_16184[2] = null;
                        statearr_16171_16184[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16163 === 7) {
                          var inst_16158 = state_16162[2];
                          var state_16162__$1 = state_16162;
                          var statearr_16172_16185 = state_16162__$1;
                          statearr_16172_16185[2] = inst_16158;
                          statearr_16172_16185[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto__);
        return function(switch__8658__auto__, c__8720__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__8659__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__8659__auto____0 = function() {
              var statearr_16176 = [null, null, null, null, null, null, null, null, null];
              statearr_16176[0] = cljs$core$async$reduce_$_state_machine__8659__auto__;
              statearr_16176[1] = 1;
              return statearr_16176;
            };
            var cljs$core$async$reduce_$_state_machine__8659__auto____1 = function(state_16162) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_16162);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e16177) {
                    if (e16177 instanceof Object) {
                      var ex__8662__auto__ = e16177;
                      var statearr_16178_16186 = state_16162;
                      statearr_16178_16186[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16162);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16177;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16187 = state_16162;
                  state_16162 = G__16187;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__8659__auto__ = function(state_16162) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__8659__auto____1.call(this, state_16162);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$reduce_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__8659__auto____0;
            cljs$core$async$reduce_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__8659__auto____1;
            return cljs$core$async$reduce_$_state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto__);
      }();
      var state__8722__auto__ = function() {
        var statearr_16179 = f__8721__auto__.call(null);
        statearr_16179[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto__;
        return statearr_16179;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto__));
  return c__8720__auto__;
};
cljs.core.async.onto_chan = function cljs$core$async$onto_chan() {
  var G__16189 = arguments.length;
  switch(G__16189) {
    case 2:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = function(ch, coll) {
  return cljs.core.async.onto_chan.call(null, ch, coll, true);
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = function(ch, coll, close_QMARK_) {
  var c__8720__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto__) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto__) {
          return function(state_16214) {
            var state_val_16215 = state_16214[1];
            if (state_val_16215 === 7) {
              var inst_16196 = state_16214[2];
              var state_16214__$1 = state_16214;
              var statearr_16216_16240 = state_16214__$1;
              statearr_16216_16240[2] = inst_16196;
              statearr_16216_16240[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16215 === 1) {
                var inst_16190 = cljs.core.seq.call(null, coll);
                var inst_16191 = inst_16190;
                var state_16214__$1 = function() {
                  var statearr_16217 = state_16214;
                  statearr_16217[7] = inst_16191;
                  return statearr_16217;
                }();
                var statearr_16218_16241 = state_16214__$1;
                statearr_16218_16241[2] = null;
                statearr_16218_16241[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16215 === 4) {
                  var inst_16191 = state_16214[7];
                  var inst_16194 = cljs.core.first.call(null, inst_16191);
                  var state_16214__$1 = state_16214;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16214__$1, 7, ch, inst_16194);
                } else {
                  if (state_val_16215 === 13) {
                    var inst_16208 = state_16214[2];
                    var state_16214__$1 = state_16214;
                    var statearr_16219_16242 = state_16214__$1;
                    statearr_16219_16242[2] = inst_16208;
                    statearr_16219_16242[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16215 === 6) {
                      var inst_16199 = state_16214[2];
                      var state_16214__$1 = state_16214;
                      if (cljs.core.truth_(inst_16199)) {
                        var statearr_16220_16243 = state_16214__$1;
                        statearr_16220_16243[1] = 8;
                      } else {
                        var statearr_16221_16244 = state_16214__$1;
                        statearr_16221_16244[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16215 === 3) {
                        var inst_16212 = state_16214[2];
                        var state_16214__$1 = state_16214;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16214__$1, inst_16212);
                      } else {
                        if (state_val_16215 === 12) {
                          var state_16214__$1 = state_16214;
                          var statearr_16222_16245 = state_16214__$1;
                          statearr_16222_16245[2] = null;
                          statearr_16222_16245[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16215 === 2) {
                            var inst_16191 = state_16214[7];
                            var state_16214__$1 = state_16214;
                            if (cljs.core.truth_(inst_16191)) {
                              var statearr_16223_16246 = state_16214__$1;
                              statearr_16223_16246[1] = 4;
                            } else {
                              var statearr_16224_16247 = state_16214__$1;
                              statearr_16224_16247[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_16215 === 11) {
                              var inst_16205 = cljs.core.async.close_BANG_.call(null, ch);
                              var state_16214__$1 = state_16214;
                              var statearr_16225_16248 = state_16214__$1;
                              statearr_16225_16248[2] = inst_16205;
                              statearr_16225_16248[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_16215 === 9) {
                                var state_16214__$1 = state_16214;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_16226_16249 = state_16214__$1;
                                  statearr_16226_16249[1] = 11;
                                } else {
                                  var statearr_16227_16250 = state_16214__$1;
                                  statearr_16227_16250[1] = 12;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16215 === 5) {
                                  var inst_16191 = state_16214[7];
                                  var state_16214__$1 = state_16214;
                                  var statearr_16228_16251 = state_16214__$1;
                                  statearr_16228_16251[2] = inst_16191;
                                  statearr_16228_16251[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_16215 === 10) {
                                    var inst_16210 = state_16214[2];
                                    var state_16214__$1 = state_16214;
                                    var statearr_16229_16252 = state_16214__$1;
                                    statearr_16229_16252[2] = inst_16210;
                                    statearr_16229_16252[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16215 === 8) {
                                      var inst_16191 = state_16214[7];
                                      var inst_16201 = cljs.core.next.call(null, inst_16191);
                                      var inst_16191__$1 = inst_16201;
                                      var state_16214__$1 = function() {
                                        var statearr_16230 = state_16214;
                                        statearr_16230[7] = inst_16191__$1;
                                        return statearr_16230;
                                      }();
                                      var statearr_16231_16253 = state_16214__$1;
                                      statearr_16231_16253[2] = null;
                                      statearr_16231_16253[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto__);
        return function(switch__8658__auto__, c__8720__auto__) {
          return function() {
            var cljs$core$async$state_machine__8659__auto__ = null;
            var cljs$core$async$state_machine__8659__auto____0 = function() {
              var statearr_16235 = [null, null, null, null, null, null, null, null];
              statearr_16235[0] = cljs$core$async$state_machine__8659__auto__;
              statearr_16235[1] = 1;
              return statearr_16235;
            };
            var cljs$core$async$state_machine__8659__auto____1 = function(state_16214) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_16214);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e16236) {
                    if (e16236 instanceof Object) {
                      var ex__8662__auto__ = e16236;
                      var statearr_16237_16254 = state_16214;
                      statearr_16237_16254[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16214);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16236;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16255 = state_16214;
                  state_16214 = G__16255;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8659__auto__ = function(state_16214) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8659__auto____1.call(this, state_16214);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8659__auto____0;
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8659__auto____1;
            return cljs$core$async$state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto__);
      }();
      var state__8722__auto__ = function() {
        var statearr_16238 = f__8721__auto__.call(null);
        statearr_16238[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto__;
        return statearr_16238;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto__));
  return c__8720__auto__;
};
cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj16257 = {};
  return obj16257;
}();
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (function() {
    var and__4295__auto__ = _;
    if (and__4295__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4943__auto__ = _ == null ? null : _;
    return function() {
      var or__4307__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj16259 = {};
  return obj16259;
}();
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__4295__auto__ = m;
    if (and__4295__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4943__auto__ = m == null ? null : m;
    return function() {
      var or__4307__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (function() {
    var and__4295__auto__ = m;
    if (and__4295__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4943__auto__ = m == null ? null : m;
    return function() {
      var or__4307__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (function() {
    var and__4295__auto__ = m;
    if (and__4295__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4943__auto__ = m == null ? null : m;
    return function() {
      var or__4307__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t16481 !== "undefined") {
    } else {
      cljs.core.async.t16481 = function(mult, ch, cs, meta16482) {
        this.mult = mult;
        this.ch = ch;
        this.cs = cs;
        this.meta16482 = meta16482;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t16481.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_16483, meta16482__$1) {
          var self__ = this;
          var _16483__$1 = this;
          return new cljs.core.async.t16481(self__.mult, self__.ch, self__.cs, meta16482__$1);
        };
      }(cs);
      cljs.core.async.t16481.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_16483) {
          var self__ = this;
          var _16483__$1 = this;
          return self__.meta16482;
        };
      }(cs);
      cljs.core.async.t16481.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t16481.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t16481.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t16481.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t16481.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t16481.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t16481.getBasis = function(cs) {
        return function() {
          return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "mult", "mult", -1187640995, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "meta16482", "meta16482", -1425763447, null)], null);
        };
      }(cs);
      cljs.core.async.t16481.cljs$lang$type = true;
      cljs.core.async.t16481.cljs$lang$ctorStr = "cljs.core.async/t16481";
      cljs.core.async.t16481.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
          return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async/t16481");
        };
      }(cs);
      cljs.core.async.__GT_t16481 = function(cs) {
        return function cljs$core$async$mult_$___GT_t16481(mult__$1, ch__$1, cs__$1, meta16482) {
          return new cljs.core.async.t16481(mult__$1, ch__$1, cs__$1, meta16482);
        };
      }(cs);
    }
    return new cljs.core.async.t16481(cljs$core$async$mult, ch, cs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__8720__auto___16702 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___16702, cs, m, dchan, dctr, done) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___16702, cs, m, dchan, dctr, done) {
          return function(state_16614) {
            var state_val_16615 = state_16614[1];
            if (state_val_16615 === 7) {
              var inst_16610 = state_16614[2];
              var state_16614__$1 = state_16614;
              var statearr_16616_16703 = state_16614__$1;
              statearr_16616_16703[2] = inst_16610;
              statearr_16616_16703[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16615 === 20) {
                var inst_16515 = state_16614[7];
                var inst_16525 = cljs.core.first.call(null, inst_16515);
                var inst_16526 = cljs.core.nth.call(null, inst_16525, 0, null);
                var inst_16527 = cljs.core.nth.call(null, inst_16525, 1, null);
                var state_16614__$1 = function() {
                  var statearr_16617 = state_16614;
                  statearr_16617[8] = inst_16526;
                  return statearr_16617;
                }();
                if (cljs.core.truth_(inst_16527)) {
                  var statearr_16618_16704 = state_16614__$1;
                  statearr_16618_16704[1] = 22;
                } else {
                  var statearr_16619_16705 = state_16614__$1;
                  statearr_16619_16705[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16615 === 27) {
                  var inst_16562 = state_16614[9];
                  var inst_16557 = state_16614[10];
                  var inst_16555 = state_16614[11];
                  var inst_16486 = state_16614[12];
                  var inst_16562__$1 = cljs.core._nth.call(null, inst_16555, inst_16557);
                  var inst_16563 = cljs.core.async.put_BANG_.call(null, inst_16562__$1, inst_16486, done);
                  var state_16614__$1 = function() {
                    var statearr_16620 = state_16614;
                    statearr_16620[9] = inst_16562__$1;
                    return statearr_16620;
                  }();
                  if (cljs.core.truth_(inst_16563)) {
                    var statearr_16621_16706 = state_16614__$1;
                    statearr_16621_16706[1] = 30;
                  } else {
                    var statearr_16622_16707 = state_16614__$1;
                    statearr_16622_16707[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16615 === 1) {
                    var state_16614__$1 = state_16614;
                    var statearr_16623_16708 = state_16614__$1;
                    statearr_16623_16708[2] = null;
                    statearr_16623_16708[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16615 === 24) {
                      var inst_16515 = state_16614[7];
                      var inst_16532 = state_16614[2];
                      var inst_16533 = cljs.core.next.call(null, inst_16515);
                      var inst_16495 = inst_16533;
                      var inst_16496 = null;
                      var inst_16497 = 0;
                      var inst_16498 = 0;
                      var state_16614__$1 = function() {
                        var statearr_16624 = state_16614;
                        statearr_16624[13] = inst_16497;
                        statearr_16624[14] = inst_16532;
                        statearr_16624[15] = inst_16498;
                        statearr_16624[16] = inst_16496;
                        statearr_16624[17] = inst_16495;
                        return statearr_16624;
                      }();
                      var statearr_16625_16709 = state_16614__$1;
                      statearr_16625_16709[2] = null;
                      statearr_16625_16709[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16615 === 39) {
                        var state_16614__$1 = state_16614;
                        var statearr_16629_16710 = state_16614__$1;
                        statearr_16629_16710[2] = null;
                        statearr_16629_16710[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16615 === 4) {
                          var inst_16486 = state_16614[12];
                          var inst_16486__$1 = state_16614[2];
                          var inst_16487 = inst_16486__$1 == null;
                          var state_16614__$1 = function() {
                            var statearr_16630 = state_16614;
                            statearr_16630[12] = inst_16486__$1;
                            return statearr_16630;
                          }();
                          if (cljs.core.truth_(inst_16487)) {
                            var statearr_16631_16711 = state_16614__$1;
                            statearr_16631_16711[1] = 5;
                          } else {
                            var statearr_16632_16712 = state_16614__$1;
                            statearr_16632_16712[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16615 === 15) {
                            var inst_16497 = state_16614[13];
                            var inst_16498 = state_16614[15];
                            var inst_16496 = state_16614[16];
                            var inst_16495 = state_16614[17];
                            var inst_16511 = state_16614[2];
                            var inst_16512 = inst_16498 + 1;
                            var tmp16626 = inst_16497;
                            var tmp16627 = inst_16496;
                            var tmp16628 = inst_16495;
                            var inst_16495__$1 = tmp16628;
                            var inst_16496__$1 = tmp16627;
                            var inst_16497__$1 = tmp16626;
                            var inst_16498__$1 = inst_16512;
                            var state_16614__$1 = function() {
                              var statearr_16633 = state_16614;
                              statearr_16633[13] = inst_16497__$1;
                              statearr_16633[15] = inst_16498__$1;
                              statearr_16633[18] = inst_16511;
                              statearr_16633[16] = inst_16496__$1;
                              statearr_16633[17] = inst_16495__$1;
                              return statearr_16633;
                            }();
                            var statearr_16634_16713 = state_16614__$1;
                            statearr_16634_16713[2] = null;
                            statearr_16634_16713[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_16615 === 21) {
                              var inst_16536 = state_16614[2];
                              var state_16614__$1 = state_16614;
                              var statearr_16638_16714 = state_16614__$1;
                              statearr_16638_16714[2] = inst_16536;
                              statearr_16638_16714[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_16615 === 31) {
                                var inst_16562 = state_16614[9];
                                var inst_16566 = done.call(null, null);
                                var inst_16567 = cljs.core.async.untap_STAR_.call(null, m, inst_16562);
                                var state_16614__$1 = function() {
                                  var statearr_16639 = state_16614;
                                  statearr_16639[19] = inst_16566;
                                  return statearr_16639;
                                }();
                                var statearr_16640_16715 = state_16614__$1;
                                statearr_16640_16715[2] = inst_16567;
                                statearr_16640_16715[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16615 === 32) {
                                  var inst_16557 = state_16614[10];
                                  var inst_16555 = state_16614[11];
                                  var inst_16556 = state_16614[20];
                                  var inst_16554 = state_16614[21];
                                  var inst_16569 = state_16614[2];
                                  var inst_16570 = inst_16557 + 1;
                                  var tmp16635 = inst_16555;
                                  var tmp16636 = inst_16556;
                                  var tmp16637 = inst_16554;
                                  var inst_16554__$1 = tmp16637;
                                  var inst_16555__$1 = tmp16635;
                                  var inst_16556__$1 = tmp16636;
                                  var inst_16557__$1 = inst_16570;
                                  var state_16614__$1 = function() {
                                    var statearr_16641 = state_16614;
                                    statearr_16641[22] = inst_16569;
                                    statearr_16641[10] = inst_16557__$1;
                                    statearr_16641[11] = inst_16555__$1;
                                    statearr_16641[20] = inst_16556__$1;
                                    statearr_16641[21] = inst_16554__$1;
                                    return statearr_16641;
                                  }();
                                  var statearr_16642_16716 = state_16614__$1;
                                  statearr_16642_16716[2] = null;
                                  statearr_16642_16716[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_16615 === 40) {
                                    var inst_16582 = state_16614[23];
                                    var inst_16586 = done.call(null, null);
                                    var inst_16587 = cljs.core.async.untap_STAR_.call(null, m, inst_16582);
                                    var state_16614__$1 = function() {
                                      var statearr_16643 = state_16614;
                                      statearr_16643[24] = inst_16586;
                                      return statearr_16643;
                                    }();
                                    var statearr_16644_16717 = state_16614__$1;
                                    statearr_16644_16717[2] = inst_16587;
                                    statearr_16644_16717[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16615 === 33) {
                                      var inst_16573 = state_16614[25];
                                      var inst_16575 = cljs.core.chunked_seq_QMARK_.call(null, inst_16573);
                                      var state_16614__$1 = state_16614;
                                      if (inst_16575) {
                                        var statearr_16645_16718 = state_16614__$1;
                                        statearr_16645_16718[1] = 36;
                                      } else {
                                        var statearr_16646_16719 = state_16614__$1;
                                        statearr_16646_16719[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_16615 === 13) {
                                        var inst_16505 = state_16614[26];
                                        var inst_16508 = cljs.core.async.close_BANG_.call(null, inst_16505);
                                        var state_16614__$1 = state_16614;
                                        var statearr_16647_16720 = state_16614__$1;
                                        statearr_16647_16720[2] = inst_16508;
                                        statearr_16647_16720[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_16615 === 22) {
                                          var inst_16526 = state_16614[8];
                                          var inst_16529 = cljs.core.async.close_BANG_.call(null, inst_16526);
                                          var state_16614__$1 = state_16614;
                                          var statearr_16648_16721 = state_16614__$1;
                                          statearr_16648_16721[2] = inst_16529;
                                          statearr_16648_16721[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_16615 === 36) {
                                            var inst_16573 = state_16614[25];
                                            var inst_16577 = cljs.core.chunk_first.call(null, inst_16573);
                                            var inst_16578 = cljs.core.chunk_rest.call(null, inst_16573);
                                            var inst_16579 = cljs.core.count.call(null, inst_16577);
                                            var inst_16554 = inst_16578;
                                            var inst_16555 = inst_16577;
                                            var inst_16556 = inst_16579;
                                            var inst_16557 = 0;
                                            var state_16614__$1 = function() {
                                              var statearr_16649 = state_16614;
                                              statearr_16649[10] = inst_16557;
                                              statearr_16649[11] = inst_16555;
                                              statearr_16649[20] = inst_16556;
                                              statearr_16649[21] = inst_16554;
                                              return statearr_16649;
                                            }();
                                            var statearr_16650_16722 = state_16614__$1;
                                            statearr_16650_16722[2] = null;
                                            statearr_16650_16722[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_16615 === 41) {
                                              var inst_16573 = state_16614[25];
                                              var inst_16589 = state_16614[2];
                                              var inst_16590 = cljs.core.next.call(null, inst_16573);
                                              var inst_16554 = inst_16590;
                                              var inst_16555 = null;
                                              var inst_16556 = 0;
                                              var inst_16557 = 0;
                                              var state_16614__$1 = function() {
                                                var statearr_16651 = state_16614;
                                                statearr_16651[10] = inst_16557;
                                                statearr_16651[11] = inst_16555;
                                                statearr_16651[20] = inst_16556;
                                                statearr_16651[27] = inst_16589;
                                                statearr_16651[21] = inst_16554;
                                                return statearr_16651;
                                              }();
                                              var statearr_16652_16723 = state_16614__$1;
                                              statearr_16652_16723[2] = null;
                                              statearr_16652_16723[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_16615 === 43) {
                                                var state_16614__$1 = state_16614;
                                                var statearr_16653_16724 = state_16614__$1;
                                                statearr_16653_16724[2] = null;
                                                statearr_16653_16724[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_16615 === 29) {
                                                  var inst_16598 = state_16614[2];
                                                  var state_16614__$1 = state_16614;
                                                  var statearr_16654_16725 = state_16614__$1;
                                                  statearr_16654_16725[2] = inst_16598;
                                                  statearr_16654_16725[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_16615 === 44) {
                                                    var inst_16607 = state_16614[2];
                                                    var state_16614__$1 = function() {
                                                      var statearr_16655 = state_16614;
                                                      statearr_16655[28] = inst_16607;
                                                      return statearr_16655;
                                                    }();
                                                    var statearr_16656_16726 = state_16614__$1;
                                                    statearr_16656_16726[2] = null;
                                                    statearr_16656_16726[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_16615 === 6) {
                                                      var inst_16546 = state_16614[29];
                                                      var inst_16545 = cljs.core.deref.call(null, cs);
                                                      var inst_16546__$1 = cljs.core.keys.call(null, inst_16545);
                                                      var inst_16547 = cljs.core.count.call(null, inst_16546__$1);
                                                      var inst_16548 = cljs.core.reset_BANG_.call(null, dctr, inst_16547);
                                                      var inst_16553 = cljs.core.seq.call(null, inst_16546__$1);
                                                      var inst_16554 = inst_16553;
                                                      var inst_16555 = null;
                                                      var inst_16556 = 0;
                                                      var inst_16557 = 0;
                                                      var state_16614__$1 = function() {
                                                        var statearr_16657 = state_16614;
                                                        statearr_16657[10] = inst_16557;
                                                        statearr_16657[30] = inst_16548;
                                                        statearr_16657[11] = inst_16555;
                                                        statearr_16657[29] = inst_16546__$1;
                                                        statearr_16657[20] = inst_16556;
                                                        statearr_16657[21] = inst_16554;
                                                        return statearr_16657;
                                                      }();
                                                      var statearr_16658_16727 = state_16614__$1;
                                                      statearr_16658_16727[2] = null;
                                                      statearr_16658_16727[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_16615 === 28) {
                                                        var inst_16573 = state_16614[25];
                                                        var inst_16554 = state_16614[21];
                                                        var inst_16573__$1 = cljs.core.seq.call(null, inst_16554);
                                                        var state_16614__$1 = function() {
                                                          var statearr_16659 = state_16614;
                                                          statearr_16659[25] = inst_16573__$1;
                                                          return statearr_16659;
                                                        }();
                                                        if (inst_16573__$1) {
                                                          var statearr_16660_16728 = state_16614__$1;
                                                          statearr_16660_16728[1] = 33;
                                                        } else {
                                                          var statearr_16661_16729 = state_16614__$1;
                                                          statearr_16661_16729[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_16615 === 25) {
                                                          var inst_16557 = state_16614[10];
                                                          var inst_16556 = state_16614[20];
                                                          var inst_16559 = inst_16557 < inst_16556;
                                                          var inst_16560 = inst_16559;
                                                          var state_16614__$1 = state_16614;
                                                          if (cljs.core.truth_(inst_16560)) {
                                                            var statearr_16662_16730 = state_16614__$1;
                                                            statearr_16662_16730[1] = 27;
                                                          } else {
                                                            var statearr_16663_16731 = state_16614__$1;
                                                            statearr_16663_16731[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_16615 === 34) {
                                                            var state_16614__$1 = state_16614;
                                                            var statearr_16664_16732 = state_16614__$1;
                                                            statearr_16664_16732[2] = null;
                                                            statearr_16664_16732[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_16615 === 17) {
                                                              var state_16614__$1 = state_16614;
                                                              var statearr_16665_16733 = state_16614__$1;
                                                              statearr_16665_16733[2] = null;
                                                              statearr_16665_16733[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_16615 === 3) {
                                                                var inst_16612 = state_16614[2];
                                                                var state_16614__$1 = state_16614;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16614__$1, inst_16612);
                                                              } else {
                                                                if (state_val_16615 === 12) {
                                                                  var inst_16541 = state_16614[2];
                                                                  var state_16614__$1 = state_16614;
                                                                  var statearr_16666_16734 = state_16614__$1;
                                                                  statearr_16666_16734[2] = inst_16541;
                                                                  statearr_16666_16734[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_16615 === 2) {
                                                                    var state_16614__$1 = state_16614;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16614__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_16615 === 23) {
                                                                      var state_16614__$1 = state_16614;
                                                                      var statearr_16667_16735 = state_16614__$1;
                                                                      statearr_16667_16735[2] = null;
                                                                      statearr_16667_16735[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_16615 === 35) {
                                                                        var inst_16596 = state_16614[2];
                                                                        var state_16614__$1 = state_16614;
                                                                        var statearr_16668_16736 = state_16614__$1;
                                                                        statearr_16668_16736[2] = inst_16596;
                                                                        statearr_16668_16736[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_16615 === 19) {
                                                                          var inst_16515 = state_16614[7];
                                                                          var inst_16519 = cljs.core.chunk_first.call(null, inst_16515);
                                                                          var inst_16520 = cljs.core.chunk_rest.call(null, inst_16515);
                                                                          var inst_16521 = cljs.core.count.call(null, inst_16519);
                                                                          var inst_16495 = inst_16520;
                                                                          var inst_16496 = inst_16519;
                                                                          var inst_16497 = inst_16521;
                                                                          var inst_16498 = 0;
                                                                          var state_16614__$1 = function() {
                                                                            var statearr_16669 = state_16614;
                                                                            statearr_16669[13] = inst_16497;
                                                                            statearr_16669[15] = inst_16498;
                                                                            statearr_16669[16] = inst_16496;
                                                                            statearr_16669[17] = inst_16495;
                                                                            return statearr_16669;
                                                                          }();
                                                                          var statearr_16670_16737 = state_16614__$1;
                                                                          statearr_16670_16737[2] = null;
                                                                          statearr_16670_16737[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_16615 === 11) {
                                                                            var inst_16515 = state_16614[7];
                                                                            var inst_16495 = state_16614[17];
                                                                            var inst_16515__$1 = cljs.core.seq.call(null, inst_16495);
                                                                            var state_16614__$1 = function() {
                                                                              var statearr_16671 = state_16614;
                                                                              statearr_16671[7] = inst_16515__$1;
                                                                              return statearr_16671;
                                                                            }();
                                                                            if (inst_16515__$1) {
                                                                              var statearr_16672_16738 = state_16614__$1;
                                                                              statearr_16672_16738[1] = 16;
                                                                            } else {
                                                                              var statearr_16673_16739 = state_16614__$1;
                                                                              statearr_16673_16739[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_16615 === 9) {
                                                                              var inst_16543 = state_16614[2];
                                                                              var state_16614__$1 = state_16614;
                                                                              var statearr_16674_16740 = state_16614__$1;
                                                                              statearr_16674_16740[2] = inst_16543;
                                                                              statearr_16674_16740[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_16615 === 5) {
                                                                                var inst_16493 = cljs.core.deref.call(null, cs);
                                                                                var inst_16494 = cljs.core.seq.call(null, inst_16493);
                                                                                var inst_16495 = inst_16494;
                                                                                var inst_16496 = null;
                                                                                var inst_16497 = 0;
                                                                                var inst_16498 = 0;
                                                                                var state_16614__$1 = function() {
                                                                                  var statearr_16675 = state_16614;
                                                                                  statearr_16675[13] = inst_16497;
                                                                                  statearr_16675[15] = inst_16498;
                                                                                  statearr_16675[16] = inst_16496;
                                                                                  statearr_16675[17] = inst_16495;
                                                                                  return statearr_16675;
                                                                                }();
                                                                                var statearr_16676_16741 = state_16614__$1;
                                                                                statearr_16676_16741[2] = null;
                                                                                statearr_16676_16741[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_16615 === 14) {
                                                                                  var state_16614__$1 = state_16614;
                                                                                  var statearr_16677_16742 = state_16614__$1;
                                                                                  statearr_16677_16742[2] = null;
                                                                                  statearr_16677_16742[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_16615 === 45) {
                                                                                    var inst_16604 = state_16614[2];
                                                                                    var state_16614__$1 = state_16614;
                                                                                    var statearr_16678_16743 = state_16614__$1;
                                                                                    statearr_16678_16743[2] = inst_16604;
                                                                                    statearr_16678_16743[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_16615 === 26) {
                                                                                      var inst_16546 = state_16614[29];
                                                                                      var inst_16600 = state_16614[2];
                                                                                      var inst_16601 = cljs.core.seq.call(null, inst_16546);
                                                                                      var state_16614__$1 = function() {
                                                                                        var statearr_16679 = state_16614;
                                                                                        statearr_16679[31] = inst_16600;
                                                                                        return statearr_16679;
                                                                                      }();
                                                                                      if (inst_16601) {
                                                                                        var statearr_16680_16744 = state_16614__$1;
                                                                                        statearr_16680_16744[1] = 42;
                                                                                      } else {
                                                                                        var statearr_16681_16745 = state_16614__$1;
                                                                                        statearr_16681_16745[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_16615 === 16) {
                                                                                        var inst_16515 = state_16614[7];
                                                                                        var inst_16517 = cljs.core.chunked_seq_QMARK_.call(null, inst_16515);
                                                                                        var state_16614__$1 = state_16614;
                                                                                        if (inst_16517) {
                                                                                          var statearr_16682_16746 = state_16614__$1;
                                                                                          statearr_16682_16746[1] = 19;
                                                                                        } else {
                                                                                          var statearr_16683_16747 = state_16614__$1;
                                                                                          statearr_16683_16747[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_16615 === 38) {
                                                                                          var inst_16593 = state_16614[2];
                                                                                          var state_16614__$1 = state_16614;
                                                                                          var statearr_16684_16748 = state_16614__$1;
                                                                                          statearr_16684_16748[2] = inst_16593;
                                                                                          statearr_16684_16748[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_16615 === 30) {
                                                                                            var state_16614__$1 = state_16614;
                                                                                            var statearr_16685_16749 = state_16614__$1;
                                                                                            statearr_16685_16749[2] = null;
                                                                                            statearr_16685_16749[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_16615 === 10) {
                                                                                              var inst_16498 = state_16614[15];
                                                                                              var inst_16496 = state_16614[16];
                                                                                              var inst_16504 = cljs.core._nth.call(null, inst_16496, inst_16498);
                                                                                              var inst_16505 = cljs.core.nth.call(null, inst_16504, 0, null);
                                                                                              var inst_16506 = cljs.core.nth.call(null, inst_16504, 1, null);
                                                                                              var state_16614__$1 = function() {
                                                                                                var statearr_16686 = state_16614;
                                                                                                statearr_16686[26] = inst_16505;
                                                                                                return statearr_16686;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_16506)) {
                                                                                                var statearr_16687_16750 = state_16614__$1;
                                                                                                statearr_16687_16750[1] = 13;
                                                                                              } else {
                                                                                                var statearr_16688_16751 = state_16614__$1;
                                                                                                statearr_16688_16751[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_16615 === 18) {
                                                                                                var inst_16539 = state_16614[2];
                                                                                                var state_16614__$1 = state_16614;
                                                                                                var statearr_16689_16752 = state_16614__$1;
                                                                                                statearr_16689_16752[2] = inst_16539;
                                                                                                statearr_16689_16752[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_16615 === 42) {
                                                                                                  var state_16614__$1 = state_16614;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16614__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_16615 === 37) {
                                                                                                    var inst_16582 = state_16614[23];
                                                                                                    var inst_16486 = state_16614[12];
                                                                                                    var inst_16573 = state_16614[25];
                                                                                                    var inst_16582__$1 = cljs.core.first.call(null, inst_16573);
                                                                                                    var inst_16583 = cljs.core.async.put_BANG_.call(null, inst_16582__$1, inst_16486, done);
                                                                                                    var state_16614__$1 = function() {
                                                                                                      var statearr_16690 = state_16614;
                                                                                                      statearr_16690[23] = inst_16582__$1;
                                                                                                      return statearr_16690;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_16583)) {
                                                                                                      var statearr_16691_16753 = state_16614__$1;
                                                                                                      statearr_16691_16753[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_16692_16754 = state_16614__$1;
                                                                                                      statearr_16692_16754[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_16615 === 8) {
                                                                                                      var inst_16497 = state_16614[13];
                                                                                                      var inst_16498 = state_16614[15];
                                                                                                      var inst_16500 = inst_16498 < inst_16497;
                                                                                                      var inst_16501 = inst_16500;
                                                                                                      var state_16614__$1 = state_16614;
                                                                                                      if (cljs.core.truth_(inst_16501)) {
                                                                                                        var statearr_16693_16755 = state_16614__$1;
                                                                                                        statearr_16693_16755[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_16694_16756 = state_16614__$1;
                                                                                                        statearr_16694_16756[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___16702, cs, m, dchan, dctr, done);
        return function(switch__8658__auto__, c__8720__auto___16702, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__8659__auto__ = null;
            var cljs$core$async$mult_$_state_machine__8659__auto____0 = function() {
              var statearr_16698 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_16698[0] = cljs$core$async$mult_$_state_machine__8659__auto__;
              statearr_16698[1] = 1;
              return statearr_16698;
            };
            var cljs$core$async$mult_$_state_machine__8659__auto____1 = function(state_16614) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_16614);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e16699) {
                    if (e16699 instanceof Object) {
                      var ex__8662__auto__ = e16699;
                      var statearr_16700_16757 = state_16614;
                      statearr_16700_16757[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16614);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16699;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16758 = state_16614;
                  state_16614 = G__16758;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__8659__auto__ = function(state_16614) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__8659__auto____1.call(this, state_16614);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mult_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__8659__auto____0;
            cljs$core$async$mult_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__8659__auto____1;
            return cljs$core$async$mult_$_state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___16702, cs, m, dchan, dctr, done);
      }();
      var state__8722__auto__ = function() {
        var statearr_16701 = f__8721__auto__.call(null);
        statearr_16701[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___16702;
        return statearr_16701;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___16702, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function cljs$core$async$tap() {
  var G__16760 = arguments.length;
  switch(G__16760) {
    case 2:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = function(mult, ch) {
  return cljs.core.async.tap.call(null, mult, ch, true);
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = function(mult, ch, close_QMARK_) {
  cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
  return ch;
};
cljs.core.async.tap.cljs$lang$maxFixedArity = 3;
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj16763 = {};
  return obj16763;
}();
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (function() {
    var and__4295__auto__ = m;
    if (and__4295__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4943__auto__ = m == null ? null : m;
    return function() {
      var or__4307__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (function() {
    var and__4295__auto__ = m;
    if (and__4295__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4943__auto__ = m == null ? null : m;
    return function() {
      var or__4307__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (function() {
    var and__4295__auto__ = m;
    if (and__4295__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4943__auto__ = m == null ? null : m;
    return function() {
      var or__4307__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (function() {
    var and__4295__auto__ = m;
    if (and__4295__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4943__auto__ = m == null ? null : m;
    return function() {
      var or__4307__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (function() {
    var and__4295__auto__ = m;
    if (and__4295__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4943__auto__ = m == null ? null : m;
    return function() {
      var or__4307__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function cljs$core$async$ioc_alts_BANG_() {
  var argseq__5347__auto__ = 3 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0) : null;
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5347__auto__);
};
cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(state, cont_block, ports, p__16768) {
  var map__16769 = p__16768;
  var map__16769__$1 = cljs.core.seq_QMARK_.call(null, map__16769) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16769) : map__16769;
  var opts = map__16769__$1;
  var statearr_16770_16773 = state;
  statearr_16770_16773[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
  var temp__4423__auto__ = cljs.core.async.do_alts.call(null, function(map__16769, map__16769__$1, opts) {
    return function(val) {
      var statearr_16771_16774 = state;
      statearr_16771_16774[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    };
  }(map__16769, map__16769__$1, opts), ports, opts);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var cb = temp__4423__auto__;
    var statearr_16772_16775 = state;
    statearr_16772_16775[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = function(seq16764) {
  var G__16765 = cljs.core.first.call(null, seq16764);
  var seq16764__$1 = cljs.core.next.call(null, seq16764);
  var G__16766 = cljs.core.first.call(null, seq16764__$1);
  var seq16764__$2 = cljs.core.next.call(null, seq16764__$1);
  var G__16767 = cljs.core.first.call(null, seq16764__$2);
  var seq16764__$3 = cljs.core.next.call(null, seq16764__$2);
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__16765, G__16766, G__16767, seq16764__$3);
};
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t16895 !== "undefined") {
    } else {
      cljs.core.async.t16895 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta16896) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta16896 = meta16896;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t16895.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_16897, meta16896__$1) {
          var self__ = this;
          var _16897__$1 = this;
          return new cljs.core.async.t16895(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta16896__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16895.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_16897) {
          var self__ = this;
          var _16897__$1 = this;
          return self__.meta16896;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16895.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t16895.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16895.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t16895.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16895.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16895.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16895.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16895.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16895.getBasis = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function() {
          return new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "change", "change", 477485025, null), new cljs.core.Symbol(null, "mix", "mix", 2121373763, null), new cljs.core.Symbol(null, "solo-mode", "solo-mode", 2031788074, null), new cljs.core.Symbol(null, "pick", "pick", 1300068175, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "calc-state", "calc-state", -349968968, null), new cljs.core.Symbol(null, 
          "out", "out", 729986010, null), new cljs.core.Symbol(null, "changed", "changed", -2083710852, null), new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "attrs", "attrs", -450137186, null), new cljs.core.Symbol(null, "meta16896", "meta16896", -1262617974, null)], null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16895.cljs$lang$type = true;
      cljs.core.async.t16895.cljs$lang$ctorStr = "cljs.core.async/t16895";
      cljs.core.async.t16895.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
          return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async/t16895");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t16895 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t16895(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta16896) {
          return new cljs.core.async.t16895(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta16896);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t16895(change, cljs$core$async$mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__8720__auto___17014 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___17014, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___17014, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_16967) {
            var state_val_16968 = state_16967[1];
            if (state_val_16968 === 7) {
              var inst_16911 = state_16967[7];
              var inst_16916 = cljs.core.apply.call(null, cljs.core.hash_map, inst_16911);
              var state_16967__$1 = state_16967;
              var statearr_16969_17015 = state_16967__$1;
              statearr_16969_17015[2] = inst_16916;
              statearr_16969_17015[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16968 === 20) {
                var inst_16926 = state_16967[8];
                var state_16967__$1 = state_16967;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16967__$1, 23, out, inst_16926);
              } else {
                if (state_val_16968 === 1) {
                  var inst_16901 = state_16967[9];
                  var inst_16901__$1 = calc_state.call(null);
                  var inst_16902 = cljs.core.seq_QMARK_.call(null, inst_16901__$1);
                  var state_16967__$1 = function() {
                    var statearr_16970 = state_16967;
                    statearr_16970[9] = inst_16901__$1;
                    return statearr_16970;
                  }();
                  if (inst_16902) {
                    var statearr_16971_17016 = state_16967__$1;
                    statearr_16971_17016[1] = 2;
                  } else {
                    var statearr_16972_17017 = state_16967__$1;
                    statearr_16972_17017[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16968 === 24) {
                    var inst_16919 = state_16967[10];
                    var inst_16911 = inst_16919;
                    var state_16967__$1 = function() {
                      var statearr_16973 = state_16967;
                      statearr_16973[7] = inst_16911;
                      return statearr_16973;
                    }();
                    var statearr_16974_17018 = state_16967__$1;
                    statearr_16974_17018[2] = null;
                    statearr_16974_17018[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16968 === 4) {
                      var inst_16901 = state_16967[9];
                      var inst_16907 = state_16967[2];
                      var inst_16908 = cljs.core.get.call(null, inst_16907, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_16909 = cljs.core.get.call(null, inst_16907, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_16910 = cljs.core.get.call(null, inst_16907, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_16911 = inst_16901;
                      var state_16967__$1 = function() {
                        var statearr_16975 = state_16967;
                        statearr_16975[7] = inst_16911;
                        statearr_16975[11] = inst_16909;
                        statearr_16975[12] = inst_16910;
                        statearr_16975[13] = inst_16908;
                        return statearr_16975;
                      }();
                      var statearr_16976_17019 = state_16967__$1;
                      statearr_16976_17019[2] = null;
                      statearr_16976_17019[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16968 === 15) {
                        var state_16967__$1 = state_16967;
                        var statearr_16977_17020 = state_16967__$1;
                        statearr_16977_17020[2] = null;
                        statearr_16977_17020[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16968 === 21) {
                          var inst_16919 = state_16967[10];
                          var inst_16911 = inst_16919;
                          var state_16967__$1 = function() {
                            var statearr_16978 = state_16967;
                            statearr_16978[7] = inst_16911;
                            return statearr_16978;
                          }();
                          var statearr_16979_17021 = state_16967__$1;
                          statearr_16979_17021[2] = null;
                          statearr_16979_17021[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16968 === 13) {
                            var inst_16963 = state_16967[2];
                            var state_16967__$1 = state_16967;
                            var statearr_16980_17022 = state_16967__$1;
                            statearr_16980_17022[2] = inst_16963;
                            statearr_16980_17022[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_16968 === 22) {
                              var inst_16961 = state_16967[2];
                              var state_16967__$1 = state_16967;
                              var statearr_16981_17023 = state_16967__$1;
                              statearr_16981_17023[2] = inst_16961;
                              statearr_16981_17023[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_16968 === 6) {
                                var inst_16965 = state_16967[2];
                                var state_16967__$1 = state_16967;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16967__$1, inst_16965);
                              } else {
                                if (state_val_16968 === 25) {
                                  var state_16967__$1 = state_16967;
                                  var statearr_16982_17024 = state_16967__$1;
                                  statearr_16982_17024[2] = null;
                                  statearr_16982_17024[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_16968 === 17) {
                                    var inst_16941 = state_16967[14];
                                    var state_16967__$1 = state_16967;
                                    var statearr_16983_17025 = state_16967__$1;
                                    statearr_16983_17025[2] = inst_16941;
                                    statearr_16983_17025[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16968 === 3) {
                                      var inst_16901 = state_16967[9];
                                      var state_16967__$1 = state_16967;
                                      var statearr_16984_17026 = state_16967__$1;
                                      statearr_16984_17026[2] = inst_16901;
                                      statearr_16984_17026[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_16968 === 12) {
                                        var inst_16927 = state_16967[15];
                                        var inst_16941 = state_16967[14];
                                        var inst_16920 = state_16967[16];
                                        var inst_16941__$1 = inst_16920.call(null, inst_16927);
                                        var state_16967__$1 = function() {
                                          var statearr_16985 = state_16967;
                                          statearr_16985[14] = inst_16941__$1;
                                          return statearr_16985;
                                        }();
                                        if (cljs.core.truth_(inst_16941__$1)) {
                                          var statearr_16986_17027 = state_16967__$1;
                                          statearr_16986_17027[1] = 17;
                                        } else {
                                          var statearr_16987_17028 = state_16967__$1;
                                          statearr_16987_17028[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_16968 === 2) {
                                          var inst_16901 = state_16967[9];
                                          var inst_16904 = cljs.core.apply.call(null, cljs.core.hash_map, inst_16901);
                                          var state_16967__$1 = state_16967;
                                          var statearr_16988_17029 = state_16967__$1;
                                          statearr_16988_17029[2] = inst_16904;
                                          statearr_16988_17029[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_16968 === 23) {
                                            var inst_16952 = state_16967[2];
                                            var state_16967__$1 = state_16967;
                                            if (cljs.core.truth_(inst_16952)) {
                                              var statearr_16989_17030 = state_16967__$1;
                                              statearr_16989_17030[1] = 24;
                                            } else {
                                              var statearr_16990_17031 = state_16967__$1;
                                              statearr_16990_17031[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_16968 === 19) {
                                              var inst_16949 = state_16967[2];
                                              var state_16967__$1 = state_16967;
                                              if (cljs.core.truth_(inst_16949)) {
                                                var statearr_16991_17032 = state_16967__$1;
                                                statearr_16991_17032[1] = 20;
                                              } else {
                                                var statearr_16992_17033 = state_16967__$1;
                                                statearr_16992_17033[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_16968 === 11) {
                                                var inst_16926 = state_16967[8];
                                                var inst_16932 = inst_16926 == null;
                                                var state_16967__$1 = state_16967;
                                                if (cljs.core.truth_(inst_16932)) {
                                                  var statearr_16993_17034 = state_16967__$1;
                                                  statearr_16993_17034[1] = 14;
                                                } else {
                                                  var statearr_16994_17035 = state_16967__$1;
                                                  statearr_16994_17035[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_16968 === 9) {
                                                  var inst_16919 = state_16967[10];
                                                  var inst_16919__$1 = state_16967[2];
                                                  var inst_16920 = cljs.core.get.call(null, inst_16919__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var inst_16921 = cljs.core.get.call(null, inst_16919__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_16922 = cljs.core.get.call(null, inst_16919__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var state_16967__$1 = function() {
                                                    var statearr_16995 = state_16967;
                                                    statearr_16995[10] = inst_16919__$1;
                                                    statearr_16995[17] = inst_16921;
                                                    statearr_16995[16] = inst_16920;
                                                    return statearr_16995;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_16967__$1, 10, inst_16922);
                                                } else {
                                                  if (state_val_16968 === 5) {
                                                    var inst_16911 = state_16967[7];
                                                    var inst_16914 = cljs.core.seq_QMARK_.call(null, inst_16911);
                                                    var state_16967__$1 = state_16967;
                                                    if (inst_16914) {
                                                      var statearr_16996_17036 = state_16967__$1;
                                                      statearr_16996_17036[1] = 7;
                                                    } else {
                                                      var statearr_16997_17037 = state_16967__$1;
                                                      statearr_16997_17037[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_16968 === 14) {
                                                      var inst_16927 = state_16967[15];
                                                      var inst_16934 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_16927);
                                                      var state_16967__$1 = state_16967;
                                                      var statearr_16998_17038 = state_16967__$1;
                                                      statearr_16998_17038[2] = inst_16934;
                                                      statearr_16998_17038[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_16968 === 26) {
                                                        var inst_16957 = state_16967[2];
                                                        var state_16967__$1 = state_16967;
                                                        var statearr_16999_17039 = state_16967__$1;
                                                        statearr_16999_17039[2] = inst_16957;
                                                        statearr_16999_17039[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_16968 === 16) {
                                                          var inst_16937 = state_16967[2];
                                                          var inst_16938 = calc_state.call(null);
                                                          var inst_16911 = inst_16938;
                                                          var state_16967__$1 = function() {
                                                            var statearr_17000 = state_16967;
                                                            statearr_17000[18] = inst_16937;
                                                            statearr_17000[7] = inst_16911;
                                                            return statearr_17000;
                                                          }();
                                                          var statearr_17001_17040 = state_16967__$1;
                                                          statearr_17001_17040[2] = null;
                                                          statearr_17001_17040[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_16968 === 10) {
                                                            var inst_16926 = state_16967[8];
                                                            var inst_16927 = state_16967[15];
                                                            var inst_16925 = state_16967[2];
                                                            var inst_16926__$1 = cljs.core.nth.call(null, inst_16925, 0, null);
                                                            var inst_16927__$1 = cljs.core.nth.call(null, inst_16925, 1, null);
                                                            var inst_16928 = inst_16926__$1 == null;
                                                            var inst_16929 = cljs.core._EQ_.call(null, inst_16927__$1, change);
                                                            var inst_16930 = inst_16928 || inst_16929;
                                                            var state_16967__$1 = function() {
                                                              var statearr_17002 = state_16967;
                                                              statearr_17002[8] = inst_16926__$1;
                                                              statearr_17002[15] = inst_16927__$1;
                                                              return statearr_17002;
                                                            }();
                                                            if (cljs.core.truth_(inst_16930)) {
                                                              var statearr_17003_17041 = state_16967__$1;
                                                              statearr_17003_17041[1] = 11;
                                                            } else {
                                                              var statearr_17004_17042 = state_16967__$1;
                                                              statearr_17004_17042[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_16968 === 18) {
                                                              var inst_16927 = state_16967[15];
                                                              var inst_16921 = state_16967[17];
                                                              var inst_16920 = state_16967[16];
                                                              var inst_16944 = cljs.core.empty_QMARK_.call(null, inst_16920);
                                                              var inst_16945 = inst_16921.call(null, inst_16927);
                                                              var inst_16946 = cljs.core.not.call(null, inst_16945);
                                                              var inst_16947 = inst_16944 && inst_16946;
                                                              var state_16967__$1 = state_16967;
                                                              var statearr_17005_17043 = state_16967__$1;
                                                              statearr_17005_17043[2] = inst_16947;
                                                              statearr_17005_17043[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_16968 === 8) {
                                                                var inst_16911 = state_16967[7];
                                                                var state_16967__$1 = state_16967;
                                                                var statearr_17006_17044 = state_16967__$1;
                                                                statearr_17006_17044[2] = inst_16911;
                                                                statearr_17006_17044[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___17014, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__8658__auto__, c__8720__auto___17014, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__8659__auto__ = null;
            var cljs$core$async$mix_$_state_machine__8659__auto____0 = function() {
              var statearr_17010 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17010[0] = cljs$core$async$mix_$_state_machine__8659__auto__;
              statearr_17010[1] = 1;
              return statearr_17010;
            };
            var cljs$core$async$mix_$_state_machine__8659__auto____1 = function(state_16967) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_16967);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e17011) {
                    if (e17011 instanceof Object) {
                      var ex__8662__auto__ = e17011;
                      var statearr_17012_17045 = state_16967;
                      statearr_17012_17045[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16967);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17011;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17046 = state_16967;
                  state_16967 = G__17046;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__8659__auto__ = function(state_16967) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__8659__auto____1.call(this, state_16967);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mix_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__8659__auto____0;
            cljs$core$async$mix_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__8659__auto____1;
            return cljs$core$async$mix_$_state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___17014, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__8722__auto__ = function() {
        var statearr_17013 = f__8721__auto__.call(null);
        statearr_17013[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___17014;
        return statearr_17013;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___17014, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj17048 = {};
  return obj17048;
}();
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__4295__auto__ = p;
    if (and__4295__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4943__auto__ = p == null ? null : p;
    return function() {
      var or__4307__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (function() {
    var and__4295__auto__ = p;
    if (and__4295__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4943__auto__ = p == null ? null : p;
    return function() {
      var or__4307__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function cljs$core$async$unsub_all_STAR_() {
  var G__17050 = arguments.length;
  switch(G__17050) {
    case 1:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = function(p) {
  if (function() {
    var and__4295__auto__ = p;
    if (and__4295__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
  } else {
    var x__4943__auto__ = p == null ? null : p;
    return function() {
      var or__4307__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = function(p, v) {
  if (function() {
    var and__4295__auto__ = p;
    if (and__4295__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
  } else {
    var x__4943__auto__ = p == null ? null : p;
    return function() {
      var or__4307__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p, v);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.async.pub = function cljs$core$async$pub() {
  var G__17054 = arguments.length;
  switch(G__17054) {
    case 2:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = function(ch, topic_fn) {
  return cljs.core.async.pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = function(ch, topic_fn, buf_fn) {
  var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ensure_mult = function(mults) {
    return function(topic) {
      var or__4307__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__4307__auto__, mults) {
          return function(p1__17052_SHARP_) {
            if (cljs.core.truth_(p1__17052_SHARP_.call(null, topic))) {
              return p1__17052_SHARP_;
            } else {
              return cljs.core.assoc.call(null, p1__17052_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
            }
          };
        }(or__4307__auto__, mults)), topic);
      }
    };
  }(mults);
  var p = function() {
    if (typeof cljs.core.async.t17055 !== "undefined") {
    } else {
      cljs.core.async.t17055 = function(ch, topic_fn, buf_fn, mults, ensure_mult, meta17056) {
        this.ch = ch;
        this.topic_fn = topic_fn;
        this.buf_fn = buf_fn;
        this.mults = mults;
        this.ensure_mult = ensure_mult;
        this.meta17056 = meta17056;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t17055.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
        return function(_17057, meta17056__$1) {
          var self__ = this;
          var _17057__$1 = this;
          return new cljs.core.async.t17055(self__.ch, self__.topic_fn, self__.buf_fn, self__.mults, self__.ensure_mult, meta17056__$1);
        };
      }(mults, ensure_mult);
      cljs.core.async.t17055.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
        return function(_17057) {
          var self__ = this;
          var _17057__$1 = this;
          return self__.meta17056;
        };
      }(mults, ensure_mult);
      cljs.core.async.t17055.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t17055.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(mults, ensure_mult);
      cljs.core.async.t17055.prototype.cljs$core$async$Pub$ = true;
      cljs.core.async.t17055.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1, close_QMARK_) {
          var self__ = this;
          var p__$1 = this;
          var m = self__.ensure_mult.call(null, topic);
          return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
        };
      }(mults, ensure_mult);
      cljs.core.async.t17055.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1) {
          var self__ = this;
          var p__$1 = this;
          var temp__4423__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
          if (cljs.core.truth_(temp__4423__auto__)) {
            var m = temp__4423__auto__;
            return cljs.core.async.untap.call(null, m, ch__$1);
          } else {
            return null;
          }
        };
      }(mults, ensure_mult);
      cljs.core.async.t17055.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
        };
      }(mults, ensure_mult);
      cljs.core.async.t17055.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
        return function(_, topic) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
        };
      }(mults, ensure_mult);
      cljs.core.async.t17055.getBasis = function(mults, ensure_mult) {
        return function() {
          return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "topic-fn", "topic-fn", -862449736, null), new cljs.core.Symbol(null, "buf-fn", "buf-fn", -1200281591, null), new cljs.core.Symbol(null, "mults", "mults", -461114485, null), new cljs.core.Symbol(null, "ensure-mult", "ensure-mult", 1796584816, null), new cljs.core.Symbol(null, "meta17056", "meta17056", 77139230, null)], 
          null);
        };
      }(mults, ensure_mult);
      cljs.core.async.t17055.cljs$lang$type = true;
      cljs.core.async.t17055.cljs$lang$ctorStr = "cljs.core.async/t17055";
      cljs.core.async.t17055.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
        return function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
          return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async/t17055");
        };
      }(mults, ensure_mult);
      cljs.core.async.__GT_t17055 = function(mults, ensure_mult) {
        return function cljs$core$async$__GT_t17055(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta17056) {
          return new cljs.core.async.t17055(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta17056);
        };
      }(mults, ensure_mult);
    }
    return new cljs.core.async.t17055(ch, topic_fn, buf_fn, mults, ensure_mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__8720__auto___17178 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___17178, mults, ensure_mult, p) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___17178, mults, ensure_mult, p) {
          return function(state_17129) {
            var state_val_17130 = state_17129[1];
            if (state_val_17130 === 7) {
              var inst_17125 = state_17129[2];
              var state_17129__$1 = state_17129;
              var statearr_17131_17179 = state_17129__$1;
              statearr_17131_17179[2] = inst_17125;
              statearr_17131_17179[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17130 === 20) {
                var state_17129__$1 = state_17129;
                var statearr_17132_17180 = state_17129__$1;
                statearr_17132_17180[2] = null;
                statearr_17132_17180[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17130 === 1) {
                  var state_17129__$1 = state_17129;
                  var statearr_17133_17181 = state_17129__$1;
                  statearr_17133_17181[2] = null;
                  statearr_17133_17181[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17130 === 24) {
                    var inst_17108 = state_17129[7];
                    var inst_17117 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_17108);
                    var state_17129__$1 = state_17129;
                    var statearr_17134_17182 = state_17129__$1;
                    statearr_17134_17182[2] = inst_17117;
                    statearr_17134_17182[1] = 25;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17130 === 4) {
                      var inst_17060 = state_17129[8];
                      var inst_17060__$1 = state_17129[2];
                      var inst_17061 = inst_17060__$1 == null;
                      var state_17129__$1 = function() {
                        var statearr_17135 = state_17129;
                        statearr_17135[8] = inst_17060__$1;
                        return statearr_17135;
                      }();
                      if (cljs.core.truth_(inst_17061)) {
                        var statearr_17136_17183 = state_17129__$1;
                        statearr_17136_17183[1] = 5;
                      } else {
                        var statearr_17137_17184 = state_17129__$1;
                        statearr_17137_17184[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17130 === 15) {
                        var inst_17102 = state_17129[2];
                        var state_17129__$1 = state_17129;
                        var statearr_17138_17185 = state_17129__$1;
                        statearr_17138_17185[2] = inst_17102;
                        statearr_17138_17185[1] = 12;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17130 === 21) {
                          var inst_17122 = state_17129[2];
                          var state_17129__$1 = function() {
                            var statearr_17139 = state_17129;
                            statearr_17139[9] = inst_17122;
                            return statearr_17139;
                          }();
                          var statearr_17140_17186 = state_17129__$1;
                          statearr_17140_17186[2] = null;
                          statearr_17140_17186[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17130 === 13) {
                            var inst_17084 = state_17129[10];
                            var inst_17086 = cljs.core.chunked_seq_QMARK_.call(null, inst_17084);
                            var state_17129__$1 = state_17129;
                            if (inst_17086) {
                              var statearr_17141_17187 = state_17129__$1;
                              statearr_17141_17187[1] = 16;
                            } else {
                              var statearr_17142_17188 = state_17129__$1;
                              statearr_17142_17188[1] = 17;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17130 === 22) {
                              var inst_17114 = state_17129[2];
                              var state_17129__$1 = state_17129;
                              if (cljs.core.truth_(inst_17114)) {
                                var statearr_17143_17189 = state_17129__$1;
                                statearr_17143_17189[1] = 23;
                              } else {
                                var statearr_17144_17190 = state_17129__$1;
                                statearr_17144_17190[1] = 24;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17130 === 6) {
                                var inst_17110 = state_17129[11];
                                var inst_17060 = state_17129[8];
                                var inst_17108 = state_17129[7];
                                var inst_17108__$1 = topic_fn.call(null, inst_17060);
                                var inst_17109 = cljs.core.deref.call(null, mults);
                                var inst_17110__$1 = cljs.core.get.call(null, inst_17109, inst_17108__$1);
                                var state_17129__$1 = function() {
                                  var statearr_17145 = state_17129;
                                  statearr_17145[11] = inst_17110__$1;
                                  statearr_17145[7] = inst_17108__$1;
                                  return statearr_17145;
                                }();
                                if (cljs.core.truth_(inst_17110__$1)) {
                                  var statearr_17146_17191 = state_17129__$1;
                                  statearr_17146_17191[1] = 19;
                                } else {
                                  var statearr_17147_17192 = state_17129__$1;
                                  statearr_17147_17192[1] = 20;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17130 === 25) {
                                  var inst_17119 = state_17129[2];
                                  var state_17129__$1 = state_17129;
                                  var statearr_17148_17193 = state_17129__$1;
                                  statearr_17148_17193[2] = inst_17119;
                                  statearr_17148_17193[1] = 21;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17130 === 17) {
                                    var inst_17084 = state_17129[10];
                                    var inst_17093 = cljs.core.first.call(null, inst_17084);
                                    var inst_17094 = cljs.core.async.muxch_STAR_.call(null, inst_17093);
                                    var inst_17095 = cljs.core.async.close_BANG_.call(null, inst_17094);
                                    var inst_17096 = cljs.core.next.call(null, inst_17084);
                                    var inst_17070 = inst_17096;
                                    var inst_17071 = null;
                                    var inst_17072 = 0;
                                    var inst_17073 = 0;
                                    var state_17129__$1 = function() {
                                      var statearr_17149 = state_17129;
                                      statearr_17149[12] = inst_17073;
                                      statearr_17149[13] = inst_17095;
                                      statearr_17149[14] = inst_17072;
                                      statearr_17149[15] = inst_17071;
                                      statearr_17149[16] = inst_17070;
                                      return statearr_17149;
                                    }();
                                    var statearr_17150_17194 = state_17129__$1;
                                    statearr_17150_17194[2] = null;
                                    statearr_17150_17194[1] = 8;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17130 === 3) {
                                      var inst_17127 = state_17129[2];
                                      var state_17129__$1 = state_17129;
                                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17129__$1, inst_17127);
                                    } else {
                                      if (state_val_17130 === 12) {
                                        var inst_17104 = state_17129[2];
                                        var state_17129__$1 = state_17129;
                                        var statearr_17151_17195 = state_17129__$1;
                                        statearr_17151_17195[2] = inst_17104;
                                        statearr_17151_17195[1] = 9;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17130 === 2) {
                                          var state_17129__$1 = state_17129;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17129__$1, 4, ch);
                                        } else {
                                          if (state_val_17130 === 23) {
                                            var state_17129__$1 = state_17129;
                                            var statearr_17152_17196 = state_17129__$1;
                                            statearr_17152_17196[2] = null;
                                            statearr_17152_17196[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_17130 === 19) {
                                              var inst_17110 = state_17129[11];
                                              var inst_17060 = state_17129[8];
                                              var inst_17112 = cljs.core.async.muxch_STAR_.call(null, inst_17110);
                                              var state_17129__$1 = state_17129;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17129__$1, 22, inst_17112, inst_17060);
                                            } else {
                                              if (state_val_17130 === 11) {
                                                var inst_17084 = state_17129[10];
                                                var inst_17070 = state_17129[16];
                                                var inst_17084__$1 = cljs.core.seq.call(null, inst_17070);
                                                var state_17129__$1 = function() {
                                                  var statearr_17153 = state_17129;
                                                  statearr_17153[10] = inst_17084__$1;
                                                  return statearr_17153;
                                                }();
                                                if (inst_17084__$1) {
                                                  var statearr_17154_17197 = state_17129__$1;
                                                  statearr_17154_17197[1] = 13;
                                                } else {
                                                  var statearr_17155_17198 = state_17129__$1;
                                                  statearr_17155_17198[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_17130 === 9) {
                                                  var inst_17106 = state_17129[2];
                                                  var state_17129__$1 = state_17129;
                                                  var statearr_17156_17199 = state_17129__$1;
                                                  statearr_17156_17199[2] = inst_17106;
                                                  statearr_17156_17199[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_17130 === 5) {
                                                    var inst_17067 = cljs.core.deref.call(null, mults);
                                                    var inst_17068 = cljs.core.vals.call(null, inst_17067);
                                                    var inst_17069 = cljs.core.seq.call(null, inst_17068);
                                                    var inst_17070 = inst_17069;
                                                    var inst_17071 = null;
                                                    var inst_17072 = 0;
                                                    var inst_17073 = 0;
                                                    var state_17129__$1 = function() {
                                                      var statearr_17157 = state_17129;
                                                      statearr_17157[12] = inst_17073;
                                                      statearr_17157[14] = inst_17072;
                                                      statearr_17157[15] = inst_17071;
                                                      statearr_17157[16] = inst_17070;
                                                      return statearr_17157;
                                                    }();
                                                    var statearr_17158_17200 = state_17129__$1;
                                                    statearr_17158_17200[2] = null;
                                                    statearr_17158_17200[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_17130 === 14) {
                                                      var state_17129__$1 = state_17129;
                                                      var statearr_17162_17201 = state_17129__$1;
                                                      statearr_17162_17201[2] = null;
                                                      statearr_17162_17201[1] = 15;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_17130 === 16) {
                                                        var inst_17084 = state_17129[10];
                                                        var inst_17088 = cljs.core.chunk_first.call(null, inst_17084);
                                                        var inst_17089 = cljs.core.chunk_rest.call(null, inst_17084);
                                                        var inst_17090 = cljs.core.count.call(null, inst_17088);
                                                        var inst_17070 = inst_17089;
                                                        var inst_17071 = inst_17088;
                                                        var inst_17072 = inst_17090;
                                                        var inst_17073 = 0;
                                                        var state_17129__$1 = function() {
                                                          var statearr_17163 = state_17129;
                                                          statearr_17163[12] = inst_17073;
                                                          statearr_17163[14] = inst_17072;
                                                          statearr_17163[15] = inst_17071;
                                                          statearr_17163[16] = inst_17070;
                                                          return statearr_17163;
                                                        }();
                                                        var statearr_17164_17202 = state_17129__$1;
                                                        statearr_17164_17202[2] = null;
                                                        statearr_17164_17202[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_17130 === 10) {
                                                          var inst_17073 = state_17129[12];
                                                          var inst_17072 = state_17129[14];
                                                          var inst_17071 = state_17129[15];
                                                          var inst_17070 = state_17129[16];
                                                          var inst_17078 = cljs.core._nth.call(null, inst_17071, inst_17073);
                                                          var inst_17079 = cljs.core.async.muxch_STAR_.call(null, inst_17078);
                                                          var inst_17080 = cljs.core.async.close_BANG_.call(null, inst_17079);
                                                          var inst_17081 = inst_17073 + 1;
                                                          var tmp17159 = inst_17072;
                                                          var tmp17160 = inst_17071;
                                                          var tmp17161 = inst_17070;
                                                          var inst_17070__$1 = tmp17161;
                                                          var inst_17071__$1 = tmp17160;
                                                          var inst_17072__$1 = tmp17159;
                                                          var inst_17073__$1 = inst_17081;
                                                          var state_17129__$1 = function() {
                                                            var statearr_17165 = state_17129;
                                                            statearr_17165[17] = inst_17080;
                                                            statearr_17165[12] = inst_17073__$1;
                                                            statearr_17165[14] = inst_17072__$1;
                                                            statearr_17165[15] = inst_17071__$1;
                                                            statearr_17165[16] = inst_17070__$1;
                                                            return statearr_17165;
                                                          }();
                                                          var statearr_17166_17203 = state_17129__$1;
                                                          statearr_17166_17203[2] = null;
                                                          statearr_17166_17203[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_17130 === 18) {
                                                            var inst_17099 = state_17129[2];
                                                            var state_17129__$1 = state_17129;
                                                            var statearr_17167_17204 = state_17129__$1;
                                                            statearr_17167_17204[2] = inst_17099;
                                                            statearr_17167_17204[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_17130 === 8) {
                                                              var inst_17073 = state_17129[12];
                                                              var inst_17072 = state_17129[14];
                                                              var inst_17075 = inst_17073 < inst_17072;
                                                              var inst_17076 = inst_17075;
                                                              var state_17129__$1 = state_17129;
                                                              if (cljs.core.truth_(inst_17076)) {
                                                                var statearr_17168_17205 = state_17129__$1;
                                                                statearr_17168_17205[1] = 10;
                                                              } else {
                                                                var statearr_17169_17206 = state_17129__$1;
                                                                statearr_17169_17206[1] = 11;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              return null;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___17178, mults, ensure_mult, p);
        return function(switch__8658__auto__, c__8720__auto___17178, mults, ensure_mult, p) {
          return function() {
            var cljs$core$async$state_machine__8659__auto__ = null;
            var cljs$core$async$state_machine__8659__auto____0 = function() {
              var statearr_17173 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17173[0] = cljs$core$async$state_machine__8659__auto__;
              statearr_17173[1] = 1;
              return statearr_17173;
            };
            var cljs$core$async$state_machine__8659__auto____1 = function(state_17129) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_17129);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e17174) {
                    if (e17174 instanceof Object) {
                      var ex__8662__auto__ = e17174;
                      var statearr_17175_17207 = state_17129;
                      statearr_17175_17207[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17129);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17174;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17208 = state_17129;
                  state_17129 = G__17208;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8659__auto__ = function(state_17129) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8659__auto____1.call(this, state_17129);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8659__auto____0;
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8659__auto____1;
            return cljs$core$async$state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___17178, mults, ensure_mult, p);
      }();
      var state__8722__auto__ = function() {
        var statearr_17176 = f__8721__auto__.call(null);
        statearr_17176[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___17178;
        return statearr_17176;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___17178, mults, ensure_mult, p));
  return p;
};
cljs.core.async.pub.cljs$lang$maxFixedArity = 3;
cljs.core.async.sub = function cljs$core$async$sub() {
  var G__17210 = arguments.length;
  switch(G__17210) {
    case 3:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = function(p, topic, ch) {
  return cljs.core.async.sub.call(null, p, topic, ch, true);
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = function(p, topic, ch, close_QMARK_) {
  return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
};
cljs.core.async.sub.cljs$lang$maxFixedArity = 4;
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function cljs$core$async$unsub_all() {
  var G__17213 = arguments.length;
  switch(G__17213) {
    case 1:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return cljs.core.async.unsub_all_STAR_.call(null, p);
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = function(p, topic) {
  return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
};
cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2;
cljs.core.async.map = function cljs$core$async$map() {
  var G__17216 = arguments.length;
  switch(G__17216) {
    case 2:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = function(f, chs) {
  return cljs.core.async.map.call(null, f, chs, null);
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = function(f, chs, buf_or_n) {
  var chs__$1 = cljs.core.vec.call(null, chs);
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var cnt = cljs.core.count.call(null, chs__$1);
  var rets = cljs.core.object_array.call(null, cnt);
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
    return function(i) {
      return function(chs__$1, out, cnt, rets, dchan, dctr) {
        return function(ret) {
          rets[i] = ret;
          if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
            return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
          } else {
            return null;
          }
        };
      }(chs__$1, out, cnt, rets, dchan, dctr);
    };
  }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
  var c__8720__auto___17286 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___17286, chs__$1, out, cnt, rets, dchan, dctr, done) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___17286, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function(state_17255) {
            var state_val_17256 = state_17255[1];
            if (state_val_17256 === 7) {
              var state_17255__$1 = state_17255;
              var statearr_17257_17287 = state_17255__$1;
              statearr_17257_17287[2] = null;
              statearr_17257_17287[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17256 === 1) {
                var state_17255__$1 = state_17255;
                var statearr_17258_17288 = state_17255__$1;
                statearr_17258_17288[2] = null;
                statearr_17258_17288[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17256 === 4) {
                  var inst_17219 = state_17255[7];
                  var inst_17221 = inst_17219 < cnt;
                  var state_17255__$1 = state_17255;
                  if (cljs.core.truth_(inst_17221)) {
                    var statearr_17259_17289 = state_17255__$1;
                    statearr_17259_17289[1] = 6;
                  } else {
                    var statearr_17260_17290 = state_17255__$1;
                    statearr_17260_17290[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17256 === 15) {
                    var inst_17251 = state_17255[2];
                    var state_17255__$1 = state_17255;
                    var statearr_17261_17291 = state_17255__$1;
                    statearr_17261_17291[2] = inst_17251;
                    statearr_17261_17291[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17256 === 13) {
                      var inst_17244 = cljs.core.async.close_BANG_.call(null, out);
                      var state_17255__$1 = state_17255;
                      var statearr_17262_17292 = state_17255__$1;
                      statearr_17262_17292[2] = inst_17244;
                      statearr_17262_17292[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17256 === 6) {
                        var state_17255__$1 = state_17255;
                        var statearr_17263_17293 = state_17255__$1;
                        statearr_17263_17293[2] = null;
                        statearr_17263_17293[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17256 === 3) {
                          var inst_17253 = state_17255[2];
                          var state_17255__$1 = state_17255;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17255__$1, inst_17253);
                        } else {
                          if (state_val_17256 === 12) {
                            var inst_17241 = state_17255[8];
                            var inst_17241__$1 = state_17255[2];
                            var inst_17242 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_17241__$1);
                            var state_17255__$1 = function() {
                              var statearr_17264 = state_17255;
                              statearr_17264[8] = inst_17241__$1;
                              return statearr_17264;
                            }();
                            if (cljs.core.truth_(inst_17242)) {
                              var statearr_17265_17294 = state_17255__$1;
                              statearr_17265_17294[1] = 13;
                            } else {
                              var statearr_17266_17295 = state_17255__$1;
                              statearr_17266_17295[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17256 === 2) {
                              var inst_17218 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                              var inst_17219 = 0;
                              var state_17255__$1 = function() {
                                var statearr_17267 = state_17255;
                                statearr_17267[9] = inst_17218;
                                statearr_17267[7] = inst_17219;
                                return statearr_17267;
                              }();
                              var statearr_17268_17296 = state_17255__$1;
                              statearr_17268_17296[2] = null;
                              statearr_17268_17296[1] = 4;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17256 === 11) {
                                var inst_17219 = state_17255[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_17255, 10, Object, null, 9);
                                var inst_17228 = chs__$1.call(null, inst_17219);
                                var inst_17229 = done.call(null, inst_17219);
                                var inst_17230 = cljs.core.async.take_BANG_.call(null, inst_17228, inst_17229);
                                var state_17255__$1 = state_17255;
                                var statearr_17269_17297 = state_17255__$1;
                                statearr_17269_17297[2] = inst_17230;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17255__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17256 === 9) {
                                  var inst_17219 = state_17255[7];
                                  var inst_17232 = state_17255[2];
                                  var inst_17233 = inst_17219 + 1;
                                  var inst_17219__$1 = inst_17233;
                                  var state_17255__$1 = function() {
                                    var statearr_17270 = state_17255;
                                    statearr_17270[7] = inst_17219__$1;
                                    statearr_17270[10] = inst_17232;
                                    return statearr_17270;
                                  }();
                                  var statearr_17271_17298 = state_17255__$1;
                                  statearr_17271_17298[2] = null;
                                  statearr_17271_17298[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17256 === 5) {
                                    var inst_17239 = state_17255[2];
                                    var state_17255__$1 = function() {
                                      var statearr_17272 = state_17255;
                                      statearr_17272[11] = inst_17239;
                                      return statearr_17272;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17255__$1, 12, dchan);
                                  } else {
                                    if (state_val_17256 === 14) {
                                      var inst_17241 = state_17255[8];
                                      var inst_17246 = cljs.core.apply.call(null, f, inst_17241);
                                      var state_17255__$1 = state_17255;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17255__$1, 16, out, inst_17246);
                                    } else {
                                      if (state_val_17256 === 16) {
                                        var inst_17248 = state_17255[2];
                                        var state_17255__$1 = function() {
                                          var statearr_17273 = state_17255;
                                          statearr_17273[12] = inst_17248;
                                          return statearr_17273;
                                        }();
                                        var statearr_17274_17299 = state_17255__$1;
                                        statearr_17274_17299[2] = null;
                                        statearr_17274_17299[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17256 === 10) {
                                          var inst_17223 = state_17255[2];
                                          var inst_17224 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var state_17255__$1 = function() {
                                            var statearr_17275 = state_17255;
                                            statearr_17275[13] = inst_17223;
                                            return statearr_17275;
                                          }();
                                          var statearr_17276_17300 = state_17255__$1;
                                          statearr_17276_17300[2] = inst_17224;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17255__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_17256 === 8) {
                                            var inst_17237 = state_17255[2];
                                            var state_17255__$1 = state_17255;
                                            var statearr_17277_17301 = state_17255__$1;
                                            statearr_17277_17301[2] = inst_17237;
                                            statearr_17277_17301[1] = 5;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___17286, chs__$1, out, cnt, rets, dchan, dctr, done);
        return function(switch__8658__auto__, c__8720__auto___17286, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function() {
            var cljs$core$async$state_machine__8659__auto__ = null;
            var cljs$core$async$state_machine__8659__auto____0 = function() {
              var statearr_17281 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17281[0] = cljs$core$async$state_machine__8659__auto__;
              statearr_17281[1] = 1;
              return statearr_17281;
            };
            var cljs$core$async$state_machine__8659__auto____1 = function(state_17255) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_17255);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e17282) {
                    if (e17282 instanceof Object) {
                      var ex__8662__auto__ = e17282;
                      var statearr_17283_17302 = state_17255;
                      statearr_17283_17302[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17255);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17282;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17303 = state_17255;
                  state_17255 = G__17303;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8659__auto__ = function(state_17255) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8659__auto____1.call(this, state_17255);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8659__auto____0;
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8659__auto____1;
            return cljs$core$async$state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___17286, chs__$1, out, cnt, rets, dchan, dctr, done);
      }();
      var state__8722__auto__ = function() {
        var statearr_17284 = f__8721__auto__.call(null);
        statearr_17284[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___17286;
        return statearr_17284;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___17286, chs__$1, out, cnt, rets, dchan, dctr, done));
  return out;
};
cljs.core.async.map.cljs$lang$maxFixedArity = 3;
cljs.core.async.merge = function cljs$core$async$merge() {
  var G__17306 = arguments.length;
  switch(G__17306) {
    case 1:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = function(chs) {
  return cljs.core.async.merge.call(null, chs, null);
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = function(chs, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__8720__auto___17361 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___17361, out) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___17361, out) {
          return function(state_17336) {
            var state_val_17337 = state_17336[1];
            if (state_val_17337 === 7) {
              var inst_17315 = state_17336[7];
              var inst_17316 = state_17336[8];
              var inst_17315__$1 = state_17336[2];
              var inst_17316__$1 = cljs.core.nth.call(null, inst_17315__$1, 0, null);
              var inst_17317 = cljs.core.nth.call(null, inst_17315__$1, 1, null);
              var inst_17318 = inst_17316__$1 == null;
              var state_17336__$1 = function() {
                var statearr_17338 = state_17336;
                statearr_17338[9] = inst_17317;
                statearr_17338[7] = inst_17315__$1;
                statearr_17338[8] = inst_17316__$1;
                return statearr_17338;
              }();
              if (cljs.core.truth_(inst_17318)) {
                var statearr_17339_17362 = state_17336__$1;
                statearr_17339_17362[1] = 8;
              } else {
                var statearr_17340_17363 = state_17336__$1;
                statearr_17340_17363[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17337 === 1) {
                var inst_17307 = cljs.core.vec.call(null, chs);
                var inst_17308 = inst_17307;
                var state_17336__$1 = function() {
                  var statearr_17341 = state_17336;
                  statearr_17341[10] = inst_17308;
                  return statearr_17341;
                }();
                var statearr_17342_17364 = state_17336__$1;
                statearr_17342_17364[2] = null;
                statearr_17342_17364[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17337 === 4) {
                  var inst_17308 = state_17336[10];
                  var state_17336__$1 = state_17336;
                  return cljs.core.async.ioc_alts_BANG_.call(null, state_17336__$1, 7, inst_17308);
                } else {
                  if (state_val_17337 === 6) {
                    var inst_17332 = state_17336[2];
                    var state_17336__$1 = state_17336;
                    var statearr_17343_17365 = state_17336__$1;
                    statearr_17343_17365[2] = inst_17332;
                    statearr_17343_17365[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17337 === 3) {
                      var inst_17334 = state_17336[2];
                      var state_17336__$1 = state_17336;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17336__$1, inst_17334);
                    } else {
                      if (state_val_17337 === 2) {
                        var inst_17308 = state_17336[10];
                        var inst_17310 = cljs.core.count.call(null, inst_17308);
                        var inst_17311 = inst_17310 > 0;
                        var state_17336__$1 = state_17336;
                        if (cljs.core.truth_(inst_17311)) {
                          var statearr_17345_17366 = state_17336__$1;
                          statearr_17345_17366[1] = 4;
                        } else {
                          var statearr_17346_17367 = state_17336__$1;
                          statearr_17346_17367[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17337 === 11) {
                          var inst_17308 = state_17336[10];
                          var inst_17325 = state_17336[2];
                          var tmp17344 = inst_17308;
                          var inst_17308__$1 = tmp17344;
                          var state_17336__$1 = function() {
                            var statearr_17347 = state_17336;
                            statearr_17347[10] = inst_17308__$1;
                            statearr_17347[11] = inst_17325;
                            return statearr_17347;
                          }();
                          var statearr_17348_17368 = state_17336__$1;
                          statearr_17348_17368[2] = null;
                          statearr_17348_17368[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17337 === 9) {
                            var inst_17316 = state_17336[8];
                            var state_17336__$1 = state_17336;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17336__$1, 11, out, inst_17316);
                          } else {
                            if (state_val_17337 === 5) {
                              var inst_17330 = cljs.core.async.close_BANG_.call(null, out);
                              var state_17336__$1 = state_17336;
                              var statearr_17349_17369 = state_17336__$1;
                              statearr_17349_17369[2] = inst_17330;
                              statearr_17349_17369[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17337 === 10) {
                                var inst_17328 = state_17336[2];
                                var state_17336__$1 = state_17336;
                                var statearr_17350_17370 = state_17336__$1;
                                statearr_17350_17370[2] = inst_17328;
                                statearr_17350_17370[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17337 === 8) {
                                  var inst_17308 = state_17336[10];
                                  var inst_17317 = state_17336[9];
                                  var inst_17315 = state_17336[7];
                                  var inst_17316 = state_17336[8];
                                  var inst_17320 = function() {
                                    var cs = inst_17308;
                                    var vec__17313 = inst_17315;
                                    var v = inst_17316;
                                    var c = inst_17317;
                                    return function(cs, vec__17313, v, c, inst_17308, inst_17317, inst_17315, inst_17316, state_val_17337, c__8720__auto___17361, out) {
                                      return function(p1__17304_SHARP_) {
                                        return cljs.core.not_EQ_.call(null, c, p1__17304_SHARP_);
                                      };
                                    }(cs, vec__17313, v, c, inst_17308, inst_17317, inst_17315, inst_17316, state_val_17337, c__8720__auto___17361, out);
                                  }();
                                  var inst_17321 = cljs.core.filterv.call(null, inst_17320, inst_17308);
                                  var inst_17308__$1 = inst_17321;
                                  var state_17336__$1 = function() {
                                    var statearr_17351 = state_17336;
                                    statearr_17351[10] = inst_17308__$1;
                                    return statearr_17351;
                                  }();
                                  var statearr_17352_17371 = state_17336__$1;
                                  statearr_17352_17371[2] = null;
                                  statearr_17352_17371[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___17361, out);
        return function(switch__8658__auto__, c__8720__auto___17361, out) {
          return function() {
            var cljs$core$async$state_machine__8659__auto__ = null;
            var cljs$core$async$state_machine__8659__auto____0 = function() {
              var statearr_17356 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17356[0] = cljs$core$async$state_machine__8659__auto__;
              statearr_17356[1] = 1;
              return statearr_17356;
            };
            var cljs$core$async$state_machine__8659__auto____1 = function(state_17336) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_17336);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e17357) {
                    if (e17357 instanceof Object) {
                      var ex__8662__auto__ = e17357;
                      var statearr_17358_17372 = state_17336;
                      statearr_17358_17372[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17336);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17357;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17373 = state_17336;
                  state_17336 = G__17373;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8659__auto__ = function(state_17336) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8659__auto____1.call(this, state_17336);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8659__auto____0;
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8659__auto____1;
            return cljs$core$async$state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___17361, out);
      }();
      var state__8722__auto__ = function() {
        var statearr_17359 = f__8721__auto__.call(null);
        statearr_17359[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___17361;
        return statearr_17359;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___17361, out));
  return out;
};
cljs.core.async.merge.cljs$lang$maxFixedArity = 2;
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function cljs$core$async$take() {
  var G__17375 = arguments.length;
  switch(G__17375) {
    case 2:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.take.call(null, n, ch, null);
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__8720__auto___17423 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___17423, out) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___17423, out) {
          return function(state_17399) {
            var state_val_17400 = state_17399[1];
            if (state_val_17400 === 7) {
              var inst_17381 = state_17399[7];
              var inst_17381__$1 = state_17399[2];
              var inst_17382 = inst_17381__$1 == null;
              var inst_17383 = cljs.core.not.call(null, inst_17382);
              var state_17399__$1 = function() {
                var statearr_17401 = state_17399;
                statearr_17401[7] = inst_17381__$1;
                return statearr_17401;
              }();
              if (inst_17383) {
                var statearr_17402_17424 = state_17399__$1;
                statearr_17402_17424[1] = 8;
              } else {
                var statearr_17403_17425 = state_17399__$1;
                statearr_17403_17425[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17400 === 1) {
                var inst_17376 = 0;
                var state_17399__$1 = function() {
                  var statearr_17404 = state_17399;
                  statearr_17404[8] = inst_17376;
                  return statearr_17404;
                }();
                var statearr_17405_17426 = state_17399__$1;
                statearr_17405_17426[2] = null;
                statearr_17405_17426[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17400 === 4) {
                  var state_17399__$1 = state_17399;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17399__$1, 7, ch);
                } else {
                  if (state_val_17400 === 6) {
                    var inst_17394 = state_17399[2];
                    var state_17399__$1 = state_17399;
                    var statearr_17406_17427 = state_17399__$1;
                    statearr_17406_17427[2] = inst_17394;
                    statearr_17406_17427[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17400 === 3) {
                      var inst_17396 = state_17399[2];
                      var inst_17397 = cljs.core.async.close_BANG_.call(null, out);
                      var state_17399__$1 = function() {
                        var statearr_17407 = state_17399;
                        statearr_17407[9] = inst_17396;
                        return statearr_17407;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17399__$1, inst_17397);
                    } else {
                      if (state_val_17400 === 2) {
                        var inst_17376 = state_17399[8];
                        var inst_17378 = inst_17376 < n;
                        var state_17399__$1 = state_17399;
                        if (cljs.core.truth_(inst_17378)) {
                          var statearr_17408_17428 = state_17399__$1;
                          statearr_17408_17428[1] = 4;
                        } else {
                          var statearr_17409_17429 = state_17399__$1;
                          statearr_17409_17429[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17400 === 11) {
                          var inst_17376 = state_17399[8];
                          var inst_17386 = state_17399[2];
                          var inst_17387 = inst_17376 + 1;
                          var inst_17376__$1 = inst_17387;
                          var state_17399__$1 = function() {
                            var statearr_17410 = state_17399;
                            statearr_17410[8] = inst_17376__$1;
                            statearr_17410[10] = inst_17386;
                            return statearr_17410;
                          }();
                          var statearr_17411_17430 = state_17399__$1;
                          statearr_17411_17430[2] = null;
                          statearr_17411_17430[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17400 === 9) {
                            var state_17399__$1 = state_17399;
                            var statearr_17412_17431 = state_17399__$1;
                            statearr_17412_17431[2] = null;
                            statearr_17412_17431[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17400 === 5) {
                              var state_17399__$1 = state_17399;
                              var statearr_17413_17432 = state_17399__$1;
                              statearr_17413_17432[2] = null;
                              statearr_17413_17432[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17400 === 10) {
                                var inst_17391 = state_17399[2];
                                var state_17399__$1 = state_17399;
                                var statearr_17414_17433 = state_17399__$1;
                                statearr_17414_17433[2] = inst_17391;
                                statearr_17414_17433[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17400 === 8) {
                                  var inst_17381 = state_17399[7];
                                  var state_17399__$1 = state_17399;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17399__$1, 11, out, inst_17381);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___17423, out);
        return function(switch__8658__auto__, c__8720__auto___17423, out) {
          return function() {
            var cljs$core$async$state_machine__8659__auto__ = null;
            var cljs$core$async$state_machine__8659__auto____0 = function() {
              var statearr_17418 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_17418[0] = cljs$core$async$state_machine__8659__auto__;
              statearr_17418[1] = 1;
              return statearr_17418;
            };
            var cljs$core$async$state_machine__8659__auto____1 = function(state_17399) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_17399);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e17419) {
                    if (e17419 instanceof Object) {
                      var ex__8662__auto__ = e17419;
                      var statearr_17420_17434 = state_17399;
                      statearr_17420_17434[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17399);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17419;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17435 = state_17399;
                  state_17399 = G__17435;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8659__auto__ = function(state_17399) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8659__auto____1.call(this, state_17399);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8659__auto____0;
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8659__auto____1;
            return cljs$core$async$state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___17423, out);
      }();
      var state__8722__auto__ = function() {
        var statearr_17421 = f__8721__auto__.call(null);
        statearr_17421[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___17423;
        return statearr_17421;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___17423, out));
  return out;
};
cljs.core.async.take.cljs$lang$maxFixedArity = 3;
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t17443 !== "undefined") {
  } else {
    cljs.core.async.t17443 = function(map_LT_, f, ch, meta17444) {
      this.map_LT_ = map_LT_;
      this.f = f;
      this.ch = ch;
      this.meta17444 = meta17444;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t17443.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17445, meta17444__$1) {
      var self__ = this;
      var _17445__$1 = this;
      return new cljs.core.async.t17443(self__.map_LT_, self__.f, self__.ch, meta17444__$1);
    };
    cljs.core.async.t17443.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17445) {
      var self__ = this;
      var _17445__$1 = this;
      return self__.meta17444;
    };
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t17446 !== "undefined") {
        } else {
          cljs.core.async.t17446 = function(map_LT_, f, ch, meta17444, _, fn1, meta17447) {
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta17444 = meta17444;
            this._ = _;
            this.fn1 = fn1;
            this.meta17447 = meta17447;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
            this.cljs$lang$protocol_mask$partition1$ = 0;
          };
          cljs.core.async.t17446.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_17448, meta17447__$1) {
              var self__ = this;
              var _17448__$1 = this;
              return new cljs.core.async.t17446(self__.map_LT_, self__.f, self__.ch, self__.meta17444, self__._, self__.fn1, meta17447__$1);
            };
          }(___$1);
          cljs.core.async.t17446.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_17448) {
              var self__ = this;
              var _17448__$1 = this;
              return self__.meta17447;
            };
          }(___$1);
          cljs.core.async.t17446.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t17446.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t17446.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__17436_SHARP_) {
                  return f1.call(null, p1__17436_SHARP_ == null ? null : self__.f.call(null, p1__17436_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t17446.getBasis = function(___$1) {
            return function() {
              return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "map\x3c", "map\x3c", -1235808357, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta17444", "meta17444", 1162509020, null), new cljs.core.Symbol(null, "_", "_", -1201019570, null), new cljs.core.Symbol(null, "fn1", "fn1", 895834444, null), new cljs.core.Symbol(null, "meta17447", 
              "meta17447", 153528133, null)], null);
            };
          }(___$1);
          cljs.core.async.t17446.cljs$lang$type = true;
          cljs.core.async.t17446.cljs$lang$ctorStr = "cljs.core.async/t17446";
          cljs.core.async.t17446.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
              return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async/t17446");
            };
          }(___$1);
          cljs.core.async.__GT_t17446 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t17446(map_LT___$1, f__$1, ch__$1, meta17444__$1, ___$2, fn1__$1, meta17447) {
              return new cljs.core.async.t17446(map_LT___$1, f__$1, ch__$1, meta17444__$1, ___$2, fn1__$1, meta17447);
            };
          }(___$1);
        }
        return new cljs.core.async.t17446(self__.map_LT_, self__.f, self__.ch, self__.meta17444, ___$1, fn1, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__4295__auto__ = ret;
        if (cljs.core.truth_(and__4295__auto__)) {
          return !(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__4295__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17443.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t17443.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "map\x3c", "map\x3c", -1235808357, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta17444", "meta17444", 1162509020, null)], null);
    };
    cljs.core.async.t17443.cljs$lang$type = true;
    cljs.core.async.t17443.cljs$lang$ctorStr = "cljs.core.async/t17443";
    cljs.core.async.t17443.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async/t17443");
    };
    cljs.core.async.__GT_t17443 = function cljs$core$async$map_LT__$___GT_t17443(map_LT___$1, f__$1, ch__$1, meta17444) {
      return new cljs.core.async.t17443(map_LT___$1, f__$1, ch__$1, meta17444);
    };
  }
  return new cljs.core.async.t17443(cljs$core$async$map_LT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t17452 !== "undefined") {
  } else {
    cljs.core.async.t17452 = function(map_GT_, f, ch, meta17453) {
      this.map_GT_ = map_GT_;
      this.f = f;
      this.ch = ch;
      this.meta17453 = meta17453;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t17452.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17454, meta17453__$1) {
      var self__ = this;
      var _17454__$1 = this;
      return new cljs.core.async.t17452(self__.map_GT_, self__.f, self__.ch, meta17453__$1);
    };
    cljs.core.async.t17452.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17454) {
      var self__ = this;
      var _17454__$1 = this;
      return self__.meta17453;
    };
    cljs.core.async.t17452.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17452.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17452.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17452.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t17452.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17452.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t17452.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "map\x3e", "map\x3e", 1676369295, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta17453", "meta17453", -1489914070, null)], null);
    };
    cljs.core.async.t17452.cljs$lang$type = true;
    cljs.core.async.t17452.cljs$lang$ctorStr = "cljs.core.async/t17452";
    cljs.core.async.t17452.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async/t17452");
    };
    cljs.core.async.__GT_t17452 = function cljs$core$async$map_GT__$___GT_t17452(map_GT___$1, f__$1, ch__$1, meta17453) {
      return new cljs.core.async.t17452(map_GT___$1, f__$1, ch__$1, meta17453);
    };
  }
  return new cljs.core.async.t17452(cljs$core$async$map_GT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t17458 !== "undefined") {
  } else {
    cljs.core.async.t17458 = function(filter_GT_, p, ch, meta17459) {
      this.filter_GT_ = filter_GT_;
      this.p = p;
      this.ch = ch;
      this.meta17459 = meta17459;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t17458.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17460, meta17459__$1) {
      var self__ = this;
      var _17460__$1 = this;
      return new cljs.core.async.t17458(self__.filter_GT_, self__.p, self__.ch, meta17459__$1);
    };
    cljs.core.async.t17458.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17460) {
      var self__ = this;
      var _17460__$1 = this;
      return self__.meta17459;
    };
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17458.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t17458.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "filter\x3e", "filter\x3e", -37644455, null), new cljs.core.Symbol(null, "p", "p", 1791580836, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta17459", "meta17459", -398999907, null)], null);
    };
    cljs.core.async.t17458.cljs$lang$type = true;
    cljs.core.async.t17458.cljs$lang$ctorStr = "cljs.core.async/t17458";
    cljs.core.async.t17458.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "cljs.core.async/t17458");
    };
    cljs.core.async.__GT_t17458 = function cljs$core$async$filter_GT__$___GT_t17458(filter_GT___$1, p__$1, ch__$1, meta17459) {
      return new cljs.core.async.t17458(filter_GT___$1, p__$1, ch__$1, meta17459);
    };
  }
  return new cljs.core.async.t17458(cljs$core$async$filter_GT_, p, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function cljs$core$async$filter_LT_() {
  var G__17462 = arguments.length;
  switch(G__17462) {
    case 2:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.filter_LT_.call(null, p, ch, null);
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__8720__auto___17505 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___17505, out) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___17505, out) {
          return function(state_17483) {
            var state_val_17484 = state_17483[1];
            if (state_val_17484 === 7) {
              var inst_17479 = state_17483[2];
              var state_17483__$1 = state_17483;
              var statearr_17485_17506 = state_17483__$1;
              statearr_17485_17506[2] = inst_17479;
              statearr_17485_17506[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17484 === 1) {
                var state_17483__$1 = state_17483;
                var statearr_17486_17507 = state_17483__$1;
                statearr_17486_17507[2] = null;
                statearr_17486_17507[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17484 === 4) {
                  var inst_17465 = state_17483[7];
                  var inst_17465__$1 = state_17483[2];
                  var inst_17466 = inst_17465__$1 == null;
                  var state_17483__$1 = function() {
                    var statearr_17487 = state_17483;
                    statearr_17487[7] = inst_17465__$1;
                    return statearr_17487;
                  }();
                  if (cljs.core.truth_(inst_17466)) {
                    var statearr_17488_17508 = state_17483__$1;
                    statearr_17488_17508[1] = 5;
                  } else {
                    var statearr_17489_17509 = state_17483__$1;
                    statearr_17489_17509[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17484 === 6) {
                    var inst_17465 = state_17483[7];
                    var inst_17470 = p.call(null, inst_17465);
                    var state_17483__$1 = state_17483;
                    if (cljs.core.truth_(inst_17470)) {
                      var statearr_17490_17510 = state_17483__$1;
                      statearr_17490_17510[1] = 8;
                    } else {
                      var statearr_17491_17511 = state_17483__$1;
                      statearr_17491_17511[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17484 === 3) {
                      var inst_17481 = state_17483[2];
                      var state_17483__$1 = state_17483;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17483__$1, inst_17481);
                    } else {
                      if (state_val_17484 === 2) {
                        var state_17483__$1 = state_17483;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17483__$1, 4, ch);
                      } else {
                        if (state_val_17484 === 11) {
                          var inst_17473 = state_17483[2];
                          var state_17483__$1 = state_17483;
                          var statearr_17492_17512 = state_17483__$1;
                          statearr_17492_17512[2] = inst_17473;
                          statearr_17492_17512[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17484 === 9) {
                            var state_17483__$1 = state_17483;
                            var statearr_17493_17513 = state_17483__$1;
                            statearr_17493_17513[2] = null;
                            statearr_17493_17513[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17484 === 5) {
                              var inst_17468 = cljs.core.async.close_BANG_.call(null, out);
                              var state_17483__$1 = state_17483;
                              var statearr_17494_17514 = state_17483__$1;
                              statearr_17494_17514[2] = inst_17468;
                              statearr_17494_17514[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17484 === 10) {
                                var inst_17476 = state_17483[2];
                                var state_17483__$1 = function() {
                                  var statearr_17495 = state_17483;
                                  statearr_17495[8] = inst_17476;
                                  return statearr_17495;
                                }();
                                var statearr_17496_17515 = state_17483__$1;
                                statearr_17496_17515[2] = null;
                                statearr_17496_17515[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17484 === 8) {
                                  var inst_17465 = state_17483[7];
                                  var state_17483__$1 = state_17483;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17483__$1, 11, out, inst_17465);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___17505, out);
        return function(switch__8658__auto__, c__8720__auto___17505, out) {
          return function() {
            var cljs$core$async$state_machine__8659__auto__ = null;
            var cljs$core$async$state_machine__8659__auto____0 = function() {
              var statearr_17500 = [null, null, null, null, null, null, null, null, null];
              statearr_17500[0] = cljs$core$async$state_machine__8659__auto__;
              statearr_17500[1] = 1;
              return statearr_17500;
            };
            var cljs$core$async$state_machine__8659__auto____1 = function(state_17483) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_17483);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e17501) {
                    if (e17501 instanceof Object) {
                      var ex__8662__auto__ = e17501;
                      var statearr_17502_17516 = state_17483;
                      statearr_17502_17516[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17483);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17501;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17517 = state_17483;
                  state_17483 = G__17517;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8659__auto__ = function(state_17483) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8659__auto____1.call(this, state_17483);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8659__auto____0;
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8659__auto____1;
            return cljs$core$async$state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___17505, out);
      }();
      var state__8722__auto__ = function() {
        var statearr_17503 = f__8721__auto__.call(null);
        statearr_17503[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___17505;
        return statearr_17503;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___17505, out));
  return out;
};
cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.remove_LT_ = function cljs$core$async$remove_LT_() {
  var G__17519 = arguments.length;
  switch(G__17519) {
    case 2:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.remove_LT_.call(null, p, ch, null);
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
};
cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__8720__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto__) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto__) {
          return function(state_17686) {
            var state_val_17687 = state_17686[1];
            if (state_val_17687 === 7) {
              var inst_17682 = state_17686[2];
              var state_17686__$1 = state_17686;
              var statearr_17688_17729 = state_17686__$1;
              statearr_17688_17729[2] = inst_17682;
              statearr_17688_17729[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17687 === 20) {
                var inst_17652 = state_17686[7];
                var inst_17663 = state_17686[2];
                var inst_17664 = cljs.core.next.call(null, inst_17652);
                var inst_17638 = inst_17664;
                var inst_17639 = null;
                var inst_17640 = 0;
                var inst_17641 = 0;
                var state_17686__$1 = function() {
                  var statearr_17689 = state_17686;
                  statearr_17689[8] = inst_17640;
                  statearr_17689[9] = inst_17639;
                  statearr_17689[10] = inst_17638;
                  statearr_17689[11] = inst_17663;
                  statearr_17689[12] = inst_17641;
                  return statearr_17689;
                }();
                var statearr_17690_17730 = state_17686__$1;
                statearr_17690_17730[2] = null;
                statearr_17690_17730[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17687 === 1) {
                  var state_17686__$1 = state_17686;
                  var statearr_17691_17731 = state_17686__$1;
                  statearr_17691_17731[2] = null;
                  statearr_17691_17731[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17687 === 4) {
                    var inst_17627 = state_17686[13];
                    var inst_17627__$1 = state_17686[2];
                    var inst_17628 = inst_17627__$1 == null;
                    var state_17686__$1 = function() {
                      var statearr_17692 = state_17686;
                      statearr_17692[13] = inst_17627__$1;
                      return statearr_17692;
                    }();
                    if (cljs.core.truth_(inst_17628)) {
                      var statearr_17693_17732 = state_17686__$1;
                      statearr_17693_17732[1] = 5;
                    } else {
                      var statearr_17694_17733 = state_17686__$1;
                      statearr_17694_17733[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17687 === 15) {
                      var state_17686__$1 = state_17686;
                      var statearr_17698_17734 = state_17686__$1;
                      statearr_17698_17734[2] = null;
                      statearr_17698_17734[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17687 === 21) {
                        var state_17686__$1 = state_17686;
                        var statearr_17699_17735 = state_17686__$1;
                        statearr_17699_17735[2] = null;
                        statearr_17699_17735[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17687 === 13) {
                          var inst_17640 = state_17686[8];
                          var inst_17639 = state_17686[9];
                          var inst_17638 = state_17686[10];
                          var inst_17641 = state_17686[12];
                          var inst_17648 = state_17686[2];
                          var inst_17649 = inst_17641 + 1;
                          var tmp17695 = inst_17640;
                          var tmp17696 = inst_17639;
                          var tmp17697 = inst_17638;
                          var inst_17638__$1 = tmp17697;
                          var inst_17639__$1 = tmp17696;
                          var inst_17640__$1 = tmp17695;
                          var inst_17641__$1 = inst_17649;
                          var state_17686__$1 = function() {
                            var statearr_17700 = state_17686;
                            statearr_17700[8] = inst_17640__$1;
                            statearr_17700[9] = inst_17639__$1;
                            statearr_17700[10] = inst_17638__$1;
                            statearr_17700[12] = inst_17641__$1;
                            statearr_17700[14] = inst_17648;
                            return statearr_17700;
                          }();
                          var statearr_17701_17736 = state_17686__$1;
                          statearr_17701_17736[2] = null;
                          statearr_17701_17736[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17687 === 22) {
                            var state_17686__$1 = state_17686;
                            var statearr_17702_17737 = state_17686__$1;
                            statearr_17702_17737[2] = null;
                            statearr_17702_17737[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17687 === 6) {
                              var inst_17627 = state_17686[13];
                              var inst_17636 = f.call(null, inst_17627);
                              var inst_17637 = cljs.core.seq.call(null, inst_17636);
                              var inst_17638 = inst_17637;
                              var inst_17639 = null;
                              var inst_17640 = 0;
                              var inst_17641 = 0;
                              var state_17686__$1 = function() {
                                var statearr_17703 = state_17686;
                                statearr_17703[8] = inst_17640;
                                statearr_17703[9] = inst_17639;
                                statearr_17703[10] = inst_17638;
                                statearr_17703[12] = inst_17641;
                                return statearr_17703;
                              }();
                              var statearr_17704_17738 = state_17686__$1;
                              statearr_17704_17738[2] = null;
                              statearr_17704_17738[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17687 === 17) {
                                var inst_17652 = state_17686[7];
                                var inst_17656 = cljs.core.chunk_first.call(null, inst_17652);
                                var inst_17657 = cljs.core.chunk_rest.call(null, inst_17652);
                                var inst_17658 = cljs.core.count.call(null, inst_17656);
                                var inst_17638 = inst_17657;
                                var inst_17639 = inst_17656;
                                var inst_17640 = inst_17658;
                                var inst_17641 = 0;
                                var state_17686__$1 = function() {
                                  var statearr_17705 = state_17686;
                                  statearr_17705[8] = inst_17640;
                                  statearr_17705[9] = inst_17639;
                                  statearr_17705[10] = inst_17638;
                                  statearr_17705[12] = inst_17641;
                                  return statearr_17705;
                                }();
                                var statearr_17706_17739 = state_17686__$1;
                                statearr_17706_17739[2] = null;
                                statearr_17706_17739[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17687 === 3) {
                                  var inst_17684 = state_17686[2];
                                  var state_17686__$1 = state_17686;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17686__$1, inst_17684);
                                } else {
                                  if (state_val_17687 === 12) {
                                    var inst_17672 = state_17686[2];
                                    var state_17686__$1 = state_17686;
                                    var statearr_17707_17740 = state_17686__$1;
                                    statearr_17707_17740[2] = inst_17672;
                                    statearr_17707_17740[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17687 === 2) {
                                      var state_17686__$1 = state_17686;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17686__$1, 4, in$);
                                    } else {
                                      if (state_val_17687 === 23) {
                                        var inst_17680 = state_17686[2];
                                        var state_17686__$1 = state_17686;
                                        var statearr_17708_17741 = state_17686__$1;
                                        statearr_17708_17741[2] = inst_17680;
                                        statearr_17708_17741[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17687 === 19) {
                                          var inst_17667 = state_17686[2];
                                          var state_17686__$1 = state_17686;
                                          var statearr_17709_17742 = state_17686__$1;
                                          statearr_17709_17742[2] = inst_17667;
                                          statearr_17709_17742[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_17687 === 11) {
                                            var inst_17638 = state_17686[10];
                                            var inst_17652 = state_17686[7];
                                            var inst_17652__$1 = cljs.core.seq.call(null, inst_17638);
                                            var state_17686__$1 = function() {
                                              var statearr_17710 = state_17686;
                                              statearr_17710[7] = inst_17652__$1;
                                              return statearr_17710;
                                            }();
                                            if (inst_17652__$1) {
                                              var statearr_17711_17743 = state_17686__$1;
                                              statearr_17711_17743[1] = 14;
                                            } else {
                                              var statearr_17712_17744 = state_17686__$1;
                                              statearr_17712_17744[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_17687 === 9) {
                                              var inst_17674 = state_17686[2];
                                              var inst_17675 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_17686__$1 = function() {
                                                var statearr_17713 = state_17686;
                                                statearr_17713[15] = inst_17674;
                                                return statearr_17713;
                                              }();
                                              if (cljs.core.truth_(inst_17675)) {
                                                var statearr_17714_17745 = state_17686__$1;
                                                statearr_17714_17745[1] = 21;
                                              } else {
                                                var statearr_17715_17746 = state_17686__$1;
                                                statearr_17715_17746[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_17687 === 5) {
                                                var inst_17630 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_17686__$1 = state_17686;
                                                var statearr_17716_17747 = state_17686__$1;
                                                statearr_17716_17747[2] = inst_17630;
                                                statearr_17716_17747[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_17687 === 14) {
                                                  var inst_17652 = state_17686[7];
                                                  var inst_17654 = cljs.core.chunked_seq_QMARK_.call(null, inst_17652);
                                                  var state_17686__$1 = state_17686;
                                                  if (inst_17654) {
                                                    var statearr_17717_17748 = state_17686__$1;
                                                    statearr_17717_17748[1] = 17;
                                                  } else {
                                                    var statearr_17718_17749 = state_17686__$1;
                                                    statearr_17718_17749[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_17687 === 16) {
                                                    var inst_17670 = state_17686[2];
                                                    var state_17686__$1 = state_17686;
                                                    var statearr_17719_17750 = state_17686__$1;
                                                    statearr_17719_17750[2] = inst_17670;
                                                    statearr_17719_17750[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_17687 === 10) {
                                                      var inst_17639 = state_17686[9];
                                                      var inst_17641 = state_17686[12];
                                                      var inst_17646 = cljs.core._nth.call(null, inst_17639, inst_17641);
                                                      var state_17686__$1 = state_17686;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17686__$1, 13, out, inst_17646);
                                                    } else {
                                                      if (state_val_17687 === 18) {
                                                        var inst_17652 = state_17686[7];
                                                        var inst_17661 = cljs.core.first.call(null, inst_17652);
                                                        var state_17686__$1 = state_17686;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17686__$1, 20, out, inst_17661);
                                                      } else {
                                                        if (state_val_17687 === 8) {
                                                          var inst_17640 = state_17686[8];
                                                          var inst_17641 = state_17686[12];
                                                          var inst_17643 = inst_17641 < inst_17640;
                                                          var inst_17644 = inst_17643;
                                                          var state_17686__$1 = state_17686;
                                                          if (cljs.core.truth_(inst_17644)) {
                                                            var statearr_17720_17751 = state_17686__$1;
                                                            statearr_17720_17751[1] = 10;
                                                          } else {
                                                            var statearr_17721_17752 = state_17686__$1;
                                                            statearr_17721_17752[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto__);
        return function(switch__8658__auto__, c__8720__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__8659__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__8659__auto____0 = function() {
              var statearr_17725 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17725[0] = cljs$core$async$mapcat_STAR__$_state_machine__8659__auto__;
              statearr_17725[1] = 1;
              return statearr_17725;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__8659__auto____1 = function(state_17686) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_17686);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e17726) {
                    if (e17726 instanceof Object) {
                      var ex__8662__auto__ = e17726;
                      var statearr_17727_17753 = state_17686;
                      statearr_17727_17753[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17686);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17726;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17754 = state_17686;
                  state_17686 = G__17754;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__8659__auto__ = function(state_17686) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__8659__auto____1.call(this, state_17686);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mapcat_STAR__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__8659__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__8659__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto__);
      }();
      var state__8722__auto__ = function() {
        var statearr_17728 = f__8721__auto__.call(null);
        statearr_17728[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto__;
        return statearr_17728;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto__));
  return c__8720__auto__;
};
cljs.core.async.mapcat_LT_ = function cljs$core$async$mapcat_LT_() {
  var G__17756 = arguments.length;
  switch(G__17756) {
    case 2:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = function(f, in$) {
  return cljs.core.async.mapcat_LT_.call(null, f, in$, null);
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = function(f, in$, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return out;
};
cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_GT_ = function cljs$core$async$mapcat_GT_() {
  var G__17759 = arguments.length;
  switch(G__17759) {
    case 2:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = function(f, out) {
  return cljs.core.async.mapcat_GT_.call(null, f, out, null);
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = function(f, out, buf_or_n) {
  var in$ = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return in$;
};
cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.unique = function cljs$core$async$unique() {
  var G__17762 = arguments.length;
  switch(G__17762) {
    case 1:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = function(ch) {
  return cljs.core.async.unique.call(null, ch, null);
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = function(ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__8720__auto___17812 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___17812, out) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___17812, out) {
          return function(state_17786) {
            var state_val_17787 = state_17786[1];
            if (state_val_17787 === 7) {
              var inst_17781 = state_17786[2];
              var state_17786__$1 = state_17786;
              var statearr_17788_17813 = state_17786__$1;
              statearr_17788_17813[2] = inst_17781;
              statearr_17788_17813[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17787 === 1) {
                var inst_17763 = null;
                var state_17786__$1 = function() {
                  var statearr_17789 = state_17786;
                  statearr_17789[7] = inst_17763;
                  return statearr_17789;
                }();
                var statearr_17790_17814 = state_17786__$1;
                statearr_17790_17814[2] = null;
                statearr_17790_17814[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17787 === 4) {
                  var inst_17766 = state_17786[8];
                  var inst_17766__$1 = state_17786[2];
                  var inst_17767 = inst_17766__$1 == null;
                  var inst_17768 = cljs.core.not.call(null, inst_17767);
                  var state_17786__$1 = function() {
                    var statearr_17791 = state_17786;
                    statearr_17791[8] = inst_17766__$1;
                    return statearr_17791;
                  }();
                  if (inst_17768) {
                    var statearr_17792_17815 = state_17786__$1;
                    statearr_17792_17815[1] = 5;
                  } else {
                    var statearr_17793_17816 = state_17786__$1;
                    statearr_17793_17816[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17787 === 6) {
                    var state_17786__$1 = state_17786;
                    var statearr_17794_17817 = state_17786__$1;
                    statearr_17794_17817[2] = null;
                    statearr_17794_17817[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17787 === 3) {
                      var inst_17783 = state_17786[2];
                      var inst_17784 = cljs.core.async.close_BANG_.call(null, out);
                      var state_17786__$1 = function() {
                        var statearr_17795 = state_17786;
                        statearr_17795[9] = inst_17783;
                        return statearr_17795;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17786__$1, inst_17784);
                    } else {
                      if (state_val_17787 === 2) {
                        var state_17786__$1 = state_17786;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17786__$1, 4, ch);
                      } else {
                        if (state_val_17787 === 11) {
                          var inst_17766 = state_17786[8];
                          var inst_17775 = state_17786[2];
                          var inst_17763 = inst_17766;
                          var state_17786__$1 = function() {
                            var statearr_17796 = state_17786;
                            statearr_17796[10] = inst_17775;
                            statearr_17796[7] = inst_17763;
                            return statearr_17796;
                          }();
                          var statearr_17797_17818 = state_17786__$1;
                          statearr_17797_17818[2] = null;
                          statearr_17797_17818[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17787 === 9) {
                            var inst_17766 = state_17786[8];
                            var state_17786__$1 = state_17786;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17786__$1, 11, out, inst_17766);
                          } else {
                            if (state_val_17787 === 5) {
                              var inst_17766 = state_17786[8];
                              var inst_17763 = state_17786[7];
                              var inst_17770 = cljs.core._EQ_.call(null, inst_17766, inst_17763);
                              var state_17786__$1 = state_17786;
                              if (inst_17770) {
                                var statearr_17799_17819 = state_17786__$1;
                                statearr_17799_17819[1] = 8;
                              } else {
                                var statearr_17800_17820 = state_17786__$1;
                                statearr_17800_17820[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17787 === 10) {
                                var inst_17778 = state_17786[2];
                                var state_17786__$1 = state_17786;
                                var statearr_17801_17821 = state_17786__$1;
                                statearr_17801_17821[2] = inst_17778;
                                statearr_17801_17821[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17787 === 8) {
                                  var inst_17763 = state_17786[7];
                                  var tmp17798 = inst_17763;
                                  var inst_17763__$1 = tmp17798;
                                  var state_17786__$1 = function() {
                                    var statearr_17802 = state_17786;
                                    statearr_17802[7] = inst_17763__$1;
                                    return statearr_17802;
                                  }();
                                  var statearr_17803_17822 = state_17786__$1;
                                  statearr_17803_17822[2] = null;
                                  statearr_17803_17822[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___17812, out);
        return function(switch__8658__auto__, c__8720__auto___17812, out) {
          return function() {
            var cljs$core$async$state_machine__8659__auto__ = null;
            var cljs$core$async$state_machine__8659__auto____0 = function() {
              var statearr_17807 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_17807[0] = cljs$core$async$state_machine__8659__auto__;
              statearr_17807[1] = 1;
              return statearr_17807;
            };
            var cljs$core$async$state_machine__8659__auto____1 = function(state_17786) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_17786);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e17808) {
                    if (e17808 instanceof Object) {
                      var ex__8662__auto__ = e17808;
                      var statearr_17809_17823 = state_17786;
                      statearr_17809_17823[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17786);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17808;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17824 = state_17786;
                  state_17786 = G__17824;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8659__auto__ = function(state_17786) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8659__auto____1.call(this, state_17786);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8659__auto____0;
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8659__auto____1;
            return cljs$core$async$state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___17812, out);
      }();
      var state__8722__auto__ = function() {
        var statearr_17810 = f__8721__auto__.call(null);
        statearr_17810[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___17812;
        return statearr_17810;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___17812, out));
  return out;
};
cljs.core.async.unique.cljs$lang$maxFixedArity = 2;
cljs.core.async.partition = function cljs$core$async$partition() {
  var G__17826 = arguments.length;
  switch(G__17826) {
    case 2:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.partition.call(null, n, ch, null);
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__8720__auto___17895 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___17895, out) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___17895, out) {
          return function(state_17864) {
            var state_val_17865 = state_17864[1];
            if (state_val_17865 === 7) {
              var inst_17860 = state_17864[2];
              var state_17864__$1 = state_17864;
              var statearr_17866_17896 = state_17864__$1;
              statearr_17866_17896[2] = inst_17860;
              statearr_17866_17896[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17865 === 1) {
                var inst_17827 = new Array(n);
                var inst_17828 = inst_17827;
                var inst_17829 = 0;
                var state_17864__$1 = function() {
                  var statearr_17867 = state_17864;
                  statearr_17867[7] = inst_17829;
                  statearr_17867[8] = inst_17828;
                  return statearr_17867;
                }();
                var statearr_17868_17897 = state_17864__$1;
                statearr_17868_17897[2] = null;
                statearr_17868_17897[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17865 === 4) {
                  var inst_17832 = state_17864[9];
                  var inst_17832__$1 = state_17864[2];
                  var inst_17833 = inst_17832__$1 == null;
                  var inst_17834 = cljs.core.not.call(null, inst_17833);
                  var state_17864__$1 = function() {
                    var statearr_17869 = state_17864;
                    statearr_17869[9] = inst_17832__$1;
                    return statearr_17869;
                  }();
                  if (inst_17834) {
                    var statearr_17870_17898 = state_17864__$1;
                    statearr_17870_17898[1] = 5;
                  } else {
                    var statearr_17871_17899 = state_17864__$1;
                    statearr_17871_17899[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17865 === 15) {
                    var inst_17854 = state_17864[2];
                    var state_17864__$1 = state_17864;
                    var statearr_17872_17900 = state_17864__$1;
                    statearr_17872_17900[2] = inst_17854;
                    statearr_17872_17900[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17865 === 13) {
                      var state_17864__$1 = state_17864;
                      var statearr_17873_17901 = state_17864__$1;
                      statearr_17873_17901[2] = null;
                      statearr_17873_17901[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17865 === 6) {
                        var inst_17829 = state_17864[7];
                        var inst_17850 = inst_17829 > 0;
                        var state_17864__$1 = state_17864;
                        if (cljs.core.truth_(inst_17850)) {
                          var statearr_17874_17902 = state_17864__$1;
                          statearr_17874_17902[1] = 12;
                        } else {
                          var statearr_17875_17903 = state_17864__$1;
                          statearr_17875_17903[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17865 === 3) {
                          var inst_17862 = state_17864[2];
                          var state_17864__$1 = state_17864;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17864__$1, inst_17862);
                        } else {
                          if (state_val_17865 === 12) {
                            var inst_17828 = state_17864[8];
                            var inst_17852 = cljs.core.vec.call(null, inst_17828);
                            var state_17864__$1 = state_17864;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17864__$1, 15, out, inst_17852);
                          } else {
                            if (state_val_17865 === 2) {
                              var state_17864__$1 = state_17864;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17864__$1, 4, ch);
                            } else {
                              if (state_val_17865 === 11) {
                                var inst_17844 = state_17864[2];
                                var inst_17845 = new Array(n);
                                var inst_17828 = inst_17845;
                                var inst_17829 = 0;
                                var state_17864__$1 = function() {
                                  var statearr_17876 = state_17864;
                                  statearr_17876[7] = inst_17829;
                                  statearr_17876[8] = inst_17828;
                                  statearr_17876[10] = inst_17844;
                                  return statearr_17876;
                                }();
                                var statearr_17877_17904 = state_17864__$1;
                                statearr_17877_17904[2] = null;
                                statearr_17877_17904[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17865 === 9) {
                                  var inst_17828 = state_17864[8];
                                  var inst_17842 = cljs.core.vec.call(null, inst_17828);
                                  var state_17864__$1 = state_17864;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17864__$1, 11, out, inst_17842);
                                } else {
                                  if (state_val_17865 === 5) {
                                    var inst_17829 = state_17864[7];
                                    var inst_17828 = state_17864[8];
                                    var inst_17837 = state_17864[11];
                                    var inst_17832 = state_17864[9];
                                    var inst_17836 = inst_17828[inst_17829] = inst_17832;
                                    var inst_17837__$1 = inst_17829 + 1;
                                    var inst_17838 = inst_17837__$1 < n;
                                    var state_17864__$1 = function() {
                                      var statearr_17878 = state_17864;
                                      statearr_17878[12] = inst_17836;
                                      statearr_17878[11] = inst_17837__$1;
                                      return statearr_17878;
                                    }();
                                    if (cljs.core.truth_(inst_17838)) {
                                      var statearr_17879_17905 = state_17864__$1;
                                      statearr_17879_17905[1] = 8;
                                    } else {
                                      var statearr_17880_17906 = state_17864__$1;
                                      statearr_17880_17906[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17865 === 14) {
                                      var inst_17857 = state_17864[2];
                                      var inst_17858 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_17864__$1 = function() {
                                        var statearr_17882 = state_17864;
                                        statearr_17882[13] = inst_17857;
                                        return statearr_17882;
                                      }();
                                      var statearr_17883_17907 = state_17864__$1;
                                      statearr_17883_17907[2] = inst_17858;
                                      statearr_17883_17907[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17865 === 10) {
                                        var inst_17848 = state_17864[2];
                                        var state_17864__$1 = state_17864;
                                        var statearr_17884_17908 = state_17864__$1;
                                        statearr_17884_17908[2] = inst_17848;
                                        statearr_17884_17908[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17865 === 8) {
                                          var inst_17828 = state_17864[8];
                                          var inst_17837 = state_17864[11];
                                          var tmp17881 = inst_17828;
                                          var inst_17828__$1 = tmp17881;
                                          var inst_17829 = inst_17837;
                                          var state_17864__$1 = function() {
                                            var statearr_17885 = state_17864;
                                            statearr_17885[7] = inst_17829;
                                            statearr_17885[8] = inst_17828__$1;
                                            return statearr_17885;
                                          }();
                                          var statearr_17886_17909 = state_17864__$1;
                                          statearr_17886_17909[2] = null;
                                          statearr_17886_17909[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___17895, out);
        return function(switch__8658__auto__, c__8720__auto___17895, out) {
          return function() {
            var cljs$core$async$state_machine__8659__auto__ = null;
            var cljs$core$async$state_machine__8659__auto____0 = function() {
              var statearr_17890 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17890[0] = cljs$core$async$state_machine__8659__auto__;
              statearr_17890[1] = 1;
              return statearr_17890;
            };
            var cljs$core$async$state_machine__8659__auto____1 = function(state_17864) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_17864);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e17891) {
                    if (e17891 instanceof Object) {
                      var ex__8662__auto__ = e17891;
                      var statearr_17892_17910 = state_17864;
                      statearr_17892_17910[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17864);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17891;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17911 = state_17864;
                  state_17864 = G__17911;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8659__auto__ = function(state_17864) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8659__auto____1.call(this, state_17864);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8659__auto____0;
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8659__auto____1;
            return cljs$core$async$state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___17895, out);
      }();
      var state__8722__auto__ = function() {
        var statearr_17893 = f__8721__auto__.call(null);
        statearr_17893[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___17895;
        return statearr_17893;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___17895, out));
  return out;
};
cljs.core.async.partition.cljs$lang$maxFixedArity = 3;
cljs.core.async.partition_by = function cljs$core$async$partition_by() {
  var G__17913 = arguments.length;
  switch(G__17913) {
    case 2:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, ch) {
  return cljs.core.async.partition_by.call(null, f, ch, null);
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = function(f, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__8720__auto___17986 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___17986, out) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___17986, out) {
          return function(state_17955) {
            var state_val_17956 = state_17955[1];
            if (state_val_17956 === 7) {
              var inst_17951 = state_17955[2];
              var state_17955__$1 = state_17955;
              var statearr_17957_17987 = state_17955__$1;
              statearr_17957_17987[2] = inst_17951;
              statearr_17957_17987[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17956 === 1) {
                var inst_17914 = [];
                var inst_17915 = inst_17914;
                var inst_17916 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                var state_17955__$1 = function() {
                  var statearr_17958 = state_17955;
                  statearr_17958[7] = inst_17916;
                  statearr_17958[8] = inst_17915;
                  return statearr_17958;
                }();
                var statearr_17959_17988 = state_17955__$1;
                statearr_17959_17988[2] = null;
                statearr_17959_17988[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17956 === 4) {
                  var inst_17919 = state_17955[9];
                  var inst_17919__$1 = state_17955[2];
                  var inst_17920 = inst_17919__$1 == null;
                  var inst_17921 = cljs.core.not.call(null, inst_17920);
                  var state_17955__$1 = function() {
                    var statearr_17960 = state_17955;
                    statearr_17960[9] = inst_17919__$1;
                    return statearr_17960;
                  }();
                  if (inst_17921) {
                    var statearr_17961_17989 = state_17955__$1;
                    statearr_17961_17989[1] = 5;
                  } else {
                    var statearr_17962_17990 = state_17955__$1;
                    statearr_17962_17990[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17956 === 15) {
                    var inst_17945 = state_17955[2];
                    var state_17955__$1 = state_17955;
                    var statearr_17963_17991 = state_17955__$1;
                    statearr_17963_17991[2] = inst_17945;
                    statearr_17963_17991[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17956 === 13) {
                      var state_17955__$1 = state_17955;
                      var statearr_17964_17992 = state_17955__$1;
                      statearr_17964_17992[2] = null;
                      statearr_17964_17992[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17956 === 6) {
                        var inst_17915 = state_17955[8];
                        var inst_17940 = inst_17915.length;
                        var inst_17941 = inst_17940 > 0;
                        var state_17955__$1 = state_17955;
                        if (cljs.core.truth_(inst_17941)) {
                          var statearr_17965_17993 = state_17955__$1;
                          statearr_17965_17993[1] = 12;
                        } else {
                          var statearr_17966_17994 = state_17955__$1;
                          statearr_17966_17994[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17956 === 3) {
                          var inst_17953 = state_17955[2];
                          var state_17955__$1 = state_17955;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17955__$1, inst_17953);
                        } else {
                          if (state_val_17956 === 12) {
                            var inst_17915 = state_17955[8];
                            var inst_17943 = cljs.core.vec.call(null, inst_17915);
                            var state_17955__$1 = state_17955;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17955__$1, 15, out, inst_17943);
                          } else {
                            if (state_val_17956 === 2) {
                              var state_17955__$1 = state_17955;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17955__$1, 4, ch);
                            } else {
                              if (state_val_17956 === 11) {
                                var inst_17923 = state_17955[10];
                                var inst_17919 = state_17955[9];
                                var inst_17933 = state_17955[2];
                                var inst_17934 = [];
                                var inst_17935 = inst_17934.push(inst_17919);
                                var inst_17915 = inst_17934;
                                var inst_17916 = inst_17923;
                                var state_17955__$1 = function() {
                                  var statearr_17967 = state_17955;
                                  statearr_17967[11] = inst_17933;
                                  statearr_17967[7] = inst_17916;
                                  statearr_17967[8] = inst_17915;
                                  statearr_17967[12] = inst_17935;
                                  return statearr_17967;
                                }();
                                var statearr_17968_17995 = state_17955__$1;
                                statearr_17968_17995[2] = null;
                                statearr_17968_17995[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17956 === 9) {
                                  var inst_17915 = state_17955[8];
                                  var inst_17931 = cljs.core.vec.call(null, inst_17915);
                                  var state_17955__$1 = state_17955;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17955__$1, 11, out, inst_17931);
                                } else {
                                  if (state_val_17956 === 5) {
                                    var inst_17923 = state_17955[10];
                                    var inst_17916 = state_17955[7];
                                    var inst_17919 = state_17955[9];
                                    var inst_17923__$1 = f.call(null, inst_17919);
                                    var inst_17924 = cljs.core._EQ_.call(null, inst_17923__$1, inst_17916);
                                    var inst_17925 = cljs.core.keyword_identical_QMARK_.call(null, inst_17916, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                    var inst_17926 = inst_17924 || inst_17925;
                                    var state_17955__$1 = function() {
                                      var statearr_17969 = state_17955;
                                      statearr_17969[10] = inst_17923__$1;
                                      return statearr_17969;
                                    }();
                                    if (cljs.core.truth_(inst_17926)) {
                                      var statearr_17970_17996 = state_17955__$1;
                                      statearr_17970_17996[1] = 8;
                                    } else {
                                      var statearr_17971_17997 = state_17955__$1;
                                      statearr_17971_17997[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17956 === 14) {
                                      var inst_17948 = state_17955[2];
                                      var inst_17949 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_17955__$1 = function() {
                                        var statearr_17973 = state_17955;
                                        statearr_17973[13] = inst_17948;
                                        return statearr_17973;
                                      }();
                                      var statearr_17974_17998 = state_17955__$1;
                                      statearr_17974_17998[2] = inst_17949;
                                      statearr_17974_17998[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17956 === 10) {
                                        var inst_17938 = state_17955[2];
                                        var state_17955__$1 = state_17955;
                                        var statearr_17975_17999 = state_17955__$1;
                                        statearr_17975_17999[2] = inst_17938;
                                        statearr_17975_17999[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17956 === 8) {
                                          var inst_17923 = state_17955[10];
                                          var inst_17915 = state_17955[8];
                                          var inst_17919 = state_17955[9];
                                          var inst_17928 = inst_17915.push(inst_17919);
                                          var tmp17972 = inst_17915;
                                          var inst_17915__$1 = tmp17972;
                                          var inst_17916 = inst_17923;
                                          var state_17955__$1 = function() {
                                            var statearr_17976 = state_17955;
                                            statearr_17976[7] = inst_17916;
                                            statearr_17976[8] = inst_17915__$1;
                                            statearr_17976[14] = inst_17928;
                                            return statearr_17976;
                                          }();
                                          var statearr_17977_18000 = state_17955__$1;
                                          statearr_17977_18000[2] = null;
                                          statearr_17977_18000[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___17986, out);
        return function(switch__8658__auto__, c__8720__auto___17986, out) {
          return function() {
            var cljs$core$async$state_machine__8659__auto__ = null;
            var cljs$core$async$state_machine__8659__auto____0 = function() {
              var statearr_17981 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17981[0] = cljs$core$async$state_machine__8659__auto__;
              statearr_17981[1] = 1;
              return statearr_17981;
            };
            var cljs$core$async$state_machine__8659__auto____1 = function(state_17955) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_17955);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e17982) {
                    if (e17982 instanceof Object) {
                      var ex__8662__auto__ = e17982;
                      var statearr_17983_18001 = state_17955;
                      statearr_17983_18001[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17955);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17982;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__18002 = state_17955;
                  state_17955 = G__18002;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8659__auto__ = function(state_17955) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8659__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8659__auto____1.call(this, state_17955);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8659__auto____0;
            cljs$core$async$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8659__auto____1;
            return cljs$core$async$state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___17986, out);
      }();
      var state__8722__auto__ = function() {
        var statearr_17984 = f__8721__auto__.call(null);
        statearr_17984[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___17986;
        return statearr_17984;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___17986, out));
  return out;
};
cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3;
goog.provide("cljs_http.core");
goog.require("cljs.core");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("cljs.core.async");
goog.require("cljs_http.util");
goog.require("goog.net.Jsonp");
goog.require("clojure.string");
goog.require("goog.net.XhrIo");
cljs_http.core.pending_requests = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs_http.core.abort_BANG_ = function cljs_http$core$abort_BANG_(channel) {
  var temp__4423__auto__ = cljs.core.deref.call(null, cljs_http.core.pending_requests).call(null, channel);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var req = temp__4423__auto__;
    cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
    cljs.core.async.close_BANG_.call(null, channel);
    if (cljs.core.truth_(req.hasOwnProperty("abort"))) {
      return req.abort();
    } else {
      return (new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588)).cljs$core$IFn$_invoke$arity$1(req).cancel((new cljs.core.Keyword(null, "request", "request", 1772954723)).cljs$core$IFn$_invoke$arity$1(req));
    }
  } else {
    return null;
  }
};
cljs_http.core.aborted_QMARK_ = function cljs_http$core$aborted_QMARK_(xhr) {
  return cljs.core._EQ_.call(null, xhr.getLastErrorCode(), goog.net.ErrorCode.ABORT);
};
cljs_http.core.apply_default_headers_BANG_ = function cljs_http$core$apply_default_headers_BANG_(xhr, headers) {
  var seq__15338 = cljs.core.seq.call(null, cljs.core.map.call(null, cljs_http.util.camelize, cljs.core.keys.call(null, headers)));
  var chunk__15343 = null;
  var count__15344 = 0;
  var i__15345 = 0;
  while (true) {
    if (i__15345 < count__15344) {
      var h_name = cljs.core._nth.call(null, chunk__15343, i__15345);
      var seq__15346_15350 = cljs.core.seq.call(null, cljs.core.vals.call(null, headers));
      var chunk__15347_15351 = null;
      var count__15348_15352 = 0;
      var i__15349_15353 = 0;
      while (true) {
        if (i__15349_15353 < count__15348_15352) {
          var h_val_15354 = cljs.core._nth.call(null, chunk__15347_15351, i__15349_15353);
          xhr.headers.set(h_name, h_val_15354);
          var G__15355 = seq__15346_15350;
          var G__15356 = chunk__15347_15351;
          var G__15357 = count__15348_15352;
          var G__15358 = i__15349_15353 + 1;
          seq__15346_15350 = G__15355;
          chunk__15347_15351 = G__15356;
          count__15348_15352 = G__15357;
          i__15349_15353 = G__15358;
          continue;
        } else {
          var temp__4423__auto___15359 = cljs.core.seq.call(null, seq__15346_15350);
          if (temp__4423__auto___15359) {
            var seq__15346_15360__$1 = temp__4423__auto___15359;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__15346_15360__$1)) {
              var c__5092__auto___15361 = cljs.core.chunk_first.call(null, seq__15346_15360__$1);
              var G__15362 = cljs.core.chunk_rest.call(null, seq__15346_15360__$1);
              var G__15363 = c__5092__auto___15361;
              var G__15364 = cljs.core.count.call(null, c__5092__auto___15361);
              var G__15365 = 0;
              seq__15346_15350 = G__15362;
              chunk__15347_15351 = G__15363;
              count__15348_15352 = G__15364;
              i__15349_15353 = G__15365;
              continue;
            } else {
              var h_val_15366 = cljs.core.first.call(null, seq__15346_15360__$1);
              xhr.headers.set(h_name, h_val_15366);
              var G__15367 = cljs.core.next.call(null, seq__15346_15360__$1);
              var G__15368 = null;
              var G__15369 = 0;
              var G__15370 = 0;
              seq__15346_15350 = G__15367;
              chunk__15347_15351 = G__15368;
              count__15348_15352 = G__15369;
              i__15349_15353 = G__15370;
              continue;
            }
          } else {
          }
        }
        break;
      }
      var G__15371 = seq__15338;
      var G__15372 = chunk__15343;
      var G__15373 = count__15344;
      var G__15374 = i__15345 + 1;
      seq__15338 = G__15371;
      chunk__15343 = G__15372;
      count__15344 = G__15373;
      i__15345 = G__15374;
      continue;
    } else {
      var temp__4423__auto__ = cljs.core.seq.call(null, seq__15338);
      if (temp__4423__auto__) {
        var seq__15338__$1 = temp__4423__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15338__$1)) {
          var c__5092__auto__ = cljs.core.chunk_first.call(null, seq__15338__$1);
          var G__15375 = cljs.core.chunk_rest.call(null, seq__15338__$1);
          var G__15376 = c__5092__auto__;
          var G__15377 = cljs.core.count.call(null, c__5092__auto__);
          var G__15378 = 0;
          seq__15338 = G__15375;
          chunk__15343 = G__15376;
          count__15344 = G__15377;
          i__15345 = G__15378;
          continue;
        } else {
          var h_name = cljs.core.first.call(null, seq__15338__$1);
          var seq__15339_15379 = cljs.core.seq.call(null, cljs.core.vals.call(null, headers));
          var chunk__15340_15380 = null;
          var count__15341_15381 = 0;
          var i__15342_15382 = 0;
          while (true) {
            if (i__15342_15382 < count__15341_15381) {
              var h_val_15383 = cljs.core._nth.call(null, chunk__15340_15380, i__15342_15382);
              xhr.headers.set(h_name, h_val_15383);
              var G__15384 = seq__15339_15379;
              var G__15385 = chunk__15340_15380;
              var G__15386 = count__15341_15381;
              var G__15387 = i__15342_15382 + 1;
              seq__15339_15379 = G__15384;
              chunk__15340_15380 = G__15385;
              count__15341_15381 = G__15386;
              i__15342_15382 = G__15387;
              continue;
            } else {
              var temp__4423__auto___15388__$1 = cljs.core.seq.call(null, seq__15339_15379);
              if (temp__4423__auto___15388__$1) {
                var seq__15339_15389__$1 = temp__4423__auto___15388__$1;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__15339_15389__$1)) {
                  var c__5092__auto___15390 = cljs.core.chunk_first.call(null, seq__15339_15389__$1);
                  var G__15391 = cljs.core.chunk_rest.call(null, seq__15339_15389__$1);
                  var G__15392 = c__5092__auto___15390;
                  var G__15393 = cljs.core.count.call(null, c__5092__auto___15390);
                  var G__15394 = 0;
                  seq__15339_15379 = G__15391;
                  chunk__15340_15380 = G__15392;
                  count__15341_15381 = G__15393;
                  i__15342_15382 = G__15394;
                  continue;
                } else {
                  var h_val_15395 = cljs.core.first.call(null, seq__15339_15389__$1);
                  xhr.headers.set(h_name, h_val_15395);
                  var G__15396 = cljs.core.next.call(null, seq__15339_15389__$1);
                  var G__15397 = null;
                  var G__15398 = 0;
                  var G__15399 = 0;
                  seq__15339_15379 = G__15396;
                  chunk__15340_15380 = G__15397;
                  count__15341_15381 = G__15398;
                  i__15342_15382 = G__15399;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          var G__15400 = cljs.core.next.call(null, seq__15338__$1);
          var G__15401 = null;
          var G__15402 = 0;
          var G__15403 = 0;
          seq__15338 = G__15400;
          chunk__15343 = G__15401;
          count__15344 = G__15402;
          i__15345 = G__15403;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs_http.core.apply_response_type_BANG_ = function cljs_http$core$apply_response_type_BANG_(xhr, response_type) {
  return xhr.setResponseType(function() {
    var G__15405 = response_type;
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "array-buffer", "array-buffer", 519008380), G__15405)) {
      return goog.net.XhrIo.ResponseType.ARRAY_BUFFER;
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "blob", "blob", 1636965233), G__15405)) {
        return goog.net.XhrIo.ResponseType.BLOB;
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "document", "document", -1329188687), G__15405)) {
          return goog.net.XhrIo.ResponseType.DOCUMENT;
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "text", "text", -1790561697), G__15405)) {
            return goog.net.XhrIo.ResponseType.TEXT;
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "default", "default", -1987822328), G__15405)) {
              return goog.net.XhrIo.ResponseType.DEFAULT;
            } else {
              if (cljs.core._EQ_.call(null, null, G__15405)) {
                return goog.net.XhrIo.ResponseType.DEFAULT;
              } else {
                throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(response_type)].join(""));
              }
            }
          }
        }
      }
    }
  }());
};
cljs_http.core.build_xhr = function cljs_http$core$build_xhr(p__15406) {
  var map__15409 = p__15406;
  var map__15409__$1 = cljs.core.seq_QMARK_.call(null, map__15409) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15409) : map__15409;
  var request = map__15409__$1;
  var with_credentials_QMARK_ = cljs.core.get.call(null, map__15409__$1, new cljs.core.Keyword(null, "with-credentials?", "with-credentials?", -1773202222));
  var default_headers = cljs.core.get.call(null, map__15409__$1, new cljs.core.Keyword(null, "default-headers", "default-headers", -43146094));
  var response_type = cljs.core.get.call(null, map__15409__$1, new cljs.core.Keyword(null, "response-type", "response-type", -1493770458));
  var timeout = function() {
    var or__4307__auto__ = (new cljs.core.Keyword(null, "timeout", "timeout", -318625318)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return 0;
    }
  }();
  var send_credentials = with_credentials_QMARK_ == null ? true : with_credentials_QMARK_;
  var G__15410 = new goog.net.XhrIo;
  cljs_http.core.apply_default_headers_BANG_.call(null, G__15410, default_headers);
  cljs_http.core.apply_response_type_BANG_.call(null, G__15410, response_type);
  G__15410.setTimeoutInterval(timeout);
  G__15410.setWithCredentials(send_credentials);
  return G__15410;
};
cljs_http.core.error_kw = cljs.core.PersistentHashMap.fromArrays([0, 7, 1, 4, 6, 3, 2, 9, 5, 8], [new cljs.core.Keyword(null, "no-error", "no-error", 1984610064), new cljs.core.Keyword(null, "abort", "abort", 521193198), new cljs.core.Keyword(null, "access-denied", "access-denied", 959449406), new cljs.core.Keyword(null, "custom-error", "custom-error", -1565161123), new cljs.core.Keyword(null, "http-error", "http-error", -1040049553), new cljs.core.Keyword(null, "ff-silent-error", "ff-silent-error", 
189390514), new cljs.core.Keyword(null, "file-not-found", "file-not-found", -65398940), new cljs.core.Keyword(null, "offline", "offline", -107631935), new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "timeout", "timeout", -318625318)]);
cljs_http.core.xhr = function cljs_http$core$xhr(p__15411) {
  var map__15437 = p__15411;
  var map__15437__$1 = cljs.core.seq_QMARK_.call(null, map__15437) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15437) : map__15437;
  var request = map__15437__$1;
  var request_method = cljs.core.get.call(null, map__15437__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
  var headers = cljs.core.get.call(null, map__15437__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var body = cljs.core.get.call(null, map__15437__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var with_credentials_QMARK_ = cljs.core.get.call(null, map__15437__$1, new cljs.core.Keyword(null, "with-credentials?", "with-credentials?", -1773202222));
  var cancel = cljs.core.get.call(null, map__15437__$1, new cljs.core.Keyword(null, "cancel", "cancel", -1964088360));
  var channel = cljs.core.async.chan.call(null);
  var request_url = cljs_http.util.build_url.call(null, request);
  var method = cljs.core.name.call(null, function() {
    var or__4307__auto__ = request_method;
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return new cljs.core.Keyword(null, "get", "get", 1683182755);
    }
  }());
  var headers__$1 = cljs_http.util.build_headers.call(null, headers);
  var xhr__$1 = cljs_http.core.build_xhr.call(null, request);
  cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.assoc, channel, xhr__$1);
  xhr__$1.listen(goog.net.EventType.COMPLETE, function(channel, request_url, method, headers__$1, xhr__$1, map__15437, map__15437__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel) {
    return function(evt) {
      var target = evt.target;
      var response = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "status", "status", -1997798413), target.getStatus(), new cljs.core.Keyword(null, "success", "success", 1890645906), target.isSuccess(), new cljs.core.Keyword(null, "body", "body", -2049205669), target.getResponse(), new cljs.core.Keyword(null, "headers", "headers", -835030129), cljs_http.util.parse_headers.call(null, target.getAllResponseHeaders()), new cljs.core.Keyword(null, "trace-redirects", "trace-redirects", 
      -1149427907), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [request_url, target.getLastUri()], null), new cljs.core.Keyword(null, "error-code", "error-code", 180497232), cljs_http.core.error_kw.call(null, target.getLastErrorCode()), new cljs.core.Keyword(null, "error-text", "error-text", 2021893718), target.getLastError()], null);
      if (cljs.core.not.call(null, cljs_http.core.aborted_QMARK_.call(null, xhr__$1))) {
        cljs.core.async.put_BANG_.call(null, channel, response);
      } else {
      }
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      if (cljs.core.truth_(cancel)) {
        cljs.core.async.close_BANG_.call(null, cancel);
      } else {
      }
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, request_url, method, headers__$1, xhr__$1, map__15437, map__15437__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel));
  xhr__$1.send(request_url, method, body, headers__$1);
  if (cljs.core.truth_(cancel)) {
    var c__8720__auto___15462 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___15462, channel, request_url, method, headers__$1, xhr__$1, map__15437, map__15437__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel) {
      return function() {
        var f__8721__auto__ = function() {
          var switch__8658__auto__ = function(c__8720__auto___15462, channel, request_url, method, headers__$1, xhr__$1, map__15437, map__15437__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel) {
            return function(state_15448) {
              var state_val_15449 = state_15448[1];
              if (state_val_15449 === 1) {
                var state_15448__$1 = state_15448;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15448__$1, 2, cancel);
              } else {
                if (state_val_15449 === 2) {
                  var inst_15439 = state_15448[2];
                  var inst_15440 = xhr__$1.isComplete();
                  var inst_15441 = cljs.core.not.call(null, inst_15440);
                  var state_15448__$1 = function() {
                    var statearr_15450 = state_15448;
                    statearr_15450[7] = inst_15439;
                    return statearr_15450;
                  }();
                  if (inst_15441) {
                    var statearr_15451_15463 = state_15448__$1;
                    statearr_15451_15463[1] = 3;
                  } else {
                    var statearr_15452_15464 = state_15448__$1;
                    statearr_15452_15464[1] = 4;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15449 === 3) {
                    var inst_15443 = xhr__$1.abort();
                    var state_15448__$1 = state_15448;
                    var statearr_15453_15465 = state_15448__$1;
                    statearr_15453_15465[2] = inst_15443;
                    statearr_15453_15465[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15449 === 4) {
                      var state_15448__$1 = state_15448;
                      var statearr_15454_15466 = state_15448__$1;
                      statearr_15454_15466[2] = null;
                      statearr_15454_15466[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15449 === 5) {
                        var inst_15446 = state_15448[2];
                        var state_15448__$1 = state_15448;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15448__$1, inst_15446);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(c__8720__auto___15462, channel, request_url, method, headers__$1, xhr__$1, map__15437, map__15437__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel);
          return function(switch__8658__auto__, c__8720__auto___15462, channel, request_url, method, headers__$1, xhr__$1, map__15437, map__15437__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel) {
            return function() {
              var cljs_http$core$xhr_$_state_machine__8659__auto__ = null;
              var cljs_http$core$xhr_$_state_machine__8659__auto____0 = function() {
                var statearr_15458 = [null, null, null, null, null, null, null, null];
                statearr_15458[0] = cljs_http$core$xhr_$_state_machine__8659__auto__;
                statearr_15458[1] = 1;
                return statearr_15458;
              };
              var cljs_http$core$xhr_$_state_machine__8659__auto____1 = function(state_15448) {
                while (true) {
                  var ret_value__8660__auto__ = function() {
                    try {
                      while (true) {
                        var result__8661__auto__ = switch__8658__auto__.call(null, state_15448);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__8661__auto__;
                        }
                        break;
                      }
                    } catch (e15459) {
                      if (e15459 instanceof Object) {
                        var ex__8662__auto__ = e15459;
                        var statearr_15460_15467 = state_15448;
                        statearr_15460_15467[5] = ex__8662__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15448);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e15459;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__15468 = state_15448;
                    state_15448 = G__15468;
                    continue;
                  } else {
                    return ret_value__8660__auto__;
                  }
                  break;
                }
              };
              cljs_http$core$xhr_$_state_machine__8659__auto__ = function(state_15448) {
                switch(arguments.length) {
                  case 0:
                    return cljs_http$core$xhr_$_state_machine__8659__auto____0.call(this);
                  case 1:
                    return cljs_http$core$xhr_$_state_machine__8659__auto____1.call(this, state_15448);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs_http$core$xhr_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs_http$core$xhr_$_state_machine__8659__auto____0;
              cljs_http$core$xhr_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs_http$core$xhr_$_state_machine__8659__auto____1;
              return cljs_http$core$xhr_$_state_machine__8659__auto__;
            }();
          }(switch__8658__auto__, c__8720__auto___15462, channel, request_url, method, headers__$1, xhr__$1, map__15437, map__15437__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel);
        }();
        var state__8722__auto__ = function() {
          var statearr_15461 = f__8721__auto__.call(null);
          statearr_15461[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___15462;
          return statearr_15461;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
      };
    }(c__8720__auto___15462, channel, request_url, method, headers__$1, xhr__$1, map__15437, map__15437__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel));
  } else {
  }
  return channel;
};
cljs_http.core.jsonp = function cljs_http$core$jsonp(p__15469) {
  var map__15485 = p__15469;
  var map__15485__$1 = cljs.core.seq_QMARK_.call(null, map__15485) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15485) : map__15485;
  var request = map__15485__$1;
  var timeout = cljs.core.get.call(null, map__15485__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
  var callback_name = cljs.core.get.call(null, map__15485__$1, new cljs.core.Keyword(null, "callback-name", "callback-name", 336964714));
  var cancel = cljs.core.get.call(null, map__15485__$1, new cljs.core.Keyword(null, "cancel", "cancel", -1964088360));
  var channel = cljs.core.async.chan.call(null);
  var jsonp__$1 = new goog.net.Jsonp(cljs_http.util.build_url.call(null, request), callback_name);
  jsonp__$1.setRequestTimeout(timeout);
  var req_15500 = jsonp__$1.send(null, function(channel, jsonp__$1, map__15485, map__15485__$1, request, timeout, callback_name, cancel) {
    return function cljs_http$core$jsonp_$_success_callback(data) {
      var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), 200, new cljs.core.Keyword(null, "success", "success", 1890645906), true, new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.core.js__GT_clj.call(null, data, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true)], null);
      cljs.core.async.put_BANG_.call(null, channel, response);
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      if (cljs.core.truth_(cancel)) {
        cljs.core.async.close_BANG_.call(null, cancel);
      } else {
      }
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, jsonp__$1, map__15485, map__15485__$1, request, timeout, callback_name, cancel), function(channel, jsonp__$1, map__15485, map__15485__$1, request, timeout, callback_name, cancel) {
    return function cljs_http$core$jsonp_$_error_callback() {
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      if (cljs.core.truth_(cancel)) {
        cljs.core.async.close_BANG_.call(null, cancel);
      } else {
      }
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, jsonp__$1, map__15485, map__15485__$1, request, timeout, callback_name, cancel));
  cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.assoc, channel, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588), jsonp__$1, new cljs.core.Keyword(null, "request", "request", 1772954723), req_15500], null));
  if (cljs.core.truth_(cancel)) {
    var c__8720__auto___15501 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___15501, req_15500, channel, jsonp__$1, map__15485, map__15485__$1, request, timeout, callback_name, cancel) {
      return function() {
        var f__8721__auto__ = function() {
          var switch__8658__auto__ = function(c__8720__auto___15501, req_15500, channel, jsonp__$1, map__15485, map__15485__$1, request, timeout, callback_name, cancel) {
            return function(state_15490) {
              var state_val_15491 = state_15490[1];
              if (state_val_15491 === 1) {
                var state_15490__$1 = state_15490;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15490__$1, 2, cancel);
              } else {
                if (state_val_15491 === 2) {
                  var inst_15487 = state_15490[2];
                  var inst_15488 = jsonp__$1.cancel(req_15500);
                  var state_15490__$1 = function() {
                    var statearr_15492 = state_15490;
                    statearr_15492[7] = inst_15487;
                    return statearr_15492;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15490__$1, inst_15488);
                } else {
                  return null;
                }
              }
            };
          }(c__8720__auto___15501, req_15500, channel, jsonp__$1, map__15485, map__15485__$1, request, timeout, callback_name, cancel);
          return function(switch__8658__auto__, c__8720__auto___15501, req_15500, channel, jsonp__$1, map__15485, map__15485__$1, request, timeout, callback_name, cancel) {
            return function() {
              var cljs_http$core$jsonp_$_state_machine__8659__auto__ = null;
              var cljs_http$core$jsonp_$_state_machine__8659__auto____0 = function() {
                var statearr_15496 = [null, null, null, null, null, null, null, null];
                statearr_15496[0] = cljs_http$core$jsonp_$_state_machine__8659__auto__;
                statearr_15496[1] = 1;
                return statearr_15496;
              };
              var cljs_http$core$jsonp_$_state_machine__8659__auto____1 = function(state_15490) {
                while (true) {
                  var ret_value__8660__auto__ = function() {
                    try {
                      while (true) {
                        var result__8661__auto__ = switch__8658__auto__.call(null, state_15490);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__8661__auto__;
                        }
                        break;
                      }
                    } catch (e15497) {
                      if (e15497 instanceof Object) {
                        var ex__8662__auto__ = e15497;
                        var statearr_15498_15502 = state_15490;
                        statearr_15498_15502[5] = ex__8662__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15490);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e15497;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__15503 = state_15490;
                    state_15490 = G__15503;
                    continue;
                  } else {
                    return ret_value__8660__auto__;
                  }
                  break;
                }
              };
              cljs_http$core$jsonp_$_state_machine__8659__auto__ = function(state_15490) {
                switch(arguments.length) {
                  case 0:
                    return cljs_http$core$jsonp_$_state_machine__8659__auto____0.call(this);
                  case 1:
                    return cljs_http$core$jsonp_$_state_machine__8659__auto____1.call(this, state_15490);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs_http$core$jsonp_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = cljs_http$core$jsonp_$_state_machine__8659__auto____0;
              cljs_http$core$jsonp_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = cljs_http$core$jsonp_$_state_machine__8659__auto____1;
              return cljs_http$core$jsonp_$_state_machine__8659__auto__;
            }();
          }(switch__8658__auto__, c__8720__auto___15501, req_15500, channel, jsonp__$1, map__15485, map__15485__$1, request, timeout, callback_name, cancel);
        }();
        var state__8722__auto__ = function() {
          var statearr_15499 = f__8721__auto__.call(null);
          statearr_15499[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___15501;
          return statearr_15499;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
      };
    }(c__8720__auto___15501, req_15500, channel, jsonp__$1, map__15485, map__15485__$1, request, timeout, callback_name, cancel));
  } else {
  }
  return channel;
};
cljs_http.core.request = function cljs_http$core$request(p__15504) {
  var map__15506 = p__15504;
  var map__15506__$1 = cljs.core.seq_QMARK_.call(null, map__15506) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15506) : map__15506;
  var request__$1 = map__15506__$1;
  var request_method = cljs.core.get.call(null, map__15506__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
  if (cljs.core._EQ_.call(null, request_method, new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588))) {
    return cljs_http.core.jsonp.call(null, request__$1);
  } else {
    return cljs_http.core.xhr.call(null, request__$1);
  }
};
goog.provide("cljs_http.client");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("cljs_http.core");
goog.require("cljs.core.async");
goog.require("no.en.core");
goog.require("cljs_http.util");
goog.require("clojure.string");
goog.require("cljs.reader");
cljs_http.client.if_pos = function cljs_http$client$if_pos(v) {
  if (cljs.core.truth_(function() {
    var and__4295__auto__ = v;
    if (cljs.core.truth_(and__4295__auto__)) {
      return v > 0;
    } else {
      return and__4295__auto__;
    }
  }())) {
    return v;
  } else {
    return null;
  }
};
cljs_http.client.parse_query_params = function cljs_http$client$parse_query_params(s) {
  if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, s))) {
    return cljs.core.reduce.call(null, function(p1__15157_SHARP_, p2__15156_SHARP_) {
      var vec__15159 = clojure.string.split.call(null, p2__15156_SHARP_, /=/);
      var k = cljs.core.nth.call(null, vec__15159, 0, null);
      var v = cljs.core.nth.call(null, vec__15159, 1, null);
      return cljs.core.assoc.call(null, p1__15157_SHARP_, cljs.core.keyword.call(null, no.en.core.url_decode.call(null, k)), no.en.core.url_decode.call(null, v));
    }, cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /&/));
  } else {
    return null;
  }
};
cljs_http.client.parse_url = function cljs_http$client$parse_url(url) {
  if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, url))) {
    var uri = goog.Uri.parse(url);
    var query_data = uri.getQueryData();
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "scheme", "scheme", 90199613), cljs.core.keyword.call(null, uri.getScheme()), new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), uri.getDomain(), new cljs.core.Keyword(null, "server-port", "server-port", 663745648), cljs_http.client.if_pos.call(null, uri.getPort()), new cljs.core.Keyword(null, "uri", "uri", -774711847), uri.getPath(), new cljs.core.Keyword(null, "query-string", "query-string", -1018845061), 
    cljs.core.not.call(null, query_data.isEmpty()) ? [cljs.core.str(query_data)].join("") : null, new cljs.core.Keyword(null, "query-params", "query-params", 900640534), cljs.core.not.call(null, query_data.isEmpty()) ? cljs_http.client.parse_query_params.call(null, [cljs.core.str(query_data)].join("")) : null], null);
  } else {
    return null;
  }
};
cljs_http.client.unexceptional_status_QMARK_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [205, null, 206, null, 300, null, 204, null, 307, null, 303, null, 301, null, 201, null, 302, null, 202, null, 200, null, 203, null, 207, null], null), null);
cljs_http.client.encode_val = function cljs_http$client$encode_val(k, v) {
  return [cljs.core.str(no.en.core.url_encode.call(null, cljs.core.name.call(null, k))), cljs.core.str("\x3d"), cljs.core.str(no.en.core.url_encode.call(null, [cljs.core.str(v)].join("")))].join("");
};
cljs_http.client.encode_vals = function cljs_http$client$encode_vals(k, vs) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p1__15160_SHARP_) {
    return cljs_http.client.encode_val.call(null, k, p1__15160_SHARP_);
  }, vs));
};
cljs_http.client.encode_param = function cljs_http$client$encode_param(p__15161) {
  var vec__15163 = p__15161;
  var k = cljs.core.nth.call(null, vec__15163, 0, null);
  var v = cljs.core.nth.call(null, vec__15163, 1, null);
  if (cljs.core.coll_QMARK_.call(null, v)) {
    return cljs_http.client.encode_vals.call(null, k, v);
  } else {
    return cljs_http.client.encode_val.call(null, k, v);
  }
};
cljs_http.client.generate_query_string = function cljs_http$client$generate_query_string(params) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, cljs_http.client.encode_param, params));
};
cljs_http.client.regex_char_esc_smap = function() {
  var esc_chars = "()*\x26^%$#!+";
  return cljs.core.zipmap.call(null, esc_chars, cljs.core.map.call(null, function(esc_chars) {
    return function(p1__15164_SHARP_) {
      return [cljs.core.str("\\"), cljs.core.str(p1__15164_SHARP_)].join("");
    };
  }(esc_chars), esc_chars));
}();
cljs_http.client.escape_special = function cljs_http$client$escape_special(string) {
  return cljs.core.reduce.call(null, cljs.core.str, cljs.core.replace.call(null, cljs_http.client.regex_char_esc_smap, string));
};
cljs_http.client.decode_body = function cljs_http$client$decode_body(response, decode_fn, content_type, request_method) {
  if (cljs.core.truth_(function() {
    var and__4295__auto__ = cljs.core.not_EQ_.call(null, new cljs.core.Keyword(null, "head", "head", -771383919), request_method);
    if (and__4295__auto__) {
      var and__4295__auto____$1 = cljs.core.not_EQ_.call(null, 204, (new cljs.core.Keyword(null, "status", "status", -1997798413)).cljs$core$IFn$_invoke$arity$1(response));
      if (and__4295__auto____$1) {
        return cljs.core.re_find.call(null, cljs.core.re_pattern.call(null, [cljs.core.str("(?i)"), cljs.core.str(cljs_http.client.escape_special.call(null, content_type))].join("")), [cljs.core.str(cljs.core.get.call(null, (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(response), "content-type", ""))].join(""));
      } else {
        return and__4295__auto____$1;
      }
    } else {
      return and__4295__auto__;
    }
  }())) {
    return cljs.core.update_in.call(null, response, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "body", "body", -2049205669)], null), decode_fn);
  } else {
    return response;
  }
};
cljs_http.client.wrap_edn_params = function cljs_http$client$wrap_edn_params(client) {
  return function(request) {
    var temp__4421__auto__ = (new cljs.core.Keyword(null, "edn-params", "edn-params", 894273052)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4421__auto__)) {
      var params = temp__4421__auto__;
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "edn-params", "edn-params", 894273052)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.core.pr_str.call(null, params)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), "application/edn"));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_edn_response = function cljs_http$client$wrap_edn_response(client) {
  return function(request) {
    return cljs.core.async.map.call(null, function(p1__15165_SHARP_) {
      return cljs_http.client.decode_body.call(null, p1__15165_SHARP_, cljs.reader.read_string, "application/edn", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
    }, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_default_headers = function cljs_http$client$wrap_default_headers() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.wrap_default_headers.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs_http.client.wrap_default_headers.cljs$core$IFn$_invoke$arity$variadic = function(client, p__15168) {
  var vec__15169 = p__15168;
  var default_headers = cljs.core.nth.call(null, vec__15169, 0, null);
  return function(vec__15169, default_headers) {
    return function(request) {
      var temp__4421__auto__ = function() {
        var or__4307__auto__ = (new cljs.core.Keyword(null, "default-headers", "default-headers", -43146094)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return default_headers;
        }
      }();
      if (cljs.core.truth_(temp__4421__auto__)) {
        var default_headers__$1 = temp__4421__auto__;
        return client.call(null, cljs.core.assoc.call(null, request, new cljs.core.Keyword(null, "default-headers", "default-headers", -43146094), default_headers__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__15169, default_headers);
};
cljs_http.client.wrap_default_headers.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_default_headers.cljs$lang$applyTo = function(seq15166) {
  var G__15167 = cljs.core.first.call(null, seq15166);
  var seq15166__$1 = cljs.core.next.call(null, seq15166);
  return cljs_http.client.wrap_default_headers.cljs$core$IFn$_invoke$arity$variadic(G__15167, seq15166__$1);
};
cljs_http.client.wrap_accept = function cljs_http$client$wrap_accept() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic = function(client, p__15172) {
  var vec__15173 = p__15172;
  var accept = cljs.core.nth.call(null, vec__15173, 0, null);
  return function(vec__15173, accept) {
    return function(request) {
      var temp__4421__auto__ = function() {
        var or__4307__auto__ = (new cljs.core.Keyword(null, "accept", "accept", 1874130431)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return accept;
        }
      }();
      if (cljs.core.truth_(temp__4421__auto__)) {
        var accept__$1 = temp__4421__auto__;
        return client.call(null, cljs.core.assoc_in.call(null, request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "accept"], null), accept__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__15173, accept);
};
cljs_http.client.wrap_accept.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_accept.cljs$lang$applyTo = function(seq15170) {
  var G__15171 = cljs.core.first.call(null, seq15170);
  var seq15170__$1 = cljs.core.next.call(null, seq15170);
  return cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic(G__15171, seq15170__$1);
};
cljs_http.client.wrap_content_type = function cljs_http$client$wrap_content_type() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic = function(client, p__15176) {
  var vec__15177 = p__15176;
  var content_type = cljs.core.nth.call(null, vec__15177, 0, null);
  return function(vec__15177, content_type) {
    return function(request) {
      var temp__4421__auto__ = function() {
        var or__4307__auto__ = (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return content_type;
        }
      }();
      if (cljs.core.truth_(temp__4421__auto__)) {
        var content_type__$1 = temp__4421__auto__;
        return client.call(null, cljs.core.assoc_in.call(null, request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), content_type__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__15177, content_type);
};
cljs_http.client.wrap_content_type.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_content_type.cljs$lang$applyTo = function(seq15174) {
  var G__15175 = cljs.core.first.call(null, seq15174);
  var seq15174__$1 = cljs.core.next.call(null, seq15174);
  return cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic(G__15175, seq15174__$1);
};
cljs_http.client.default_transit_opts = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "encoding", "encoding", 1728578272), new cljs.core.Keyword(null, "json", "json", 1279968570), new cljs.core.Keyword(null, "encoding-opts", "encoding-opts", -1805664631), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "decoding", "decoding", -568180903), new cljs.core.Keyword(null, "json", "json", 1279968570), new cljs.core.Keyword(null, "decoding-opts", "decoding-opts", 
1050289140), cljs.core.PersistentArrayMap.EMPTY], null);
cljs_http.client.wrap_transit_params = function cljs_http$client$wrap_transit_params(client) {
  return function(request) {
    var temp__4421__auto__ = (new cljs.core.Keyword(null, "transit-params", "transit-params", 357261095)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4421__auto__)) {
      var params = temp__4421__auto__;
      var map__15179 = cljs.core.merge.call(null, cljs_http.client.default_transit_opts, (new cljs.core.Keyword(null, "transit-opts", "transit-opts", 1104386010)).cljs$core$IFn$_invoke$arity$1(request));
      var map__15179__$1 = cljs.core.seq_QMARK_.call(null, map__15179) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15179) : map__15179;
      var encoding = cljs.core.get.call(null, map__15179__$1, new cljs.core.Keyword(null, "encoding", "encoding", 1728578272));
      var encoding_opts = cljs.core.get.call(null, map__15179__$1, new cljs.core.Keyword(null, "encoding-opts", "encoding-opts", -1805664631));
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "transit-params", "transit-params", 357261095)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.util.transit_encode.call(null, params, encoding, encoding_opts)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), 
      "application/transit+json"));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_transit_response = function cljs_http$client$wrap_transit_response(client) {
  return function(request) {
    var map__15183 = cljs.core.merge.call(null, cljs_http.client.default_transit_opts, (new cljs.core.Keyword(null, "transit-opts", "transit-opts", 1104386010)).cljs$core$IFn$_invoke$arity$1(request));
    var map__15183__$1 = cljs.core.seq_QMARK_.call(null, map__15183) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15183) : map__15183;
    var decoding = cljs.core.get.call(null, map__15183__$1, new cljs.core.Keyword(null, "decoding", "decoding", -568180903));
    var decoding_opts = cljs.core.get.call(null, map__15183__$1, new cljs.core.Keyword(null, "decoding-opts", "decoding-opts", 1050289140));
    var transit_decode = function(map__15183, map__15183__$1, decoding, decoding_opts) {
      return function(p1__15180_SHARP_) {
        return cljs_http.util.transit_decode.call(null, p1__15180_SHARP_, decoding, decoding_opts);
      };
    }(map__15183, map__15183__$1, decoding, decoding_opts);
    return cljs.core.async.map.call(null, function(map__15183, map__15183__$1, decoding, decoding_opts, transit_decode) {
      return function(p1__15181_SHARP_) {
        return cljs_http.client.decode_body.call(null, p1__15181_SHARP_, transit_decode, "application/transit+json", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
      };
    }(map__15183, map__15183__$1, decoding, decoding_opts, transit_decode), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_json_params = function cljs_http$client$wrap_json_params(client) {
  return function(request) {
    var temp__4421__auto__ = (new cljs.core.Keyword(null, "json-params", "json-params", -1112693596)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4421__auto__)) {
      var params = temp__4421__auto__;
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "json-params", "json-params", -1112693596)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.util.json_encode.call(null, params)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), "application/json"));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_json_response = function cljs_http$client$wrap_json_response(client) {
  return function(request) {
    return cljs.core.async.map.call(null, function(p1__15184_SHARP_) {
      return cljs_http.client.decode_body.call(null, p1__15184_SHARP_, cljs_http.util.json_decode, "application/json", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
    }, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_query_params = function cljs_http$client$wrap_query_params(client) {
  return function(p__15187) {
    var map__15188 = p__15187;
    var map__15188__$1 = cljs.core.seq_QMARK_.call(null, map__15188) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15188) : map__15188;
    var req = map__15188__$1;
    var query_params = cljs.core.get.call(null, map__15188__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    if (cljs.core.truth_(query_params)) {
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "query-params", "query-params", 900640534)), new cljs.core.Keyword(null, "query-string", "query-string", -1018845061), cljs_http.client.generate_query_string.call(null, query_params)));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_form_params = function cljs_http$client$wrap_form_params(client) {
  return function(p__15191) {
    var map__15192 = p__15191;
    var map__15192__$1 = cljs.core.seq_QMARK_.call(null, map__15192) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15192) : map__15192;
    var request = map__15192__$1;
    var form_params = cljs.core.get.call(null, map__15192__$1, new cljs.core.Keyword(null, "form-params", "form-params", 1884296467));
    var request_method = cljs.core.get.call(null, map__15192__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
    if (cljs.core.truth_(function() {
      var and__4295__auto__ = form_params;
      if (cljs.core.truth_(and__4295__auto__)) {
        return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "patch", "patch", 380775109), null, new cljs.core.Keyword(null, "delete", "delete", -1768633620), null, new cljs.core.Keyword(null, "post", "post", 269697687), null, new cljs.core.Keyword(null, "put", "put", 1299772570), null], null), null)).call(null, request_method);
      } else {
        return and__4295__auto__;
      }
    }())) {
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "form-params", "form-params", 1884296467)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.client.generate_query_string.call(null, form_params)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), "application/x-www-form-urlencoded"))
      ;
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.generate_form_data = function cljs_http$client$generate_form_data(params) {
  var form_data = new FormData;
  var seq__15199_15205 = cljs.core.seq.call(null, params);
  var chunk__15200_15206 = null;
  var count__15201_15207 = 0;
  var i__15202_15208 = 0;
  while (true) {
    if (i__15202_15208 < count__15201_15207) {
      var vec__15203_15209 = cljs.core._nth.call(null, chunk__15200_15206, i__15202_15208);
      var k_15210 = cljs.core.nth.call(null, vec__15203_15209, 0, null);
      var v_15211 = cljs.core.nth.call(null, vec__15203_15209, 1, null);
      form_data.append(cljs.core.name.call(null, k_15210), v_15211);
      var G__15212 = seq__15199_15205;
      var G__15213 = chunk__15200_15206;
      var G__15214 = count__15201_15207;
      var G__15215 = i__15202_15208 + 1;
      seq__15199_15205 = G__15212;
      chunk__15200_15206 = G__15213;
      count__15201_15207 = G__15214;
      i__15202_15208 = G__15215;
      continue;
    } else {
      var temp__4423__auto___15216 = cljs.core.seq.call(null, seq__15199_15205);
      if (temp__4423__auto___15216) {
        var seq__15199_15217__$1 = temp__4423__auto___15216;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15199_15217__$1)) {
          var c__5092__auto___15218 = cljs.core.chunk_first.call(null, seq__15199_15217__$1);
          var G__15219 = cljs.core.chunk_rest.call(null, seq__15199_15217__$1);
          var G__15220 = c__5092__auto___15218;
          var G__15221 = cljs.core.count.call(null, c__5092__auto___15218);
          var G__15222 = 0;
          seq__15199_15205 = G__15219;
          chunk__15200_15206 = G__15220;
          count__15201_15207 = G__15221;
          i__15202_15208 = G__15222;
          continue;
        } else {
          var vec__15204_15223 = cljs.core.first.call(null, seq__15199_15217__$1);
          var k_15224 = cljs.core.nth.call(null, vec__15204_15223, 0, null);
          var v_15225 = cljs.core.nth.call(null, vec__15204_15223, 1, null);
          form_data.append(cljs.core.name.call(null, k_15224), v_15225);
          var G__15226 = cljs.core.next.call(null, seq__15199_15217__$1);
          var G__15227 = null;
          var G__15228 = 0;
          var G__15229 = 0;
          seq__15199_15205 = G__15226;
          chunk__15200_15206 = G__15227;
          count__15201_15207 = G__15228;
          i__15202_15208 = G__15229;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return form_data;
};
cljs_http.client.wrap_multipart_params = function cljs_http$client$wrap_multipart_params(client) {
  return function(p__15232) {
    var map__15233 = p__15232;
    var map__15233__$1 = cljs.core.seq_QMARK_.call(null, map__15233) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15233) : map__15233;
    var request = map__15233__$1;
    var multipart_params = cljs.core.get.call(null, map__15233__$1, new cljs.core.Keyword(null, "multipart-params", "multipart-params", -1033508707));
    var request_method = cljs.core.get.call(null, map__15233__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
    if (cljs.core.truth_(function() {
      var and__4295__auto__ = multipart_params;
      if (cljs.core.truth_(and__4295__auto__)) {
        return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "patch", "patch", 380775109), null, new cljs.core.Keyword(null, "delete", "delete", -1768633620), null, new cljs.core.Keyword(null, "post", "post", 269697687), null, new cljs.core.Keyword(null, "put", "put", 1299772570), null], null), null)).call(null, request_method);
      } else {
        return and__4295__auto__;
      }
    }())) {
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "multipart-params", "multipart-params", -1033508707)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.client.generate_form_data.call(null, multipart_params)));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_method = function cljs_http$client$wrap_method(client) {
  return function(req) {
    var temp__4421__auto__ = (new cljs.core.Keyword(null, "method", "method", 55703592)).cljs$core$IFn$_invoke$arity$1(req);
    if (cljs.core.truth_(temp__4421__auto__)) {
      var m = temp__4421__auto__;
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "method", "method", 55703592)), new cljs.core.Keyword(null, "request-method", "request-method", 1764796830), m));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_server_name = function cljs_http$client$wrap_server_name(client, server_name) {
  return function(p1__15234_SHARP_) {
    return client.call(null, cljs.core.assoc.call(null, p1__15234_SHARP_, new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), server_name));
  };
};
cljs_http.client.wrap_url = function cljs_http$client$wrap_url(client) {
  return function(p__15238) {
    var map__15239 = p__15238;
    var map__15239__$1 = cljs.core.seq_QMARK_.call(null, map__15239) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15239) : map__15239;
    var req = map__15239__$1;
    var query_params = cljs.core.get.call(null, map__15239__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    var temp__4421__auto__ = cljs_http.client.parse_url.call(null, (new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(req));
    if (cljs.core.truth_(temp__4421__auto__)) {
      var spec = temp__4421__auto__;
      return client.call(null, cljs.core.update_in.call(null, cljs.core.dissoc.call(null, cljs.core.merge.call(null, req, spec), new cljs.core.Keyword(null, "url", "url", 276297046)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "query-params", "query-params", 900640534)], null), function(spec, temp__4421__auto__, map__15239, map__15239__$1, req, query_params) {
        return function(p1__15235_SHARP_) {
          return cljs.core.merge.call(null, p1__15235_SHARP_, query_params);
        };
      }(spec, temp__4421__auto__, map__15239, map__15239__$1, req, query_params)));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_basic_auth = function cljs_http$client$wrap_basic_auth() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic = function(client, p__15242) {
  var vec__15243 = p__15242;
  var credentials = cljs.core.nth.call(null, vec__15243, 0, null);
  return function(vec__15243, credentials) {
    return function(req) {
      var credentials__$1 = function() {
        var or__4307__auto__ = (new cljs.core.Keyword(null, "basic-auth", "basic-auth", -673163332)).cljs$core$IFn$_invoke$arity$1(req);
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return credentials;
        }
      }();
      if (!cljs.core.empty_QMARK_.call(null, credentials__$1)) {
        return client.call(null, cljs.core.assoc_in.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "basic-auth", "basic-auth", -673163332)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "authorization"], null), cljs_http.util.basic_auth.call(null, credentials__$1)));
      } else {
        return client.call(null, req);
      }
    };
  }(vec__15243, credentials);
};
cljs_http.client.wrap_basic_auth.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_basic_auth.cljs$lang$applyTo = function(seq15240) {
  var G__15241 = cljs.core.first.call(null, seq15240);
  var seq15240__$1 = cljs.core.next.call(null, seq15240);
  return cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic(G__15241, seq15240__$1);
};
cljs_http.client.wrap_oauth = function cljs_http$client$wrap_oauth(client) {
  return function(req) {
    var temp__4421__auto__ = (new cljs.core.Keyword(null, "oauth-token", "oauth-token", 311415191)).cljs$core$IFn$_invoke$arity$1(req);
    if (cljs.core.truth_(temp__4421__auto__)) {
      var oauth_token = temp__4421__auto__;
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "oauth-token", "oauth-token", 311415191)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "authorization"], null), [cljs.core.str("Bearer "), cljs.core.str(oauth_token)].join("")));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_channel_from_request_map = function cljs_http$client$wrap_channel_from_request_map(client) {
  return function(request) {
    var temp__4421__auto__ = (new cljs.core.Keyword(null, "channel", "channel", 734187692)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4421__auto__)) {
      var custom_channel = temp__4421__auto__;
      return cljs.core.async.pipe.call(null, client.call(null, request), custom_channel);
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_request = function cljs_http$client$wrap_request(request) {
  return cljs_http.client.wrap_default_headers.call(null, cljs_http.client.wrap_channel_from_request_map.call(null, cljs_http.client.wrap_url.call(null, cljs_http.client.wrap_method.call(null, cljs_http.client.wrap_oauth.call(null, cljs_http.client.wrap_basic_auth.call(null, cljs_http.client.wrap_query_params.call(null, cljs_http.client.wrap_content_type.call(null, cljs_http.client.wrap_json_response.call(null, cljs_http.client.wrap_json_params.call(null, cljs_http.client.wrap_transit_response.call(null, 
  cljs_http.client.wrap_transit_params.call(null, cljs_http.client.wrap_edn_response.call(null, cljs_http.client.wrap_edn_params.call(null, cljs_http.client.wrap_multipart_params.call(null, cljs_http.client.wrap_form_params.call(null, cljs_http.client.wrap_accept.call(null, request)))))))))))))))));
};
cljs_http.client.request = cljs_http.client.wrap_request.call(null, cljs_http.core.request);
cljs_http.client.delete$ = function cljs_http$client$delete() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic = function(url, p__15246) {
  var vec__15247 = p__15246;
  var req = cljs.core.nth.call(null, vec__15247, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "delete", "delete", -1768633620), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.delete$.cljs$lang$maxFixedArity = 1;
cljs_http.client.delete$.cljs$lang$applyTo = function(seq15244) {
  var G__15245 = cljs.core.first.call(null, seq15244);
  var seq15244__$1 = cljs.core.next.call(null, seq15244);
  return cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic(G__15245, seq15244__$1);
};
cljs_http.client.get = function cljs_http$client$get() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic = function(url, p__15250) {
  var vec__15251 = p__15250;
  var req = cljs.core.nth.call(null, vec__15251, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "get", "get", 1683182755), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.get.cljs$lang$maxFixedArity = 1;
cljs_http.client.get.cljs$lang$applyTo = function(seq15248) {
  var G__15249 = cljs.core.first.call(null, seq15248);
  var seq15248__$1 = cljs.core.next.call(null, seq15248);
  return cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic(G__15249, seq15248__$1);
};
cljs_http.client.head = function cljs_http$client$head() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic = function(url, p__15254) {
  var vec__15255 = p__15254;
  var req = cljs.core.nth.call(null, vec__15255, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "head", "head", -771383919), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.head.cljs$lang$maxFixedArity = 1;
cljs_http.client.head.cljs$lang$applyTo = function(seq15252) {
  var G__15253 = cljs.core.first.call(null, seq15252);
  var seq15252__$1 = cljs.core.next.call(null, seq15252);
  return cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic(G__15253, seq15252__$1);
};
cljs_http.client.jsonp = function cljs_http$client$jsonp() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.jsonp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs_http.client.jsonp.cljs$core$IFn$_invoke$arity$variadic = function(url, p__15258) {
  var vec__15259 = p__15258;
  var req = cljs.core.nth.call(null, vec__15259, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.jsonp.cljs$lang$maxFixedArity = 1;
cljs_http.client.jsonp.cljs$lang$applyTo = function(seq15256) {
  var G__15257 = cljs.core.first.call(null, seq15256);
  var seq15256__$1 = cljs.core.next.call(null, seq15256);
  return cljs_http.client.jsonp.cljs$core$IFn$_invoke$arity$variadic(G__15257, seq15256__$1);
};
cljs_http.client.move = function cljs_http$client$move() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic = function(url, p__15262) {
  var vec__15263 = p__15262;
  var req = cljs.core.nth.call(null, vec__15263, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "move", "move", -2110884309), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.move.cljs$lang$maxFixedArity = 1;
cljs_http.client.move.cljs$lang$applyTo = function(seq15260) {
  var G__15261 = cljs.core.first.call(null, seq15260);
  var seq15260__$1 = cljs.core.next.call(null, seq15260);
  return cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic(G__15261, seq15260__$1);
};
cljs_http.client.options = function cljs_http$client$options() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic = function(url, p__15266) {
  var vec__15267 = p__15266;
  var req = cljs.core.nth.call(null, vec__15267, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "options", "options", 99638489), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.options.cljs$lang$maxFixedArity = 1;
cljs_http.client.options.cljs$lang$applyTo = function(seq15264) {
  var G__15265 = cljs.core.first.call(null, seq15264);
  var seq15264__$1 = cljs.core.next.call(null, seq15264);
  return cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic(G__15265, seq15264__$1);
};
cljs_http.client.patch = function cljs_http$client$patch() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic = function(url, p__15270) {
  var vec__15271 = p__15270;
  var req = cljs.core.nth.call(null, vec__15271, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "patch", "patch", 380775109), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.patch.cljs$lang$maxFixedArity = 1;
cljs_http.client.patch.cljs$lang$applyTo = function(seq15268) {
  var G__15269 = cljs.core.first.call(null, seq15268);
  var seq15268__$1 = cljs.core.next.call(null, seq15268);
  return cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic(G__15269, seq15268__$1);
};
cljs_http.client.post = function cljs_http$client$post() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic = function(url, p__15274) {
  var vec__15275 = p__15274;
  var req = cljs.core.nth.call(null, vec__15275, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "post", "post", 269697687), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.post.cljs$lang$maxFixedArity = 1;
cljs_http.client.post.cljs$lang$applyTo = function(seq15272) {
  var G__15273 = cljs.core.first.call(null, seq15272);
  var seq15272__$1 = cljs.core.next.call(null, seq15272);
  return cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic(G__15273, seq15272__$1);
};
cljs_http.client.put = function cljs_http$client$put() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic = function(url, p__15278) {
  var vec__15279 = p__15278;
  var req = cljs.core.nth.call(null, vec__15279, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "put", "put", 1299772570), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.put.cljs$lang$maxFixedArity = 1;
cljs_http.client.put.cljs$lang$applyTo = function(seq15276) {
  var G__15277 = cljs.core.first.call(null, seq15276);
  var seq15276__$1 = cljs.core.next.call(null, seq15276);
  return cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic(G__15277, seq15276__$1);
};
goog.provide("om.dom");
goog.require("cljs.core");
goog.require("goog.object");
om.dom.a = function om$dom$a() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.a.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.a.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.a.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.a.cljs$lang$maxFixedArity = 1;
om.dom.a.cljs$lang$applyTo = function(seq13678) {
  var G__13679 = cljs.core.first.call(null, seq13678);
  var seq13678__$1 = cljs.core.next.call(null, seq13678);
  return om.dom.a.cljs$core$IFn$_invoke$arity$variadic(G__13679, seq13678__$1);
};
om.dom.abbr = function om$dom$abbr() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.abbr.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.abbr.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.abbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.abbr.cljs$lang$maxFixedArity = 1;
om.dom.abbr.cljs$lang$applyTo = function(seq13680) {
  var G__13681 = cljs.core.first.call(null, seq13680);
  var seq13680__$1 = cljs.core.next.call(null, seq13680);
  return om.dom.abbr.cljs$core$IFn$_invoke$arity$variadic(G__13681, seq13680__$1);
};
om.dom.address = function om$dom$address() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.address.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.address.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.address.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.address.cljs$lang$maxFixedArity = 1;
om.dom.address.cljs$lang$applyTo = function(seq13682) {
  var G__13683 = cljs.core.first.call(null, seq13682);
  var seq13682__$1 = cljs.core.next.call(null, seq13682);
  return om.dom.address.cljs$core$IFn$_invoke$arity$variadic(G__13683, seq13682__$1);
};
om.dom.area = function om$dom$area() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.area.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.area.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.area.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.area.cljs$lang$maxFixedArity = 1;
om.dom.area.cljs$lang$applyTo = function(seq13684) {
  var G__13685 = cljs.core.first.call(null, seq13684);
  var seq13684__$1 = cljs.core.next.call(null, seq13684);
  return om.dom.area.cljs$core$IFn$_invoke$arity$variadic(G__13685, seq13684__$1);
};
om.dom.article = function om$dom$article() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.article.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.article.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.article.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.article.cljs$lang$maxFixedArity = 1;
om.dom.article.cljs$lang$applyTo = function(seq13686) {
  var G__13687 = cljs.core.first.call(null, seq13686);
  var seq13686__$1 = cljs.core.next.call(null, seq13686);
  return om.dom.article.cljs$core$IFn$_invoke$arity$variadic(G__13687, seq13686__$1);
};
om.dom.aside = function om$dom$aside() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.aside.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.aside.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.aside.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.aside.cljs$lang$maxFixedArity = 1;
om.dom.aside.cljs$lang$applyTo = function(seq13688) {
  var G__13689 = cljs.core.first.call(null, seq13688);
  var seq13688__$1 = cljs.core.next.call(null, seq13688);
  return om.dom.aside.cljs$core$IFn$_invoke$arity$variadic(G__13689, seq13688__$1);
};
om.dom.audio = function om$dom$audio() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.audio.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.audio.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.audio.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.audio.cljs$lang$maxFixedArity = 1;
om.dom.audio.cljs$lang$applyTo = function(seq13690) {
  var G__13691 = cljs.core.first.call(null, seq13690);
  var seq13690__$1 = cljs.core.next.call(null, seq13690);
  return om.dom.audio.cljs$core$IFn$_invoke$arity$variadic(G__13691, seq13690__$1);
};
om.dom.b = function om$dom$b() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.b.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.b.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.b.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.b.cljs$lang$maxFixedArity = 1;
om.dom.b.cljs$lang$applyTo = function(seq13692) {
  var G__13693 = cljs.core.first.call(null, seq13692);
  var seq13692__$1 = cljs.core.next.call(null, seq13692);
  return om.dom.b.cljs$core$IFn$_invoke$arity$variadic(G__13693, seq13692__$1);
};
om.dom.base = function om$dom$base() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.base.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.base.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.base.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.base.cljs$lang$maxFixedArity = 1;
om.dom.base.cljs$lang$applyTo = function(seq13694) {
  var G__13695 = cljs.core.first.call(null, seq13694);
  var seq13694__$1 = cljs.core.next.call(null, seq13694);
  return om.dom.base.cljs$core$IFn$_invoke$arity$variadic(G__13695, seq13694__$1);
};
om.dom.bdi = function om$dom$bdi() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.bdi.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.bdi.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.bdi.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.bdi.cljs$lang$maxFixedArity = 1;
om.dom.bdi.cljs$lang$applyTo = function(seq13696) {
  var G__13697 = cljs.core.first.call(null, seq13696);
  var seq13696__$1 = cljs.core.next.call(null, seq13696);
  return om.dom.bdi.cljs$core$IFn$_invoke$arity$variadic(G__13697, seq13696__$1);
};
om.dom.bdo = function om$dom$bdo() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.bdo.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.bdo.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.bdo.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.bdo.cljs$lang$maxFixedArity = 1;
om.dom.bdo.cljs$lang$applyTo = function(seq13698) {
  var G__13699 = cljs.core.first.call(null, seq13698);
  var seq13698__$1 = cljs.core.next.call(null, seq13698);
  return om.dom.bdo.cljs$core$IFn$_invoke$arity$variadic(G__13699, seq13698__$1);
};
om.dom.big = function om$dom$big() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.big.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.big.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.big.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.big.cljs$lang$maxFixedArity = 1;
om.dom.big.cljs$lang$applyTo = function(seq13700) {
  var G__13701 = cljs.core.first.call(null, seq13700);
  var seq13700__$1 = cljs.core.next.call(null, seq13700);
  return om.dom.big.cljs$core$IFn$_invoke$arity$variadic(G__13701, seq13700__$1);
};
om.dom.blockquote = function om$dom$blockquote() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.blockquote.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.blockquote.cljs$lang$maxFixedArity = 1;
om.dom.blockquote.cljs$lang$applyTo = function(seq13702) {
  var G__13703 = cljs.core.first.call(null, seq13702);
  var seq13702__$1 = cljs.core.next.call(null, seq13702);
  return om.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic(G__13703, seq13702__$1);
};
om.dom.body = function om$dom$body() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.body.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.body.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.body.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.body.cljs$lang$maxFixedArity = 1;
om.dom.body.cljs$lang$applyTo = function(seq13704) {
  var G__13705 = cljs.core.first.call(null, seq13704);
  var seq13704__$1 = cljs.core.next.call(null, seq13704);
  return om.dom.body.cljs$core$IFn$_invoke$arity$variadic(G__13705, seq13704__$1);
};
om.dom.br = function om$dom$br() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.br.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.br.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.br.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.br.cljs$lang$maxFixedArity = 1;
om.dom.br.cljs$lang$applyTo = function(seq13706) {
  var G__13707 = cljs.core.first.call(null, seq13706);
  var seq13706__$1 = cljs.core.next.call(null, seq13706);
  return om.dom.br.cljs$core$IFn$_invoke$arity$variadic(G__13707, seq13706__$1);
};
om.dom.button = function om$dom$button() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.button.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.button.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.button.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.button.cljs$lang$maxFixedArity = 1;
om.dom.button.cljs$lang$applyTo = function(seq13708) {
  var G__13709 = cljs.core.first.call(null, seq13708);
  var seq13708__$1 = cljs.core.next.call(null, seq13708);
  return om.dom.button.cljs$core$IFn$_invoke$arity$variadic(G__13709, seq13708__$1);
};
om.dom.canvas = function om$dom$canvas() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.canvas.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.canvas.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.canvas.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.canvas.cljs$lang$maxFixedArity = 1;
om.dom.canvas.cljs$lang$applyTo = function(seq13710) {
  var G__13711 = cljs.core.first.call(null, seq13710);
  var seq13710__$1 = cljs.core.next.call(null, seq13710);
  return om.dom.canvas.cljs$core$IFn$_invoke$arity$variadic(G__13711, seq13710__$1);
};
om.dom.caption = function om$dom$caption() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.caption.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.caption.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.caption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.caption.cljs$lang$maxFixedArity = 1;
om.dom.caption.cljs$lang$applyTo = function(seq13712) {
  var G__13713 = cljs.core.first.call(null, seq13712);
  var seq13712__$1 = cljs.core.next.call(null, seq13712);
  return om.dom.caption.cljs$core$IFn$_invoke$arity$variadic(G__13713, seq13712__$1);
};
om.dom.cite = function om$dom$cite() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.cite.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.cite.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.cite.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.cite.cljs$lang$maxFixedArity = 1;
om.dom.cite.cljs$lang$applyTo = function(seq13714) {
  var G__13715 = cljs.core.first.call(null, seq13714);
  var seq13714__$1 = cljs.core.next.call(null, seq13714);
  return om.dom.cite.cljs$core$IFn$_invoke$arity$variadic(G__13715, seq13714__$1);
};
om.dom.code = function om$dom$code() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.code.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.code.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.code.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.code.cljs$lang$maxFixedArity = 1;
om.dom.code.cljs$lang$applyTo = function(seq13716) {
  var G__13717 = cljs.core.first.call(null, seq13716);
  var seq13716__$1 = cljs.core.next.call(null, seq13716);
  return om.dom.code.cljs$core$IFn$_invoke$arity$variadic(G__13717, seq13716__$1);
};
om.dom.col = function om$dom$col() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.col.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.col.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.col.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.col.cljs$lang$maxFixedArity = 1;
om.dom.col.cljs$lang$applyTo = function(seq13718) {
  var G__13719 = cljs.core.first.call(null, seq13718);
  var seq13718__$1 = cljs.core.next.call(null, seq13718);
  return om.dom.col.cljs$core$IFn$_invoke$arity$variadic(G__13719, seq13718__$1);
};
om.dom.colgroup = function om$dom$colgroup() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.colgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.colgroup.cljs$lang$maxFixedArity = 1;
om.dom.colgroup.cljs$lang$applyTo = function(seq13720) {
  var G__13721 = cljs.core.first.call(null, seq13720);
  var seq13720__$1 = cljs.core.next.call(null, seq13720);
  return om.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic(G__13721, seq13720__$1);
};
om.dom.data = function om$dom$data() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.data.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.data.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.data.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.data.cljs$lang$maxFixedArity = 1;
om.dom.data.cljs$lang$applyTo = function(seq13722) {
  var G__13723 = cljs.core.first.call(null, seq13722);
  var seq13722__$1 = cljs.core.next.call(null, seq13722);
  return om.dom.data.cljs$core$IFn$_invoke$arity$variadic(G__13723, seq13722__$1);
};
om.dom.datalist = function om$dom$datalist() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.datalist.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.datalist.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.datalist.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.datalist.cljs$lang$maxFixedArity = 1;
om.dom.datalist.cljs$lang$applyTo = function(seq13724) {
  var G__13725 = cljs.core.first.call(null, seq13724);
  var seq13724__$1 = cljs.core.next.call(null, seq13724);
  return om.dom.datalist.cljs$core$IFn$_invoke$arity$variadic(G__13725, seq13724__$1);
};
om.dom.dd = function om$dom$dd() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.dd.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.dd.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.dd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.dd.cljs$lang$maxFixedArity = 1;
om.dom.dd.cljs$lang$applyTo = function(seq13726) {
  var G__13727 = cljs.core.first.call(null, seq13726);
  var seq13726__$1 = cljs.core.next.call(null, seq13726);
  return om.dom.dd.cljs$core$IFn$_invoke$arity$variadic(G__13727, seq13726__$1);
};
om.dom.del = function om$dom$del() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.del.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.del.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.del.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.del.cljs$lang$maxFixedArity = 1;
om.dom.del.cljs$lang$applyTo = function(seq13728) {
  var G__13729 = cljs.core.first.call(null, seq13728);
  var seq13728__$1 = cljs.core.next.call(null, seq13728);
  return om.dom.del.cljs$core$IFn$_invoke$arity$variadic(G__13729, seq13728__$1);
};
om.dom.dfn = function om$dom$dfn() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.dfn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.dfn.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.dfn.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.dfn.cljs$lang$maxFixedArity = 1;
om.dom.dfn.cljs$lang$applyTo = function(seq13730) {
  var G__13731 = cljs.core.first.call(null, seq13730);
  var seq13730__$1 = cljs.core.next.call(null, seq13730);
  return om.dom.dfn.cljs$core$IFn$_invoke$arity$variadic(G__13731, seq13730__$1);
};
om.dom.div = function om$dom$div() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.div.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.div.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.div.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.div.cljs$lang$maxFixedArity = 1;
om.dom.div.cljs$lang$applyTo = function(seq13732) {
  var G__13733 = cljs.core.first.call(null, seq13732);
  var seq13732__$1 = cljs.core.next.call(null, seq13732);
  return om.dom.div.cljs$core$IFn$_invoke$arity$variadic(G__13733, seq13732__$1);
};
om.dom.dl = function om$dom$dl() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.dl.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.dl.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.dl.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.dl.cljs$lang$maxFixedArity = 1;
om.dom.dl.cljs$lang$applyTo = function(seq13734) {
  var G__13735 = cljs.core.first.call(null, seq13734);
  var seq13734__$1 = cljs.core.next.call(null, seq13734);
  return om.dom.dl.cljs$core$IFn$_invoke$arity$variadic(G__13735, seq13734__$1);
};
om.dom.dt = function om$dom$dt() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.dt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.dt.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.dt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.dt.cljs$lang$maxFixedArity = 1;
om.dom.dt.cljs$lang$applyTo = function(seq13736) {
  var G__13737 = cljs.core.first.call(null, seq13736);
  var seq13736__$1 = cljs.core.next.call(null, seq13736);
  return om.dom.dt.cljs$core$IFn$_invoke$arity$variadic(G__13737, seq13736__$1);
};
om.dom.em = function om$dom$em() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.em.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.em.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.em.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.em.cljs$lang$maxFixedArity = 1;
om.dom.em.cljs$lang$applyTo = function(seq13738) {
  var G__13739 = cljs.core.first.call(null, seq13738);
  var seq13738__$1 = cljs.core.next.call(null, seq13738);
  return om.dom.em.cljs$core$IFn$_invoke$arity$variadic(G__13739, seq13738__$1);
};
om.dom.embed = function om$dom$embed() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.embed.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.embed.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.embed.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.embed.cljs$lang$maxFixedArity = 1;
om.dom.embed.cljs$lang$applyTo = function(seq13740) {
  var G__13741 = cljs.core.first.call(null, seq13740);
  var seq13740__$1 = cljs.core.next.call(null, seq13740);
  return om.dom.embed.cljs$core$IFn$_invoke$arity$variadic(G__13741, seq13740__$1);
};
om.dom.fieldset = function om$dom$fieldset() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.fieldset.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.fieldset.cljs$lang$maxFixedArity = 1;
om.dom.fieldset.cljs$lang$applyTo = function(seq13744) {
  var G__13745 = cljs.core.first.call(null, seq13744);
  var seq13744__$1 = cljs.core.next.call(null, seq13744);
  return om.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic(G__13745, seq13744__$1);
};
om.dom.figcaption = function om$dom$figcaption() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.figcaption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.figcaption.cljs$lang$maxFixedArity = 1;
om.dom.figcaption.cljs$lang$applyTo = function(seq13746) {
  var G__13747 = cljs.core.first.call(null, seq13746);
  var seq13746__$1 = cljs.core.next.call(null, seq13746);
  return om.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic(G__13747, seq13746__$1);
};
om.dom.figure = function om$dom$figure() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.figure.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.figure.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.figure.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.figure.cljs$lang$maxFixedArity = 1;
om.dom.figure.cljs$lang$applyTo = function(seq13748) {
  var G__13749 = cljs.core.first.call(null, seq13748);
  var seq13748__$1 = cljs.core.next.call(null, seq13748);
  return om.dom.figure.cljs$core$IFn$_invoke$arity$variadic(G__13749, seq13748__$1);
};
om.dom.footer = function om$dom$footer() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.footer.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.footer.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.footer.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.footer.cljs$lang$maxFixedArity = 1;
om.dom.footer.cljs$lang$applyTo = function(seq13750) {
  var G__13751 = cljs.core.first.call(null, seq13750);
  var seq13750__$1 = cljs.core.next.call(null, seq13750);
  return om.dom.footer.cljs$core$IFn$_invoke$arity$variadic(G__13751, seq13750__$1);
};
om.dom.form = function om$dom$form() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.form.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.form.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.form.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.form.cljs$lang$maxFixedArity = 1;
om.dom.form.cljs$lang$applyTo = function(seq13752) {
  var G__13753 = cljs.core.first.call(null, seq13752);
  var seq13752__$1 = cljs.core.next.call(null, seq13752);
  return om.dom.form.cljs$core$IFn$_invoke$arity$variadic(G__13753, seq13752__$1);
};
om.dom.h1 = function om$dom$h1() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.h1.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.h1.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.h1.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.h1.cljs$lang$maxFixedArity = 1;
om.dom.h1.cljs$lang$applyTo = function(seq13754) {
  var G__13755 = cljs.core.first.call(null, seq13754);
  var seq13754__$1 = cljs.core.next.call(null, seq13754);
  return om.dom.h1.cljs$core$IFn$_invoke$arity$variadic(G__13755, seq13754__$1);
};
om.dom.h2 = function om$dom$h2() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.h2.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.h2.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.h2.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.h2.cljs$lang$maxFixedArity = 1;
om.dom.h2.cljs$lang$applyTo = function(seq13756) {
  var G__13757 = cljs.core.first.call(null, seq13756);
  var seq13756__$1 = cljs.core.next.call(null, seq13756);
  return om.dom.h2.cljs$core$IFn$_invoke$arity$variadic(G__13757, seq13756__$1);
};
om.dom.h3 = function om$dom$h3() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.h3.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.h3.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.h3.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.h3.cljs$lang$maxFixedArity = 1;
om.dom.h3.cljs$lang$applyTo = function(seq13758) {
  var G__13759 = cljs.core.first.call(null, seq13758);
  var seq13758__$1 = cljs.core.next.call(null, seq13758);
  return om.dom.h3.cljs$core$IFn$_invoke$arity$variadic(G__13759, seq13758__$1);
};
om.dom.h4 = function om$dom$h4() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.h4.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.h4.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.h4.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.h4.cljs$lang$maxFixedArity = 1;
om.dom.h4.cljs$lang$applyTo = function(seq13760) {
  var G__13761 = cljs.core.first.call(null, seq13760);
  var seq13760__$1 = cljs.core.next.call(null, seq13760);
  return om.dom.h4.cljs$core$IFn$_invoke$arity$variadic(G__13761, seq13760__$1);
};
om.dom.h5 = function om$dom$h5() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.h5.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.h5.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.h5.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.h5.cljs$lang$maxFixedArity = 1;
om.dom.h5.cljs$lang$applyTo = function(seq13762) {
  var G__13763 = cljs.core.first.call(null, seq13762);
  var seq13762__$1 = cljs.core.next.call(null, seq13762);
  return om.dom.h5.cljs$core$IFn$_invoke$arity$variadic(G__13763, seq13762__$1);
};
om.dom.h6 = function om$dom$h6() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.h6.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.h6.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.h6.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.h6.cljs$lang$maxFixedArity = 1;
om.dom.h6.cljs$lang$applyTo = function(seq13764) {
  var G__13765 = cljs.core.first.call(null, seq13764);
  var seq13764__$1 = cljs.core.next.call(null, seq13764);
  return om.dom.h6.cljs$core$IFn$_invoke$arity$variadic(G__13765, seq13764__$1);
};
om.dom.head = function om$dom$head() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.head.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.head.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.head.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.head.cljs$lang$maxFixedArity = 1;
om.dom.head.cljs$lang$applyTo = function(seq13766) {
  var G__13767 = cljs.core.first.call(null, seq13766);
  var seq13766__$1 = cljs.core.next.call(null, seq13766);
  return om.dom.head.cljs$core$IFn$_invoke$arity$variadic(G__13767, seq13766__$1);
};
om.dom.header = function om$dom$header() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.header.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.header.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.header.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.header.cljs$lang$maxFixedArity = 1;
om.dom.header.cljs$lang$applyTo = function(seq13768) {
  var G__13769 = cljs.core.first.call(null, seq13768);
  var seq13768__$1 = cljs.core.next.call(null, seq13768);
  return om.dom.header.cljs$core$IFn$_invoke$arity$variadic(G__13769, seq13768__$1);
};
om.dom.hr = function om$dom$hr() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.hr.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.hr.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.hr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.hr.cljs$lang$maxFixedArity = 1;
om.dom.hr.cljs$lang$applyTo = function(seq13770) {
  var G__13771 = cljs.core.first.call(null, seq13770);
  var seq13770__$1 = cljs.core.next.call(null, seq13770);
  return om.dom.hr.cljs$core$IFn$_invoke$arity$variadic(G__13771, seq13770__$1);
};
om.dom.html = function om$dom$html() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.html.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.html.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.html.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.html.cljs$lang$maxFixedArity = 1;
om.dom.html.cljs$lang$applyTo = function(seq13772) {
  var G__13773 = cljs.core.first.call(null, seq13772);
  var seq13772__$1 = cljs.core.next.call(null, seq13772);
  return om.dom.html.cljs$core$IFn$_invoke$arity$variadic(G__13773, seq13772__$1);
};
om.dom.i = function om$dom$i() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.i.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.i.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.i.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.i.cljs$lang$maxFixedArity = 1;
om.dom.i.cljs$lang$applyTo = function(seq13774) {
  var G__13775 = cljs.core.first.call(null, seq13774);
  var seq13774__$1 = cljs.core.next.call(null, seq13774);
  return om.dom.i.cljs$core$IFn$_invoke$arity$variadic(G__13775, seq13774__$1);
};
om.dom.iframe = function om$dom$iframe() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.iframe.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.iframe.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.iframe.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.iframe.cljs$lang$maxFixedArity = 1;
om.dom.iframe.cljs$lang$applyTo = function(seq13776) {
  var G__13777 = cljs.core.first.call(null, seq13776);
  var seq13776__$1 = cljs.core.next.call(null, seq13776);
  return om.dom.iframe.cljs$core$IFn$_invoke$arity$variadic(G__13777, seq13776__$1);
};
om.dom.img = function om$dom$img() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.img.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.img.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.img.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.img.cljs$lang$maxFixedArity = 1;
om.dom.img.cljs$lang$applyTo = function(seq13778) {
  var G__13779 = cljs.core.first.call(null, seq13778);
  var seq13778__$1 = cljs.core.next.call(null, seq13778);
  return om.dom.img.cljs$core$IFn$_invoke$arity$variadic(G__13779, seq13778__$1);
};
om.dom.ins = function om$dom$ins() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.ins.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.ins.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.ins.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.ins.cljs$lang$maxFixedArity = 1;
om.dom.ins.cljs$lang$applyTo = function(seq13780) {
  var G__13781 = cljs.core.first.call(null, seq13780);
  var seq13780__$1 = cljs.core.next.call(null, seq13780);
  return om.dom.ins.cljs$core$IFn$_invoke$arity$variadic(G__13781, seq13780__$1);
};
om.dom.kbd = function om$dom$kbd() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.kbd.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.kbd.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.kbd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.kbd.cljs$lang$maxFixedArity = 1;
om.dom.kbd.cljs$lang$applyTo = function(seq13782) {
  var G__13783 = cljs.core.first.call(null, seq13782);
  var seq13782__$1 = cljs.core.next.call(null, seq13782);
  return om.dom.kbd.cljs$core$IFn$_invoke$arity$variadic(G__13783, seq13782__$1);
};
om.dom.keygen = function om$dom$keygen() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.keygen.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.keygen.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.keygen.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.keygen.cljs$lang$maxFixedArity = 1;
om.dom.keygen.cljs$lang$applyTo = function(seq13784) {
  var G__13785 = cljs.core.first.call(null, seq13784);
  var seq13784__$1 = cljs.core.next.call(null, seq13784);
  return om.dom.keygen.cljs$core$IFn$_invoke$arity$variadic(G__13785, seq13784__$1);
};
om.dom.label = function om$dom$label() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.label.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.label.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.label.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.label.cljs$lang$maxFixedArity = 1;
om.dom.label.cljs$lang$applyTo = function(seq13786) {
  var G__13787 = cljs.core.first.call(null, seq13786);
  var seq13786__$1 = cljs.core.next.call(null, seq13786);
  return om.dom.label.cljs$core$IFn$_invoke$arity$variadic(G__13787, seq13786__$1);
};
om.dom.legend = function om$dom$legend() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.legend.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.legend.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.legend.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.legend.cljs$lang$maxFixedArity = 1;
om.dom.legend.cljs$lang$applyTo = function(seq13788) {
  var G__13789 = cljs.core.first.call(null, seq13788);
  var seq13788__$1 = cljs.core.next.call(null, seq13788);
  return om.dom.legend.cljs$core$IFn$_invoke$arity$variadic(G__13789, seq13788__$1);
};
om.dom.li = function om$dom$li() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.li.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.li.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.li.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.li.cljs$lang$maxFixedArity = 1;
om.dom.li.cljs$lang$applyTo = function(seq13790) {
  var G__13791 = cljs.core.first.call(null, seq13790);
  var seq13790__$1 = cljs.core.next.call(null, seq13790);
  return om.dom.li.cljs$core$IFn$_invoke$arity$variadic(G__13791, seq13790__$1);
};
om.dom.link = function om$dom$link() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.link.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.link.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.link.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.link.cljs$lang$maxFixedArity = 1;
om.dom.link.cljs$lang$applyTo = function(seq13792) {
  var G__13793 = cljs.core.first.call(null, seq13792);
  var seq13792__$1 = cljs.core.next.call(null, seq13792);
  return om.dom.link.cljs$core$IFn$_invoke$arity$variadic(G__13793, seq13792__$1);
};
om.dom.main = function om$dom$main() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.main.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.main.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.main.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.main.cljs$lang$maxFixedArity = 1;
om.dom.main.cljs$lang$applyTo = function(seq13794) {
  var G__13795 = cljs.core.first.call(null, seq13794);
  var seq13794__$1 = cljs.core.next.call(null, seq13794);
  return om.dom.main.cljs$core$IFn$_invoke$arity$variadic(G__13795, seq13794__$1);
};
om.dom.map = function om$dom$map() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.map.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.map.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.map.cljs$lang$maxFixedArity = 1;
om.dom.map.cljs$lang$applyTo = function(seq13796) {
  var G__13797 = cljs.core.first.call(null, seq13796);
  var seq13796__$1 = cljs.core.next.call(null, seq13796);
  return om.dom.map.cljs$core$IFn$_invoke$arity$variadic(G__13797, seq13796__$1);
};
om.dom.mark = function om$dom$mark() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.mark.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.mark.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.mark.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.mark.cljs$lang$maxFixedArity = 1;
om.dom.mark.cljs$lang$applyTo = function(seq13798) {
  var G__13799 = cljs.core.first.call(null, seq13798);
  var seq13798__$1 = cljs.core.next.call(null, seq13798);
  return om.dom.mark.cljs$core$IFn$_invoke$arity$variadic(G__13799, seq13798__$1);
};
om.dom.marquee = function om$dom$marquee() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.marquee.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.marquee.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.marquee.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.marquee.cljs$lang$maxFixedArity = 1;
om.dom.marquee.cljs$lang$applyTo = function(seq13800) {
  var G__13801 = cljs.core.first.call(null, seq13800);
  var seq13800__$1 = cljs.core.next.call(null, seq13800);
  return om.dom.marquee.cljs$core$IFn$_invoke$arity$variadic(G__13801, seq13800__$1);
};
om.dom.menu = function om$dom$menu() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.menu.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.menu.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.menu.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.menu.cljs$lang$maxFixedArity = 1;
om.dom.menu.cljs$lang$applyTo = function(seq13802) {
  var G__13803 = cljs.core.first.call(null, seq13802);
  var seq13802__$1 = cljs.core.next.call(null, seq13802);
  return om.dom.menu.cljs$core$IFn$_invoke$arity$variadic(G__13803, seq13802__$1);
};
om.dom.menuitem = function om$dom$menuitem() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.menuitem.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.menuitem.cljs$lang$maxFixedArity = 1;
om.dom.menuitem.cljs$lang$applyTo = function(seq13804) {
  var G__13805 = cljs.core.first.call(null, seq13804);
  var seq13804__$1 = cljs.core.next.call(null, seq13804);
  return om.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic(G__13805, seq13804__$1);
};
om.dom.meta = function om$dom$meta() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.meta.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.meta.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.meta.cljs$lang$maxFixedArity = 1;
om.dom.meta.cljs$lang$applyTo = function(seq13806) {
  var G__13807 = cljs.core.first.call(null, seq13806);
  var seq13806__$1 = cljs.core.next.call(null, seq13806);
  return om.dom.meta.cljs$core$IFn$_invoke$arity$variadic(G__13807, seq13806__$1);
};
om.dom.meter = function om$dom$meter() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.meter.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.meter.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.meter.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.meter.cljs$lang$maxFixedArity = 1;
om.dom.meter.cljs$lang$applyTo = function(seq13808) {
  var G__13809 = cljs.core.first.call(null, seq13808);
  var seq13808__$1 = cljs.core.next.call(null, seq13808);
  return om.dom.meter.cljs$core$IFn$_invoke$arity$variadic(G__13809, seq13808__$1);
};
om.dom.nav = function om$dom$nav() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.nav.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.nav.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.nav.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.nav.cljs$lang$maxFixedArity = 1;
om.dom.nav.cljs$lang$applyTo = function(seq13810) {
  var G__13811 = cljs.core.first.call(null, seq13810);
  var seq13810__$1 = cljs.core.next.call(null, seq13810);
  return om.dom.nav.cljs$core$IFn$_invoke$arity$variadic(G__13811, seq13810__$1);
};
om.dom.noscript = function om$dom$noscript() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.noscript.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.noscript.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.noscript.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.noscript.cljs$lang$maxFixedArity = 1;
om.dom.noscript.cljs$lang$applyTo = function(seq13812) {
  var G__13813 = cljs.core.first.call(null, seq13812);
  var seq13812__$1 = cljs.core.next.call(null, seq13812);
  return om.dom.noscript.cljs$core$IFn$_invoke$arity$variadic(G__13813, seq13812__$1);
};
om.dom.object = function om$dom$object() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.object.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.object.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.object.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.object.cljs$lang$maxFixedArity = 1;
om.dom.object.cljs$lang$applyTo = function(seq13814) {
  var G__13815 = cljs.core.first.call(null, seq13814);
  var seq13814__$1 = cljs.core.next.call(null, seq13814);
  return om.dom.object.cljs$core$IFn$_invoke$arity$variadic(G__13815, seq13814__$1);
};
om.dom.ol = function om$dom$ol() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.ol.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.ol.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.ol.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.ol.cljs$lang$maxFixedArity = 1;
om.dom.ol.cljs$lang$applyTo = function(seq13816) {
  var G__13817 = cljs.core.first.call(null, seq13816);
  var seq13816__$1 = cljs.core.next.call(null, seq13816);
  return om.dom.ol.cljs$core$IFn$_invoke$arity$variadic(G__13817, seq13816__$1);
};
om.dom.optgroup = function om$dom$optgroup() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.optgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.optgroup.cljs$lang$maxFixedArity = 1;
om.dom.optgroup.cljs$lang$applyTo = function(seq13818) {
  var G__13819 = cljs.core.first.call(null, seq13818);
  var seq13818__$1 = cljs.core.next.call(null, seq13818);
  return om.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic(G__13819, seq13818__$1);
};
om.dom.output = function om$dom$output() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.output.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.output.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.output.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.output.cljs$lang$maxFixedArity = 1;
om.dom.output.cljs$lang$applyTo = function(seq13820) {
  var G__13821 = cljs.core.first.call(null, seq13820);
  var seq13820__$1 = cljs.core.next.call(null, seq13820);
  return om.dom.output.cljs$core$IFn$_invoke$arity$variadic(G__13821, seq13820__$1);
};
om.dom.p = function om$dom$p() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.p.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.p.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.p.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.p.cljs$lang$maxFixedArity = 1;
om.dom.p.cljs$lang$applyTo = function(seq13822) {
  var G__13823 = cljs.core.first.call(null, seq13822);
  var seq13822__$1 = cljs.core.next.call(null, seq13822);
  return om.dom.p.cljs$core$IFn$_invoke$arity$variadic(G__13823, seq13822__$1);
};
om.dom.param = function om$dom$param() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.param.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.param.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.param.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.param.cljs$lang$maxFixedArity = 1;
om.dom.param.cljs$lang$applyTo = function(seq13824) {
  var G__13825 = cljs.core.first.call(null, seq13824);
  var seq13824__$1 = cljs.core.next.call(null, seq13824);
  return om.dom.param.cljs$core$IFn$_invoke$arity$variadic(G__13825, seq13824__$1);
};
om.dom.pre = function om$dom$pre() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.pre.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.pre.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.pre.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.pre.cljs$lang$maxFixedArity = 1;
om.dom.pre.cljs$lang$applyTo = function(seq13826) {
  var G__13827 = cljs.core.first.call(null, seq13826);
  var seq13826__$1 = cljs.core.next.call(null, seq13826);
  return om.dom.pre.cljs$core$IFn$_invoke$arity$variadic(G__13827, seq13826__$1);
};
om.dom.progress = function om$dom$progress() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.progress.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.progress.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.progress.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.progress.cljs$lang$maxFixedArity = 1;
om.dom.progress.cljs$lang$applyTo = function(seq13828) {
  var G__13829 = cljs.core.first.call(null, seq13828);
  var seq13828__$1 = cljs.core.next.call(null, seq13828);
  return om.dom.progress.cljs$core$IFn$_invoke$arity$variadic(G__13829, seq13828__$1);
};
om.dom.q = function om$dom$q() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.q.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.q.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.q.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.q.cljs$lang$maxFixedArity = 1;
om.dom.q.cljs$lang$applyTo = function(seq13830) {
  var G__13831 = cljs.core.first.call(null, seq13830);
  var seq13830__$1 = cljs.core.next.call(null, seq13830);
  return om.dom.q.cljs$core$IFn$_invoke$arity$variadic(G__13831, seq13830__$1);
};
om.dom.rp = function om$dom$rp() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.rp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.rp.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.rp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.rp.cljs$lang$maxFixedArity = 1;
om.dom.rp.cljs$lang$applyTo = function(seq13832) {
  var G__13833 = cljs.core.first.call(null, seq13832);
  var seq13832__$1 = cljs.core.next.call(null, seq13832);
  return om.dom.rp.cljs$core$IFn$_invoke$arity$variadic(G__13833, seq13832__$1);
};
om.dom.rt = function om$dom$rt() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.rt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.rt.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.rt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.rt.cljs$lang$maxFixedArity = 1;
om.dom.rt.cljs$lang$applyTo = function(seq13834) {
  var G__13835 = cljs.core.first.call(null, seq13834);
  var seq13834__$1 = cljs.core.next.call(null, seq13834);
  return om.dom.rt.cljs$core$IFn$_invoke$arity$variadic(G__13835, seq13834__$1);
};
om.dom.ruby = function om$dom$ruby() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.ruby.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.ruby.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.ruby.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.ruby.cljs$lang$maxFixedArity = 1;
om.dom.ruby.cljs$lang$applyTo = function(seq13836) {
  var G__13837 = cljs.core.first.call(null, seq13836);
  var seq13836__$1 = cljs.core.next.call(null, seq13836);
  return om.dom.ruby.cljs$core$IFn$_invoke$arity$variadic(G__13837, seq13836__$1);
};
om.dom.s = function om$dom$s() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.s.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.s.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.s.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.s.cljs$lang$maxFixedArity = 1;
om.dom.s.cljs$lang$applyTo = function(seq13838) {
  var G__13839 = cljs.core.first.call(null, seq13838);
  var seq13838__$1 = cljs.core.next.call(null, seq13838);
  return om.dom.s.cljs$core$IFn$_invoke$arity$variadic(G__13839, seq13838__$1);
};
om.dom.samp = function om$dom$samp() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.samp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.samp.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.samp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.samp.cljs$lang$maxFixedArity = 1;
om.dom.samp.cljs$lang$applyTo = function(seq13840) {
  var G__13841 = cljs.core.first.call(null, seq13840);
  var seq13840__$1 = cljs.core.next.call(null, seq13840);
  return om.dom.samp.cljs$core$IFn$_invoke$arity$variadic(G__13841, seq13840__$1);
};
om.dom.script = function om$dom$script() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.script.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.script.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.script.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.script.cljs$lang$maxFixedArity = 1;
om.dom.script.cljs$lang$applyTo = function(seq13842) {
  var G__13843 = cljs.core.first.call(null, seq13842);
  var seq13842__$1 = cljs.core.next.call(null, seq13842);
  return om.dom.script.cljs$core$IFn$_invoke$arity$variadic(G__13843, seq13842__$1);
};
om.dom.section = function om$dom$section() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.section.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.section.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.section.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.section.cljs$lang$maxFixedArity = 1;
om.dom.section.cljs$lang$applyTo = function(seq13844) {
  var G__13845 = cljs.core.first.call(null, seq13844);
  var seq13844__$1 = cljs.core.next.call(null, seq13844);
  return om.dom.section.cljs$core$IFn$_invoke$arity$variadic(G__13845, seq13844__$1);
};
om.dom.select = function om$dom$select() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.select.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.select.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.select.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.select.cljs$lang$maxFixedArity = 1;
om.dom.select.cljs$lang$applyTo = function(seq13846) {
  var G__13847 = cljs.core.first.call(null, seq13846);
  var seq13846__$1 = cljs.core.next.call(null, seq13846);
  return om.dom.select.cljs$core$IFn$_invoke$arity$variadic(G__13847, seq13846__$1);
};
om.dom.small = function om$dom$small() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.small.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.small.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.small.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.small.cljs$lang$maxFixedArity = 1;
om.dom.small.cljs$lang$applyTo = function(seq13848) {
  var G__13849 = cljs.core.first.call(null, seq13848);
  var seq13848__$1 = cljs.core.next.call(null, seq13848);
  return om.dom.small.cljs$core$IFn$_invoke$arity$variadic(G__13849, seq13848__$1);
};
om.dom.source = function om$dom$source() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.source.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.source.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.source.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.source.cljs$lang$maxFixedArity = 1;
om.dom.source.cljs$lang$applyTo = function(seq13850) {
  var G__13851 = cljs.core.first.call(null, seq13850);
  var seq13850__$1 = cljs.core.next.call(null, seq13850);
  return om.dom.source.cljs$core$IFn$_invoke$arity$variadic(G__13851, seq13850__$1);
};
om.dom.span = function om$dom$span() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.span.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.span.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.span.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.span.cljs$lang$maxFixedArity = 1;
om.dom.span.cljs$lang$applyTo = function(seq13852) {
  var G__13853 = cljs.core.first.call(null, seq13852);
  var seq13852__$1 = cljs.core.next.call(null, seq13852);
  return om.dom.span.cljs$core$IFn$_invoke$arity$variadic(G__13853, seq13852__$1);
};
om.dom.strong = function om$dom$strong() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.strong.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.strong.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.strong.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.strong.cljs$lang$maxFixedArity = 1;
om.dom.strong.cljs$lang$applyTo = function(seq13854) {
  var G__13855 = cljs.core.first.call(null, seq13854);
  var seq13854__$1 = cljs.core.next.call(null, seq13854);
  return om.dom.strong.cljs$core$IFn$_invoke$arity$variadic(G__13855, seq13854__$1);
};
om.dom.style = function om$dom$style() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.style.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.style.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.style.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.style.cljs$lang$maxFixedArity = 1;
om.dom.style.cljs$lang$applyTo = function(seq13856) {
  var G__13857 = cljs.core.first.call(null, seq13856);
  var seq13856__$1 = cljs.core.next.call(null, seq13856);
  return om.dom.style.cljs$core$IFn$_invoke$arity$variadic(G__13857, seq13856__$1);
};
om.dom.sub = function om$dom$sub() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.sub.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.sub.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.sub.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.sub.cljs$lang$maxFixedArity = 1;
om.dom.sub.cljs$lang$applyTo = function(seq13858) {
  var G__13859 = cljs.core.first.call(null, seq13858);
  var seq13858__$1 = cljs.core.next.call(null, seq13858);
  return om.dom.sub.cljs$core$IFn$_invoke$arity$variadic(G__13859, seq13858__$1);
};
om.dom.summary = function om$dom$summary() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.summary.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.summary.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.summary.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.summary.cljs$lang$maxFixedArity = 1;
om.dom.summary.cljs$lang$applyTo = function(seq13860) {
  var G__13861 = cljs.core.first.call(null, seq13860);
  var seq13860__$1 = cljs.core.next.call(null, seq13860);
  return om.dom.summary.cljs$core$IFn$_invoke$arity$variadic(G__13861, seq13860__$1);
};
om.dom.sup = function om$dom$sup() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.sup.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.sup.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.sup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.sup.cljs$lang$maxFixedArity = 1;
om.dom.sup.cljs$lang$applyTo = function(seq13862) {
  var G__13863 = cljs.core.first.call(null, seq13862);
  var seq13862__$1 = cljs.core.next.call(null, seq13862);
  return om.dom.sup.cljs$core$IFn$_invoke$arity$variadic(G__13863, seq13862__$1);
};
om.dom.table = function om$dom$table() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.table.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.table.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.table.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.table.cljs$lang$maxFixedArity = 1;
om.dom.table.cljs$lang$applyTo = function(seq13864) {
  var G__13865 = cljs.core.first.call(null, seq13864);
  var seq13864__$1 = cljs.core.next.call(null, seq13864);
  return om.dom.table.cljs$core$IFn$_invoke$arity$variadic(G__13865, seq13864__$1);
};
om.dom.tbody = function om$dom$tbody() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.tbody.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.tbody.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.tbody.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.tbody.cljs$lang$maxFixedArity = 1;
om.dom.tbody.cljs$lang$applyTo = function(seq13866) {
  var G__13867 = cljs.core.first.call(null, seq13866);
  var seq13866__$1 = cljs.core.next.call(null, seq13866);
  return om.dom.tbody.cljs$core$IFn$_invoke$arity$variadic(G__13867, seq13866__$1);
};
om.dom.td = function om$dom$td() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.td.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.td.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.td.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.td.cljs$lang$maxFixedArity = 1;
om.dom.td.cljs$lang$applyTo = function(seq13868) {
  var G__13869 = cljs.core.first.call(null, seq13868);
  var seq13868__$1 = cljs.core.next.call(null, seq13868);
  return om.dom.td.cljs$core$IFn$_invoke$arity$variadic(G__13869, seq13868__$1);
};
om.dom.tfoot = function om$dom$tfoot() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.tfoot.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.tfoot.cljs$lang$maxFixedArity = 1;
om.dom.tfoot.cljs$lang$applyTo = function(seq13870) {
  var G__13871 = cljs.core.first.call(null, seq13870);
  var seq13870__$1 = cljs.core.next.call(null, seq13870);
  return om.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic(G__13871, seq13870__$1);
};
om.dom.th = function om$dom$th() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.th.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.th.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.th.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.th.cljs$lang$maxFixedArity = 1;
om.dom.th.cljs$lang$applyTo = function(seq13872) {
  var G__13873 = cljs.core.first.call(null, seq13872);
  var seq13872__$1 = cljs.core.next.call(null, seq13872);
  return om.dom.th.cljs$core$IFn$_invoke$arity$variadic(G__13873, seq13872__$1);
};
om.dom.thead = function om$dom$thead() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.thead.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.thead.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.thead.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.thead.cljs$lang$maxFixedArity = 1;
om.dom.thead.cljs$lang$applyTo = function(seq13874) {
  var G__13875 = cljs.core.first.call(null, seq13874);
  var seq13874__$1 = cljs.core.next.call(null, seq13874);
  return om.dom.thead.cljs$core$IFn$_invoke$arity$variadic(G__13875, seq13874__$1);
};
om.dom.time = function om$dom$time() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.time.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.time.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.time.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.time.cljs$lang$maxFixedArity = 1;
om.dom.time.cljs$lang$applyTo = function(seq13876) {
  var G__13877 = cljs.core.first.call(null, seq13876);
  var seq13876__$1 = cljs.core.next.call(null, seq13876);
  return om.dom.time.cljs$core$IFn$_invoke$arity$variadic(G__13877, seq13876__$1);
};
om.dom.title = function om$dom$title() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.title.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.title.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.title.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.title.cljs$lang$maxFixedArity = 1;
om.dom.title.cljs$lang$applyTo = function(seq13878) {
  var G__13879 = cljs.core.first.call(null, seq13878);
  var seq13878__$1 = cljs.core.next.call(null, seq13878);
  return om.dom.title.cljs$core$IFn$_invoke$arity$variadic(G__13879, seq13878__$1);
};
om.dom.tr = function om$dom$tr() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.tr.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.tr.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.tr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.tr.cljs$lang$maxFixedArity = 1;
om.dom.tr.cljs$lang$applyTo = function(seq13880) {
  var G__13881 = cljs.core.first.call(null, seq13880);
  var seq13880__$1 = cljs.core.next.call(null, seq13880);
  return om.dom.tr.cljs$core$IFn$_invoke$arity$variadic(G__13881, seq13880__$1);
};
om.dom.track = function om$dom$track() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.track.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.track.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.track.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.track.cljs$lang$maxFixedArity = 1;
om.dom.track.cljs$lang$applyTo = function(seq13882) {
  var G__13883 = cljs.core.first.call(null, seq13882);
  var seq13882__$1 = cljs.core.next.call(null, seq13882);
  return om.dom.track.cljs$core$IFn$_invoke$arity$variadic(G__13883, seq13882__$1);
};
om.dom.u = function om$dom$u() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.u.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.u.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.u.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.u.cljs$lang$maxFixedArity = 1;
om.dom.u.cljs$lang$applyTo = function(seq13884) {
  var G__13885 = cljs.core.first.call(null, seq13884);
  var seq13884__$1 = cljs.core.next.call(null, seq13884);
  return om.dom.u.cljs$core$IFn$_invoke$arity$variadic(G__13885, seq13884__$1);
};
om.dom.ul = function om$dom$ul() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.ul.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.ul.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.ul.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.ul.cljs$lang$maxFixedArity = 1;
om.dom.ul.cljs$lang$applyTo = function(seq13886) {
  var G__13887 = cljs.core.first.call(null, seq13886);
  var seq13886__$1 = cljs.core.next.call(null, seq13886);
  return om.dom.ul.cljs$core$IFn$_invoke$arity$variadic(G__13887, seq13886__$1);
};
om.dom.var$ = function om$dom$var() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.var$.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.var$.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.var$.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.var$.cljs$lang$maxFixedArity = 1;
om.dom.var$.cljs$lang$applyTo = function(seq13888) {
  var G__13889 = cljs.core.first.call(null, seq13888);
  var seq13888__$1 = cljs.core.next.call(null, seq13888);
  return om.dom.var$.cljs$core$IFn$_invoke$arity$variadic(G__13889, seq13888__$1);
};
om.dom.video = function om$dom$video() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.video.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.video.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.video.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.video.cljs$lang$maxFixedArity = 1;
om.dom.video.cljs$lang$applyTo = function(seq13890) {
  var G__13891 = cljs.core.first.call(null, seq13890);
  var seq13890__$1 = cljs.core.next.call(null, seq13890);
  return om.dom.video.cljs$core$IFn$_invoke$arity$variadic(G__13891, seq13890__$1);
};
om.dom.wbr = function om$dom$wbr() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.wbr.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.wbr.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.wbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.wbr.cljs$lang$maxFixedArity = 1;
om.dom.wbr.cljs$lang$applyTo = function(seq13892) {
  var G__13893 = cljs.core.first.call(null, seq13892);
  var seq13892__$1 = cljs.core.next.call(null, seq13892);
  return om.dom.wbr.cljs$core$IFn$_invoke$arity$variadic(G__13893, seq13892__$1);
};
om.dom.circle = function om$dom$circle() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.circle.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.circle.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.circle.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.circle.cljs$lang$maxFixedArity = 1;
om.dom.circle.cljs$lang$applyTo = function(seq13894) {
  var G__13895 = cljs.core.first.call(null, seq13894);
  var seq13894__$1 = cljs.core.next.call(null, seq13894);
  return om.dom.circle.cljs$core$IFn$_invoke$arity$variadic(G__13895, seq13894__$1);
};
om.dom.ellipse = function om$dom$ellipse() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.ellipse.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.ellipse.cljs$lang$maxFixedArity = 1;
om.dom.ellipse.cljs$lang$applyTo = function(seq13896) {
  var G__13897 = cljs.core.first.call(null, seq13896);
  var seq13896__$1 = cljs.core.next.call(null, seq13896);
  return om.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic(G__13897, seq13896__$1);
};
om.dom.g = function om$dom$g() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.g.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.g.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.g.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.g.cljs$lang$maxFixedArity = 1;
om.dom.g.cljs$lang$applyTo = function(seq13898) {
  var G__13899 = cljs.core.first.call(null, seq13898);
  var seq13898__$1 = cljs.core.next.call(null, seq13898);
  return om.dom.g.cljs$core$IFn$_invoke$arity$variadic(G__13899, seq13898__$1);
};
om.dom.line = function om$dom$line() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.line.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.line.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.line.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.line.cljs$lang$maxFixedArity = 1;
om.dom.line.cljs$lang$applyTo = function(seq13900) {
  var G__13901 = cljs.core.first.call(null, seq13900);
  var seq13900__$1 = cljs.core.next.call(null, seq13900);
  return om.dom.line.cljs$core$IFn$_invoke$arity$variadic(G__13901, seq13900__$1);
};
om.dom.path = function om$dom$path() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.path.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.path.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.path.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.path.cljs$lang$maxFixedArity = 1;
om.dom.path.cljs$lang$applyTo = function(seq13902) {
  var G__13903 = cljs.core.first.call(null, seq13902);
  var seq13902__$1 = cljs.core.next.call(null, seq13902);
  return om.dom.path.cljs$core$IFn$_invoke$arity$variadic(G__13903, seq13902__$1);
};
om.dom.polyline = function om$dom$polyline() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.polyline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.polyline.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.polyline.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.polyline.cljs$lang$maxFixedArity = 1;
om.dom.polyline.cljs$lang$applyTo = function(seq13904) {
  var G__13905 = cljs.core.first.call(null, seq13904);
  var seq13904__$1 = cljs.core.next.call(null, seq13904);
  return om.dom.polyline.cljs$core$IFn$_invoke$arity$variadic(G__13905, seq13904__$1);
};
om.dom.rect = function om$dom$rect() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.rect.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.rect.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.rect.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.rect.cljs$lang$maxFixedArity = 1;
om.dom.rect.cljs$lang$applyTo = function(seq13906) {
  var G__13907 = cljs.core.first.call(null, seq13906);
  var seq13906__$1 = cljs.core.next.call(null, seq13906);
  return om.dom.rect.cljs$core$IFn$_invoke$arity$variadic(G__13907, seq13906__$1);
};
om.dom.svg = function om$dom$svg() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.svg.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.svg.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.svg.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.svg.cljs$lang$maxFixedArity = 1;
om.dom.svg.cljs$lang$applyTo = function(seq13908) {
  var G__13909 = cljs.core.first.call(null, seq13908);
  var seq13908__$1 = cljs.core.next.call(null, seq13908);
  return om.dom.svg.cljs$core$IFn$_invoke$arity$variadic(G__13909, seq13908__$1);
};
om.dom.text = function om$dom$text() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.text.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.text.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.text.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.text.cljs$lang$maxFixedArity = 1;
om.dom.text.cljs$lang$applyTo = function(seq13910) {
  var G__13911 = cljs.core.first.call(null, seq13910);
  var seq13910__$1 = cljs.core.next.call(null, seq13910);
  return om.dom.text.cljs$core$IFn$_invoke$arity$variadic(G__13911, seq13910__$1);
};
om.dom.defs = function om$dom$defs() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.defs.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.defs.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.defs.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.defs.cljs$lang$maxFixedArity = 1;
om.dom.defs.cljs$lang$applyTo = function(seq13912) {
  var G__13913 = cljs.core.first.call(null, seq13912);
  var seq13912__$1 = cljs.core.next.call(null, seq13912);
  return om.dom.defs.cljs$core$IFn$_invoke$arity$variadic(G__13913, seq13912__$1);
};
om.dom.linearGradient = function om$dom$linearGradient() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.linearGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.linearGradient.cljs$lang$maxFixedArity = 1;
om.dom.linearGradient.cljs$lang$applyTo = function(seq13914) {
  var G__13915 = cljs.core.first.call(null, seq13914);
  var seq13914__$1 = cljs.core.next.call(null, seq13914);
  return om.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic(G__13915, seq13914__$1);
};
om.dom.polygon = function om$dom$polygon() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.polygon.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.polygon.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.polygon.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.polygon.cljs$lang$maxFixedArity = 1;
om.dom.polygon.cljs$lang$applyTo = function(seq13916) {
  var G__13917 = cljs.core.first.call(null, seq13916);
  var seq13916__$1 = cljs.core.next.call(null, seq13916);
  return om.dom.polygon.cljs$core$IFn$_invoke$arity$variadic(G__13917, seq13916__$1);
};
om.dom.radialGradient = function om$dom$radialGradient() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.radialGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.radialGradient.cljs$lang$maxFixedArity = 1;
om.dom.radialGradient.cljs$lang$applyTo = function(seq13918) {
  var G__13919 = cljs.core.first.call(null, seq13918);
  var seq13918__$1 = cljs.core.next.call(null, seq13918);
  return om.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic(G__13919, seq13918__$1);
};
om.dom.stop = function om$dom$stop() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.stop.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.stop.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.stop.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.stop.cljs$lang$maxFixedArity = 1;
om.dom.stop.cljs$lang$applyTo = function(seq13920) {
  var G__13921 = cljs.core.first.call(null, seq13920);
  var seq13920__$1 = cljs.core.next.call(null, seq13920);
  return om.dom.stop.cljs$core$IFn$_invoke$arity$variadic(G__13921, seq13920__$1);
};
om.dom.tspan = function om$dom$tspan() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.tspan.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
om.dom.tspan.cljs$core$IFn$_invoke$arity$variadic = function(opts__11702__auto__, children__11703__auto__) {
  return React.DOM.tspan.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__11702__auto__, children__11703__auto__)));
};
om.dom.tspan.cljs$lang$maxFixedArity = 1;
om.dom.tspan.cljs$lang$applyTo = function(seq13742) {
  var G__13743 = cljs.core.first.call(null, seq13742);
  var seq13742__$1 = cljs.core.next.call(null, seq13742);
  return om.dom.tspan.cljs$core$IFn$_invoke$arity$variadic(G__13743, seq13742__$1);
};
om.dom.wrap_form_element = function om$dom$wrap_form_element(ctor, display_name) {
  return React.createFactory(React.createClass({"getDisplayName":function() {
    return display_name;
  }, "getInitialState":function() {
    var this$ = this;
    return {"value":this$.props["value"]};
  }, "onChange":function(e) {
    var this$ = this;
    var handler = this$.props["onChange"];
    if (handler == null) {
      return null;
    } else {
      handler.call(null, e);
      return this$.setState({"value":e.target.value});
    }
  }, "componentWillReceiveProps":function(new_props) {
    var this$ = this;
    return this$.setState({"value":new_props["value"]});
  }, "render":function() {
    var this$ = this;
    var props = {};
    goog.object.extend(props, this$.props, {"value":this$.state["value"], "onChange":this$["onChange"], "children":this$.props["children"]});
    return ctor.call(null, props);
  }}));
};
om.dom.input = om.dom.wrap_form_element.call(null, React.DOM.input, "input");
om.dom.textarea = om.dom.wrap_form_element.call(null, React.DOM.textarea, "textarea");
om.dom.option = om.dom.wrap_form_element.call(null, React.DOM.option, "option");
om.dom.render = function om$dom$render(component, el) {
  return React.render(component, el);
};
om.dom.render_to_str = function om$dom$render_to_str(c) {
  return React.renderToString(c);
};
goog.provide("chord.channels");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async.impl.protocols");
chord.channels.read_from_ws_BANG_ = function chord$channels$read_from_ws_BANG_(ws, ch) {
  return ws.onmessage = function(ev) {
    var message = ev.data;
    return cljs.core.async.put_BANG_.call(null, ch, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "message", "message", -406056002), message], null));
  };
};
chord.channels.write_to_ws_BANG_ = function chord$channels$write_to_ws_BANG_(ws, ch) {
  var c__8720__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto__) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto__) {
          return function(state_14517) {
            var state_val_14518 = state_14517[1];
            if (state_val_14518 === 1) {
              var state_14517__$1 = state_14517;
              var statearr_14519_14534 = state_14517__$1;
              statearr_14519_14534[2] = null;
              statearr_14519_14534[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14518 === 2) {
                var state_14517__$1 = state_14517;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14517__$1, 4, ch);
              } else {
                if (state_val_14518 === 3) {
                  var inst_14515 = state_14517[2];
                  var state_14517__$1 = state_14517;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14517__$1, inst_14515);
                } else {
                  if (state_val_14518 === 4) {
                    var inst_14507 = state_14517[7];
                    var inst_14507__$1 = state_14517[2];
                    var state_14517__$1 = function() {
                      var statearr_14520 = state_14517;
                      statearr_14520[7] = inst_14507__$1;
                      return statearr_14520;
                    }();
                    if (cljs.core.truth_(inst_14507__$1)) {
                      var statearr_14521_14535 = state_14517__$1;
                      statearr_14521_14535[1] = 5;
                    } else {
                      var statearr_14522_14536 = state_14517__$1;
                      statearr_14522_14536[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14518 === 5) {
                      var inst_14507 = state_14517[7];
                      var inst_14509 = ws.send(inst_14507);
                      var state_14517__$1 = function() {
                        var statearr_14523 = state_14517;
                        statearr_14523[8] = inst_14509;
                        return statearr_14523;
                      }();
                      var statearr_14524_14537 = state_14517__$1;
                      statearr_14524_14537[2] = null;
                      statearr_14524_14537[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14518 === 6) {
                        var state_14517__$1 = state_14517;
                        var statearr_14525_14538 = state_14517__$1;
                        statearr_14525_14538[2] = null;
                        statearr_14525_14538[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14518 === 7) {
                          var inst_14513 = state_14517[2];
                          var state_14517__$1 = state_14517;
                          var statearr_14526_14539 = state_14517__$1;
                          statearr_14526_14539[2] = inst_14513;
                          statearr_14526_14539[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto__);
        return function(switch__8658__auto__, c__8720__auto__) {
          return function() {
            var chord$channels$write_to_ws_BANG__$_state_machine__8659__auto__ = null;
            var chord$channels$write_to_ws_BANG__$_state_machine__8659__auto____0 = function() {
              var statearr_14530 = [null, null, null, null, null, null, null, null, null];
              statearr_14530[0] = chord$channels$write_to_ws_BANG__$_state_machine__8659__auto__;
              statearr_14530[1] = 1;
              return statearr_14530;
            };
            var chord$channels$write_to_ws_BANG__$_state_machine__8659__auto____1 = function(state_14517) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_14517);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e14531) {
                    if (e14531 instanceof Object) {
                      var ex__8662__auto__ = e14531;
                      var statearr_14532_14540 = state_14517;
                      statearr_14532_14540[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14517);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14531;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14541 = state_14517;
                  state_14517 = G__14541;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            chord$channels$write_to_ws_BANG__$_state_machine__8659__auto__ = function(state_14517) {
              switch(arguments.length) {
                case 0:
                  return chord$channels$write_to_ws_BANG__$_state_machine__8659__auto____0.call(this);
                case 1:
                  return chord$channels$write_to_ws_BANG__$_state_machine__8659__auto____1.call(this, state_14517);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            chord$channels$write_to_ws_BANG__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = chord$channels$write_to_ws_BANG__$_state_machine__8659__auto____0;
            chord$channels$write_to_ws_BANG__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = chord$channels$write_to_ws_BANG__$_state_machine__8659__auto____1;
            return chord$channels$write_to_ws_BANG__$_state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto__);
      }();
      var state__8722__auto__ = function() {
        var statearr_14533 = f__8721__auto__.call(null);
        statearr_14533[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto__;
        return statearr_14533;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto__));
  return c__8720__auto__;
};
chord.channels.bidi_ch = function chord$channels$bidi_ch() {
  var argseq__5347__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return chord.channels.bidi_ch.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5347__auto__);
};
chord.channels.bidi_ch.cljs$core$IFn$_invoke$arity$variadic = function(read_ch, write_ch, p__14545) {
  var vec__14546 = p__14545;
  var map__14547 = cljs.core.nth.call(null, vec__14546, 0, null);
  var map__14547__$1 = cljs.core.seq_QMARK_.call(null, map__14547) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14547) : map__14547;
  var on_close = cljs.core.get.call(null, map__14547__$1, new cljs.core.Keyword(null, "on-close", "on-close", -761178394));
  if (typeof chord.channels.t14548 !== "undefined") {
  } else {
    chord.channels.t14548 = function(read_ch, write_ch, p__14545, vec__14546, map__14547, on_close, meta14549) {
      this.read_ch = read_ch;
      this.write_ch = write_ch;
      this.p__14545 = p__14545;
      this.vec__14546 = vec__14546;
      this.map__14547 = map__14547;
      this.on_close = on_close;
      this.meta14549 = meta14549;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    chord.channels.t14548.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(vec__14546, map__14547, map__14547__$1, on_close) {
      return function(_14550, meta14549__$1) {
        var self__ = this;
        var _14550__$1 = this;
        return new chord.channels.t14548(self__.read_ch, self__.write_ch, self__.p__14545, self__.vec__14546, self__.map__14547, self__.on_close, meta14549__$1);
      };
    }(vec__14546, map__14547, map__14547__$1, on_close);
    chord.channels.t14548.prototype.cljs$core$IMeta$_meta$arity$1 = function(vec__14546, map__14547, map__14547__$1, on_close) {
      return function(_14550) {
        var self__ = this;
        var _14550__$1 = this;
        return self__.meta14549;
      };
    }(vec__14546, map__14547, map__14547__$1, on_close);
    chord.channels.t14548.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    chord.channels.t14548.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(vec__14546, map__14547, map__14547__$1, on_close) {
      return function(_, handler) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.read_ch, handler);
      };
    }(vec__14546, map__14547, map__14547__$1, on_close);
    chord.channels.t14548.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    chord.channels.t14548.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(vec__14546, map__14547, map__14547__$1, on_close) {
      return function(_, msg, handler) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.write_ch, msg, handler);
      };
    }(vec__14546, map__14547, map__14547__$1, on_close);
    chord.channels.t14548.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    chord.channels.t14548.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(vec__14546, map__14547, map__14547__$1, on_close) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.async.impl.protocols.close_BANG_.call(null, self__.read_ch);
        cljs.core.async.impl.protocols.close_BANG_.call(null, self__.write_ch);
        if (cljs.core.truth_(self__.on_close)) {
          return self__.on_close.call(null);
        } else {
          return null;
        }
      };
    }(vec__14546, map__14547, map__14547__$1, on_close);
    chord.channels.t14548.getBasis = function(vec__14546, map__14547, map__14547__$1, on_close) {
      return function() {
        return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "read-ch", "read-ch", 1602045113, null), new cljs.core.Symbol(null, "write-ch", "write-ch", -126054072, null), new cljs.core.Symbol(null, "p__14545", "p__14545", 1700858631, null), new cljs.core.Symbol(null, "vec__14546", "vec__14546", -1993572932, null), new cljs.core.Symbol(null, "map__14547", "map__14547", 1676301179, null), new cljs.core.Symbol(null, "on-close", "on-close", 
        879353133, null), new cljs.core.Symbol(null, "meta14549", "meta14549", 299967132, null)], null);
      };
    }(vec__14546, map__14547, map__14547__$1, on_close);
    chord.channels.t14548.cljs$lang$type = true;
    chord.channels.t14548.cljs$lang$ctorStr = "chord.channels/t14548";
    chord.channels.t14548.cljs$lang$ctorPrWriter = function(vec__14546, map__14547, map__14547__$1, on_close) {
      return function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
        return cljs.core._write.call(null, writer__4887__auto__, "chord.channels/t14548");
      };
    }(vec__14546, map__14547, map__14547__$1, on_close);
    chord.channels.__GT_t14548 = function(vec__14546, map__14547, map__14547__$1, on_close) {
      return function chord$channels$__GT_t14548(read_ch__$1, write_ch__$1, p__14545__$1, vec__14546__$1, map__14547__$2, on_close__$1, meta14549) {
        return new chord.channels.t14548(read_ch__$1, write_ch__$1, p__14545__$1, vec__14546__$1, map__14547__$2, on_close__$1, meta14549);
      };
    }(vec__14546, map__14547, map__14547__$1, on_close);
  }
  return new chord.channels.t14548(read_ch, write_ch, p__14545, vec__14546, map__14547__$1, on_close, cljs.core.PersistentArrayMap.EMPTY);
};
chord.channels.bidi_ch.cljs$lang$maxFixedArity = 2;
chord.channels.bidi_ch.cljs$lang$applyTo = function(seq14542) {
  var G__14543 = cljs.core.first.call(null, seq14542);
  var seq14542__$1 = cljs.core.next.call(null, seq14542);
  var G__14544 = cljs.core.first.call(null, seq14542__$1);
  var seq14542__$2 = cljs.core.next.call(null, seq14542__$1);
  return chord.channels.bidi_ch.cljs$core$IFn$_invoke$arity$variadic(G__14543, G__14544, seq14542__$2);
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function clojure$walk$walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      return outer.call(null, form);
    }
  }
};
clojure.walk.postwalk = function clojure$walk$postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, clojure$walk$postwalk, f), f, form);
};
clojure.walk.prewalk = function clojure$walk$prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, clojure$walk$prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function clojure$walk$keywordize_keys(m) {
  var f = function(p__14212) {
    var vec__14213 = p__14212;
    var k = cljs.core.nth.call(null, vec__14213, 0, null);
    var v = cljs.core.nth.call(null, vec__14213, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function clojure$walk$stringify_keys(m) {
  var f = function(p__14216) {
    var vec__14217 = p__14216;
    var k = cljs.core.nth.call(null, vec__14217, 0, null);
    var v = cljs.core.nth.call(null, vec__14217, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function clojure$walk$prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function clojure$walk$postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("chord.format");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.reader");
goog.require("clojure.walk");
goog.require("cognitect.transit");
chord.format.ChordFormatter = function() {
  var obj14179 = {};
  return obj14179;
}();
chord.format.freeze = function chord$format$freeze(_, obj) {
  if (function() {
    var and__4295__auto__ = _;
    if (and__4295__auto__) {
      return _.chord$format$ChordFormatter$freeze$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return _.chord$format$ChordFormatter$freeze$arity$2(_, obj);
  } else {
    var x__4943__auto__ = _ == null ? null : _;
    return function() {
      var or__4307__auto__ = chord.format.freeze[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = chord.format.freeze["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ChordFormatter.freeze", _);
        }
      }
    }().call(null, _, obj);
  }
};
chord.format.thaw = function chord$format$thaw(_, s) {
  if (function() {
    var and__4295__auto__ = _;
    if (and__4295__auto__) {
      return _.chord$format$ChordFormatter$thaw$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return _.chord$format$ChordFormatter$thaw$arity$2(_, s);
  } else {
    var x__4943__auto__ = _ == null ? null : _;
    return function() {
      var or__4307__auto__ = chord.format.thaw[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = chord.format.thaw["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ChordFormatter.thaw", _);
        }
      }
    }().call(null, _, s);
  }
};
if (typeof chord.format.formatter_STAR_ !== "undefined") {
} else {
  chord.format.formatter_STAR_ = function() {
    var method_table__5202__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5203__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5204__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5205__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5206__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "chord.format", "formatter*"), new cljs.core.Keyword(null, "format", "format", -1306924766), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5206__auto__, method_table__5202__auto__, prefer_table__5203__auto__, method_cache__5204__auto__, cached_hierarchy__5205__auto__);
  }();
}
cljs.core._add_method.call(null, chord.format.formatter_STAR_, new cljs.core.Keyword(null, "edn", "edn", 1317840885), function(_) {
  if (typeof chord.format.t14180 !== "undefined") {
  } else {
    chord.format.t14180 = function(_, meta14181) {
      this._ = _;
      this.meta14181 = meta14181;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    chord.format.t14180.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14182, meta14181__$1) {
      var self__ = this;
      var _14182__$1 = this;
      return new chord.format.t14180(self__._, meta14181__$1);
    };
    chord.format.t14180.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14182) {
      var self__ = this;
      var _14182__$1 = this;
      return self__.meta14181;
    };
    chord.format.t14180.prototype.chord$format$ChordFormatter$ = true;
    chord.format.t14180.prototype.chord$format$ChordFormatter$freeze$arity$2 = function(___$1, obj) {
      var self__ = this;
      var ___$2 = this;
      return cljs.core.pr_str.call(null, obj);
    };
    chord.format.t14180.prototype.chord$format$ChordFormatter$thaw$arity$2 = function(___$1, s) {
      var self__ = this;
      var ___$2 = this;
      return cljs.reader.read_string.call(null, s);
    };
    chord.format.t14180.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "_", "_", -1201019570, null), new cljs.core.Symbol(null, "meta14181", "meta14181", 1131381676, null)], null);
    };
    chord.format.t14180.cljs$lang$type = true;
    chord.format.t14180.cljs$lang$ctorStr = "chord.format/t14180";
    chord.format.t14180.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "chord.format/t14180");
    };
    chord.format.__GT_t14180 = function chord$format$__GT_t14180(___$1, meta14181) {
      return new chord.format.t14180(___$1, meta14181);
    };
  }
  return new chord.format.t14180(_, cljs.core.PersistentArrayMap.EMPTY);
});
cljs.core._add_method.call(null, chord.format.formatter_STAR_, new cljs.core.Keyword(null, "json", "json", 1279968570), function(_) {
  if (typeof chord.format.t14183 !== "undefined") {
  } else {
    chord.format.t14183 = function(_, meta14184) {
      this._ = _;
      this.meta14184 = meta14184;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    chord.format.t14183.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14185, meta14184__$1) {
      var self__ = this;
      var _14185__$1 = this;
      return new chord.format.t14183(self__._, meta14184__$1);
    };
    chord.format.t14183.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14185) {
      var self__ = this;
      var _14185__$1 = this;
      return self__.meta14184;
    };
    chord.format.t14183.prototype.chord$format$ChordFormatter$ = true;
    chord.format.t14183.prototype.chord$format$ChordFormatter$freeze$arity$2 = function(___$1, obj) {
      var self__ = this;
      var ___$2 = this;
      return JSON.stringify(cljs.core.clj__GT_js.call(null, obj));
    };
    chord.format.t14183.prototype.chord$format$ChordFormatter$thaw$arity$2 = function(this$, s) {
      var self__ = this;
      var this$__$1 = this;
      return cljs.core.js__GT_clj.call(null, JSON.parse(s));
    };
    chord.format.t14183.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "_", "_", -1201019570, null), new cljs.core.Symbol(null, "meta14184", "meta14184", 1396404301, null)], null);
    };
    chord.format.t14183.cljs$lang$type = true;
    chord.format.t14183.cljs$lang$ctorStr = "chord.format/t14183";
    chord.format.t14183.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "chord.format/t14183");
    };
    chord.format.__GT_t14183 = function chord$format$__GT_t14183(___$1, meta14184) {
      return new chord.format.t14183(___$1, meta14184);
    };
  }
  return new chord.format.t14183(_, cljs.core.PersistentArrayMap.EMPTY);
});
cljs.core._add_method.call(null, chord.format.formatter_STAR_, new cljs.core.Keyword(null, "json-kw", "json-kw", 341203175), function(opts) {
  var json_formatter = chord.format.formatter_STAR_.call(null, cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "format", "format", -1306924766), new cljs.core.Keyword(null, "json", "json", 1279968570)));
  if (typeof chord.format.t14186 !== "undefined") {
  } else {
    chord.format.t14186 = function(opts, json_formatter, meta14187) {
      this.opts = opts;
      this.json_formatter = json_formatter;
      this.meta14187 = meta14187;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    chord.format.t14186.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(json_formatter) {
      return function(_14188, meta14187__$1) {
        var self__ = this;
        var _14188__$1 = this;
        return new chord.format.t14186(self__.opts, self__.json_formatter, meta14187__$1);
      };
    }(json_formatter);
    chord.format.t14186.prototype.cljs$core$IMeta$_meta$arity$1 = function(json_formatter) {
      return function(_14188) {
        var self__ = this;
        var _14188__$1 = this;
        return self__.meta14187;
      };
    }(json_formatter);
    chord.format.t14186.prototype.chord$format$ChordFormatter$ = true;
    chord.format.t14186.prototype.chord$format$ChordFormatter$freeze$arity$2 = function(json_formatter) {
      return function(_, obj) {
        var self__ = this;
        var ___$1 = this;
        return chord.format.freeze.call(null, self__.json_formatter, obj);
      };
    }(json_formatter);
    chord.format.t14186.prototype.chord$format$ChordFormatter$thaw$arity$2 = function(json_formatter) {
      return function(_, s) {
        var self__ = this;
        var ___$1 = this;
        return clojure.walk.keywordize_keys.call(null, chord.format.thaw.call(null, self__.json_formatter, s));
      };
    }(json_formatter);
    chord.format.t14186.getBasis = function(json_formatter) {
      return function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "opts", "opts", 1795607228, null), new cljs.core.Symbol(null, "json-formatter", "json-formatter", -485654307, null), new cljs.core.Symbol(null, "meta14187", "meta14187", 1056745043, null)], null);
      };
    }(json_formatter);
    chord.format.t14186.cljs$lang$type = true;
    chord.format.t14186.cljs$lang$ctorStr = "chord.format/t14186";
    chord.format.t14186.cljs$lang$ctorPrWriter = function(json_formatter) {
      return function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
        return cljs.core._write.call(null, writer__4887__auto__, "chord.format/t14186");
      };
    }(json_formatter);
    chord.format.__GT_t14186 = function(json_formatter) {
      return function chord$format$__GT_t14186(opts__$1, json_formatter__$1, meta14187) {
        return new chord.format.t14186(opts__$1, json_formatter__$1, meta14187);
      };
    }(json_formatter);
  }
  return new chord.format.t14186(opts, json_formatter, cljs.core.PersistentArrayMap.EMPTY);
});
cljs.core._add_method.call(null, chord.format.formatter_STAR_, new cljs.core.Keyword(null, "transit-json", "transit-json", 1168016579), function(_) {
  if (typeof chord.format.t14189 !== "undefined") {
  } else {
    chord.format.t14189 = function(_, meta14190) {
      this._ = _;
      this.meta14190 = meta14190;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    chord.format.t14189.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14191, meta14190__$1) {
      var self__ = this;
      var _14191__$1 = this;
      return new chord.format.t14189(self__._, meta14190__$1);
    };
    chord.format.t14189.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14191) {
      var self__ = this;
      var _14191__$1 = this;
      return self__.meta14190;
    };
    chord.format.t14189.prototype.chord$format$ChordFormatter$ = true;
    chord.format.t14189.prototype.chord$format$ChordFormatter$freeze$arity$2 = function(___$1, obj) {
      var self__ = this;
      var ___$2 = this;
      return cognitect.transit.write.call(null, cognitect.transit.writer.call(null, new cljs.core.Keyword(null, "json", "json", 1279968570)), obj);
    };
    chord.format.t14189.prototype.chord$format$ChordFormatter$thaw$arity$2 = function(___$1, s) {
      var self__ = this;
      var ___$2 = this;
      return cognitect.transit.read.call(null, cognitect.transit.reader.call(null, new cljs.core.Keyword(null, "json", "json", 1279968570)), s);
    };
    chord.format.t14189.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "_", "_", -1201019570, null), new cljs.core.Symbol(null, "meta14190", "meta14190", -1483238476, null)], null);
    };
    chord.format.t14189.cljs$lang$type = true;
    chord.format.t14189.cljs$lang$ctorStr = "chord.format/t14189";
    chord.format.t14189.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "chord.format/t14189");
    };
    chord.format.__GT_t14189 = function chord$format$__GT_t14189(___$1, meta14190) {
      return new chord.format.t14189(___$1, meta14190);
    };
  }
  return new chord.format.t14189(_, cljs.core.PersistentArrayMap.EMPTY);
});
cljs.core._add_method.call(null, chord.format.formatter_STAR_, new cljs.core.Keyword(null, "str", "str", 1089608819), function(_) {
  if (typeof chord.format.t14192 !== "undefined") {
  } else {
    chord.format.t14192 = function(_, meta14193) {
      this._ = _;
      this.meta14193 = meta14193;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    chord.format.t14192.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14194, meta14193__$1) {
      var self__ = this;
      var _14194__$1 = this;
      return new chord.format.t14192(self__._, meta14193__$1);
    };
    chord.format.t14192.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14194) {
      var self__ = this;
      var _14194__$1 = this;
      return self__.meta14193;
    };
    chord.format.t14192.prototype.chord$format$ChordFormatter$ = true;
    chord.format.t14192.prototype.chord$format$ChordFormatter$freeze$arity$2 = function(___$1, obj) {
      var self__ = this;
      var ___$2 = this;
      return obj;
    };
    chord.format.t14192.prototype.chord$format$ChordFormatter$thaw$arity$2 = function(___$1, s) {
      var self__ = this;
      var ___$2 = this;
      return s;
    };
    chord.format.t14192.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "_", "_", -1201019570, null), new cljs.core.Symbol(null, "meta14193", "meta14193", 982724774, null)], null);
    };
    chord.format.t14192.cljs$lang$type = true;
    chord.format.t14192.cljs$lang$ctorStr = "chord.format/t14192";
    chord.format.t14192.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "chord.format/t14192");
    };
    chord.format.__GT_t14192 = function chord$format$__GT_t14192(___$1, meta14193) {
      return new chord.format.t14192(___$1, meta14193);
    };
  }
  return new chord.format.t14192(_, cljs.core.PersistentArrayMap.EMPTY);
});
chord.format.formatter = function chord$format$formatter(opts) {
  return chord.format.formatter_STAR_.call(null, opts instanceof cljs.core.Keyword ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "format", "format", -1306924766), opts], null) : opts);
};
chord.format.wrap_format = function chord$format$wrap_format(p__14196, p__14197) {
  var map__14203 = p__14196;
  var map__14203__$1 = cljs.core.seq_QMARK_.call(null, map__14203) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14203) : map__14203;
  var read_ch = cljs.core.get.call(null, map__14203__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
  var write_ch = cljs.core.get.call(null, map__14203__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
  var map__14204 = p__14197;
  var map__14204__$1 = cljs.core.seq_QMARK_.call(null, map__14204) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14204) : map__14204;
  var opts = map__14204__$1;
  var format = cljs.core.get.call(null, map__14204__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var fmtr = chord.format.formatter.call(null, cljs.core.truth_(format) ? opts : new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "format", "format", -1306924766), new cljs.core.Keyword(null, "edn", "edn", 1317840885)], null));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414), cljs.core.async.map_LT_.call(null, function(fmtr, map__14203, map__14203__$1, read_ch, write_ch, map__14204, map__14204__$1, opts, format) {
    return function(p__14205) {
      var map__14206 = p__14205;
      var map__14206__$1 = cljs.core.seq_QMARK_.call(null, map__14206) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14206) : map__14206;
      var message = cljs.core.get.call(null, map__14206__$1, new cljs.core.Keyword(null, "message", "message", -406056002));
      try {
        return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "message", "message", -406056002), chord.format.thaw.call(null, fmtr, message)], null);
      } catch (e14207) {
        if (e14207 instanceof Error) {
          var e = e14207;
          return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "invalid-format", "invalid-format", -72676108), new cljs.core.Keyword(null, "cause", "cause", 231901252), e, new cljs.core.Keyword(null, "invalid-msg", "invalid-msg", -1474361625), message], null);
        } else {
          throw e14207;
        }
      }
    };
  }(fmtr, map__14203, map__14203__$1, read_ch, write_ch, map__14204, map__14204__$1, opts, format), read_ch), new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599), cljs.core.async.map_GT_.call(null, function(fmtr, map__14203, map__14203__$1, read_ch, write_ch, map__14204, map__14204__$1, opts, format) {
    return function(p1__14195_SHARP_) {
      return chord.format.freeze.call(null, fmtr, p1__14195_SHARP_);
    };
  }(fmtr, map__14203, map__14203__$1, read_ch, write_ch, map__14204, map__14204__$1, opts, format), write_ch)], null);
};
goog.provide("chord.client");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("chord.channels");
goog.require("chord.format");
chord.client.on_close = function chord$client$on_close() {
  var argseq__5347__auto__ = 3 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0) : null;
  return chord.client.on_close.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5347__auto__);
};
chord.client.on_close.cljs$core$IFn$_invoke$arity$variadic = function(ws, read_ch, write_ch, p__13928) {
  var vec__13929 = p__13928;
  var err_meta_channel = cljs.core.nth.call(null, vec__13929, 0, null);
  return ws.onclose = function(vec__13929, err_meta_channel) {
    return function(ev) {
      var c__8720__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto__, vec__13929, err_meta_channel) {
        return function() {
          var f__8721__auto__ = function() {
            var switch__8658__auto__ = function(c__8720__auto__, vec__13929, err_meta_channel) {
              return function(state_13968) {
                var state_val_13969 = state_13968[1];
                if (state_val_13969 === 7) {
                  var inst_13964 = state_13968[2];
                  var inst_13965 = cljs.core.async.close_BANG_.call(null, read_ch);
                  var inst_13966 = cljs.core.async.close_BANG_.call(null, write_ch);
                  var state_13968__$1 = function() {
                    var statearr_13970 = state_13968;
                    statearr_13970[7] = inst_13965;
                    statearr_13970[8] = inst_13964;
                    return statearr_13970;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13968__$1, inst_13966);
                } else {
                  if (state_val_13969 === 1) {
                    var inst_13930 = state_13968[9];
                    var inst_13930__$1 = ws.error_seen;
                    var state_13968__$1 = function() {
                      var statearr_13971 = state_13968;
                      statearr_13971[9] = inst_13930__$1;
                      return statearr_13971;
                    }();
                    if (cljs.core.truth_(inst_13930__$1)) {
                      var statearr_13972_14001 = state_13968__$1;
                      statearr_13972_14001[1] = 2;
                    } else {
                      var statearr_13973_14002 = state_13968__$1;
                      statearr_13973_14002[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13969 === 4) {
                      var inst_13936 = state_13968[2];
                      var state_13968__$1 = state_13968;
                      if (cljs.core.truth_(inst_13936)) {
                        var statearr_13974_14003 = state_13968__$1;
                        statearr_13974_14003[1] = 5;
                      } else {
                        var statearr_13975_14004 = state_13968__$1;
                        statearr_13975_14004[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13969 === 6) {
                        var state_13968__$1 = state_13968;
                        var statearr_13976_14005 = state_13968__$1;
                        statearr_13976_14005[2] = null;
                        statearr_13976_14005[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13969 === 3) {
                          var inst_13933 = ev.wasClean;
                          var inst_13934 = cljs.core.not.call(null, inst_13933);
                          var state_13968__$1 = state_13968;
                          var statearr_13977_14006 = state_13968__$1;
                          statearr_13977_14006[2] = inst_13934;
                          statearr_13977_14006[1] = 4;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13969 === 12) {
                            var inst_13961 = state_13968[2];
                            var state_13968__$1 = state_13968;
                            var statearr_13978_14007 = state_13968__$1;
                            statearr_13978_14007[2] = inst_13961;
                            statearr_13978_14007[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13969 === 2) {
                              var inst_13930 = state_13968[9];
                              var state_13968__$1 = state_13968;
                              var statearr_13979_14008 = state_13968__$1;
                              statearr_13979_14008[2] = inst_13930;
                              statearr_13979_14008[1] = 4;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13969 === 11) {
                                var inst_13956 = state_13968[2];
                                var state_13968__$1 = state_13968;
                                var statearr_13980_14009 = state_13968__$1;
                                statearr_13980_14009[2] = inst_13956;
                                statearr_13980_14009[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13969 === 9) {
                                  var state_13968__$1 = state_13968;
                                  var statearr_13981_14010 = state_13968__$1;
                                  statearr_13981_14010[2] = null;
                                  statearr_13981_14010[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13969 === 5) {
                                    var inst_13938 = [new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "code", "code", 1586293142), new cljs.core.Keyword(null, "wasClean", "wasClean", -1404940601)];
                                    var inst_13939 = ev.reason;
                                    var inst_13940 = ev.code;
                                    var inst_13941 = ev.wasClean;
                                    var inst_13942 = [inst_13939, inst_13940, inst_13941];
                                    var inst_13943 = cljs.core.PersistentHashMap.fromArrays(inst_13938, inst_13942);
                                    var state_13968__$1 = function() {
                                      var statearr_13982 = state_13968;
                                      statearr_13982[10] = inst_13943;
                                      return statearr_13982;
                                    }();
                                    if (cljs.core.truth_(err_meta_channel)) {
                                      var statearr_13983_14011 = state_13968__$1;
                                      statearr_13983_14011[1] = 8;
                                    } else {
                                      var statearr_13984_14012 = state_13968__$1;
                                      statearr_13984_14012[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13969 === 10) {
                                      var inst_13943 = state_13968[10];
                                      var inst_13959 = state_13968[2];
                                      var state_13968__$1 = function() {
                                        var statearr_13985 = state_13968;
                                        statearr_13985[11] = inst_13959;
                                        return statearr_13985;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13968__$1, 12, read_ch, inst_13943);
                                    } else {
                                      if (state_val_13969 === 8) {
                                        var inst_13930 = state_13968[9];
                                        var inst_13943 = state_13968[10];
                                        var inst_13948 = cljs.core.async.chan.call(null, 1);
                                        var inst_13949 = function() {
                                          var error_seen_QMARK_ = inst_13930;
                                          var error_desc = inst_13943;
                                          var c__8720__auto____$1 = inst_13948;
                                          return function(error_seen_QMARK_, error_desc, c__8720__auto____$1, inst_13930, inst_13943, inst_13948, state_val_13969, c__8720__auto__, vec__13929, err_meta_channel) {
                                            return function() {
                                              var f__8721__auto__ = function() {
                                                var switch__8658__auto__ = function(error_seen_QMARK_, error_desc, c__8720__auto____$1, inst_13930, inst_13943, inst_13948, state_val_13969, c__8720__auto__, vec__13929, err_meta_channel) {
                                                  return function(state_13946) {
                                                    var state_val_13947 = state_13946[1];
                                                    if (state_val_13947 === 1) {
                                                      var state_13946__$1 = state_13946;
                                                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13946__$1, error_desc);
                                                    } else {
                                                      return null;
                                                    }
                                                  };
                                                }(error_seen_QMARK_, error_desc, c__8720__auto____$1, inst_13930, inst_13943, inst_13948, state_val_13969, c__8720__auto__, vec__13929, err_meta_channel);
                                                return function(switch__8658__auto__, error_seen_QMARK_, error_desc, c__8720__auto____$1, inst_13930, inst_13943, inst_13948, state_val_13969, c__8720__auto__, vec__13929, err_meta_channel) {
                                                  return function() {
                                                    var chord$client$state_machine__8659__auto__ = null;
                                                    var chord$client$state_machine__8659__auto____0 = function() {
                                                      var statearr_13989 = [null, null, null, null, null, null, null];
                                                      statearr_13989[0] = chord$client$state_machine__8659__auto__;
                                                      statearr_13989[1] = 1;
                                                      return statearr_13989;
                                                    };
                                                    var chord$client$state_machine__8659__auto____1 = function(state_13946) {
                                                      while (true) {
                                                        var ret_value__8660__auto__ = function() {
                                                          try {
                                                            while (true) {
                                                              var result__8661__auto__ = switch__8658__auto__.call(null, state_13946);
                                                              if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                                                continue;
                                                              } else {
                                                                return result__8661__auto__;
                                                              }
                                                              break;
                                                            }
                                                          } catch (e13990) {
                                                            if (e13990 instanceof Object) {
                                                              var ex__8662__auto__ = e13990;
                                                              var statearr_13991_14013 = state_13946;
                                                              statearr_13991_14013[5] = ex__8662__auto__;
                                                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13946);
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              throw e13990;
                                                            }
                                                          }
                                                        }();
                                                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                                          var G__14014 = state_13946;
                                                          state_13946 = G__14014;
                                                          continue;
                                                        } else {
                                                          return ret_value__8660__auto__;
                                                        }
                                                        break;
                                                      }
                                                    };
                                                    chord$client$state_machine__8659__auto__ = function(state_13946) {
                                                      switch(arguments.length) {
                                                        case 0:
                                                          return chord$client$state_machine__8659__auto____0.call(this);
                                                        case 1:
                                                          return chord$client$state_machine__8659__auto____1.call(this, state_13946);
                                                      }
                                                      throw new Error("Invalid arity: " + arguments.length);
                                                    };
                                                    chord$client$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = chord$client$state_machine__8659__auto____0;
                                                    chord$client$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = chord$client$state_machine__8659__auto____1;
                                                    return chord$client$state_machine__8659__auto__;
                                                  }();
                                                }(switch__8658__auto__, error_seen_QMARK_, error_desc, c__8720__auto____$1, inst_13930, inst_13943, inst_13948, state_val_13969, c__8720__auto__, vec__13929, err_meta_channel);
                                              }();
                                              var state__8722__auto__ = function() {
                                                var statearr_13992 = f__8721__auto__.call(null);
                                                statearr_13992[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto____$1;
                                                return statearr_13992;
                                              }();
                                              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
                                            };
                                          }(error_seen_QMARK_, error_desc, c__8720__auto____$1, inst_13930, inst_13943, inst_13948, state_val_13969, c__8720__auto__, vec__13929, err_meta_channel);
                                        }();
                                        var inst_13950 = cljs.core.async.impl.dispatch.run.call(null, inst_13949);
                                        var inst_13952 = cljs.core.async.chan.call(null);
                                        var inst_13953 = cljs.core.async.close_BANG_.call(null, inst_13952);
                                        var inst_13954 = chord.channels.bidi_ch.call(null, inst_13948, inst_13952);
                                        var state_13968__$1 = function() {
                                          var statearr_13993 = state_13968;
                                          statearr_13993[12] = inst_13953;
                                          statearr_13993[13] = inst_13950;
                                          return statearr_13993;
                                        }();
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13968__$1, 11, err_meta_channel, inst_13954);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              };
            }(c__8720__auto__, vec__13929, err_meta_channel);
            return function(switch__8658__auto__, c__8720__auto__, vec__13929, err_meta_channel) {
              return function() {
                var chord$client$state_machine__8659__auto__ = null;
                var chord$client$state_machine__8659__auto____0 = function() {
                  var statearr_13997 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                  statearr_13997[0] = chord$client$state_machine__8659__auto__;
                  statearr_13997[1] = 1;
                  return statearr_13997;
                };
                var chord$client$state_machine__8659__auto____1 = function(state_13968) {
                  while (true) {
                    var ret_value__8660__auto__ = function() {
                      try {
                        while (true) {
                          var result__8661__auto__ = switch__8658__auto__.call(null, state_13968);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__8661__auto__;
                          }
                          break;
                        }
                      } catch (e13998) {
                        if (e13998 instanceof Object) {
                          var ex__8662__auto__ = e13998;
                          var statearr_13999_14015 = state_13968;
                          statearr_13999_14015[5] = ex__8662__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13968);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e13998;
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__14016 = state_13968;
                      state_13968 = G__14016;
                      continue;
                    } else {
                      return ret_value__8660__auto__;
                    }
                    break;
                  }
                };
                chord$client$state_machine__8659__auto__ = function(state_13968) {
                  switch(arguments.length) {
                    case 0:
                      return chord$client$state_machine__8659__auto____0.call(this);
                    case 1:
                      return chord$client$state_machine__8659__auto____1.call(this, state_13968);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                chord$client$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = chord$client$state_machine__8659__auto____0;
                chord$client$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = chord$client$state_machine__8659__auto____1;
                return chord$client$state_machine__8659__auto__;
              }();
            }(switch__8658__auto__, c__8720__auto__, vec__13929, err_meta_channel);
          }();
          var state__8722__auto__ = function() {
            var statearr_14000 = f__8721__auto__.call(null);
            statearr_14000[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto__;
            return statearr_14000;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
        };
      }(c__8720__auto__, vec__13929, err_meta_channel));
      return c__8720__auto__;
    };
  }(vec__13929, err_meta_channel);
};
chord.client.on_close.cljs$lang$maxFixedArity = 3;
chord.client.on_close.cljs$lang$applyTo = function(seq13924) {
  var G__13925 = cljs.core.first.call(null, seq13924);
  var seq13924__$1 = cljs.core.next.call(null, seq13924);
  var G__13926 = cljs.core.first.call(null, seq13924__$1);
  var seq13924__$2 = cljs.core.next.call(null, seq13924__$1);
  var G__13927 = cljs.core.first.call(null, seq13924__$2);
  var seq13924__$3 = cljs.core.next.call(null, seq13924__$2);
  return chord.client.on_close.cljs$core$IFn$_invoke$arity$variadic(G__13925, G__13926, G__13927, seq13924__$3);
};
chord.client.make_open_ch = function chord$client$make_open_ch(ws, read_ch, write_ch, v) {
  var ch = cljs.core.async.chan.call(null);
  chord.client.on_close.call(null, ws, read_ch, write_ch, ch);
  ws.onopen = function(ch) {
    return function() {
      var c__8720__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto__, ch) {
        return function() {
          var f__8721__auto__ = function() {
            var switch__8658__auto__ = function(c__8720__auto__, ch) {
              return function(state_14035) {
                var state_val_14036 = state_14035[1];
                if (state_val_14036 === 1) {
                  var state_14035__$1 = state_14035;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14035__$1, 2, ch, v);
                } else {
                  if (state_val_14036 === 2) {
                    var inst_14032 = state_14035[2];
                    var inst_14033 = cljs.core.async.close_BANG_.call(null, ch);
                    var state_14035__$1 = function() {
                      var statearr_14037 = state_14035;
                      statearr_14037[7] = inst_14032;
                      return statearr_14037;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14035__$1, inst_14033);
                  } else {
                    return null;
                  }
                }
              };
            }(c__8720__auto__, ch);
            return function(switch__8658__auto__, c__8720__auto__, ch) {
              return function() {
                var chord$client$make_open_ch_$_state_machine__8659__auto__ = null;
                var chord$client$make_open_ch_$_state_machine__8659__auto____0 = function() {
                  var statearr_14041 = [null, null, null, null, null, null, null, null];
                  statearr_14041[0] = chord$client$make_open_ch_$_state_machine__8659__auto__;
                  statearr_14041[1] = 1;
                  return statearr_14041;
                };
                var chord$client$make_open_ch_$_state_machine__8659__auto____1 = function(state_14035) {
                  while (true) {
                    var ret_value__8660__auto__ = function() {
                      try {
                        while (true) {
                          var result__8661__auto__ = switch__8658__auto__.call(null, state_14035);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__8661__auto__;
                          }
                          break;
                        }
                      } catch (e14042) {
                        if (e14042 instanceof Object) {
                          var ex__8662__auto__ = e14042;
                          var statearr_14043_14045 = state_14035;
                          statearr_14043_14045[5] = ex__8662__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14035);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e14042;
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__14046 = state_14035;
                      state_14035 = G__14046;
                      continue;
                    } else {
                      return ret_value__8660__auto__;
                    }
                    break;
                  }
                };
                chord$client$make_open_ch_$_state_machine__8659__auto__ = function(state_14035) {
                  switch(arguments.length) {
                    case 0:
                      return chord$client$make_open_ch_$_state_machine__8659__auto____0.call(this);
                    case 1:
                      return chord$client$make_open_ch_$_state_machine__8659__auto____1.call(this, state_14035);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                chord$client$make_open_ch_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = chord$client$make_open_ch_$_state_machine__8659__auto____0;
                chord$client$make_open_ch_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = chord$client$make_open_ch_$_state_machine__8659__auto____1;
                return chord$client$make_open_ch_$_state_machine__8659__auto__;
              }();
            }(switch__8658__auto__, c__8720__auto__, ch);
          }();
          var state__8722__auto__ = function() {
            var statearr_14044 = f__8721__auto__.call(null);
            statearr_14044[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto__;
            return statearr_14044;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
        };
      }(c__8720__auto__, ch));
      return c__8720__auto__;
    };
  }(ch);
  return ch;
};
chord.client.close_event__GT_maybe_error = function chord$client$close_event__GT_maybe_error(ev) {
  if (cljs.core.truth_(ev.wasClean)) {
    return null;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reason", "reason", -2070751759), ev.reason, new cljs.core.Keyword(null, "code", "code", 1586293142), ev.code], null);
  }
};
chord.client.ws_ch = function chord$client$ws_ch() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return chord.client.ws_ch.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
chord.client.ws_ch.cljs$core$IFn$_invoke$arity$variadic = function(ws_url, p__14051) {
  var vec__14052 = p__14051;
  var map__14053 = cljs.core.nth.call(null, vec__14052, 0, null);
  var map__14053__$1 = cljs.core.seq_QMARK_.call(null, map__14053) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14053) : map__14053;
  var opts = map__14053__$1;
  var read_ch = cljs.core.get.call(null, map__14053__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
  var write_ch = cljs.core.get.call(null, map__14053__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
  var format = cljs.core.get.call(null, map__14053__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var web_socket = new WebSocket(ws_url);
  var map__14054 = chord.format.wrap_format.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414), function() {
    var or__4307__auto__ = read_ch;
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return cljs.core.async.chan.call(null);
    }
  }(), new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599), function() {
    var or__4307__auto__ = write_ch;
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return cljs.core.async.chan.call(null);
    }
  }()], null), opts);
  var map__14054__$1 = cljs.core.seq_QMARK_.call(null, map__14054) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14054) : map__14054;
  var read_ch__$1 = cljs.core.get.call(null, map__14054__$1, new cljs.core.Keyword(null, "read-ch", "read-ch", -38486414));
  var write_ch__$1 = cljs.core.get.call(null, map__14054__$1, new cljs.core.Keyword(null, "write-ch", "write-ch", -1766585599));
  var open_ch = cljs.core.async.chan.call(null);
  var close_ch = cljs.core.async.chan.call(null);
  web_socket.binaryType = "arraybuffer";
  chord.channels.read_from_ws_BANG_.call(null, web_socket, read_ch__$1);
  chord.channels.write_to_ws_BANG_.call(null, web_socket, write_ch__$1);
  web_socket.onopen = function(web_socket, map__14054, map__14054__$1, read_ch__$1, write_ch__$1, open_ch, close_ch, vec__14052, map__14053, map__14053__$1, opts, read_ch, write_ch, format) {
    return function(p1__14047_SHARP_) {
      return cljs.core.async.put_BANG_.call(null, open_ch, p1__14047_SHARP_);
    };
  }(web_socket, map__14054, map__14054__$1, read_ch__$1, write_ch__$1, open_ch, close_ch, vec__14052, map__14053, map__14053__$1, opts, read_ch, write_ch, format);
  web_socket.onclose = function(web_socket, map__14054, map__14054__$1, read_ch__$1, write_ch__$1, open_ch, close_ch, vec__14052, map__14053, map__14053__$1, opts, read_ch, write_ch, format) {
    return function(p1__14048_SHARP_) {
      return cljs.core.async.put_BANG_.call(null, close_ch, p1__14048_SHARP_);
    };
  }(web_socket, map__14054, map__14054__$1, read_ch__$1, write_ch__$1, open_ch, close_ch, vec__14052, map__14053, map__14053__$1, opts, read_ch, write_ch, format);
  var ws_chan = chord.channels.bidi_ch.call(null, read_ch__$1, write_ch__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-close", "on-close", -761178394), function(web_socket, map__14054, map__14054__$1, read_ch__$1, write_ch__$1, open_ch, close_ch, vec__14052, map__14053, map__14053__$1, opts, read_ch, write_ch, format) {
    return function() {
      return web_socket.close();
    };
  }(web_socket, map__14054, map__14054__$1, read_ch__$1, write_ch__$1, open_ch, close_ch, vec__14052, map__14053, map__14053__$1, opts, read_ch, write_ch, format)], null));
  var initial_ch = cljs.core.async.chan.call(null);
  var c__8720__auto___14151 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto___14151, ws_chan, initial_ch, web_socket, map__14054, map__14054__$1, read_ch__$1, write_ch__$1, open_ch, close_ch, vec__14052, map__14053, map__14053__$1, opts, read_ch, write_ch, format) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto___14151, ws_chan, initial_ch, web_socket, map__14054, map__14054__$1, read_ch__$1, write_ch__$1, open_ch, close_ch, vec__14052, map__14053, map__14053__$1, opts, read_ch, write_ch, format) {
          return function(state_14114) {
            var state_val_14115 = state_14114[1];
            if (state_val_14115 === 7) {
              var inst_14110 = state_14114[2];
              var state_14114__$1 = state_14114;
              var statearr_14116_14152 = state_14114__$1;
              statearr_14116_14152[2] = inst_14110;
              statearr_14116_14152[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14115 === 20) {
                var state_14114__$1 = state_14114;
                var statearr_14117_14153 = state_14114__$1;
                statearr_14117_14153[2] = null;
                statearr_14117_14153[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14115 === 1) {
                  var inst_14055 = false;
                  var state_14114__$1 = function() {
                    var statearr_14118 = state_14114;
                    statearr_14118[7] = inst_14055;
                    return statearr_14118;
                  }();
                  var statearr_14119_14154 = state_14114__$1;
                  statearr_14119_14154[2] = null;
                  statearr_14119_14154[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14115 === 4) {
                    var inst_14066 = state_14114[8];
                    var inst_14068 = state_14114[9];
                    var inst_14066__$1 = state_14114[2];
                    var inst_14067 = cljs.core.nth.call(null, inst_14066__$1, 0, null);
                    var inst_14068__$1 = cljs.core.nth.call(null, inst_14066__$1, 1, null);
                    var inst_14069 = cljs.core._EQ_.call(null, inst_14068__$1, open_ch);
                    var state_14114__$1 = function() {
                      var statearr_14120 = state_14114;
                      statearr_14120[10] = inst_14067;
                      statearr_14120[8] = inst_14066__$1;
                      statearr_14120[9] = inst_14068__$1;
                      return statearr_14120;
                    }();
                    if (inst_14069) {
                      var statearr_14121_14155 = state_14114__$1;
                      statearr_14121_14155[1] = 5;
                    } else {
                      var statearr_14122_14156 = state_14114__$1;
                      statearr_14122_14156[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14115 === 15) {
                      var inst_14095 = state_14114[2];
                      var state_14114__$1 = state_14114;
                      var statearr_14123_14157 = state_14114__$1;
                      statearr_14123_14157[2] = inst_14095;
                      statearr_14123_14157[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14115 === 21) {
                        var inst_14106 = state_14114[2];
                        var state_14114__$1 = state_14114;
                        var statearr_14124_14158 = state_14114__$1;
                        statearr_14124_14158[2] = inst_14106;
                        statearr_14124_14158[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14115 === 13) {
                          var state_14114__$1 = state_14114;
                          var statearr_14125_14159 = state_14114__$1;
                          statearr_14125_14159[2] = null;
                          statearr_14125_14159[1] = 14;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14115 === 6) {
                            var inst_14068 = state_14114[9];
                            var inst_14081 = cljs.core._EQ_.call(null, inst_14068, close_ch);
                            var state_14114__$1 = state_14114;
                            if (inst_14081) {
                              var statearr_14126_14160 = state_14114__$1;
                              statearr_14126_14160[1] = 9;
                            } else {
                              var statearr_14127_14161 = state_14114__$1;
                              statearr_14127_14161[1] = 10;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14115 === 17) {
                              var state_14114__$1 = state_14114;
                              var statearr_14128_14162 = state_14114__$1;
                              statearr_14128_14162[2] = initial_ch;
                              statearr_14128_14162[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14115 === 3) {
                                var inst_14112 = state_14114[2];
                                var state_14114__$1 = state_14114;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14114__$1, inst_14112);
                              } else {
                                if (state_val_14115 === 12) {
                                  var inst_14055 = state_14114[7];
                                  var state_14114__$1 = state_14114;
                                  if (cljs.core.truth_(inst_14055)) {
                                    var statearr_14129_14163 = state_14114__$1;
                                    statearr_14129_14163[1] = 16;
                                  } else {
                                    var statearr_14130_14164 = state_14114__$1;
                                    statearr_14130_14164[1] = 17;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14115 === 2) {
                                    var inst_14062 = cljs.core.PersistentVector.EMPTY_NODE;
                                    var inst_14063 = [open_ch, close_ch];
                                    var inst_14064 = new cljs.core.PersistentVector(null, 2, 5, inst_14062, inst_14063, null);
                                    var state_14114__$1 = state_14114;
                                    return cljs.core.async.ioc_alts_BANG_.call(null, state_14114__$1, 4, inst_14064);
                                  } else {
                                    if (state_val_14115 === 19) {
                                      var inst_14067 = state_14114[10];
                                      var state_14114__$1 = state_14114;
                                      var statearr_14131_14165 = state_14114__$1;
                                      statearr_14131_14165[2] = inst_14067;
                                      statearr_14131_14165[1] = 21;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14115 === 11) {
                                        var inst_14108 = state_14114[2];
                                        var state_14114__$1 = state_14114;
                                        var statearr_14132_14166 = state_14114__$1;
                                        statearr_14132_14166[2] = inst_14108;
                                        statearr_14132_14166[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14115 === 9) {
                                          var inst_14085 = state_14114[11];
                                          var inst_14066 = state_14114[8];
                                          var inst_14084 = cljs.core.nth.call(null, inst_14066, 0, null);
                                          var inst_14085__$1 = chord.client.close_event__GT_maybe_error.call(null, inst_14084);
                                          var state_14114__$1 = function() {
                                            var statearr_14133 = state_14114;
                                            statearr_14133[11] = inst_14085__$1;
                                            return statearr_14133;
                                          }();
                                          if (cljs.core.truth_(inst_14085__$1)) {
                                            var statearr_14134_14167 = state_14114__$1;
                                            statearr_14134_14167[1] = 12;
                                          } else {
                                            var statearr_14135_14168 = state_14114__$1;
                                            statearr_14135_14168[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14115 === 5) {
                                            var inst_14066 = state_14114[8];
                                            var inst_14072 = cljs.core.nth.call(null, inst_14066, 0, null);
                                            var inst_14073 = [new cljs.core.Keyword(null, "ws-channel", "ws-channel", 1643892174)];
                                            var inst_14074 = [ws_chan];
                                            var inst_14075 = cljs.core.PersistentHashMap.fromArrays(inst_14073, inst_14074);
                                            var state_14114__$1 = function() {
                                              var statearr_14136 = state_14114;
                                              statearr_14136[12] = inst_14072;
                                              return statearr_14136;
                                            }();
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14114__$1, 8, initial_ch, inst_14075);
                                          } else {
                                            if (state_val_14115 === 14) {
                                              var inst_14098 = state_14114[2];
                                              var inst_14099 = cljs.core.async.close_BANG_.call(null, ws_chan);
                                              var inst_14100 = cljs.core.async.close_BANG_.call(null, initial_ch);
                                              var state_14114__$1 = function() {
                                                var statearr_14137 = state_14114;
                                                statearr_14137[13] = inst_14098;
                                                statearr_14137[14] = inst_14099;
                                                return statearr_14137;
                                              }();
                                              var statearr_14138_14169 = state_14114__$1;
                                              statearr_14138_14169[2] = inst_14100;
                                              statearr_14138_14169[1] = 11;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14115 === 16) {
                                                var state_14114__$1 = state_14114;
                                                var statearr_14139_14170 = state_14114__$1;
                                                statearr_14139_14170[2] = read_ch__$1;
                                                statearr_14139_14170[1] = 18;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14115 === 10) {
                                                  var inst_14068 = state_14114[9];
                                                  var inst_14102 = cljs.core._EQ_.call(null, inst_14068, new cljs.core.Keyword(null, "default", "default", -1987822328));
                                                  var state_14114__$1 = state_14114;
                                                  if (inst_14102) {
                                                    var statearr_14140_14171 = state_14114__$1;
                                                    statearr_14140_14171[1] = 19;
                                                  } else {
                                                    var statearr_14141_14172 = state_14114__$1;
                                                    statearr_14141_14172[1] = 20;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14115 === 18) {
                                                    var inst_14085 = state_14114[11];
                                                    var inst_14090 = state_14114[2];
                                                    var inst_14091 = [new cljs.core.Keyword(null, "error", "error", -978969032)];
                                                    var inst_14092 = [inst_14085];
                                                    var inst_14093 = cljs.core.PersistentHashMap.fromArrays(inst_14091, inst_14092);
                                                    var state_14114__$1 = state_14114;
                                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14114__$1, 15, inst_14090, inst_14093);
                                                  } else {
                                                    if (state_val_14115 === 8) {
                                                      var inst_14077 = state_14114[2];
                                                      var inst_14078 = cljs.core.async.close_BANG_.call(null, initial_ch);
                                                      var inst_14055 = true;
                                                      var state_14114__$1 = function() {
                                                        var statearr_14142 = state_14114;
                                                        statearr_14142[15] = inst_14078;
                                                        statearr_14142[7] = inst_14055;
                                                        statearr_14142[16] = inst_14077;
                                                        return statearr_14142;
                                                      }();
                                                      var statearr_14143_14173 = state_14114__$1;
                                                      statearr_14143_14173[2] = null;
                                                      statearr_14143_14173[1] = 2;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8720__auto___14151, ws_chan, initial_ch, web_socket, map__14054, map__14054__$1, read_ch__$1, write_ch__$1, open_ch, close_ch, vec__14052, map__14053, map__14053__$1, opts, read_ch, write_ch, format);
        return function(switch__8658__auto__, c__8720__auto___14151, ws_chan, initial_ch, web_socket, map__14054, map__14054__$1, read_ch__$1, write_ch__$1, open_ch, close_ch, vec__14052, map__14053, map__14053__$1, opts, read_ch, write_ch, format) {
          return function() {
            var chord$client$state_machine__8659__auto__ = null;
            var chord$client$state_machine__8659__auto____0 = function() {
              var statearr_14147 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14147[0] = chord$client$state_machine__8659__auto__;
              statearr_14147[1] = 1;
              return statearr_14147;
            };
            var chord$client$state_machine__8659__auto____1 = function(state_14114) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_14114);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e14148) {
                    if (e14148 instanceof Object) {
                      var ex__8662__auto__ = e14148;
                      var statearr_14149_14174 = state_14114;
                      statearr_14149_14174[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14114);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14148;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14175 = state_14114;
                  state_14114 = G__14175;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            chord$client$state_machine__8659__auto__ = function(state_14114) {
              switch(arguments.length) {
                case 0:
                  return chord$client$state_machine__8659__auto____0.call(this);
                case 1:
                  return chord$client$state_machine__8659__auto____1.call(this, state_14114);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            chord$client$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = chord$client$state_machine__8659__auto____0;
            chord$client$state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = chord$client$state_machine__8659__auto____1;
            return chord$client$state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto___14151, ws_chan, initial_ch, web_socket, map__14054, map__14054__$1, read_ch__$1, write_ch__$1, open_ch, close_ch, vec__14052, map__14053, map__14053__$1, opts, read_ch, write_ch, format);
      }();
      var state__8722__auto__ = function() {
        var statearr_14150 = f__8721__auto__.call(null);
        statearr_14150[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto___14151;
        return statearr_14150;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto___14151, ws_chan, initial_ch, web_socket, map__14054, map__14054__$1, read_ch__$1, write_ch__$1, open_ch, close_ch, vec__14052, map__14053, map__14053__$1, opts, read_ch, write_ch, format));
  return initial_ch;
};
chord.client.ws_ch.cljs$lang$maxFixedArity = 1;
chord.client.ws_ch.cljs$lang$applyTo = function(seq14049) {
  var G__14050 = cljs.core.first.call(null, seq14049);
  var seq14049__$1 = cljs.core.next.call(null, seq14049);
  return chord.client.ws_ch.cljs$core$IFn$_invoke$arity$variadic(G__14050, seq14049__$1);
};
goog.provide("jayq.core");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("cljs.reader");
jayq.core.crate_meta = function jayq$core$crate_meta(func) {
  return func.prototype._crateGroup;
};
jayq.core.__GT_selector = function jayq$core$__GT_selector(sel) {
  if (typeof sel === "string") {
    return sel;
  } else {
    if (cljs.core.fn_QMARK_.call(null, sel)) {
      var temp__4421__auto__ = jayq.core.crate_meta.call(null, sel);
      if (cljs.core.truth_(temp__4421__auto__)) {
        var cm = temp__4421__auto__;
        return [cljs.core.str("[crateGroup\x3d"), cljs.core.str(cm), cljs.core.str("]")].join("");
      } else {
        return sel;
      }
    } else {
      if (sel instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, sel);
      } else {
        return sel;
      }
    }
  }
};
jayq.core.$ = function jayq$core$$() {
  var G__23416 = arguments.length;
  switch(G__23416) {
    case 1:
      return jayq.core.$.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.$.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.$.cljs$core$IFn$_invoke$arity$1 = function(sel) {
  return jQuery(jayq.core.__GT_selector.call(null, sel));
};
jayq.core.$.cljs$core$IFn$_invoke$arity$2 = function(sel, context) {
  return jQuery(jayq.core.__GT_selector.call(null, sel), context);
};
jayq.core.$.cljs$lang$maxFixedArity = 2;
jQuery.prototype.cljs$core$ISeqable$ = true;
jQuery.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var this$__$1 = this;
  if (cljs.core.truth_(this$__$1.get(0))) {
    return this$__$1;
  } else {
    return null;
  }
};
jQuery.prototype.cljs$core$ISeq$ = true;
jQuery.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.get(0);
};
jQuery.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var this$__$1 = this;
  if (cljs.core.count.call(null, this$__$1) > 1) {
    return this$__$1.slice(1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
jQuery.prototype.cljs$core$ICounted$ = true;
jQuery.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.length;
};
jQuery.prototype.cljs$core$IIndexed$ = true;
jQuery.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, n) {
  var this$__$1 = this;
  if (n < cljs.core.count.call(null, this$__$1)) {
    return this$__$1.slice(n, n + 1);
  } else {
    return null;
  }
};
jQuery.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, n, not_found) {
  var this$__$1 = this;
  if (n < cljs.core.count.call(null, this$__$1)) {
    return this$__$1.slice(n, n + 1);
  } else {
    if (void 0 === not_found) {
      return null;
    } else {
      return not_found;
    }
  }
};
jQuery.prototype.cljs$core$ISequential$ = true;
jQuery.prototype.cljs$core$ILookup$ = true;
jQuery.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var this$__$1 = this;
  var or__4307__auto__ = this$__$1.slice(k, k + 1);
  if (cljs.core.truth_(or__4307__auto__)) {
    return or__4307__auto__;
  } else {
    return null;
  }
};
jQuery.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, k, not_found);
};
jQuery.prototype.cljs$core$IReduce$ = true;
jQuery.prototype.cljs$core$IReduce$_reduce$arity$2 = function(this$, f) {
  var this$__$1 = this;
  return cljs.core.ci_reduce.call(null, this$__$1, f);
};
jQuery.prototype.cljs$core$IReduce$_reduce$arity$3 = function(this$, f, start) {
  var this$__$1 = this;
  return cljs.core.ci_reduce.call(null, this$__$1, f, start);
};
jQuery.prototype.cljs$core$IFn$ = true;
jQuery.prototype.call = function() {
  var G__23419 = null;
  var G__23419__2 = function(self__, k) {
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__23419__3 = function(self__, k, not_found) {
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__23419 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23419__2.call(this, self__, k);
      case 3:
        return G__23419__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23419.cljs$core$IFn$_invoke$arity$2 = G__23419__2;
  G__23419.cljs$core$IFn$_invoke$arity$3 = G__23419__3;
  return G__23419;
}();
jQuery.prototype.apply = function(self__, args23418) {
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args23418)));
};
jQuery.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
jQuery.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
jayq.core.anim = function jayq$core$anim() {
  var argseq__5347__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return jayq.core.anim.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5347__auto__);
};
jayq.core.anim.cljs$core$IFn$_invoke$arity$variadic = function($elem, props, p__23423) {
  var vec__23424 = p__23423;
  var speed = cljs.core.nth.call(null, vec__23424, 0, null);
  var on_finish = cljs.core.nth.call(null, vec__23424, 1, null);
  return $elem.animate(cljs.core.clj__GT_js.call(null, props), speed, on_finish);
};
jayq.core.anim.cljs$lang$maxFixedArity = 2;
jayq.core.anim.cljs$lang$applyTo = function(seq23420) {
  var G__23421 = cljs.core.first.call(null, seq23420);
  var seq23420__$1 = cljs.core.next.call(null, seq23420);
  var G__23422 = cljs.core.first.call(null, seq23420__$1);
  var seq23420__$2 = cljs.core.next.call(null, seq23420__$1);
  return jayq.core.anim.cljs$core$IFn$_invoke$arity$variadic(G__23421, G__23422, seq23420__$2);
};
jayq.core.text = function jayq$core$text() {
  var G__23426 = arguments.length;
  switch(G__23426) {
    case 1:
      return jayq.core.text.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.text.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.text.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.text();
};
jayq.core.text.cljs$core$IFn$_invoke$arity$2 = function($elem, txt) {
  return $elem.text(txt);
};
jayq.core.text.cljs$lang$maxFixedArity = 2;
jayq.core.css = function jayq$core$css() {
  var G__23429 = arguments.length;
  switch(G__23429) {
    case 2:
      return jayq.core.css.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return jayq.core.css.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.css.cljs$core$IFn$_invoke$arity$2 = function($elem, opts) {
  return $elem.css(cljs.core.clj__GT_js.call(null, opts));
};
jayq.core.css.cljs$core$IFn$_invoke$arity$3 = function($elem, p, v) {
  return $elem.css(cljs.core.name.call(null, p), v);
};
jayq.core.css.cljs$lang$maxFixedArity = 3;
jayq.core.attr = function jayq$core$attr() {
  var G__23432 = arguments.length;
  switch(G__23432) {
    case 3:
      return jayq.core.attr.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return jayq.core.attr.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.attr.cljs$core$IFn$_invoke$arity$3 = function($elem, n, v) {
  return $elem.attr(cljs.core.name.call(null, n), v);
};
jayq.core.attr.cljs$core$IFn$_invoke$arity$2 = function($elem, x) {
  return $elem.attr(cljs.core.clj__GT_js.call(null, x));
};
jayq.core.attr.cljs$lang$maxFixedArity = 3;
jayq.core.prop = function jayq$core$prop() {
  var G__23435 = arguments.length;
  switch(G__23435) {
    case 3:
      return jayq.core.prop.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return jayq.core.prop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.prop.cljs$core$IFn$_invoke$arity$3 = function($elem, n, v) {
  return $elem.prop(cljs.core.name.call(null, n), v);
};
jayq.core.prop.cljs$core$IFn$_invoke$arity$2 = function($elem, x) {
  return $elem.prop(cljs.core.clj__GT_js.call(null, x));
};
jayq.core.prop.cljs$lang$maxFixedArity = 3;
jayq.core.remove_attr = function jayq$core$remove_attr($elem, a) {
  return $elem.removeAttr(cljs.core.name.call(null, a));
};
jayq.core.remove_prop = function jayq$core$remove_prop($elem, a) {
  return $elem.removeProp(cljs.core.name.call(null, a));
};
jayq.core.data = function jayq$core$data() {
  var G__23438 = arguments.length;
  switch(G__23438) {
    case 1:
      return jayq.core.data.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.data.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return jayq.core.data.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.data.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.data();
};
jayq.core.data.cljs$core$IFn$_invoke$arity$2 = function($elem, k) {
  return $elem.data(cljs.core.clj__GT_js.call(null, k));
};
jayq.core.data.cljs$core$IFn$_invoke$arity$3 = function($elem, k, v) {
  return $elem.data(cljs.core.name.call(null, k), cljs.core.clj__GT_js.call(null, v));
};
jayq.core.data.cljs$lang$maxFixedArity = 3;
jayq.core.add_class = function jayq$core$add_class($elem, cl) {
  return $elem.addClass(cljs.core.name.call(null, cl));
};
jayq.core.remove_class = function jayq$core$remove_class() {
  var G__23441 = arguments.length;
  switch(G__23441) {
    case 1:
      return jayq.core.remove_class.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.remove_class.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.remove_class.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.removeClass();
};
jayq.core.remove_class.cljs$core$IFn$_invoke$arity$2 = function($elem, cl) {
  return $elem.removeClass(cljs.core.name.call(null, cl));
};
jayq.core.remove_class.cljs$lang$maxFixedArity = 2;
jayq.core.toggle_class = function jayq$core$toggle_class() {
  var G__23444 = arguments.length;
  switch(G__23444) {
    case 2:
      return jayq.core.toggle_class.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return jayq.core.toggle_class.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.toggle_class.cljs$core$IFn$_invoke$arity$2 = function($elem, cl) {
  return $elem.toggleClass(cljs.core.name.call(null, cl));
};
jayq.core.toggle_class.cljs$core$IFn$_invoke$arity$3 = function($elem, cl, switch$) {
  return $elem.toggleClass(cljs.core.name.call(null, cl), cljs.core.boolean$.call(null, switch$));
};
jayq.core.toggle_class.cljs$lang$maxFixedArity = 3;
jayq.core.has_class = function jayq$core$has_class($elem, cl) {
  return $elem.hasClass(cljs.core.name.call(null, cl));
};
jayq.core.is = function jayq$core$is($elem, selector) {
  return $elem.is(jayq.core.__GT_selector.call(null, selector));
};
jayq.core.after = function jayq$core$after($elem, content) {
  return $elem.after(content);
};
jayq.core.before = function jayq$core$before($elem, content) {
  return $elem.before(content);
};
jayq.core.append = function jayq$core$append($elem, content) {
  return $elem.append(content);
};
jayq.core.prepend = function jayq$core$prepend($elem, content) {
  return $elem.prepend(content);
};
jayq.core.append_to = function jayq$core$append_to($elem, target) {
  return $elem.appendTo(jayq.core.__GT_selector.call(null, target));
};
jayq.core.prepend_to = function jayq$core$prepend_to($elem, target) {
  return $elem.prependTo(jayq.core.__GT_selector.call(null, target));
};
jayq.core.insert_before = function jayq$core$insert_before($elem, target) {
  return $elem.insertBefore(jayq.core.__GT_selector.call(null, target));
};
jayq.core.insert_after = function jayq$core$insert_after($elem, target) {
  return $elem.insertAfter(jayq.core.__GT_selector.call(null, target));
};
jayq.core.replace_with = function jayq$core$replace_with($elem, content) {
  return $elem.replaceWith(content);
};
jayq.core.remove = function jayq$core$remove($elem) {
  return $elem.remove();
};
jayq.core.hide = function jayq$core$hide() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return jayq.core.hide.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
jayq.core.hide.cljs$core$IFn$_invoke$arity$variadic = function($elem, p__23448) {
  var vec__23449 = p__23448;
  var speed = cljs.core.nth.call(null, vec__23449, 0, null);
  var on_finish = cljs.core.nth.call(null, vec__23449, 1, null);
  return $elem.hide(speed, on_finish);
};
jayq.core.hide.cljs$lang$maxFixedArity = 1;
jayq.core.hide.cljs$lang$applyTo = function(seq23446) {
  var G__23447 = cljs.core.first.call(null, seq23446);
  var seq23446__$1 = cljs.core.next.call(null, seq23446);
  return jayq.core.hide.cljs$core$IFn$_invoke$arity$variadic(G__23447, seq23446__$1);
};
jayq.core.show = function jayq$core$show() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return jayq.core.show.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
jayq.core.show.cljs$core$IFn$_invoke$arity$variadic = function($elem, p__23452) {
  var vec__23453 = p__23452;
  var speed = cljs.core.nth.call(null, vec__23453, 0, null);
  var on_finish = cljs.core.nth.call(null, vec__23453, 1, null);
  return $elem.show(speed, on_finish);
};
jayq.core.show.cljs$lang$maxFixedArity = 1;
jayq.core.show.cljs$lang$applyTo = function(seq23450) {
  var G__23451 = cljs.core.first.call(null, seq23450);
  var seq23450__$1 = cljs.core.next.call(null, seq23450);
  return jayq.core.show.cljs$core$IFn$_invoke$arity$variadic(G__23451, seq23450__$1);
};
jayq.core.toggle = function jayq$core$toggle() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return jayq.core.toggle.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
jayq.core.toggle.cljs$core$IFn$_invoke$arity$variadic = function($elem, p__23456) {
  var vec__23457 = p__23456;
  var speed = cljs.core.nth.call(null, vec__23457, 0, null);
  var on_finish = cljs.core.nth.call(null, vec__23457, 1, null);
  return $elem.toggle(speed, on_finish);
};
jayq.core.toggle.cljs$lang$maxFixedArity = 1;
jayq.core.toggle.cljs$lang$applyTo = function(seq23454) {
  var G__23455 = cljs.core.first.call(null, seq23454);
  var seq23454__$1 = cljs.core.next.call(null, seq23454);
  return jayq.core.toggle.cljs$core$IFn$_invoke$arity$variadic(G__23455, seq23454__$1);
};
jayq.core.fade_out = function jayq$core$fade_out() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return jayq.core.fade_out.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
jayq.core.fade_out.cljs$core$IFn$_invoke$arity$variadic = function($elem, p__23460) {
  var vec__23461 = p__23460;
  var speed = cljs.core.nth.call(null, vec__23461, 0, null);
  var on_finish = cljs.core.nth.call(null, vec__23461, 1, null);
  return $elem.fadeOut(speed, on_finish);
};
jayq.core.fade_out.cljs$lang$maxFixedArity = 1;
jayq.core.fade_out.cljs$lang$applyTo = function(seq23458) {
  var G__23459 = cljs.core.first.call(null, seq23458);
  var seq23458__$1 = cljs.core.next.call(null, seq23458);
  return jayq.core.fade_out.cljs$core$IFn$_invoke$arity$variadic(G__23459, seq23458__$1);
};
jayq.core.fade_in = function jayq$core$fade_in() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return jayq.core.fade_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
jayq.core.fade_in.cljs$core$IFn$_invoke$arity$variadic = function($elem, p__23464) {
  var vec__23465 = p__23464;
  var speed = cljs.core.nth.call(null, vec__23465, 0, null);
  var on_finish = cljs.core.nth.call(null, vec__23465, 1, null);
  return $elem.fadeIn(speed, on_finish);
};
jayq.core.fade_in.cljs$lang$maxFixedArity = 1;
jayq.core.fade_in.cljs$lang$applyTo = function(seq23462) {
  var G__23463 = cljs.core.first.call(null, seq23462);
  var seq23462__$1 = cljs.core.next.call(null, seq23462);
  return jayq.core.fade_in.cljs$core$IFn$_invoke$arity$variadic(G__23463, seq23462__$1);
};
jayq.core.slide_up = function jayq$core$slide_up() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return jayq.core.slide_up.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
jayq.core.slide_up.cljs$core$IFn$_invoke$arity$variadic = function($elem, p__23468) {
  var vec__23469 = p__23468;
  var speed = cljs.core.nth.call(null, vec__23469, 0, null);
  var on_finish = cljs.core.nth.call(null, vec__23469, 1, null);
  return $elem.slideUp(speed, on_finish);
};
jayq.core.slide_up.cljs$lang$maxFixedArity = 1;
jayq.core.slide_up.cljs$lang$applyTo = function(seq23466) {
  var G__23467 = cljs.core.first.call(null, seq23466);
  var seq23466__$1 = cljs.core.next.call(null, seq23466);
  return jayq.core.slide_up.cljs$core$IFn$_invoke$arity$variadic(G__23467, seq23466__$1);
};
jayq.core.slide_down = function jayq$core$slide_down() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return jayq.core.slide_down.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
jayq.core.slide_down.cljs$core$IFn$_invoke$arity$variadic = function($elem, p__23472) {
  var vec__23473 = p__23472;
  var speed = cljs.core.nth.call(null, vec__23473, 0, null);
  var on_finish = cljs.core.nth.call(null, vec__23473, 1, null);
  return $elem.slideDown(speed, on_finish);
};
jayq.core.slide_down.cljs$lang$maxFixedArity = 1;
jayq.core.slide_down.cljs$lang$applyTo = function(seq23470) {
  var G__23471 = cljs.core.first.call(null, seq23470);
  var seq23470__$1 = cljs.core.next.call(null, seq23470);
  return jayq.core.slide_down.cljs$core$IFn$_invoke$arity$variadic(G__23471, seq23470__$1);
};
jayq.core.siblings = function jayq$core$siblings() {
  var G__23475 = arguments.length;
  switch(G__23475) {
    case 1:
      return jayq.core.siblings.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.siblings.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.siblings.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.siblings();
};
jayq.core.siblings.cljs$core$IFn$_invoke$arity$2 = function($elem, selector) {
  return $elem.siblings(cljs.core.name.call(null, selector));
};
jayq.core.siblings.cljs$lang$maxFixedArity = 2;
jayq.core.parent = function jayq$core$parent($elem) {
  return $elem.parent();
};
jayq.core.parents = function jayq$core$parents() {
  var G__23478 = arguments.length;
  switch(G__23478) {
    case 1:
      return jayq.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.parents.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.parents();
};
jayq.core.parents.cljs$core$IFn$_invoke$arity$2 = function($elem, selector) {
  return $elem.parents(cljs.core.name.call(null, selector));
};
jayq.core.parents.cljs$lang$maxFixedArity = 2;
jayq.core.parents_until = function jayq$core$parents_until() {
  var G__23481 = arguments.length;
  switch(G__23481) {
    case 1:
      return jayq.core.parents_until.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.parents_until.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return jayq.core.parents_until.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.parents_until.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.parentsUntil();
};
jayq.core.parents_until.cljs$core$IFn$_invoke$arity$2 = function($elem, selector) {
  return $elem.parentsUntil(jayq.core.__GT_selector.call(null, selector));
};
jayq.core.parents_until.cljs$core$IFn$_invoke$arity$3 = function($elem, selector, filtr) {
  return $elem.parentsUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
};
jayq.core.parents_until.cljs$lang$maxFixedArity = 3;
jayq.core.children = function jayq$core$children() {
  var G__23484 = arguments.length;
  switch(G__23484) {
    case 2:
      return jayq.core.children.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return jayq.core.children.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.children.cljs$core$IFn$_invoke$arity$2 = function($elem, selector) {
  return $elem.children(cljs.core.name.call(null, selector));
};
jayq.core.children.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.children();
};
jayq.core.children.cljs$lang$maxFixedArity = 2;
jayq.core.next = function jayq$core$next() {
  var G__23487 = arguments.length;
  switch(G__23487) {
    case 1:
      return jayq.core.next.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.next.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.next.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.next();
};
jayq.core.next.cljs$core$IFn$_invoke$arity$2 = function($elem, selector) {
  return $elem.next(cljs.core.name.call(null, selector));
};
jayq.core.next.cljs$lang$maxFixedArity = 2;
jayq.core.prev = function jayq$core$prev() {
  var G__23490 = arguments.length;
  switch(G__23490) {
    case 1:
      return jayq.core.prev.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.prev.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.prev.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.prev();
};
jayq.core.prev.cljs$core$IFn$_invoke$arity$2 = function($elem, selector) {
  return $elem.prev(cljs.core.name.call(null, selector));
};
jayq.core.prev.cljs$lang$maxFixedArity = 2;
jayq.core.next_all = function jayq$core$next_all() {
  var G__23493 = arguments.length;
  switch(G__23493) {
    case 1:
      return jayq.core.next_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.next_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.next_all.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.nextAll();
};
jayq.core.next_all.cljs$core$IFn$_invoke$arity$2 = function($elem, selector) {
  return $elem.nextAll(cljs.core.name.call(null, selector));
};
jayq.core.next_all.cljs$lang$maxFixedArity = 2;
jayq.core.prev_all = function jayq$core$prev_all() {
  var G__23496 = arguments.length;
  switch(G__23496) {
    case 1:
      return jayq.core.prev_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.prev_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.prev_all.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.prevAll();
};
jayq.core.prev_all.cljs$core$IFn$_invoke$arity$2 = function($elem, selector) {
  return $elem.prevAll(cljs.core.name.call(null, selector));
};
jayq.core.prev_all.cljs$lang$maxFixedArity = 2;
jayq.core.next_until = function jayq$core$next_until() {
  var G__23499 = arguments.length;
  switch(G__23499) {
    case 1:
      return jayq.core.next_until.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.next_until.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return jayq.core.next_until.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.next_until.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.nextUntil();
};
jayq.core.next_until.cljs$core$IFn$_invoke$arity$2 = function($elem, selector) {
  return $elem.nextUntil(jayq.core.__GT_selector.call(null, selector));
};
jayq.core.next_until.cljs$core$IFn$_invoke$arity$3 = function($elem, selector, filtr) {
  return $elem.nextUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
};
jayq.core.next_until.cljs$lang$maxFixedArity = 3;
jayq.core.prev_until = function jayq$core$prev_until() {
  var G__23502 = arguments.length;
  switch(G__23502) {
    case 1:
      return jayq.core.prev_until.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.prev_until.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return jayq.core.prev_until.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.prev_until.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.prevUntil();
};
jayq.core.prev_until.cljs$core$IFn$_invoke$arity$2 = function($elem, selector) {
  return $elem.prevUntil(jayq.core.__GT_selector.call(null, selector));
};
jayq.core.prev_until.cljs$core$IFn$_invoke$arity$3 = function($elem, selector, filtr) {
  return $elem.prevUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
};
jayq.core.prev_until.cljs$lang$maxFixedArity = 3;
jayq.core.find = function jayq$core$find($elem, selector) {
  return $elem.find(cljs.core.name.call(null, selector));
};
jayq.core.closest = function jayq$core$closest() {
  var argseq__5347__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return jayq.core.closest.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5347__auto__);
};
jayq.core.closest.cljs$core$IFn$_invoke$arity$variadic = function($elem, selector, p__23507) {
  var vec__23508 = p__23507;
  var context = cljs.core.nth.call(null, vec__23508, 0, null);
  return $elem.closest(jayq.core.__GT_selector.call(null, selector), context);
};
jayq.core.closest.cljs$lang$maxFixedArity = 2;
jayq.core.closest.cljs$lang$applyTo = function(seq23504) {
  var G__23505 = cljs.core.first.call(null, seq23504);
  var seq23504__$1 = cljs.core.next.call(null, seq23504);
  var G__23506 = cljs.core.first.call(null, seq23504__$1);
  var seq23504__$2 = cljs.core.next.call(null, seq23504__$1);
  return jayq.core.closest.cljs$core$IFn$_invoke$arity$variadic(G__23505, G__23506, seq23504__$2);
};
jayq.core.clone = function jayq$core$clone($elem) {
  return $elem.clone();
};
jayq.core.html = function jayq$core$html() {
  var G__23510 = arguments.length;
  switch(G__23510) {
    case 2:
      return jayq.core.html.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return jayq.core.html.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.html.cljs$core$IFn$_invoke$arity$2 = function($elem, v) {
  return $elem.html(v);
};
jayq.core.html.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.html();
};
jayq.core.html.cljs$lang$maxFixedArity = 2;
jayq.core.inner = jayq.core.html;
jayq.core.empty = function jayq$core$empty($elem) {
  return $elem.empty();
};
jayq.core.val = function jayq$core$val() {
  var G__23513 = arguments.length;
  switch(G__23513) {
    case 2:
      return jayq.core.val.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return jayq.core.val.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.val.cljs$core$IFn$_invoke$arity$2 = function($elem, v) {
  return $elem.val(v);
};
jayq.core.val.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.val();
};
jayq.core.val.cljs$lang$maxFixedArity = 2;
jayq.core.serialize = function jayq$core$serialize($elem) {
  return $elem.serialize();
};
jayq.core.queue = function jayq$core$queue() {
  var G__23516 = arguments.length;
  switch(G__23516) {
    case 3:
      return jayq.core.queue.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return jayq.core.queue.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return jayq.core.queue.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.queue.cljs$core$IFn$_invoke$arity$3 = function($elem, x, y) {
  return $elem.queue(x, y);
};
jayq.core.queue.cljs$core$IFn$_invoke$arity$2 = function($elem, x) {
  return $elem.queue(x);
};
jayq.core.queue.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.queue();
};
jayq.core.queue.cljs$lang$maxFixedArity = 3;
jayq.core.dequeue = function jayq$core$dequeue() {
  var G__23519 = arguments.length;
  switch(G__23519) {
    case 2:
      return jayq.core.dequeue.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return jayq.core.dequeue.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.dequeue.cljs$core$IFn$_invoke$arity$2 = function($elem, queue_name) {
  return $elem.dequeue(queue_name);
};
jayq.core.dequeue.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.dequeue();
};
jayq.core.dequeue.cljs$lang$maxFixedArity = 2;
jayq.core.document_ready = function jayq$core$document_ready(func) {
  return jayq.core.$.call(null, document).ready(func);
};
jayq.core.mimetype_converter = function jayq$core$mimetype_converter(s) {
  return cljs.reader.read_string.call(null, [cljs.core.str(s)].join(""));
};
jQuery.ajaxSetup(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "accepts", "accepts", 1429714104), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "edn", "edn", 1317840885), "application/edn, text/edn", new cljs.core.Keyword(null, "clojure", "clojure", 438975815), "application/clojure, text/clojure"], null), new cljs.core.Keyword(null, "contents", "contents", -1567174023), new cljs.core.PersistentArrayMap(null, 1, ["clojure", 
/edn|clojure/], null), new cljs.core.Keyword(null, "converters", "converters", 195533259), new cljs.core.PersistentArrayMap(null, 2, ["text edn", jayq.core.mimetype_converter, "text clojure", jayq.core.mimetype_converter], null)], null)));
jayq.core.clj_content_type_QMARK_ = function jayq$core$clj_content_type_QMARK_(x) {
  return cljs.core.re_find.call(null, /^(text|application)\/(clojure|edn)/, x);
};
jayq.core.__GT_content_type = function jayq$core$__GT_content_type(ct) {
  if (typeof ct === "string") {
    return ct;
  } else {
    if (ct instanceof cljs.core.Keyword) {
      return cljs.core.subs.call(null, [cljs.core.str(ct)].join(""), 1);
    } else {
      return null;
    }
  }
};
jayq.core.preprocess_request = function jayq$core$preprocess_request(p__23523) {
  var map__23525 = p__23523;
  var map__23525__$1 = cljs.core.seq_QMARK_.call(null, map__23525) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23525) : map__23525;
  var request = map__23525__$1;
  var data = cljs.core.get.call(null, map__23525__$1, new cljs.core.Keyword(null, "data", "data", -232669377));
  var contentType = cljs.core.get.call(null, map__23525__$1, new cljs.core.Keyword(null, "contentType", "contentType", -1462509576));
  var ct = jayq.core.__GT_content_type.call(null, contentType);
  return function(ct, map__23525, map__23525__$1, request, data, contentType) {
    return function(p1__23522_SHARP_) {
      if (cljs.core.truth_(function() {
        var and__4295__auto__ = ct;
        if (cljs.core.truth_(and__4295__auto__)) {
          return jayq.core.clj_content_type_QMARK_.call(null, ct);
        } else {
          return and__4295__auto__;
        }
      }())) {
        return cljs.core.assoc.call(null, p1__23522_SHARP_, new cljs.core.Keyword(null, "data", "data", -232669377), cljs.core.pr_str.call(null, data));
      } else {
        return p1__23522_SHARP_;
      }
    };
  }(ct, map__23525, map__23525__$1, request, data, contentType).call(null, function(ct, map__23525, map__23525__$1, request, data, contentType) {
    return function(p1__23521_SHARP_) {
      if (cljs.core.truth_(ct)) {
        return cljs.core.assoc.call(null, p1__23521_SHARP_, new cljs.core.Keyword(null, "contentType", "contentType", -1462509576), ct);
      } else {
        return p1__23521_SHARP_;
      }
    };
  }(ct, map__23525, map__23525__$1, request, data, contentType).call(null, request));
};
jayq.core.__GT_ajax_settings = function jayq$core$__GT_ajax_settings(request) {
  return cljs.core.clj__GT_js.call(null, jayq.core.preprocess_request.call(null, request));
};
jayq.core.ajax = function jayq$core$ajax() {
  var G__23527 = arguments.length;
  switch(G__23527) {
    case 2:
      return jayq.core.ajax.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return jayq.core.ajax.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.ajax.cljs$core$IFn$_invoke$arity$2 = function(url, settings) {
  return jQuery.ajax(url, jayq.core.__GT_ajax_settings.call(null, settings));
};
jayq.core.ajax.cljs$core$IFn$_invoke$arity$1 = function(settings) {
  return jQuery.ajax(jayq.core.__GT_ajax_settings.call(null, settings));
};
jayq.core.ajax.cljs$lang$maxFixedArity = 2;
jayq.core.xhr = function jayq$core$xhr(p__23529, content, callback) {
  var vec__23531 = p__23529;
  var method = cljs.core.nth.call(null, vec__23531, 0, null);
  var uri = cljs.core.nth.call(null, vec__23531, 1, null);
  var params = cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), clojure.string.upper_case.call(null, cljs.core.name.call(null, method)), new cljs.core.Keyword(null, "data", "data", -232669377), cljs.core.clj__GT_js.call(null, content), new cljs.core.Keyword(null, "success", "success", 1890645906), callback], null));
  return jQuery.ajax(uri, params);
};
jayq.core.read = function jayq$core$read($elem) {
  return cljs.reader.read_string.call(null, jayq.core.html.call(null, $elem));
};
jayq.core.$contains = jQuery.contains;
jayq.core.bind = function jayq$core$bind($elem, ev, func) {
  return $elem.bind(cljs.core.name.call(null, ev), func);
};
jayq.core.unbind = function jayq$core$unbind() {
  var argseq__5347__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return jayq.core.unbind.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5347__auto__);
};
jayq.core.unbind.cljs$core$IFn$_invoke$arity$variadic = function($elem, ev, p__23535) {
  var vec__23536 = p__23535;
  var func = cljs.core.nth.call(null, vec__23536, 0, null);
  return $elem.unbind(cljs.core.name.call(null, ev), func);
};
jayq.core.unbind.cljs$lang$maxFixedArity = 2;
jayq.core.unbind.cljs$lang$applyTo = function(seq23532) {
  var G__23533 = cljs.core.first.call(null, seq23532);
  var seq23532__$1 = cljs.core.next.call(null, seq23532);
  var G__23534 = cljs.core.first.call(null, seq23532__$1);
  var seq23532__$2 = cljs.core.next.call(null, seq23532__$1);
  return jayq.core.unbind.cljs$core$IFn$_invoke$arity$variadic(G__23533, G__23534, seq23532__$2);
};
jayq.core.trigger = function jayq$core$trigger($elem, ev) {
  return $elem.trigger(cljs.core.name.call(null, ev));
};
jayq.core.delegate = function jayq$core$delegate($elem, sel, ev, func) {
  return $elem.delegate(jayq.core.__GT_selector.call(null, sel), cljs.core.name.call(null, ev), func);
};
jayq.core.__GT_event = function jayq$core$__GT_event(e) {
  if (cljs.core.coll_QMARK_.call(null, e)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, cljs.core.name, e));
  } else {
    return cljs.core.clj__GT_js.call(null, e);
  }
};
jayq.core.on = function jayq$core$on() {
  var argseq__5347__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return jayq.core.on.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5347__auto__);
};
jayq.core.on.cljs$core$IFn$_invoke$arity$variadic = function($elem, events, p__23540) {
  var vec__23541 = p__23540;
  var sel = cljs.core.nth.call(null, vec__23541, 0, null);
  var data = cljs.core.nth.call(null, vec__23541, 1, null);
  var handler = cljs.core.nth.call(null, vec__23541, 2, null);
  return $elem.on(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), data, handler);
};
jayq.core.on.cljs$lang$maxFixedArity = 2;
jayq.core.on.cljs$lang$applyTo = function(seq23537) {
  var G__23538 = cljs.core.first.call(null, seq23537);
  var seq23537__$1 = cljs.core.next.call(null, seq23537);
  var G__23539 = cljs.core.first.call(null, seq23537__$1);
  var seq23537__$2 = cljs.core.next.call(null, seq23537__$1);
  return jayq.core.on.cljs$core$IFn$_invoke$arity$variadic(G__23538, G__23539, seq23537__$2);
};
jayq.core.one = function jayq$core$one() {
  var argseq__5347__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return jayq.core.one.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5347__auto__);
};
jayq.core.one.cljs$core$IFn$_invoke$arity$variadic = function($elem, events, p__23545) {
  var vec__23546 = p__23545;
  var sel = cljs.core.nth.call(null, vec__23546, 0, null);
  var data = cljs.core.nth.call(null, vec__23546, 1, null);
  var handler = cljs.core.nth.call(null, vec__23546, 2, null);
  return $elem.one(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), data, handler);
};
jayq.core.one.cljs$lang$maxFixedArity = 2;
jayq.core.one.cljs$lang$applyTo = function(seq23542) {
  var G__23543 = cljs.core.first.call(null, seq23542);
  var seq23542__$1 = cljs.core.next.call(null, seq23542);
  var G__23544 = cljs.core.first.call(null, seq23542__$1);
  var seq23542__$2 = cljs.core.next.call(null, seq23542__$1);
  return jayq.core.one.cljs$core$IFn$_invoke$arity$variadic(G__23543, G__23544, seq23542__$2);
};
jayq.core.off = function jayq$core$off() {
  var argseq__5347__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return jayq.core.off.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5347__auto__);
};
jayq.core.off.cljs$core$IFn$_invoke$arity$variadic = function($elem, events, p__23550) {
  var vec__23551 = p__23550;
  var sel = cljs.core.nth.call(null, vec__23551, 0, null);
  var handler = cljs.core.nth.call(null, vec__23551, 1, null);
  return $elem.off(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), handler);
};
jayq.core.off.cljs$lang$maxFixedArity = 2;
jayq.core.off.cljs$lang$applyTo = function(seq23547) {
  var G__23548 = cljs.core.first.call(null, seq23547);
  var seq23547__$1 = cljs.core.next.call(null, seq23547);
  var G__23549 = cljs.core.first.call(null, seq23547__$1);
  var seq23547__$2 = cljs.core.next.call(null, seq23547__$1);
  return jayq.core.off.cljs$core$IFn$_invoke$arity$variadic(G__23548, G__23549, seq23547__$2);
};
jayq.core.prevent = function jayq$core$prevent(e) {
  return e.preventDefault();
};
jayq.core.height = function jayq$core$height() {
  var G__23553 = arguments.length;
  switch(G__23553) {
    case 2:
      return jayq.core.height.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return jayq.core.height.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.height.cljs$core$IFn$_invoke$arity$2 = function($elem, x) {
  return $elem.height(x);
};
jayq.core.height.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.height();
};
jayq.core.height.cljs$lang$maxFixedArity = 2;
jayq.core.width = function jayq$core$width() {
  var G__23556 = arguments.length;
  switch(G__23556) {
    case 2:
      return jayq.core.width.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return jayq.core.width.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.width.cljs$core$IFn$_invoke$arity$2 = function($elem, x) {
  return $elem.width(x);
};
jayq.core.width.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.width();
};
jayq.core.width.cljs$lang$maxFixedArity = 2;
jayq.core.inner_height = function jayq$core$inner_height($elem) {
  return $elem.innerHeight();
};
jayq.core.inner_width = function jayq$core$inner_width($elem) {
  return $elem.innerWidth();
};
jayq.core.outer_height = function jayq$core$outer_height($elem) {
  return $elem.outerHeight();
};
jayq.core.outer_width = function jayq$core$outer_width($elem) {
  return $elem.outerWidth();
};
jayq.core.offset = function jayq$core$offset() {
  var G__23559 = arguments.length;
  switch(G__23559) {
    case 2:
      return jayq.core.offset.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return jayq.core.offset.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.offset.cljs$core$IFn$_invoke$arity$2 = function($elem, coords) {
  return cljs.core.clj__GT_js.call(null, coords).offset();
};
jayq.core.offset.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return cljs.core.js__GT_clj.call(null, $elem.offset(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
};
jayq.core.offset.cljs$lang$maxFixedArity = 2;
jayq.core.offset_parent = function jayq$core$offset_parent($elem) {
  return $elem.offsetParent();
};
jayq.core.position = function jayq$core$position($elem) {
  return cljs.core.js__GT_clj.call(null, $elem.position(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
};
jayq.core.scroll_left = function jayq$core$scroll_left() {
  var G__23562 = arguments.length;
  switch(G__23562) {
    case 1:
      return jayq.core.scroll_left.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.scroll_left.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.scroll_left.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.scrollLeft();
};
jayq.core.scroll_left.cljs$core$IFn$_invoke$arity$2 = function($elem, x) {
  return $elem.scrollLeft(x);
};
jayq.core.scroll_left.cljs$lang$maxFixedArity = 2;
jayq.core.scroll_top = function jayq$core$scroll_top() {
  var G__23565 = arguments.length;
  switch(G__23565) {
    case 1:
      return jayq.core.scroll_top.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.scroll_top.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.scroll_top.cljs$core$IFn$_invoke$arity$1 = function($elem) {
  return $elem.scrollTop();
};
jayq.core.scroll_top.cljs$core$IFn$_invoke$arity$2 = function($elem, x) {
  return $elem.scrollTop(x);
};
jayq.core.scroll_top.cljs$lang$maxFixedArity = 2;
jayq.core.$deferred = jQuery.Deferred;
jayq.core.$when = jQuery.when;
jayq.core.then = function jayq$core$then() {
  var G__23568 = arguments.length;
  switch(G__23568) {
    case 3:
      return jayq.core.then.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return jayq.core.then.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.then.cljs$core$IFn$_invoke$arity$3 = function(deferred, done_fn, fail_fn) {
  return deferred.then(cljs.core.clj__GT_js.call(null, done_fn), cljs.core.clj__GT_js.call(null, fail_fn));
};
jayq.core.then.cljs$core$IFn$_invoke$arity$4 = function(deferred, done_fn, fail_fn, progress_fn) {
  return deferred.then(cljs.core.clj__GT_js.call(null, done_fn), cljs.core.clj__GT_js.call(null, fail_fn), cljs.core.clj__GT_js.call(null, progress_fn));
};
jayq.core.then.cljs$lang$maxFixedArity = 4;
jayq.core.done = function jayq$core$done() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return jayq.core.done.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
jayq.core.done.cljs$core$IFn$_invoke$arity$variadic = function(deferred, fns_args) {
  return deferred.done.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
};
jayq.core.done.cljs$lang$maxFixedArity = 1;
jayq.core.done.cljs$lang$applyTo = function(seq23570) {
  var G__23571 = cljs.core.first.call(null, seq23570);
  var seq23570__$1 = cljs.core.next.call(null, seq23570);
  return jayq.core.done.cljs$core$IFn$_invoke$arity$variadic(G__23571, seq23570__$1);
};
jayq.core.fail = function jayq$core$fail() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return jayq.core.fail.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
jayq.core.fail.cljs$core$IFn$_invoke$arity$variadic = function(deferred, fns_args) {
  return deferred.fail.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
};
jayq.core.fail.cljs$lang$maxFixedArity = 1;
jayq.core.fail.cljs$lang$applyTo = function(seq23572) {
  var G__23573 = cljs.core.first.call(null, seq23572);
  var seq23572__$1 = cljs.core.next.call(null, seq23572);
  return jayq.core.fail.cljs$core$IFn$_invoke$arity$variadic(G__23573, seq23572__$1);
};
jayq.core.progress = function jayq$core$progress(deferred, fns_args) {
  return deferred.progress(cljs.core.clj__GT_js.call(null, fns_args));
};
jayq.core.promise = function jayq$core$promise() {
  var G__23575 = arguments.length;
  switch(G__23575) {
    case 1:
      return jayq.core.promise.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return jayq.core.promise.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return jayq.core.promise.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.promise.cljs$core$IFn$_invoke$arity$1 = function(deferred) {
  return deferred.promise();
};
jayq.core.promise.cljs$core$IFn$_invoke$arity$2 = function(deferred, type) {
  return deferred.promise(type);
};
jayq.core.promise.cljs$core$IFn$_invoke$arity$3 = function(deferred, type, target) {
  return deferred.promise(type, target);
};
jayq.core.promise.cljs$lang$maxFixedArity = 3;
jayq.core.always = function jayq$core$always() {
  var argseq__5347__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return jayq.core.always.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5347__auto__);
};
jayq.core.always.cljs$core$IFn$_invoke$arity$variadic = function(deferred, fns_args) {
  return deferred.always.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
};
jayq.core.always.cljs$lang$maxFixedArity = 1;
jayq.core.always.cljs$lang$applyTo = function(seq23577) {
  var G__23578 = cljs.core.first.call(null, seq23577);
  var seq23577__$1 = cljs.core.next.call(null, seq23577);
  return jayq.core.always.cljs$core$IFn$_invoke$arity$variadic(G__23578, seq23577__$1);
};
jayq.core.reject = function jayq$core$reject(deferred, args) {
  return deferred.reject(args);
};
jayq.core.reject_with = function jayq$core$reject_with(deferred, context, args) {
  return deferred.rejectWith(context, args);
};
jayq.core.notify = function jayq$core$notify(deferred, args) {
  return deferred.notify(args);
};
jayq.core.notify_with = function jayq$core$notify_with(deferred, context, args) {
  return deferred.notifyWith(context, args);
};
jayq.core.resolve = function jayq$core$resolve(deferred, args) {
  return deferred.resolve(args);
};
jayq.core.resolve_with = function jayq$core$resolve_with(deferred, context, args) {
  return deferred.resolveWith(context, args);
};
jayq.core.pipe = function jayq$core$pipe() {
  var G__23580 = arguments.length;
  switch(G__23580) {
    case 2:
      return jayq.core.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return jayq.core.pipe.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return jayq.core.pipe.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
jayq.core.pipe.cljs$core$IFn$_invoke$arity$2 = function(deferred, done_filter) {
  return deferred.pipe(done_filter);
};
jayq.core.pipe.cljs$core$IFn$_invoke$arity$3 = function(deferred, done_filter, fail_filter) {
  return deferred.pipe(done_filter, fail_filter);
};
jayq.core.pipe.cljs$core$IFn$_invoke$arity$4 = function(deferred, done_filter, fail_filter, progress_filter) {
  return deferred.pipe(done_filter, fail_filter, progress_filter);
};
jayq.core.pipe.cljs$lang$maxFixedArity = 4;
jayq.core.state = function jayq$core$state(deferred) {
  return cljs.core.keyword.call(null, deferred.state());
};
jayq.core.deferred_m = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "return", "return", -1891502105), jayq.core.$when, new cljs.core.Keyword(null, "bind", "bind", -113428417), function(x, f) {
  var dfd = jayq.core.$deferred.call(null);
  jayq.core.done.call(null, x, function(dfd) {
    return function(v) {
      return jayq.core.done.call(null, f.call(null, v), cljs.core.partial.call(null, jayq.core.resolve, dfd));
    };
  }(dfd));
  return jayq.core.promise.call(null, dfd);
}, new cljs.core.Keyword(null, "zero", "zero", -858964576), cljs.core.identity], null);
jayq.core.ajax_m = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "return", "return", -1891502105), cljs.core.identity, new cljs.core.Keyword(null, "bind", "bind", -113428417), function(x, f) {
  return jayq.core.done.call(null, jayq.core.ajax.call(null, x), f);
}, new cljs.core.Keyword(null, "zero", "zero", -858964576), cljs.core.identity], null);
goog.provide("fipp.ednize");
goog.require("cljs.core");
goog.require("clojure.string");
fipp.ednize.IEdn = function() {
  var obj13270 = {};
  return obj13270;
}();
fipp.ednize._edn = function fipp$ednize$_edn(x) {
  if (function() {
    var and__4295__auto__ = x;
    if (and__4295__auto__) {
      return x.fipp$ednize$IEdn$_edn$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return x.fipp$ednize$IEdn$_edn$arity$1(x);
  } else {
    var x__4943__auto__ = x == null ? null : x;
    return function() {
      var or__4307__auto__ = fipp.ednize._edn[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.ednize._edn["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEdn.-edn", x);
        }
      }
    }().call(null, x);
  }
};
fipp.ednize.edn = function fipp$ednize$edn(x) {
  if (cljs.core.object_QMARK_.call(null, x)) {
    return cljs.core.tagged_literal.call(null, new cljs.core.Symbol(null, "js", "js", -886355190, null), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__5061__auto__ = function fipp$ednize$edn_$_iter__13279(s__13280) {
        return new cljs.core.LazySeq(null, function() {
          var s__13280__$1 = s__13280;
          while (true) {
            var temp__4423__auto__ = cljs.core.seq.call(null, s__13280__$1);
            if (temp__4423__auto__) {
              var s__13280__$2 = temp__4423__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__13280__$2)) {
                var c__5059__auto__ = cljs.core.chunk_first.call(null, s__13280__$2);
                var size__5060__auto__ = cljs.core.count.call(null, c__5059__auto__);
                var b__13282 = cljs.core.chunk_buffer.call(null, size__5060__auto__);
                if (function() {
                  var i__13281 = 0;
                  while (true) {
                    if (i__13281 < size__5060__auto__) {
                      var k = cljs.core._nth.call(null, c__5059__auto__, i__13281);
                      cljs.core.chunk_append.call(null, b__13282, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), x[k]], null));
                      var G__13287 = i__13281 + 1;
                      i__13281 = G__13287;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13282), fipp$ednize$edn_$_iter__13279.call(null, cljs.core.chunk_rest.call(null, s__13280__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13282), null);
                }
              } else {
                var k = cljs.core.first.call(null, s__13280__$2);
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), x[k]], null), fipp$ednize$edn_$_iter__13279.call(null, cljs.core.rest.call(null, s__13280__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__5061__auto__.call(null, cljs.core.js_keys.call(null, x));
    }()));
  } else {
    if (cljs.core.array_QMARK_.call(null, x)) {
      return cljs.core.tagged_literal.call(null, new cljs.core.Symbol(null, "js", "js", -886355190, null), cljs.core.vec.call(null, x));
    } else {
      if (function() {
        var G__13283 = x;
        if (G__13283) {
          var bit__4981__auto__ = G__13283.cljs$lang$protocol_mask$partition0$ & 32768;
          if (bit__4981__auto__ || G__13283.cljs$core$IDeref$) {
            return true;
          } else {
            if (!G__13283.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__13283);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__13283);
        }
      }()) {
        var pending_QMARK_ = function() {
          var and__4295__auto__ = function() {
            var G__13285 = x;
            if (G__13285) {
              var bit__4981__auto__ = G__13285.cljs$lang$protocol_mask$partition1$ & 1;
              if (bit__4981__auto__ || G__13285.cljs$core$IPending$) {
                return true;
              } else {
                if (!G__13285.cljs$lang$protocol_mask$partition1$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPending, G__13285);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPending, G__13285);
            }
          }();
          if (and__4295__auto__) {
            return !cljs.core.realized_QMARK_.call(null, x);
          } else {
            return and__4295__auto__;
          }
        }();
        var val = pending_QMARK_ ? null : cljs.core.deref.call(null, x);
        var status = pending_QMARK_ ? new cljs.core.Keyword(null, "pending", "pending", -220036727) : new cljs.core.Keyword(null, "ready", "ready", 1086465795);
        return cljs.core.tagged_literal.call(null, new cljs.core.Symbol(null, "object", "object", -1179821820, null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.symbol.call(null, cljs.core.pr_str.call(null, cljs.core.type.call(null, x))), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "val", "val", 128701612), val], null)], null));
      } else {
        if (x instanceof Date) {
          return cljs.core.tagged_literal.call(null, new cljs.core.Symbol(null, "inst", "inst", -2008473268, null), function() {
            var normalize = function(n, len) {
              var ns = [cljs.core.str(n)].join("");
              while (true) {
                if (cljs.core.count.call(null, ns) < len) {
                  var G__13288 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                  ns = G__13288;
                  continue;
                } else {
                  return ns;
                }
                break;
              }
            };
            return [cljs.core.str(x.getUTCFullYear()), cljs.core.str("-"), cljs.core.str(normalize.call(null, x.getUTCMonth() + 1, 2)), cljs.core.str("-"), cljs.core.str(normalize.call(null, x.getUTCDate(), 2)), cljs.core.str("T"), cljs.core.str(normalize.call(null, x.getUTCHours(), 2)), cljs.core.str(":"), cljs.core.str(normalize.call(null, x.getUTCMinutes(), 2)), cljs.core.str(":"), cljs.core.str(normalize.call(null, x.getUTCSeconds(), 2)), cljs.core.str("."), cljs.core.str(normalize.call(null, 
            x.getUTCMilliseconds(), 3)), cljs.core.str("-"), cljs.core.str("00:00")].join("");
          }());
        } else {
          if (function() {
            var G__13286 = x;
            if (G__13286) {
              var bit__4981__auto__ = null;
              if (cljs.core.truth_(function() {
                var or__4307__auto__ = bit__4981__auto__;
                if (cljs.core.truth_(or__4307__auto__)) {
                  return or__4307__auto__;
                } else {
                  return G__13286.fipp$ednize$IEdn$;
                }
              }())) {
                return true;
              } else {
                if (!G__13286.cljs$lang$protocol_mask$partition$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, fipp.ednize.IEdn, G__13286);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, fipp.ednize.IEdn, G__13286);
            }
          }()) {
            return fipp.ednize._edn.call(null, x);
          } else {
            return cljs.core.tagged_literal.call(null, new cljs.core.Symbol(null, "object", "object", -1179821820, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.symbol.call(null, cljs.core.pr_str.call(null, cljs.core.type.call(null, x)))], null));
          }
        }
      }
    }
  }
};
cljs.core.UUID.prototype.fipp$ednize$IEdn$ = true;
cljs.core.UUID.prototype.fipp$ednize$IEdn$_edn$arity$1 = function(x) {
  var x__$1 = this;
  return cljs.core.tagged_literal.call(null, new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), [cljs.core.str(x__$1)].join(""));
};
cljs.core.ExceptionInfo.prototype.fipp$ednize$IEdn$ = true;
cljs.core.ExceptionInfo.prototype.fipp$ednize$IEdn$_edn$arity$1 = function(x) {
  var x__$1 = this;
  return cljs.core.tagged_literal.call(null, new cljs.core.Symbol(null, "ExceptionInfo", "ExceptionInfo", 294935087, null), cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "message", "message", -406056002), cljs.core.ex_message.call(null, x__$1), new cljs.core.Keyword(null, "data", "data", -232669377), cljs.core.ex_data.call(null, x__$1)], null), function() {
    var temp__4423__auto__ = cljs.core.ex_cause.call(null, x__$1);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var cause = temp__4423__auto__;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "cause", "cause", 231901252), cause], null);
    } else {
      return null;
    }
  }()));
};
fipp.ednize.record__GT_tagged = function fipp$ednize$record__GT_tagged(x) {
  return cljs.core.tagged_literal.call(null, clojure.string.split.call(null, cljs.core.pr_str.call(null, cljs.core.type.call(null, x)), /\//, 2), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, x));
};
goog.provide("fipp.visit");
goog.require("cljs.core");
goog.require("fipp.ednize");
fipp.visit.IVisitor = function() {
  var obj13675 = {};
  return obj13675;
}();
fipp.visit.visit_unknown = function fipp$visit$visit_unknown(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_unknown$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_unknown$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_unknown[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_unknown["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-unknown", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.visit_nil = function fipp$visit$visit_nil(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_nil$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_nil$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_nil[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_nil["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-nil", this$);
        }
      }
    }().call(null, this$);
  }
};
fipp.visit.visit_boolean = function fipp$visit$visit_boolean(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_boolean$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_boolean$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_boolean[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_boolean["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-boolean", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.visit_string = function fipp$visit$visit_string(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_string$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_string$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_string[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_string["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-string", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.visit_character = function fipp$visit$visit_character(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_character$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_character$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_character[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_character["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-character", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.visit_symbol = function fipp$visit$visit_symbol(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_symbol$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_symbol$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_symbol[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_symbol["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-symbol", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.visit_keyword = function fipp$visit$visit_keyword(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_keyword$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_keyword$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_keyword[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_keyword["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-keyword", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.visit_number = function fipp$visit$visit_number(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_number$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_number$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_number[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_number["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-number", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.visit_seq = function fipp$visit$visit_seq(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_seq$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_seq$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_seq[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_seq["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-seq", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.visit_vector = function fipp$visit$visit_vector(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_vector$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_vector$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_vector[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_vector["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-vector", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.visit_map = function fipp$visit$visit_map(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_map$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_map$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_map[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_map["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-map", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.visit_set = function fipp$visit$visit_set(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_set$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_set$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_set[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_set["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-set", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.visit_tagged = function fipp$visit$visit_tagged(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_tagged$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_tagged$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_tagged[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_tagged["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-tagged", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.visit_meta = function fipp$visit$visit_meta(this$, meta, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_meta$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_meta$arity$3(this$, meta, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_meta[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_meta["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-meta", this$);
        }
      }
    }().call(null, this$, meta, x);
  }
};
fipp.visit.visit_var = function fipp$visit$visit_var(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_var$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_var$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_var[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_var["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-var", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.visit_pattern = function fipp$visit$visit_pattern(this$, x) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.fipp$visit$IVisitor$visit_pattern$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.fipp$visit$IVisitor$visit_pattern$arity$2(this$, x);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = fipp.visit.visit_pattern[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = fipp.visit.visit_pattern["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVisitor.visit-pattern", this$);
        }
      }
    }().call(null, this$, x);
  }
};
fipp.visit.boolean_QMARK_ = function fipp$visit$boolean_QMARK_(x) {
  return x === true || x === false;
};
fipp.visit.char_QMARK_ = function fipp$visit$char_QMARK_(x) {
  return false;
};
fipp.visit.visit_STAR_ = function fipp$visit$visit_STAR_(visitor, x) {
  if (x == null) {
    return fipp.visit.visit_nil.call(null, visitor);
  } else {
    if (cljs.core.truth_(fipp.visit.boolean_QMARK_.call(null, x))) {
      return fipp.visit.visit_boolean.call(null, visitor, x);
    } else {
      if (typeof x === "string") {
        return fipp.visit.visit_string.call(null, visitor, x);
      } else {
        if (cljs.core.truth_(fipp.visit.char_QMARK_.call(null, x))) {
          return fipp.visit.visit_character.call(null, visitor, x);
        } else {
          if (x instanceof cljs.core.Symbol) {
            return fipp.visit.visit_symbol.call(null, visitor, x);
          } else {
            if (x instanceof cljs.core.Keyword) {
              return fipp.visit.visit_keyword.call(null, visitor, x);
            } else {
              if (typeof x === "number") {
                return fipp.visit.visit_number.call(null, visitor, x);
              } else {
                if (cljs.core.seq_QMARK_.call(null, x)) {
                  return fipp.visit.visit_seq.call(null, visitor, x);
                } else {
                  if (cljs.core.vector_QMARK_.call(null, x)) {
                    return fipp.visit.visit_vector.call(null, visitor, x);
                  } else {
                    if (cljs.core.record_QMARK_.call(null, x)) {
                      return fipp.visit.visit_tagged.call(null, visitor, fipp.ednize.record__GT_tagged.call(null, x));
                    } else {
                      if (cljs.core.map_QMARK_.call(null, x)) {
                        return fipp.visit.visit_map.call(null, visitor, x);
                      } else {
                        if (cljs.core.set_QMARK_.call(null, x)) {
                          return fipp.visit.visit_set.call(null, visitor, x);
                        } else {
                          if (cljs.core.truth_(cljs.core.tagged_literal_QMARK_.call(null, x))) {
                            return fipp.visit.visit_tagged.call(null, visitor, x);
                          } else {
                            if (cljs.core.truth_(cljs.core.var_QMARK_.call(null, x))) {
                              return fipp.visit.visit_var.call(null, visitor, x);
                            } else {
                              if (cljs.core.truth_(cljs.core.regexp_QMARK_.call(null, x))) {
                                return fipp.visit.visit_pattern.call(null, visitor, x);
                              } else {
                                return fipp.visit.visit_unknown.call(null, visitor, x);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
fipp.visit.visit = function fipp$visit$visit(visitor, x) {
  var temp__4421__auto__ = cljs.core.meta.call(null, x);
  if (cljs.core.truth_(temp__4421__auto__)) {
    var m = temp__4421__auto__;
    return fipp.visit.visit_meta.call(null, visitor, m, x);
  } else {
    return fipp.visit.visit_STAR_.call(null, visitor, x);
  }
};
goog.provide("clojure.core.rrb_vector.protocols");
goog.require("cljs.core");
clojure.core.rrb_vector.protocols.PSpliceableVector = function() {
  var obj13669 = {};
  return obj13669;
}();
clojure.core.rrb_vector.protocols._splicev = function clojure$core$rrb_vector$protocols$_splicev(v1, v2) {
  if (function() {
    var and__4295__auto__ = v1;
    if (and__4295__auto__) {
      return v1.clojure$core$rrb_vector$protocols$PSpliceableVector$_splicev$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return v1.clojure$core$rrb_vector$protocols$PSpliceableVector$_splicev$arity$2(v1, v2);
  } else {
    var x__4943__auto__ = v1 == null ? null : v1;
    return function() {
      var or__4307__auto__ = clojure.core.rrb_vector.protocols._splicev[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = clojure.core.rrb_vector.protocols._splicev["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PSpliceableVector.-splicev", v1);
        }
      }
    }().call(null, v1, v2);
  }
};
clojure.core.rrb_vector.protocols.PSliceableVector = function() {
  var obj13671 = {};
  return obj13671;
}();
clojure.core.rrb_vector.protocols._slicev = function clojure$core$rrb_vector$protocols$_slicev(v, start, end) {
  if (function() {
    var and__4295__auto__ = v;
    if (and__4295__auto__) {
      return v.clojure$core$rrb_vector$protocols$PSliceableVector$_slicev$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return v.clojure$core$rrb_vector$protocols$PSliceableVector$_slicev$arity$3(v, start, end);
  } else {
    var x__4943__auto__ = v == null ? null : v;
    return function() {
      var or__4307__auto__ = clojure.core.rrb_vector.protocols._slicev[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = clojure.core.rrb_vector.protocols._slicev["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PSliceableVector.-slicev", v);
        }
      }
    }().call(null, v, start, end);
  }
};
goog.provide("clojure.core.rrb_vector.nodes");
goog.require("cljs.core");
clojure.core.rrb_vector.nodes.empty_node = cljs.core.PersistentVector.EMPTY_NODE;
clojure.core.rrb_vector.nodes.clone = function clojure$core$rrb_vector$nodes$clone(shift, node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
clojure.core.rrb_vector.nodes.regular_QMARK_ = function clojure$core$rrb_vector$nodes$regular_QMARK_(node) {
  return !(node.arr.length === 33);
};
clojure.core.rrb_vector.nodes.ranges = function clojure$core$rrb_vector$nodes$ranges(node) {
  return node.arr[32];
};
clojure.core.rrb_vector.nodes.last_range = function clojure$core$rrb_vector$nodes$last_range(node) {
  var rngs = clojure.core.rrb_vector.nodes.ranges.call(null, node);
  var i = rngs[32] - 1;
  return rngs[i];
};
clojure.core.rrb_vector.nodes.regular_ranges = function clojure$core$rrb_vector$nodes$regular_ranges(shift, cnt) {
  var step = 1 << shift;
  var rngs = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  var i = 0;
  var r = step;
  while (true) {
    if (r < cnt) {
      rngs[i] = r;
      var G__13568 = i + 1;
      var G__13569 = r + step;
      i = G__13568;
      r = G__13569;
      continue;
    } else {
      rngs[i] = cnt;
      rngs[32] = i + 1;
      return rngs;
    }
    break;
  }
};
clojure.core.rrb_vector.nodes.overflow_QMARK_ = function clojure$core$rrb_vector$nodes$overflow_QMARK_(root, shift, cnt) {
  while (true) {
    if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, root))) {
      return cnt >> 5 > 1 << shift;
    } else {
      var rngs = clojure.core.rrb_vector.nodes.ranges.call(null, root);
      var slc = rngs[32];
      var and__4295__auto__ = slc === 32;
      if (and__4295__auto__) {
        var or__4307__auto__ = shift === 5;
        if (or__4307__auto__) {
          return or__4307__auto__;
        } else {
          var G__13570 = root.arr[slc - 1];
          var G__13571 = shift - 5;
          var G__13572 = rngs[31] - rngs[30] + 32;
          root = G__13570;
          shift = G__13571;
          cnt = G__13572;
          continue;
        }
      } else {
        return and__4295__auto__;
      }
    }
    break;
  }
};
clojure.core.rrb_vector.nodes.index_of_0 = function clojure$core$rrb_vector$nodes$index_of_0(arr) {
  var l = 0;
  var h = 31;
  while (true) {
    if (l >= h - 1) {
      if ((arr[l] | 0) === 0) {
        return l;
      } else {
        if ((arr[h] | 0) === 0) {
          return h;
        } else {
          return 32;
        }
      }
    } else {
      var mid = l + (h - l >> 1);
      if ((arr[mid] | 0) === 0) {
        var G__13573 = l;
        var G__13574 = mid;
        l = G__13573;
        h = G__13574;
        continue;
      } else {
        var G__13575 = mid + 1;
        var G__13576 = h;
        l = G__13575;
        h = G__13576;
        continue;
      }
    }
    break;
  }
};
clojure.core.rrb_vector.nodes.index_of_nil = function clojure$core$rrb_vector$nodes$index_of_nil(arr) {
  var l = 0;
  var h = 31;
  while (true) {
    if (l >= h - 1) {
      if (arr[l] == null) {
        return l;
      } else {
        if (arr[h] == null) {
          return h;
        } else {
          return 32;
        }
      }
    } else {
      var mid = l + (h - l >> 1);
      if (arr[mid] == null) {
        var G__13577 = l;
        var G__13578 = mid;
        l = G__13577;
        h = G__13578;
        continue;
      } else {
        var G__13579 = mid + 1;
        var G__13580 = h;
        l = G__13579;
        h = G__13580;
        continue;
      }
    }
    break;
  }
};
clojure.core.rrb_vector.nodes.first_child = function clojure$core$rrb_vector$nodes$first_child(node) {
  return node.arr[0];
};
clojure.core.rrb_vector.nodes.last_child = function clojure$core$rrb_vector$nodes$last_child(node) {
  var arr = node.arr;
  if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, node))) {
    return arr[clojure.core.rrb_vector.nodes.index_of_nil.call(null, arr) - 1];
  } else {
    return arr[clojure.core.rrb_vector.nodes.ranges.call(null, node)[32] - 1];
  }
};
clojure.core.rrb_vector.nodes.remove_leftmost_child = function clojure$core$rrb_vector$nodes$remove_leftmost_child(shift, parent) {
  var arr = parent.arr;
  if (arr[1] == null) {
    return null;
  } else {
    var r_QMARK_ = clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, parent);
    var new_arr = new Array(cljs.core.truth_(r_QMARK_) ? 32 : 33);
    cljs.core.array_copy.call(null, arr, 1, new_arr, 0, 31);
    if (cljs.core.not.call(null, r_QMARK_)) {
      var rngs_13581 = clojure.core.rrb_vector.nodes.ranges.call(null, parent);
      var rng0_13582 = rngs_13581[0];
      var new_rngs_13583 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var lim_13584 = rngs_13581[32];
      cljs.core.array_copy.call(null, rngs_13581, 1, new_rngs_13583, 0, lim_13584 - 1);
      var i_13585 = 0;
      while (true) {
        if (i_13585 < lim_13584) {
          new_rngs_13583[i_13585] = new_rngs_13583[i_13585] - rng0_13582;
          var G__13586 = i_13585 + 1;
          i_13585 = G__13586;
          continue;
        } else {
        }
        break;
      }
      new_rngs_13583[32] = rngs_13581[32] - 1;
      new_rngs_13583[rngs_13581[32] - 1] = 0;
      new_arr[32] = new_rngs_13583;
    } else {
    }
    return cljs.core.__GT_VectorNode.call(null, parent.edit, new_arr);
  }
};
clojure.core.rrb_vector.nodes.replace_leftmost_child = function clojure$core$rrb_vector$nodes$replace_leftmost_child(shift, parent, pcnt, child, d) {
  if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, parent))) {
    var step = 1 << shift;
    var rng0 = step - d;
    var ncnt = pcnt - d;
    var li = shift >> pcnt - 1 & 31;
    var arr = parent.arr;
    var new_arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
    var new_rngs = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
    new_arr[0] = child;
    cljs.core.array_copy.call(null, arr, 1, new_arr, 1, li);
    new_arr[32] = new_rngs;
    new_rngs[0] = rng0;
    new_rngs[li] = ncnt;
    new_rngs[32] = li + 1;
    var i_13587 = 1;
    while (true) {
      if (i_13587 <= li) {
        new_rngs[i_13587] = new_rngs[i_13587 - 1] + step;
        var G__13588 = i_13587 + 1;
        i_13587 = G__13588;
        continue;
      } else {
      }
      break;
    }
    return cljs.core.__GT_VectorNode.call(null, null, new_arr);
  } else {
    var new_arr = cljs.core.aclone.call(null, parent.arr);
    var rngs = clojure.core.rrb_vector.nodes.ranges.call(null, parent);
    var new_rngs = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
    var li = rngs[32] - 1;
    new_rngs[32] = rngs[32];
    new_arr[32] = new_rngs;
    new_arr[0] = child;
    var i_13589 = 0;
    while (true) {
      if (i_13589 <= li) {
        new_rngs[i_13589] = rngs[i_13589] - d;
        var G__13590 = i_13589 + 1;
        i_13589 = G__13590;
        continue;
      } else {
      }
      break;
    }
    return cljs.core.__GT_VectorNode.call(null, null, new_arr);
  }
};
clojure.core.rrb_vector.nodes.replace_rightmost_child = function clojure$core$rrb_vector$nodes$replace_rightmost_child(shift, parent, child, d) {
  if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, parent))) {
    var arr = parent.arr;
    var i = clojure.core.rrb_vector.nodes.index_of_nil.call(null, arr) - 1;
    if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, child))) {
      var new_arr = cljs.core.aclone.call(null, arr);
      new_arr[i] = child;
      return cljs.core.__GT_VectorNode.call(null, null, new_arr);
    } else {
      var arr__$1 = parent.arr;
      var new_arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var step = 1 << shift;
      var rngs = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      rngs[32] = i + 1;
      new_arr[32] = rngs;
      cljs.core.array_copy.call(null, arr__$1, 0, new_arr, 0, i);
      new_arr[i] = child;
      var j_13591 = 0;
      var r_13592 = step;
      while (true) {
        if (j_13591 <= i) {
          rngs[j_13591] = r_13592;
          var G__13593 = j_13591 + 1;
          var G__13594 = r_13592 + step;
          j_13591 = G__13593;
          r_13592 = G__13594;
          continue;
        } else {
        }
        break;
      }
      rngs[i] = clojure.core.rrb_vector.nodes.last_range.call(null, child);
      return cljs.core.__GT_VectorNode.call(null, null, arr__$1);
    }
  } else {
    var rngs = clojure.core.rrb_vector.nodes.ranges.call(null, parent);
    var new_rngs = cljs.core.aclone.call(null, rngs);
    var i = rngs[32] - 1;
    var new_arr = cljs.core.aclone.call(null, parent.arr);
    new_arr[i] = child;
    new_arr[32] = new_rngs;
    new_rngs[i] = rngs[i] + d;
    return cljs.core.__GT_VectorNode.call(null, null, new_arr);
  }
};
clojure.core.rrb_vector.nodes.new_path_STAR_ = function clojure$core$rrb_vector$nodes$new_path_STAR_(shift, node) {
  var reg_QMARK_ = 32 === node.arr.length;
  var len = reg_QMARK_ ? 32 : 33;
  var arr = new Array(len);
  var rngs = !reg_QMARK_ ? function() {
    var G__13596 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
    G__13596[0] = node.arr.length;
    G__13596[32] = 1;
    return G__13596;
  }() : null;
  var ret = cljs.core.__GT_VectorNode.call(null, null, arr);
  var arr_13597__$1 = arr;
  var shift_13598__$1 = shift;
  while (true) {
    if (shift_13598__$1 === 5) {
      if (!reg_QMARK_) {
        arr_13597__$1[32] = rngs;
      } else {
      }
      arr_13597__$1[0] = node;
    } else {
      var a_13599 = new Array(len);
      var e_13600 = cljs.core.__GT_VectorNode.call(null, null, a_13599);
      arr_13597__$1[0] = e_13600;
      if (!reg_QMARK_) {
        arr_13597__$1[32] = rngs;
      } else {
      }
      var G__13601 = a_13599;
      var G__13602 = shift_13598__$1 - 5;
      arr_13597__$1 = G__13601;
      shift_13598__$1 = G__13602;
      continue;
    }
    break;
  }
  return ret;
};
clojure.core.rrb_vector.nodes.fold_tail = function clojure$core$rrb_vector$nodes$fold_tail(node, shift, cnt, tail) {
  var tlen = tail.length;
  var reg_QMARK_ = function() {
    var and__4295__auto__ = clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, node);
    if (cljs.core.truth_(and__4295__auto__)) {
      return tlen === 32;
    } else {
      return and__4295__auto__;
    }
  }();
  var arr = node.arr;
  var li = clojure.core.rrb_vector.nodes.index_of_nil.call(null, arr);
  var new_arr = new Array(cljs.core.truth_(reg_QMARK_) ? 32 : 33);
  var rngs = cljs.core.not.call(null, clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, node)) ? clojure.core.rrb_vector.nodes.ranges.call(null, node) : null;
  var cret = shift === 5 ? cljs.core.__GT_VectorNode.call(null, null, tail) : clojure$core$rrb_vector$nodes$fold_tail.call(null, arr[li - 1], shift - 5, cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, node)) ? cljs.core.mod.call(null, cnt, 1 << shift) : function() {
    var li__$1 = rngs[32] - 1;
    if (li__$1 > 0) {
      return rngs[li__$1] - rngs[li__$1 - 1];
    } else {
      return rngs[0];
    }
  }(), tail);
  var new_rngs = cljs.core.not.call(null, reg_QMARK_) ? cljs.core.truth_(rngs) ? cljs.core.aclone.call(null, rngs) : clojure.core.rrb_vector.nodes.regular_ranges.call(null, shift, cnt) : null;
  if ((cret == null || shift === 5) && li === 32) {
    return null;
  } else {
    cljs.core.array_copy.call(null, arr, 0, new_arr, 0, li);
    if (cljs.core.truth_(reg_QMARK_)) {
    } else {
      if (cret == null || shift === 5) {
        new_rngs[li] = (li > 0 ? new_rngs[li - 1] : 0 | 0) + tlen;
        new_rngs[32] = li + 1;
      } else {
        if (li > 0) {
          new_rngs[li - 1] = new_rngs[li - 1] + tlen;
        } else {
        }
        new_rngs[32] = li;
      }
    }
    if (cljs.core.not.call(null, reg_QMARK_)) {
      new_arr[32] = new_rngs;
    } else {
    }
    if (cret == null) {
      new_arr[li] = clojure.core.rrb_vector.nodes.new_path_STAR_.call(null, shift - 5, cljs.core.__GT_VectorNode.call(null, null, tail));
    } else {
      new_arr[shift === 5 ? li : li - 1] = cret;
    }
    return cljs.core.__GT_VectorNode.call(null, null, new_arr);
  }
};
goog.provide("clojure.core.rrb_vector.trees");
goog.require("cljs.core");
goog.require("clojure.core.rrb_vector.nodes");
clojure.core.rrb_vector.trees.tail_offset = function clojure$core$rrb_vector$trees$tail_offset(cnt, tail) {
  return cnt - tail.length;
};
clojure.core.rrb_vector.trees.array_for = function clojure$core$rrb_vector$trees$array_for(cnt, shift, root, tail, i) {
  if (0 <= i && i < cnt) {
    if (i >= clojure.core.rrb_vector.trees.tail_offset.call(null, cnt, tail)) {
      return tail;
    } else {
      var i__$1 = i;
      var node = root;
      var shift__$1 = shift;
      while (true) {
        if (shift__$1 === 0) {
          return node.arr;
        } else {
          if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, node))) {
            var node__$1 = node.arr[i__$1 >> shift__$1 & 31];
            var shift__$2 = shift__$1 - 5;
            while (true) {
              if (shift__$2 === 0) {
                return node__$1.arr;
              } else {
                var G__13634 = node__$1.arr[i__$1 >> shift__$2 & 31];
                var G__13635 = shift__$2 - 5;
                node__$1 = G__13634;
                shift__$2 = G__13635;
                continue;
              }
              break;
            }
          } else {
            var rngs = clojure.core.rrb_vector.nodes.ranges.call(null, node);
            var j = function() {
              var j = i__$1 >> shift__$1 & 31;
              while (true) {
                if (i__$1 < rngs[j]) {
                  return j;
                } else {
                  var G__13636 = j + 1;
                  j = G__13636;
                  continue;
                }
                break;
              }
            }();
            var i__$2 = j > 0 ? i__$1 - rngs[j - 1] : i__$1;
            var G__13637 = i__$2;
            var G__13638 = node.arr[j];
            var G__13639 = shift__$1 - 5;
            i__$1 = G__13637;
            node = G__13638;
            shift__$1 = G__13639;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, cnt);
  }
};
clojure.core.rrb_vector.trees.new_path = function clojure$core$rrb_vector$trees$new_path(tail, edit, shift, current_node) {
  if (tail.length === 32) {
    var s = 0;
    var n = current_node;
    while (true) {
      if (s === shift) {
        return n;
      } else {
        var arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var ret = cljs.core.__GT_VectorNode.call(null, edit, arr);
        arr[0] = n;
        var G__13640 = s + 5;
        var G__13641 = ret;
        s = G__13640;
        n = G__13641;
        continue;
      }
      break;
    }
  } else {
    var s = 0;
    var n = current_node;
    while (true) {
      if (s === shift) {
        return n;
      } else {
        var arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var rngs = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var ret = cljs.core.__GT_VectorNode.call(null, edit, arr);
        arr[0] = n;
        arr[32] = rngs;
        rngs[32] = 1;
        rngs[0] = tail.length;
        var G__13642 = s + 5;
        var G__13643 = ret;
        s = G__13642;
        n = G__13643;
        continue;
      }
      break;
    }
  }
};
clojure.core.rrb_vector.trees.push_tail = function clojure$core$rrb_vector$trees$push_tail(shift, cnt, root_edit, current_node, tail_node) {
  if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, current_node))) {
    var arr = cljs.core.aclone.call(null, current_node.arr);
    var ret = cljs.core.__GT_VectorNode.call(null, current_node.edit, arr);
    var n_13644 = ret;
    var shift_13645__$1 = shift;
    while (true) {
      var arr_13646__$1 = n_13644.arr;
      var subidx_13647 = cnt - 1 >> shift_13645__$1 & 31;
      if (shift_13645__$1 === 5) {
        arr_13646__$1[subidx_13647] = tail_node;
      } else {
        var temp__4421__auto___13648 = arr_13646__$1[subidx_13647];
        if (cljs.core.truth_(temp__4421__auto___13648)) {
          var child_13649 = temp__4421__auto___13648;
          var new_carr_13650 = cljs.core.aclone.call(null, child_13649.arr);
          var new_child_13651 = cljs.core.__GT_VectorNode.call(null, root_edit, new_carr_13650);
          arr_13646__$1[subidx_13647] = new_child_13651;
          var G__13652 = new_child_13651;
          var G__13653 = shift_13645__$1 - 5;
          n_13644 = G__13652;
          shift_13645__$1 = G__13653;
          continue;
        } else {
          arr_13646__$1[subidx_13647] = clojure.core.rrb_vector.trees.new_path.call(null, tail_node.arr, root_edit, shift_13645__$1 - 5, tail_node);
        }
      }
      break;
    }
    return ret;
  } else {
    var arr = cljs.core.aclone.call(null, current_node.arr);
    var rngs = clojure.core.rrb_vector.nodes.ranges.call(null, current_node);
    var li = rngs[32] - 1;
    var ret = cljs.core.__GT_VectorNode.call(null, current_node.edit, arr);
    var cret = shift === 5 ? null : function() {
      var child = arr[li];
      var ccnt = li > 0 ? rngs[li] - rngs[li - 1] : rngs[0];
      if (!(ccnt === 1 << shift)) {
        return clojure$core$rrb_vector$trees$push_tail.call(null, shift - 5, ccnt + 1, root_edit, child, tail_node);
      } else {
        return null;
      }
    }();
    if (cljs.core.truth_(cret)) {
      arr[li] = cret;
      rngs[li] = rngs[li] + 32;
      return ret;
    } else {
      arr[li + 1] = clojure.core.rrb_vector.trees.new_path.call(null, tail_node.arr, root_edit, shift - 5, tail_node);
      rngs[li + 1] = rngs[li] + 32;
      rngs[32] = rngs[32] + 1;
      return ret;
    }
  }
};
clojure.core.rrb_vector.trees.pop_tail = function clojure$core$rrb_vector$trees$pop_tail(shift, cnt, root_edit, current_node) {
  if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, current_node))) {
    var subidx = cnt - 1 >> shift & 31;
    if (shift > 5) {
      var new_child = clojure$core$rrb_vector$trees$pop_tail.call(null, shift - 5, cnt, root_edit, current_node.arr[subidx]);
      if (new_child == null && subidx === 0) {
        return null;
      } else {
        var arr = cljs.core.aclone.call(null, current_node.arr);
        arr[subidx] = new_child;
        return cljs.core.__GT_VectorNode.call(null, root_edit, arr);
      }
    } else {
      if (subidx === 0) {
        return null;
      } else {
        var arr = cljs.core.aclone.call(null, current_node.arr);
        arr[subidx] = null;
        return cljs.core.__GT_VectorNode.call(null, root_edit, arr);
      }
    }
  } else {
    var subidx = cnt - 1 >> shift & 31;
    var rngs = clojure.core.rrb_vector.nodes.ranges.call(null, current_node);
    var subidx__$1 = function() {
      var subidx__$1 = subidx;
      while (true) {
        if ((rngs[subidx__$1 + 1] | 0) === 0 || subidx__$1 === 31) {
          return subidx__$1;
        } else {
          var G__13654 = subidx__$1 + 1;
          subidx__$1 = G__13654;
          continue;
        }
        break;
      }
    }();
    var new_rngs = cljs.core.aclone.call(null, rngs);
    if (shift > 5) {
      var child = current_node.arr[subidx__$1];
      var child_cnt = subidx__$1 === 0 ? rngs[0] : rngs[subidx__$1] - rngs[subidx__$1 - 1];
      var new_child = clojure$core$rrb_vector$trees$pop_tail.call(null, shift - 5, child_cnt, root_edit, child);
      if (new_child == null && subidx__$1 === 0) {
        return null;
      } else {
        if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, child))) {
          var arr = cljs.core.aclone.call(null, current_node.arr);
          new_rngs[subidx__$1] = new_rngs[subidx__$1] - 32;
          arr[subidx__$1] = new_child;
          arr[32] = new_rngs;
          if (new_child == null) {
            new_rngs[32] = new_rngs[32] - 1;
          } else {
          }
          return cljs.core.__GT_VectorNode.call(null, root_edit, arr);
        } else {
          var rng = clojure.core.rrb_vector.nodes.last_range.call(null, child);
          var diff = rng - (cljs.core.truth_(new_child) ? clojure.core.rrb_vector.nodes.last_range.call(null, new_child) : 0);
          var arr = cljs.core.aclone.call(null, current_node.arr);
          new_rngs[subidx__$1] = new_rngs[subidx__$1] - diff;
          arr[subidx__$1] = new_child;
          arr[32] = new_rngs;
          if (new_child == null) {
            new_rngs[32] = new_rngs[32] - 1;
          } else {
          }
          return cljs.core.__GT_VectorNode.call(null, root_edit, arr);
        }
      }
    } else {
      if (subidx__$1 === 0) {
        return null;
      } else {
        var arr = cljs.core.aclone.call(null, current_node.arr);
        var child = arr[subidx__$1];
        var new_rngs__$1 = cljs.core.aclone.call(null, rngs);
        arr[subidx__$1] = null;
        arr[32] = new_rngs__$1;
        new_rngs__$1[subidx__$1] = 0;
        new_rngs__$1[32] = new_rngs__$1[32] - 1;
        return cljs.core.__GT_VectorNode.call(null, root_edit, arr);
      }
    }
  }
};
clojure.core.rrb_vector.trees.do_assoc = function clojure$core$rrb_vector$trees$do_assoc(shift, current_node, i, val) {
  if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, current_node))) {
    var node = clojure.core.rrb_vector.nodes.clone.call(null, shift, current_node);
    var shift_13655__$1 = shift;
    var node_13656__$1 = node;
    while (true) {
      if (shift_13655__$1 === 0) {
        var arr_13657 = node_13656__$1.arr;
        arr_13657[i & 31] = val;
      } else {
        var arr_13658 = node_13656__$1.arr;
        var subidx_13659 = i >> shift_13655__$1 & 31;
        var child_13660 = clojure.core.rrb_vector.nodes.clone.call(null, shift_13655__$1, arr_13658[subidx_13659]);
        arr_13658[subidx_13659] = child_13660;
        var G__13661 = shift_13655__$1 - 5;
        var G__13662 = child_13660;
        shift_13655__$1 = G__13661;
        node_13656__$1 = G__13662;
        continue;
      }
      break;
    }
    return node;
  } else {
    var arr = cljs.core.aclone.call(null, current_node.arr);
    var rngs = clojure.core.rrb_vector.nodes.ranges.call(null, current_node);
    var subidx = i >> shift & 31;
    var subidx__$1 = function() {
      var subidx__$1 = subidx;
      while (true) {
        if (i < (rngs[subidx__$1] | 0)) {
          return subidx__$1;
        } else {
          var G__13663 = subidx__$1 + 1;
          subidx__$1 = G__13663;
          continue;
        }
        break;
      }
    }();
    var i__$1 = subidx__$1 === 0 ? i : i - rngs[subidx__$1 - 1];
    arr[subidx__$1] = clojure$core$rrb_vector$trees$do_assoc.call(null, shift - 5, arr[subidx__$1], i__$1, val);
    return cljs.core.__GT_VectorNode.call(null, current_node.edit, arr);
  }
};
goog.provide("clojure.core.rrb_vector.transients");
goog.require("cljs.core");
goog.require("clojure.core.rrb_vector.nodes");
goog.require("clojure.core.rrb_vector.trees");
clojure.core.rrb_vector.transients.ensure_editable = function clojure$core$rrb_vector$transients$ensure_editable(edit, node) {
  if (node.edit === edit) {
    return node;
  } else {
    var new_arr = cljs.core.aclone.call(null, node.arr);
    if (33 === new_arr.length) {
      new_arr[32] = cljs.core.aclone.call(null, new_arr[32]);
    } else {
    }
    return new cljs.core.VectorNode(edit, new_arr);
  }
};
clojure.core.rrb_vector.transients.editable_root = function clojure$core$rrb_vector$transients$editable_root(root) {
  return new cljs.core.VectorNode(function() {
    var obj13608 = {};
    return obj13608;
  }(), cljs.core.aclone.call(null, root.arr));
};
clojure.core.rrb_vector.transients.editable_tail = function clojure$core$rrb_vector$transients$editable_tail(tail) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tail, 0, ret, 0, tail.length);
  return ret;
};
clojure.core.rrb_vector.transients.push_tail_BANG_ = function clojure$core$rrb_vector$transients$push_tail_BANG_(shift, cnt, root_edit, current_node, tail_node) {
  var ret = clojure.core.rrb_vector.transients.ensure_editable.call(null, root_edit, current_node);
  if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, ret))) {
    var n_13609 = ret;
    var shift_13610__$1 = shift;
    while (true) {
      var arr_13611 = n_13609.arr;
      var subidx_13612 = cnt - 1 >> shift_13610__$1 & 31;
      if (shift_13610__$1 === 5) {
        arr_13611[subidx_13612] = tail_node;
      } else {
        var child_13613 = arr_13611[subidx_13612];
        if (child_13613 == null) {
          arr_13611[subidx_13612] = clojure.core.rrb_vector.trees.new_path.call(null, tail_node.arr, root_edit, shift_13610__$1 - 5, tail_node);
        } else {
          var editable_child_13614 = clojure.core.rrb_vector.transients.ensure_editable.call(null, root_edit, child_13613);
          arr_13611[subidx_13612] = editable_child_13614;
          var G__13615 = editable_child_13614;
          var G__13616 = shift_13610__$1 - 5;
          n_13609 = G__13615;
          shift_13610__$1 = G__13616;
          continue;
        }
      }
      break;
    }
    return ret;
  } else {
    var arr = ret.arr;
    var rngs = clojure.core.rrb_vector.nodes.ranges.call(null, ret);
    var li = rngs[32] - 1;
    var cret = shift === 5 ? null : function() {
      var child = clojure.core.rrb_vector.transients.ensure_editable.call(null, root_edit, arr[li]);
      var ccnt = li > 0 ? rngs[li] - rngs[li - 1] : rngs[0];
      if (!(ccnt === 1 << shift)) {
        return clojure$core$rrb_vector$transients$push_tail_BANG_.call(null, shift - 5, ccnt + 1, root_edit, child, tail_node);
      } else {
        return null;
      }
    }();
    if (cljs.core.truth_(cret)) {
      arr[li] = cret;
      rngs[li] = rngs[li] + 32;
      return ret;
    } else {
      arr[li + 1] = clojure.core.rrb_vector.trees.new_path.call(null, tail_node.arr, root_edit, shift - 5, tail_node);
      rngs[li + 1] = rngs[li] + 32;
      rngs[32] = rngs[32] + 1;
      return ret;
    }
  }
};
clojure.core.rrb_vector.transients.pop_tail_BANG_ = function clojure$core$rrb_vector$transients$pop_tail_BANG_(shift, cnt, root_edit, current_node) {
  var ret = clojure.core.rrb_vector.transients.ensure_editable.call(null, root_edit, current_node);
  if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, ret))) {
    var subidx = cnt - 1 >> shift & 31;
    if (shift > 5) {
      var child = clojure$core$rrb_vector$transients$pop_tail_BANG_.call(null, shift - 5, cnt, root_edit, ret.arr[subidx]);
      if (child == null && subidx === 0) {
        return null;
      } else {
        var arr = ret.arr;
        arr[subidx] = child;
        return ret;
      }
    } else {
      if (subidx === 0) {
        return null;
      } else {
        var arr = ret.arr;
        arr[subidx] = null;
        return ret;
      }
    }
  } else {
    var subidx = cnt - 1 >> shift & 31;
    var rngs = clojure.core.rrb_vector.nodes.ranges.call(null, ret);
    var subidx__$1 = function() {
      var subidx__$1 = subidx;
      while (true) {
        if ((rngs[subidx__$1 + 1] | 0) === 0 || subidx__$1 === 31) {
          return subidx__$1;
        } else {
          var G__13617 = subidx__$1 + 1;
          subidx__$1 = G__13617;
          continue;
        }
        break;
      }
    }();
    if (shift > 5) {
      var child = ret.arr[subidx__$1];
      var child_cnt = subidx__$1 === 0 ? rngs[0] : rngs[subidx__$1] - rngs[subidx__$1 - 1];
      var new_child = clojure$core$rrb_vector$transients$pop_tail_BANG_.call(null, shift - 5, child_cnt, root_edit, child);
      if (new_child == null && subidx__$1 === 0) {
        return null;
      } else {
        if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, child))) {
          var arr = ret.arr;
          rngs[subidx__$1] = rngs[subidx__$1] - 32;
          arr[subidx__$1] = new_child;
          if (new_child == null) {
            rngs[32] = rngs[32] - 1;
          } else {
          }
          return ret;
        } else {
          var rng = clojure.core.rrb_vector.nodes.last_range.call(null, child);
          var diff = rng - (cljs.core.truth_(new_child) ? clojure.core.rrb_vector.nodes.last_range.call(null, new_child) : 0);
          var arr = ret.arr;
          rngs[subidx__$1] = rngs[subidx__$1] - diff;
          arr[subidx__$1] = new_child;
          if (new_child == null) {
            rngs[32] = rngs[32] - 1;
          } else {
          }
          return ret;
        }
      }
    } else {
      if (subidx__$1 === 0) {
        return null;
      } else {
        var arr = ret.arr;
        var child = arr[subidx__$1];
        arr[subidx__$1] = null;
        rngs[subidx__$1] = 0;
        rngs[32] = rngs[32] - 1;
        return ret;
      }
    }
  }
};
clojure.core.rrb_vector.transients.do_assoc_BANG_ = function clojure$core$rrb_vector$transients$do_assoc_BANG_(shift, root_edit, current_node, i, val) {
  var ret = clojure.core.rrb_vector.transients.ensure_editable.call(null, root_edit, current_node);
  if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, ret))) {
    var shift_13618__$1 = shift;
    var node_13619 = ret;
    while (true) {
      if (shift_13618__$1 === 0) {
        var arr_13620 = node_13619.arr;
        arr_13620[i & 31] = val;
      } else {
        var arr_13621 = node_13619.arr;
        var subidx_13622 = i >> shift_13618__$1 & 31;
        var child_13623 = clojure.core.rrb_vector.transients.ensure_editable.call(null, root_edit, arr_13621[subidx_13622]);
        arr_13621[subidx_13622] = child_13623;
        var G__13624 = shift_13618__$1 - 5;
        var G__13625 = child_13623;
        shift_13618__$1 = G__13624;
        node_13619 = G__13625;
        continue;
      }
      break;
    }
  } else {
    var arr_13626 = ret.arr;
    var rngs_13627 = clojure.core.rrb_vector.nodes.ranges.call(null, ret);
    var subidx_13628 = i >> shift & 31;
    var subidx_13629__$1 = function() {
      var subidx__$1 = subidx_13628;
      while (true) {
        if (i < (rngs_13627[subidx__$1] | 0)) {
          return subidx__$1;
        } else {
          var G__13631 = subidx__$1 + 1;
          subidx__$1 = G__13631;
          continue;
        }
        break;
      }
    }();
    var i_13630__$1 = subidx_13629__$1 === 0 ? i : i - rngs_13627[subidx_13629__$1 - 1];
    arr_13626[subidx_13629__$1] = clojure$core$rrb_vector$transients$do_assoc_BANG_.call(null, shift - 5, root_edit, arr_13626[subidx_13629__$1], i_13630__$1, val);
  }
  return ret;
};
goog.provide("clojure.core.rrb_vector.rrbt");
goog.require("cljs.core");
goog.require("clojure.core.rrb_vector.protocols");
goog.require("clojure.core.rrb_vector.nodes");
goog.require("clojure.core.rrb_vector.trees");
goog.require("clojure.core.rrb_vector.transients");
clojure.core.rrb_vector.rrbt.rrbt_concat_threshold = 33;
clojure.core.rrb_vector.rrbt.max_extra_search_steps = 2;
clojure.core.rrb_vector.rrbt.AsRRBT = function() {
  var obj13397 = {};
  return obj13397;
}();
clojure.core.rrb_vector.rrbt._as_rrbt = function clojure$core$rrb_vector$rrbt$_as_rrbt(v) {
  if (function() {
    var and__4295__auto__ = v;
    if (and__4295__auto__) {
      return v.clojure$core$rrb_vector$rrbt$AsRRBT$_as_rrbt$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return v.clojure$core$rrb_vector$rrbt$AsRRBT$_as_rrbt$arity$1(v);
  } else {
    var x__4943__auto__ = v == null ? null : v;
    return function() {
      var or__4307__auto__ = clojure.core.rrb_vector.rrbt._as_rrbt[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = clojure.core.rrb_vector.rrbt._as_rrbt["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AsRRBT.-as-rrbt", v);
        }
      }
    }().call(null, v);
  }
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2179858668;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, this$__$1);
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = clojure.core.rrb_vector.rrbt.rrb_chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = clojure.core.rrb_vector.rrbt.rrb_chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? clojure.core.rrb_vector.rrbt.rrb_chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return clojure.core.rrb_vector.rrbt.rrb_chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? clojure.core.rrb_vector.rrbt.rrb_chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vec", "vec", 982683596, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.cljs$lang$type = true;
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.cljs$lang$ctorStr = "clojure.core.rrb-vector.rrbt/RRBChunkedSeq";
clojure.core.rrb_vector.rrbt.RRBChunkedSeq.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "clojure.core.rrb-vector.rrbt/RRBChunkedSeq");
};
clojure.core.rrb_vector.rrbt.__GT_RRBChunkedSeq = function clojure$core$rrb_vector$rrbt$__GT_RRBChunkedSeq(vec, node, i, off, meta, __hash) {
  return new clojure.core.rrb_vector.rrbt.RRBChunkedSeq(vec, node, i, off, meta, __hash);
};
clojure.core.rrb_vector.rrbt.rrb_chunked_seq = function clojure$core$rrb_vector$rrbt$rrb_chunked_seq() {
  var G__13399 = arguments.length;
  switch(G__13399) {
    case 3:
      return clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  var cnt = vec.cnt;
  var shift = vec.shift;
  var root = vec.root;
  var tail = vec.tail;
  return new clojure.core.rrb_vector.rrbt.RRBChunkedSeq(vec, clojure.core.rrb_vector.trees.array_for.call(null, cnt, shift, root, tail, i), i, off, null, null);
};
clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new clojure.core.rrb_vector.rrbt.RRBChunkedSeq(vec, node, i, off, null, null);
};
clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new clojure.core.rrb_vector.rrbt.RRBChunkedSeq(vec, node, i, off, meta, null);
};
clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$lang$maxFixedArity = 5;
clojure.core.rrb_vector.rrbt.slice_right = function clojure$core$rrb_vector$rrbt$slice_right(node, shift, end) {
  if (shift === 0) {
    var arr = node.arr;
    var new_arr = new Array(end);
    cljs.core.array_copy.call(null, arr, 0, new_arr, 0, end);
    return cljs.core.__GT_VectorNode.call(null, null, new_arr);
  } else {
    var reg_QMARK_ = clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, node);
    var rngs = cljs.core.not.call(null, reg_QMARK_) ? clojure.core.rrb_vector.nodes.ranges.call(null, node) : null;
    var i = end - 1 >> shift & 31;
    var i__$1 = cljs.core.truth_(reg_QMARK_) ? i : function() {
      var j = i;
      while (true) {
        if (end <= rngs[j]) {
          return j;
        } else {
          var G__13401 = j + 1;
          j = G__13401;
          continue;
        }
        break;
      }
    }();
    var child_end = cljs.core.truth_(reg_QMARK_) ? function() {
      var ce = cljs.core.mod.call(null, end, 1 << shift);
      if (ce === 0) {
        return 1 << shift;
      } else {
        return ce;
      }
    }() : i__$1 > 0 ? end - rngs[i__$1 - 1] : end;
    var arr = node.arr;
    var new_child = clojure$core$rrb_vector$rrbt$slice_right.call(null, arr[i__$1], shift - 5, child_end);
    var regular_child_QMARK_ = shift === 5 ? 32 === new_child.arr.length : clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, new_child);
    var new_arr = new Array(cljs.core.truth_(function() {
      var and__4295__auto__ = reg_QMARK_;
      if (cljs.core.truth_(and__4295__auto__)) {
        return regular_child_QMARK_;
      } else {
        return and__4295__auto__;
      }
    }()) ? 32 : 33);
    var new_child_rng = cljs.core.truth_(regular_child_QMARK_) ? function() {
      var m = cljs.core.mod.call(null, child_end, 1 << shift);
      if (m === 0) {
        return 1 << shift;
      } else {
        return m;
      }
    }() : shift === 5 ? new_child.arr.length : clojure.core.rrb_vector.nodes.last_range.call(null, new_child);
    cljs.core.array_copy.call(null, arr, 0, new_arr, 0, i__$1);
    new_arr[i__$1] = new_child;
    if (cljs.core.not.call(null, function() {
      var and__4295__auto__ = reg_QMARK_;
      if (cljs.core.truth_(and__4295__auto__)) {
        return regular_child_QMARK_;
      } else {
        return and__4295__auto__;
      }
    }())) {
      var new_rngs_13402 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var step_13403 = 1 << shift;
      if (cljs.core.truth_(reg_QMARK_)) {
        var n__5192__auto___13404 = i__$1;
        var j_13405 = 0;
        while (true) {
          if (j_13405 < n__5192__auto___13404) {
            new_rngs_13402[j_13405] = (j_13405 + 1) * step_13403;
            var G__13406 = j_13405 + 1;
            j_13405 = G__13406;
            continue;
          } else {
          }
          break;
        }
      } else {
        var n__5192__auto___13407 = i__$1;
        var j_13408 = 0;
        while (true) {
          if (j_13408 < n__5192__auto___13407) {
            new_rngs_13402[j_13408] = rngs[j_13408];
            var G__13409 = j_13408 + 1;
            j_13408 = G__13409;
            continue;
          } else {
          }
          break;
        }
      }
      new_rngs_13402[i__$1] = (i__$1 > 0 ? new_rngs_13402[i__$1 - 1] : 0) + new_child_rng;
      new_rngs_13402[32] = i__$1 + 1;
      new_arr[32] = new_rngs_13402;
    } else {
    }
    return cljs.core.__GT_VectorNode.call(null, null, new_arr);
  }
};
clojure.core.rrb_vector.rrbt.slice_left = function clojure$core$rrb_vector$rrbt$slice_left(node, shift, start, end) {
  if (shift === 0) {
    var arr = node.arr;
    var new_len = arr.length - start;
    var new_arr = new Array(new_len);
    cljs.core.array_copy.call(null, arr, start, new_arr, 0, new_len);
    return cljs.core.__GT_VectorNode.call(null, null, new_arr);
  } else {
    var reg_QMARK_ = clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, node);
    var arr = node.arr;
    var rngs = cljs.core.not.call(null, reg_QMARK_) ? clojure.core.rrb_vector.nodes.ranges.call(null, node) : null;
    var i = start >> shift & 31;
    var i__$1 = cljs.core.truth_(reg_QMARK_) ? i : function() {
      var j = i;
      while (true) {
        if (start < rngs[j]) {
          return j;
        } else {
          var G__13410 = j + 1;
          j = G__13410;
          continue;
        }
        break;
      }
    }();
    var len = cljs.core.truth_(reg_QMARK_) ? function() {
      var i__$2 = i__$1;
      while (true) {
        if (i__$2 === 32 || arr[i__$2] == null) {
          return i__$2;
        } else {
          var G__13411 = i__$2 + 1;
          i__$2 = G__13411;
          continue;
        }
        break;
      }
    }() : rngs[32];
    var child_start = i__$1 > 0 ? start - (cljs.core.truth_(reg_QMARK_) ? i__$1 * (1 << shift) : rngs[i__$1 - 1]) : start;
    var child_end = function() {
      var x__4626__auto__ = 1 << shift;
      var y__4627__auto__ = i__$1 > 0 ? end - (cljs.core.truth_(reg_QMARK_) ? i__$1 * (1 << shift) : rngs[i__$1 - 1]) : end;
      return x__4626__auto__ < y__4627__auto__ ? x__4626__auto__ : y__4627__auto__;
    }();
    var new_child = clojure$core$rrb_vector$rrbt$slice_left.call(null, arr[i__$1], shift - 5, child_start, child_end);
    var new_len = len - i__$1;
    var new_len__$1 = new_child == null ? new_len - 1 : new_len;
    if (new_len__$1 === 0) {
      return null;
    } else {
      if (cljs.core.truth_(reg_QMARK_)) {
        var new_arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var rngs__$1 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var rng0 = cljs.core.truth_(function() {
          var or__4307__auto__ = new_child == null;
          if (or__4307__auto__) {
            return or__4307__auto__;
          } else {
            var or__4307__auto____$1 = shift === 5;
            if (or__4307__auto____$1) {
              return or__4307__auto____$1;
            } else {
              return clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, new_child);
            }
          }
        }()) ? (1 << shift) - (start >> shift - 5 & 31) : clojure.core.rrb_vector.nodes.last_range.call(null, new_child);
        var step = 1 << shift;
        var j_13412 = 0;
        var r_13413 = rng0;
        while (true) {
          if (j_13412 < new_len__$1) {
            rngs__$1[j_13412] = r_13413;
            var G__13414 = j_13412 + 1;
            var G__13415 = r_13413 + step;
            j_13412 = G__13414;
            r_13413 = G__13415;
            continue;
          } else {
          }
          break;
        }
        rngs__$1[new_len__$1 - 1] = end - start;
        rngs__$1[32] = new_len__$1;
        cljs.core.array_copy.call(null, arr, new_child == null ? i__$1 + 1 : i__$1, new_arr, 0, new_len__$1);
        if (!(new_child == null)) {
          new_arr[0] = new_child;
        } else {
        }
        new_arr[32] = rngs__$1;
        return cljs.core.__GT_VectorNode.call(null, node.edit, new_arr);
      } else {
        var new_arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_rngs = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var j_13416 = 0;
        var i_13417__$2 = i__$1;
        while (true) {
          if (j_13416 < new_len__$1) {
            new_rngs[j_13416] = rngs[i_13417__$2] - start;
            var G__13418 = j_13416 + 1;
            var G__13419 = i_13417__$2 + 1;
            j_13416 = G__13418;
            i_13417__$2 = G__13419;
            continue;
          } else {
          }
          break;
        }
        new_rngs[32] = new_len__$1;
        cljs.core.array_copy.call(null, arr, new_child == null ? i__$1 + 1 : i__$1, new_arr, 0, new_len__$1);
        if (!(new_child == null)) {
          new_arr[0] = new_child;
        } else {
        }
        new_arr[32] = new_rngs;
        return cljs.core.__GT_VectorNode.call(null, node.edit, new_arr);
      }
    }
  }
};
clojure.core.rrb_vector.rrbt.Vector = function(cnt, shift, root, tail, meta, __hash) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2315152159;
  this.cljs$lang$protocol_mask$partition1$ = 2052;
};
clojure.core.rrb_vector.rrbt.Vector.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str_STAR_.call(null, this$);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, k, null);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, k, not_found);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(this$, f, init) {
  var self__ = this;
  var this$__$1 = this;
  var i = 0;
  var j = 0;
  var init__$1 = init;
  var arr = clojure.core.rrb_vector.trees.array_for.call(null, self__.cnt, self__.shift, self__.root, self__.tail, i);
  var lim = arr.length - 1;
  var step = lim + 1;
  while (true) {
    var init__$2 = f.call(null, init__$1, i + j, arr[j]);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      if (j < lim) {
        var G__13424 = i;
        var G__13425 = j + 1;
        var G__13426 = init__$2;
        var G__13427 = arr;
        var G__13428 = lim;
        var G__13429 = step;
        i = G__13424;
        j = G__13425;
        init__$1 = G__13426;
        arr = G__13427;
        lim = G__13428;
        step = G__13429;
        continue;
      } else {
        var i__$1 = i + step;
        if (i__$1 < self__.cnt) {
          var arr__$1 = clojure.core.rrb_vector.trees.array_for.call(null, self__.cnt, self__.shift, self__.root, self__.tail, i__$1);
          var len = arr__$1.length;
          var lim__$1 = len - 1;
          var G__13430 = i__$1;
          var G__13431 = 0;
          var G__13432 = init__$2;
          var G__13433 = arr__$1;
          var G__13434 = lim__$1;
          var G__13435 = len;
          i = G__13430;
          j = G__13431;
          init__$1 = G__13432;
          arr = G__13433;
          lim = G__13434;
          step = G__13435;
          continue;
        } else {
          return init__$2;
        }
      }
    }
    break;
  }
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, i) {
  var self__ = this;
  var this$__$1 = this;
  if (0 <= i && i < self__.cnt) {
    var tail_off = self__.cnt - self__.tail.length;
    if (tail_off <= i) {
      return self__.tail[i - tail_off];
    } else {
      var i__$1 = i;
      var node = self__.root;
      var shift__$1 = self__.shift;
      while (true) {
        if (shift__$1 === 0) {
          var arr = node.arr;
          return arr[i__$1 >> shift__$1 & 31];
        } else {
          if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, node))) {
            var arr = node.arr;
            var idx = i__$1 >> shift__$1 & 31;
            var i__$2 = i__$1;
            var node__$1 = arr[idx];
            var shift__$2 = shift__$1 - 5;
            while (true) {
              var arr__$1 = node__$1.arr;
              var idx__$1 = i__$2 >> shift__$2 & 31;
              if (shift__$2 === 0) {
                return arr__$1[idx__$1];
              } else {
                var G__13436 = i__$2;
                var G__13437 = arr__$1[idx__$1];
                var G__13438 = shift__$2 - 5;
                i__$2 = G__13436;
                node__$1 = G__13437;
                shift__$2 = G__13438;
                continue;
              }
              break;
            }
          } else {
            var arr = node.arr;
            var rngs = clojure.core.rrb_vector.nodes.ranges.call(null, node);
            var idx = function() {
              var j = i__$1 >> shift__$1 & 31;
              while (true) {
                if (i__$1 < rngs[j]) {
                  return j;
                } else {
                  var G__13439 = j + 1;
                  j = G__13439;
                  continue;
                }
                break;
              }
            }();
            var i__$2 = idx === 0 ? i__$1 : i__$1 - rngs[idx - 1];
            var G__13440 = i__$2;
            var G__13441 = arr[idx];
            var G__13442 = shift__$1 - 5;
            i__$1 = G__13440;
            node = G__13441;
            shift__$1 = G__13442;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, self__.cnt);
  }
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, i, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (i >= 0 && i < self__.cnt) {
    return cljs.core._nth.call(null, this$__$1, i);
  } else {
    return not_found;
  }
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, this$__$1);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(this$, i, val) {
  var self__ = this;
  var this$__$1 = this;
  if (0 <= i && i < self__.cnt) {
    var tail_off = clojure.core.rrb_vector.trees.tail_offset.call(null, self__.cnt, self__.tail);
    if (i >= tail_off) {
      var new_tail = new Array(self__.tail.length);
      var idx = i - tail_off;
      cljs.core.array_copy.call(null, self__.tail, 0, new_tail, 0, self__.tail.length);
      new_tail[idx] = val;
      return new clojure.core.rrb_vector.rrbt.Vector(self__.cnt, self__.shift, self__.root, new_tail, self__.meta, null);
    } else {
      return new clojure.core.rrb_vector.rrbt.Vector(self__.cnt, self__.shift, clojure.core.rrb_vector.trees.do_assoc.call(null, self__.shift, self__.root, i, val), self__.tail, self__.meta, null);
    }
  } else {
    if (i === self__.cnt) {
      return cljs.core._conj.call(null, this$__$1, val);
    } else {
      return cljs.core.vector_index_out_of_bounds.call(null, i, self__.cnt);
    }
  }
};
clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$rrbt$AsRRBT$ = true;
clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$rrbt$AsRRBT$_as_rrbt$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IMeta$_meta$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.meta;
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.cnt;
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, 0);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, 1);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IStack$_peek$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, this$__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IStack$_pop$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (self__.tail.length > 1) {
        var new_tail = new Array(self__.tail.length - 1);
        cljs.core.array_copy.call(null, self__.tail, 0, new_tail, 0, new_tail.length);
        return new clojure.core.rrb_vector.rrbt.Vector(self__.cnt - 1, self__.shift, self__.root, new_tail, self__.meta, null);
      } else {
        var new_tail = clojure.core.rrb_vector.trees.array_for.call(null, self__.cnt, self__.shift, self__.root, self__.tail, self__.cnt - 2);
        var root_cnt = clojure.core.rrb_vector.trees.tail_offset.call(null, self__.cnt, self__.tail);
        var new_root = clojure.core.rrb_vector.trees.pop_tail.call(null, self__.shift, root_cnt, self__.root.edit, self__.root);
        if (new_root == null) {
          return new clojure.core.rrb_vector.rrbt.Vector(self__.cnt - 1, self__.shift, clojure.core.rrb_vector.nodes.empty_node, new_tail, self__.meta, null);
        } else {
          if (self__.shift > 5 && new_root.arr[1] == null) {
            return new clojure.core.rrb_vector.rrbt.Vector(self__.cnt - 1, self__.shift - 5, new_root.arr[0], new_tail, self__.meta, null);
          } else {
            return new clojure.core.rrb_vector.rrbt.Vector(self__.cnt - 1, self__.shift, new_root, new_tail, self__.meta, null);
          }
        }
      }
    }
  }
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(this$__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_coll.call(null, this$__$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, that) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.equiv_sequential.call(null, this$__$1, that);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return clojure.core.rrb_vector.rrbt.__GT_Transient.call(null, self__.cnt, self__.shift, clojure.core.rrb_vector.transients.editable_root.call(null, self__.root), clojure.core.rrb_vector.transients.editable_tail.call(null, self__.tail), self__.tail.length);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$protocols$PSliceableVector$ = true;
clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$protocols$PSliceableVector$_slicev$arity$3 = function(this$, start, end) {
  var self__ = this;
  var this$__$1 = this;
  var new_cnt = end - start;
  if (start < 0 || end > self__.cnt) {
    throw new Error("vector index out of bounds");
  } else {
    if (start === end) {
      return cljs.core.empty.call(null, this$__$1);
    } else {
      if (start > end) {
        throw new Error("start index greater than end index");
      } else {
        var tail_off = clojure.core.rrb_vector.trees.tail_offset.call(null, self__.cnt, self__.tail);
        if (start >= tail_off) {
          var new_tail = new Array(new_cnt);
          cljs.core.array_copy.call(null, self__.tail, start - tail_off, new_tail, 0, new_cnt);
          return new clojure.core.rrb_vector.rrbt.Vector(new_cnt, 5, clojure.core.rrb_vector.nodes.empty_node, new_tail, self__.meta, null);
        } else {
          var tail_cut_QMARK_ = end > tail_off;
          var new_root = tail_cut_QMARK_ ? self__.root : clojure.core.rrb_vector.rrbt.slice_right.call(null, self__.root, self__.shift, end);
          var new_root__$1 = start === 0 ? new_root : clojure.core.rrb_vector.rrbt.slice_left.call(null, new_root, self__.shift, start, function() {
            var x__4626__auto__ = end;
            var y__4627__auto__ = tail_off;
            return x__4626__auto__ < y__4627__auto__ ? x__4626__auto__ : y__4627__auto__;
          }());
          var new_tail = tail_cut_QMARK_ ? function() {
            var new_len = end - tail_off;
            var new_tail = new Array(new_len);
            cljs.core.array_copy.call(null, self__.tail, 0, new_tail, 0, new_len);
            return new_tail;
          }() : clojure.core.rrb_vector.trees.array_for.call(null, new_cnt, self__.shift, new_root__$1, [], new_cnt - 1);
          var new_root__$2 = tail_cut_QMARK_ ? new_root__$1 : clojure.core.rrb_vector.trees.pop_tail.call(null, self__.shift, new_cnt, new_root__$1.edit, new_root__$1);
          if (new_root__$2 == null) {
            return new clojure.core.rrb_vector.rrbt.Vector(new_cnt, 5, clojure.core.rrb_vector.nodes.empty_node, new_tail, self__.meta, null);
          } else {
            var r = new_root__$2;
            var s = self__.shift;
            while (true) {
              if (s > 5 && r.arr[1] == null) {
                var G__13443 = r.arr[0];
                var G__13444 = s - 5;
                r = G__13443;
                s = G__13444;
                continue;
              } else {
                return new clojure.core.rrb_vector.rrbt.Vector(new_cnt, s, r, new_tail, self__.meta, null);
              }
              break;
            }
          }
        }
      }
    }
  }
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(this$, f) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ci_reduce.call(null, this$__$1, f);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(this$, f, start) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ci_reduce.call(null, this$__$1, f, start);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this$, k, v) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._assoc_n.call(null, this$__$1, k, v);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (clojure.core.rrb_vector.trees.tail_offset.call(null, self__.cnt, self__.tail) === 0) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      return clojure.core.rrb_vector.rrbt.rrb_chunked_seq.call(null, this$__$1, 0, 0);
    }
  }
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, meta__$1) {
  var self__ = this;
  var this$__$1 = this;
  return new clojure.core.rrb_vector.rrbt.Vector(self__.cnt, self__.shift, self__.root, self__.tail, meta__$1, self__.__hash);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, val) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.tail.length < 32) {
    var tail_len = self__.tail.length;
    var new_tail = new Array(tail_len + 1);
    cljs.core.array_copy.call(null, self__.tail, 0, new_tail, 0, tail_len);
    new_tail[tail_len] = val;
    return new clojure.core.rrb_vector.rrbt.Vector(self__.cnt + 1, self__.shift, self__.root, new_tail, self__.meta, null);
  } else {
    var tail_node = cljs.core.__GT_VectorNode.call(null, self__.root.edit, self__.tail);
    var new_tail = function() {
      var new_arr = [null];
      new_arr[0] = val;
      return new_arr;
    }();
    if (cljs.core.truth_(clojure.core.rrb_vector.nodes.overflow_QMARK_.call(null, self__.root, self__.shift, self__.cnt))) {
      if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, self__.root))) {
        var new_arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_root = cljs.core.__GT_VectorNode.call(null, self__.root.edit, new_arr);
        var G__13421_13445 = new_arr;
        G__13421_13445[0] = self__.root;
        G__13421_13445[1] = clojure.core.rrb_vector.trees.new_path.call(null, self__.tail, self__.root.edit, self__.shift, tail_node);
        return new clojure.core.rrb_vector.rrbt.Vector(self__.cnt + 1, self__.shift + 5, new_root, new_tail, self__.meta, null);
      } else {
        var new_arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_rngs = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_root = cljs.core.__GT_VectorNode.call(null, self__.root.edit, new_arr);
        var root_total_range = clojure.core.rrb_vector.nodes.ranges.call(null, self__.root)[31];
        var G__13422_13446 = new_arr;
        G__13422_13446[0] = self__.root;
        G__13422_13446[1] = clojure.core.rrb_vector.trees.new_path.call(null, self__.tail, self__.root.edit, self__.shift, tail_node);
        G__13422_13446[32] = new_rngs;
        var G__13423_13447 = new_rngs;
        G__13423_13447[0] = root_total_range;
        G__13423_13447[1] = root_total_range + 32;
        G__13423_13447[32] = 2;
        return new clojure.core.rrb_vector.rrbt.Vector(self__.cnt + 1, self__.shift + 5, new_root, new_tail, self__.meta, null);
      }
    } else {
      return new clojure.core.rrb_vector.rrbt.Vector(self__.cnt + 1, self__.shift, clojure.core.rrb_vector.trees.push_tail.call(null, self__.shift, self__.cnt, self__.root.edit, self__.root, tail_node), new_tail, self__.meta, null);
    }
  }
};
clojure.core.rrb_vector.rrbt.Vector.prototype.call = function() {
  var G__13448 = null;
  var G__13448__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._nth.call(null, this$, k);
  };
  var G__13448__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._nth.call(null, this$, k, not_found);
  };
  G__13448 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__13448__2.call(this, self__, k);
      case 3:
        return G__13448__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__13448.cljs$core$IFn$_invoke$arity$2 = G__13448__2;
  G__13448.cljs$core$IFn$_invoke$arity$3 = G__13448__3;
  return G__13448;
}();
clojure.core.rrb_vector.rrbt.Vector.prototype.apply = function(self__, args13420) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args13420)));
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return cljs.core._nth.call(null, this$, k);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return cljs.core._nth.call(null, this$, k, not_found);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, that) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.compare_indexed.call(null, this$__$1, that);
};
clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$protocols$PSpliceableVector$ = true;
clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$protocols$PSpliceableVector$_splicev$arity$2 = function(this$, that) {
  var self__ = this;
  var this$__$1 = this;
  return clojure.core.rrb_vector.rrbt.splice_rrbts.call(null, this$__$1, clojure.core.rrb_vector.rrbt._as_rrbt.call(null, that));
};
clojure.core.rrb_vector.rrbt.Vector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
clojure.core.rrb_vector.rrbt.Vector.cljs$lang$type = true;
clojure.core.rrb_vector.rrbt.Vector.cljs$lang$ctorStr = "clojure.core.rrb-vector.rrbt/Vector";
clojure.core.rrb_vector.rrbt.Vector.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "clojure.core.rrb-vector.rrbt/Vector");
};
clojure.core.rrb_vector.rrbt.__GT_Vector = function clojure$core$rrb_vector$rrbt$__GT_Vector(cnt, shift, root, tail, meta, __hash) {
  return new clojure.core.rrb_vector.rrbt.Vector(cnt, shift, root, tail, meta, __hash);
};
cljs.core.PersistentVector.prototype.clojure$core$rrb_vector$rrbt$AsRRBT$ = true;
cljs.core.PersistentVector.prototype.clojure$core$rrb_vector$rrbt$AsRRBT$_as_rrbt$arity$1 = function(this$) {
  var this$__$1 = this;
  return new clojure.core.rrb_vector.rrbt.Vector(cljs.core.count.call(null, this$__$1), this$__$1.shift, this$__$1.root, this$__$1.tail, cljs.core.meta.call(null, this$__$1), null);
};
cljs.core.Subvec.prototype.clojure$core$rrb_vector$rrbt$AsRRBT$ = true;
cljs.core.Subvec.prototype.clojure$core$rrb_vector$rrbt$AsRRBT$_as_rrbt$arity$1 = function(this$) {
  var this$__$1 = this;
  var v = this$__$1.v;
  var start = this$__$1.start;
  var end = this$__$1.end;
  return clojure.core.rrb_vector.protocols._slicev.call(null, clojure.core.rrb_vector.rrbt._as_rrbt.call(null, v), start, end);
};
clojure.core.rrb_vector.rrbt.shift_from_to = function clojure$core$rrb_vector$rrbt$shift_from_to(node, from, to) {
  while (true) {
    if (from === to) {
      return node;
    } else {
      if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, node))) {
        var G__13455 = cljs.core.__GT_VectorNode.call(null, node.edit, function() {
          var G__13452 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          G__13452[0] = node;
          return G__13452;
        }());
        var G__13456 = 5 + from;
        var G__13457 = to;
        node = G__13455;
        from = G__13456;
        to = G__13457;
        continue;
      } else {
        var G__13458 = cljs.core.__GT_VectorNode.call(null, node.edit, function() {
          var G__13453 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          G__13453[0] = node;
          G__13453[32] = function() {
            var G__13454 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            G__13454[0] = clojure.core.rrb_vector.nodes.last_range.call(null, node);
            G__13454[32] = 1;
            return G__13454;
          }();
          return G__13453;
        }());
        var G__13459 = 5 + from;
        var G__13460 = to;
        node = G__13458;
        from = G__13459;
        to = G__13460;
        continue;
      }
    }
    break;
  }
};
clojure.core.rrb_vector.rrbt.slot_count = function clojure$core$rrb_vector$rrbt$slot_count(node, shift) {
  var arr = node.arr;
  if (shift === 0) {
    return arr.length;
  } else {
    if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, node))) {
      return clojure.core.rrb_vector.nodes.index_of_nil.call(null, arr);
    } else {
      var rngs = clojure.core.rrb_vector.nodes.ranges.call(null, node);
      return rngs[32];
    }
  }
};
clojure.core.rrb_vector.rrbt.subtree_branch_count = function clojure$core$rrb_vector$rrbt$subtree_branch_count(node, shift) {
  var arr = node.arr;
  var cs = shift - 5;
  if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, node))) {
    var i = 0;
    var sbc = 0;
    while (true) {
      if (i === 32) {
        return sbc;
      } else {
        var temp__4421__auto__ = arr[i];
        if (cljs.core.truth_(temp__4421__auto__)) {
          var child = temp__4421__auto__;
          var G__13461 = i + 1;
          var G__13462 = sbc + clojure.core.rrb_vector.rrbt.slot_count.call(null, child, cs);
          i = G__13461;
          sbc = G__13462;
          continue;
        } else {
          return sbc;
        }
      }
      break;
    }
  } else {
    var lim = clojure.core.rrb_vector.nodes.ranges.call(null, node)[32];
    var i = 0;
    var sbc = 0;
    while (true) {
      if (i === lim) {
        return sbc;
      } else {
        var child = arr[i];
        var G__13463 = i + 1;
        var G__13464 = sbc + clojure.core.rrb_vector.rrbt.slot_count.call(null, child, cs);
        i = G__13463;
        sbc = G__13464;
        continue;
      }
      break;
    }
  }
};
clojure.core.rrb_vector.rrbt.leaf_seq = function clojure$core$rrb_vector$rrbt$leaf_seq(arr) {
  return cljs.core.mapcat.call(null, function(p1__13465_SHARP_) {
    return p1__13465_SHARP_.arr;
  }, cljs.core.take.call(null, clojure.core.rrb_vector.nodes.index_of_nil.call(null, arr), arr));
};
clojure.core.rrb_vector.rrbt.rebalance_leaves = function clojure$core$rrb_vector$rrbt$rebalance_leaves(n1, cnt1, n2, cnt2, transferred_leaves) {
  var slc1 = clojure.core.rrb_vector.rrbt.slot_count.call(null, n1, 5);
  var slc2 = clojure.core.rrb_vector.rrbt.slot_count.call(null, n2, 5);
  var a = slc1 + slc2;
  var sbc1 = clojure.core.rrb_vector.rrbt.subtree_branch_count.call(null, n1, 5);
  var sbc2 = clojure.core.rrb_vector.rrbt.subtree_branch_count.call(null, n2, 5);
  var p = sbc1 + sbc2;
  var e = a - (cljs.core.quot.call(null, p - 1, 32) + 1);
  if (e <= clojure.core.rrb_vector.rrbt.max_extra_search_steps) {
    return [n1, n2];
  } else {
    if (sbc1 + sbc2 <= 1024) {
      var reg_QMARK_ = cljs.core.mod.call(null, p, 32) === 0;
      var new_arr = new Array(reg_QMARK_ ? 32 : 33);
      var new_n1 = cljs.core.__GT_VectorNode.call(null, null, new_arr);
      var i_13466 = 0;
      var bs_13467 = cljs.core.partition_all.call(null, 32, cljs.core.concat.call(null, clojure.core.rrb_vector.rrbt.leaf_seq.call(null, n1.arr), clojure.core.rrb_vector.rrbt.leaf_seq.call(null, n2.arr)));
      while (true) {
        var temp__4423__auto___13468 = cljs.core.seq.call(null, bs_13467);
        if (temp__4423__auto___13468) {
          var xs__4975__auto___13469 = temp__4423__auto___13468;
          var block_13470 = cljs.core.first.call(null, xs__4975__auto___13469);
          var a_13471__$1 = new Array(cljs.core.count.call(null, block_13470));
          var i_13472__$1 = 0;
          var xs_13473 = cljs.core.seq.call(null, block_13470);
          while (true) {
            if (xs_13473) {
              a_13471__$1[i_13472__$1] = cljs.core.first.call(null, xs_13473);
              var G__13474 = i_13472__$1 + 1;
              var G__13475 = cljs.core.next.call(null, xs_13473);
              i_13472__$1 = G__13474;
              xs_13473 = G__13475;
              continue;
            } else {
            }
            break;
          }
          new_arr[i_13466] = cljs.core.__GT_VectorNode.call(null, null, a_13471__$1);
          var G__13476 = i_13466 + 1;
          var G__13477 = cljs.core.next.call(null, bs_13467);
          i_13466 = G__13476;
          bs_13467 = G__13477;
          continue;
        } else {
        }
        break;
      }
      if (!reg_QMARK_) {
        new_arr[32] = clojure.core.rrb_vector.nodes.regular_ranges.call(null, 5, p);
      } else {
      }
      transferred_leaves.val = sbc2;
      return [new_n1, null];
    } else {
      var reg_QMARK_ = cljs.core.mod.call(null, p, 32) === 0;
      var new_arr1 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var new_arr2 = new Array(reg_QMARK_ ? 32 : 33);
      var new_n1 = cljs.core.__GT_VectorNode.call(null, null, new_arr1);
      var new_n2 = cljs.core.__GT_VectorNode.call(null, null, new_arr2);
      var i_13478 = 0;
      var bs_13479 = cljs.core.partition_all.call(null, 32, cljs.core.concat.call(null, clojure.core.rrb_vector.rrbt.leaf_seq.call(null, new Array(n1)), clojure.core.rrb_vector.rrbt.leaf_seq.call(null, new Array(n2))));
      while (true) {
        var temp__4423__auto___13480 = cljs.core.seq.call(null, bs_13479);
        if (temp__4423__auto___13480) {
          var xs__4975__auto___13481 = temp__4423__auto___13480;
          var block_13482 = cljs.core.first.call(null, xs__4975__auto___13481);
          var a_13483__$1 = new Array(cljs.core.count.call(null, block_13482));
          var i_13484__$1 = 0;
          var xs_13485 = cljs.core.seq.call(null, block_13482);
          while (true) {
            if (xs_13485) {
              a_13483__$1[i_13484__$1] = cljs.core.first.call(null, xs_13485);
              var G__13486 = i_13484__$1 + 1;
              var G__13487 = cljs.core.next.call(null, xs_13485);
              i_13484__$1 = G__13486;
              xs_13485 = G__13487;
              continue;
            } else {
            }
            break;
          }
          if (i_13478 < 32) {
            new_arr1[i_13478] = cljs.core.__GT_VectorNode.call(null, null, a_13483__$1);
          } else {
            new_arr2[i_13478 - 32] = cljs.core.__GT_VectorNode.call(null, null, a_13483__$1);
          }
          var G__13488 = i_13478 + 1;
          var G__13489 = cljs.core.next.call(null, bs_13479);
          i_13478 = G__13488;
          bs_13479 = G__13489;
          continue;
        } else {
        }
        break;
      }
      if (!reg_QMARK_) {
        new_arr2[32] = clojure.core.rrb_vector.nodes.regular_ranges.call(null, 5, p - 1024);
      } else {
      }
      transferred_leaves.val = 1024 - sbc1;
      return [new_n1, new_n2];
    }
  }
};
clojure.core.rrb_vector.rrbt.child_seq = function clojure$core$rrb_vector$rrbt$child_seq(node, shift, cnt) {
  var arr = node.arr;
  var rngs = cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, node)) ? clojure.core.rrb_vector.nodes.regular_ranges.call(null, shift, cnt) : clojure.core.rrb_vector.nodes.ranges.call(null, node);
  var cs = cljs.core.truth_(rngs) ? rngs[32] : clojure.core.rrb_vector.nodes.index_of_nil.call(null, arr);
  var cseq = function(arr, rngs, cs) {
    return function clojure$core$rrb_vector$rrbt$child_seq_$_cseq(c, r) {
      var arr__$1 = c.arr;
      var rngs__$1 = cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, c)) ? clojure.core.rrb_vector.nodes.regular_ranges.call(null, shift - 5, r) : clojure.core.rrb_vector.nodes.ranges.call(null, c);
      var gcs = cljs.core.truth_(rngs__$1) ? rngs__$1[32] : clojure.core.rrb_vector.nodes.index_of_nil.call(null, arr__$1);
      return cljs.core.map.call(null, cljs.core.list, cljs.core.take.call(null, gcs, arr__$1), cljs.core.take.call(null, gcs, cljs.core.map.call(null, cljs.core._, rngs__$1, cljs.core.cons.call(null, 0, rngs__$1))));
    };
  }(arr, rngs, cs);
  return cljs.core.mapcat.call(null, cseq, cljs.core.take.call(null, cs, arr), cljs.core.take.call(null, cs, cljs.core.map.call(null, cljs.core._, rngs, cljs.core.cons.call(null, 0, rngs))));
};
clojure.core.rrb_vector.rrbt.rebalance = function clojure$core$rrb_vector$rrbt$rebalance(shift, n1, cnt1, n2, cnt2, transferred_leaves) {
  if (n2 == null) {
    return [n1, null];
  } else {
    var slc1 = clojure.core.rrb_vector.rrbt.slot_count.call(null, n1, shift);
    var slc2 = clojure.core.rrb_vector.rrbt.slot_count.call(null, n2, shift);
    var a = slc1 + slc2;
    var sbc1 = clojure.core.rrb_vector.rrbt.subtree_branch_count.call(null, n1, shift);
    var sbc2 = clojure.core.rrb_vector.rrbt.subtree_branch_count.call(null, n2, shift);
    var p = sbc1 + sbc2;
    var e = a - (cljs.core.quot.call(null, p - 1, 32) + 1);
    if (e <= clojure.core.rrb_vector.rrbt.max_extra_search_steps) {
      return [n1, n2];
    } else {
      if (sbc1 + sbc2 <= 1024) {
        var new_arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_rngs = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_n1 = cljs.core.__GT_VectorNode.call(null, null, new_arr);
        var i_13494 = 0;
        var bs_13495 = cljs.core.partition_all.call(null, 32, cljs.core.concat.call(null, clojure.core.rrb_vector.rrbt.child_seq.call(null, n1, shift, cnt1), clojure.core.rrb_vector.rrbt.child_seq.call(null, n2, shift, cnt2)));
        while (true) {
          var temp__4423__auto___13496 = cljs.core.seq.call(null, bs_13495);
          if (temp__4423__auto___13496) {
            var xs__4975__auto___13497 = temp__4423__auto___13496;
            var block_13498 = cljs.core.first.call(null, xs__4975__auto___13497);
            var a_13499__$1 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            var r_13500 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            a_13499__$1[32] = r_13500;
            r_13500[32] = cljs.core.count.call(null, block_13498);
            var i_13501__$1 = 0;
            var o_13502 = 0;
            var gcs_13503 = cljs.core.seq.call(null, block_13498);
            while (true) {
              var temp__4423__auto___13504__$1 = cljs.core.seq.call(null, gcs_13503);
              if (temp__4423__auto___13504__$1) {
                var xs__4975__auto___13505__$1 = temp__4423__auto___13504__$1;
                var vec__13492_13506 = cljs.core.first.call(null, xs__4975__auto___13505__$1);
                var gc_13507 = cljs.core.nth.call(null, vec__13492_13506, 0, null);
                var gcr_13508 = cljs.core.nth.call(null, vec__13492_13506, 1, null);
                a_13499__$1[i_13501__$1] = gc_13507;
                r_13500[i_13501__$1] = o_13502 + gcr_13508;
                var G__13509 = i_13501__$1 + 1;
                var G__13510 = o_13502 + gcr_13508;
                var G__13511 = cljs.core.next.call(null, gcs_13503);
                i_13501__$1 = G__13509;
                o_13502 = G__13510;
                gcs_13503 = G__13511;
                continue;
              } else {
              }
              break;
            }
            new_arr[i_13494] = cljs.core.__GT_VectorNode.call(null, null, a_13499__$1);
            new_rngs[i_13494] = r_13500[r_13500[32] - 1] + (i_13494 > 0 ? new_rngs[i_13494 - 1] : 0);
            new_rngs[32] = i_13494 + 1;
            var G__13512 = i_13494 + 1;
            var G__13513 = cljs.core.next.call(null, bs_13495);
            i_13494 = G__13512;
            bs_13495 = G__13513;
            continue;
          } else {
          }
          break;
        }
        new_arr[32] = new_rngs;
        transferred_leaves.val = cnt2;
        return [new_n1, null];
      } else {
        var new_arr1 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_arr2 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_rngs1 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_rngs2 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_n1 = cljs.core.__GT_VectorNode.call(null, null, new_arr1);
        var new_n2 = cljs.core.__GT_VectorNode.call(null, null, new_arr2);
        var i_13514 = 0;
        var bs_13515 = cljs.core.partition_all.call(null, 32, cljs.core.concat.call(null, clojure.core.rrb_vector.rrbt.child_seq.call(null, n1, shift, cnt1), clojure.core.rrb_vector.rrbt.child_seq.call(null, n2, shift, cnt2)));
        while (true) {
          var temp__4423__auto___13516 = cljs.core.seq.call(null, bs_13515);
          if (temp__4423__auto___13516) {
            var xs__4975__auto___13517 = temp__4423__auto___13516;
            var block_13518 = cljs.core.first.call(null, xs__4975__auto___13517);
            var a_13519__$1 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            var r_13520 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            a_13519__$1[32] = r_13520;
            r_13520[32] = cljs.core.count.call(null, block_13518);
            var i_13521__$1 = 0;
            var o_13522 = 0;
            var gcs_13523 = cljs.core.seq.call(null, block_13518);
            while (true) {
              var temp__4423__auto___13524__$1 = cljs.core.seq.call(null, gcs_13523);
              if (temp__4423__auto___13524__$1) {
                var xs__4975__auto___13525__$1 = temp__4423__auto___13524__$1;
                var vec__13493_13526 = cljs.core.first.call(null, xs__4975__auto___13525__$1);
                var gc_13527 = cljs.core.nth.call(null, vec__13493_13526, 0, null);
                var gcr_13528 = cljs.core.nth.call(null, vec__13493_13526, 1, null);
                a_13519__$1[i_13521__$1] = gc_13527;
                r_13520[i_13521__$1] = o_13522 + gcr_13528;
                var G__13529 = i_13521__$1 + 1;
                var G__13530 = o_13522 + gcr_13528;
                var G__13531 = cljs.core.next.call(null, gcs_13523);
                i_13521__$1 = G__13529;
                o_13522 = G__13530;
                gcs_13523 = G__13531;
                continue;
              } else {
              }
              break;
            }
            if (i_13514 < 32 && i_13514 * 32 + cljs.core.count.call(null, block_13518) > sbc1) {
              var tbs_13532 = i_13514 * 32 + cljs.core.count.call(null, block_13518) - sbc1;
              var li_13533 = r_13520[32] - 1;
              var d_13534 = tbs_13532 >= 32 ? r_13520[li_13533] : r_13520[li_13533] - r_13520[li_13533 - tbs_13532];
              transferred_leaves.val = transferred_leaves.val + d_13534;
            } else {
            }
            var new_arr_13535 = i_13514 < 32 ? new_arr1 : new_arr2;
            var new_rngs_13536 = i_13514 < 32 ? new_rngs1 : new_rngs2;
            var i_13537__$1 = cljs.core.mod.call(null, i_13514, 32);
            new_arr_13535[i_13537__$1] = cljs.core.__GT_VectorNode.call(null, null, a_13519__$1);
            new_rngs_13536[i_13537__$1] = r_13520[r_13520[32] - 1] + (i_13537__$1 > 0 ? new_rngs_13536[i_13537__$1 - 1] : 0);
            new_rngs_13536[32] = i_13537__$1 + 1;
            var G__13538 = i_13514 + 1;
            var G__13539 = cljs.core.next.call(null, bs_13515);
            i_13514 = G__13538;
            bs_13515 = G__13539;
            continue;
          } else {
          }
          break;
        }
        new_arr1[32] = new_rngs1;
        new_arr2[32] = new_rngs2;
        return [new_n1, new_n2];
      }
    }
  }
};
clojure.core.rrb_vector.rrbt.zippath = function clojure$core$rrb_vector$rrbt$zippath(shift, n1, cnt1, n2, cnt2, transferred_leaves) {
  if (shift === 5) {
    return clojure.core.rrb_vector.rrbt.rebalance_leaves.call(null, n1, cnt1, n2, cnt2, transferred_leaves);
  } else {
    var c1 = clojure.core.rrb_vector.nodes.last_child.call(null, n1);
    var c2 = clojure.core.rrb_vector.nodes.first_child.call(null, n2);
    var ccnt1 = cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, n1)) ? function() {
      var m = cljs.core.mod.call(null, cnt1, 1 << shift);
      if (m === 0) {
        return 1 << shift;
      } else {
        return m;
      }
    }() : function() {
      var rngs = clojure.core.rrb_vector.nodes.ranges.call(null, n1);
      var i = rngs[32] - 1;
      if (i === 0) {
        return rngs[0];
      } else {
        return rngs[i] - rngs[i - 1];
      }
    }();
    var ccnt2 = cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, n2)) ? function() {
      var m = cljs.core.mod.call(null, cnt2, 1 << shift);
      if (m === 0) {
        return 1 << shift;
      } else {
        return m;
      }
    }() : clojure.core.rrb_vector.nodes.ranges.call(null, n2)[0];
    var next_transferred_leaves = new cljs.core.Box(0);
    var vec__13541 = clojure$core$rrb_vector$rrbt$zippath.call(null, shift - 5, c1, ccnt1, c2, ccnt2, next_transferred_leaves);
    var new_c1 = cljs.core.nth.call(null, vec__13541, 0, null);
    var new_c2 = cljs.core.nth.call(null, vec__13541, 1, null);
    var d = next_transferred_leaves.val;
    transferred_leaves.val = transferred_leaves.val + d;
    return clojure.core.rrb_vector.rrbt.rebalance.call(null, shift, c1 === new_c1 ? n1 : clojure.core.rrb_vector.nodes.replace_rightmost_child.call(null, shift, n1, new_c1, d), cnt1 + d, cljs.core.truth_(new_c2) ? c2 === new_c2 ? n2 : clojure.core.rrb_vector.nodes.replace_leftmost_child.call(null, shift, n2, cnt2, new_c2, d) : clojure.core.rrb_vector.nodes.remove_leftmost_child.call(null, shift, n2), cnt2 - d, transferred_leaves);
  }
};
clojure.core.rrb_vector.rrbt.squash_nodes = function clojure$core$rrb_vector$rrbt$squash_nodes(shift, n1, cnt1, n2, cnt2) {
  var arr1 = n1.arr;
  var arr2 = n2.arr;
  var li1 = clojure.core.rrb_vector.nodes.index_of_nil.call(null, arr1);
  var li2 = clojure.core.rrb_vector.nodes.index_of_nil.call(null, arr2);
  var slots = cljs.core.concat.call(null, cljs.core.take.call(null, li1, arr1), cljs.core.take.call(null, li2, arr2));
  if (cljs.core.count.call(null, slots) > 32) {
    return [n1, n2];
  } else {
    var new_rngs = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
    var new_arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
    var rngs1 = cljs.core.take.call(null, li1, cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, n1)) ? clojure.core.rrb_vector.nodes.regular_ranges.call(null, shift, cnt1) : clojure.core.rrb_vector.nodes.ranges.call(null, n1));
    var rngs2 = cljs.core.take.call(null, li2, cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, n2)) ? clojure.core.rrb_vector.nodes.regular_ranges.call(null, shift, cnt2) : clojure.core.rrb_vector.nodes.ranges.call(null, n2));
    var rngs2__$1 = function() {
      var r = cljs.core.last.call(null, rngs1);
      return cljs.core.map.call(null, function(r, new_rngs, new_arr, rngs1, rngs2, arr1, arr2, li1, li2, slots) {
        return function(p1__13542_SHARP_) {
          return p1__13542_SHARP_ + r;
        };
      }(r, new_rngs, new_arr, rngs1, rngs2, arr1, arr2, li1, li2, slots), rngs2);
    }();
    var rngs = cljs.core.concat.call(null, rngs1, rngs2__$1);
    new_arr[32] = new_rngs;
    var i_13543 = 0;
    var cs_13544 = cljs.core.seq.call(null, slots);
    while (true) {
      if (cs_13544) {
        new_arr[i_13543] = cljs.core.first.call(null, cs_13544);
        var G__13545 = i_13543 + 1;
        var G__13546 = cljs.core.next.call(null, cs_13544);
        i_13543 = G__13545;
        cs_13544 = G__13546;
        continue;
      } else {
      }
      break;
    }
    var i_13547 = 0;
    var rngs_13548__$1 = cljs.core.seq.call(null, rngs);
    while (true) {
      if (rngs_13548__$1) {
        new_rngs[i_13547] = cljs.core.first.call(null, rngs_13548__$1);
        var G__13549 = i_13547 + 1;
        var G__13550 = cljs.core.next.call(null, rngs_13548__$1);
        i_13547 = G__13549;
        rngs_13548__$1 = G__13550;
        continue;
      } else {
        new_rngs[32] = i_13547;
      }
      break;
    }
    return [cljs.core.__GT_VectorNode.call(null, null, new_arr), null];
  }
};
clojure.core.rrb_vector.rrbt.splice_rrbts = function clojure$core$rrb_vector$rrbt$splice_rrbts(v1, v2) {
  if (cljs.core.count.call(null, v1) === 0) {
    return v2;
  } else {
    if (cljs.core.count.call(null, v2) < clojure.core.rrb_vector.rrbt.rrbt_concat_threshold) {
      return cljs.core.into.call(null, v1, v2);
    } else {
      var s1 = v1.shift;
      var s2 = v2.shift;
      var r1 = v1.root;
      var o_QMARK_ = clojure.core.rrb_vector.nodes.overflow_QMARK_.call(null, r1, s1, cljs.core.count.call(null, v1) + (32 - v1.tail.length));
      var r1__$1 = cljs.core.truth_(o_QMARK_) ? function() {
        var tail = v1.tail;
        var tail_node = cljs.core.__GT_VectorNode.call(null, null, tail);
        var reg_QMARK_ = function() {
          var and__4295__auto__ = clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, r1);
          if (cljs.core.truth_(and__4295__auto__)) {
            return tail.length === 32;
          } else {
            return and__4295__auto__;
          }
        }();
        var arr = new Array(cljs.core.truth_(reg_QMARK_) ? 32 : 33);
        arr[0] = r1;
        arr[1] = clojure.core.rrb_vector.nodes.new_path_STAR_.call(null, s1, tail_node);
        if (cljs.core.not.call(null, reg_QMARK_)) {
          var rngs_13557 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          rngs_13557[32] = 2;
          rngs_13557[0] = cljs.core.count.call(null, v1) - tail.length;
          rngs_13557[1] = cljs.core.count.call(null, v1);
          arr[32] = rngs_13557;
        } else {
        }
        return cljs.core.__GT_VectorNode.call(null, null, arr);
      }() : clojure.core.rrb_vector.nodes.fold_tail.call(null, r1, s1, clojure.core.rrb_vector.trees.tail_offset.call(null, v1.cnt, v1.tail), v1.tail);
      var s1__$1 = cljs.core.truth_(o_QMARK_) ? s1 + 5 : s1;
      var r2 = v2.root;
      var s = function() {
        var x__4619__auto__ = s1__$1;
        var y__4620__auto__ = s2;
        return x__4619__auto__ > y__4620__auto__ ? x__4619__auto__ : y__4620__auto__;
      }();
      var r1__$2 = clojure.core.rrb_vector.rrbt.shift_from_to.call(null, r1__$1, s1__$1, s);
      var r2__$1 = clojure.core.rrb_vector.rrbt.shift_from_to.call(null, r2, s2, s);
      var transferred_leaves = new cljs.core.Box(0);
      var vec__13554 = clojure.core.rrb_vector.rrbt.zippath.call(null, s, r1__$2, cljs.core.count.call(null, v1), r2__$1, cljs.core.count.call(null, v2) - v2.tail.length, transferred_leaves);
      var n1 = cljs.core.nth.call(null, vec__13554, 0, null);
      var n2 = cljs.core.nth.call(null, vec__13554, 1, null);
      var d = transferred_leaves.val;
      var ncnt1 = cljs.core.count.call(null, v1) + d;
      var ncnt2 = cljs.core.count.call(null, v2) - v2.tail.length - d;
      var vec__13555 = n2 === r2__$1 ? clojure.core.rrb_vector.rrbt.squash_nodes.call(null, s, n1, ncnt1, n2, ncnt2) : [n1, n2];
      var n1__$1 = cljs.core.nth.call(null, vec__13555, 0, null);
      var n2__$1 = cljs.core.nth.call(null, vec__13555, 1, null);
      var ncnt1__$1 = cljs.core.truth_(n2__$1) ? ncnt1 : ncnt1 + ncnt2;
      var ncnt2__$1 = cljs.core.truth_(n2__$1) ? ncnt2 : 0;
      if (cljs.core.truth_(n2__$1)) {
        var arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_root = cljs.core.__GT_VectorNode.call(null, null, arr);
        arr[0] = n1__$1;
        arr[1] = n2__$1;
        arr[32] = function() {
          var G__13556 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          G__13556[0] = ncnt1__$1;
          G__13556[1] = ncnt1__$1 + ncnt2__$1;
          G__13556[32] = 2;
          return G__13556;
        }();
        return new clojure.core.rrb_vector.rrbt.Vector(cljs.core.count.call(null, v1) + cljs.core.count.call(null, v2), s + 5, new_root, v2.tail, null, null);
      } else {
        var r = n1__$1;
        var s__$1 = s;
        while (true) {
          if (s__$1 > 5 && r.arr[1] == null) {
            var G__13558 = r.arr[0];
            var G__13559 = s__$1 - 5;
            r = G__13558;
            s__$1 = G__13559;
            continue;
          } else {
            return new clojure.core.rrb_vector.rrbt.Vector(cljs.core.count.call(null, v1) + cljs.core.count.call(null, v2), s__$1, r, v2.tail, null, null);
          }
          break;
        }
      }
    }
  }
};
clojure.core.rrb_vector.rrbt.Transient = function(cnt, shift, root, tail, tidx) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.tidx = tidx;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
clojure.core.rrb_vector.rrbt.Transient.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.root.edit) {
    if (self__.tidx < 32) {
      self__.tail[self__.tidx] = o;
      self__.cnt = self__.cnt + 1;
      self__.tidx = self__.tidx + 1;
      return this$__$1;
    } else {
      var tail_node = cljs.core.__GT_VectorNode.call(null, self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      self__.tidx = 1;
      if (cljs.core.truth_(clojure.core.rrb_vector.nodes.overflow_QMARK_.call(null, self__.root, self__.shift, self__.cnt))) {
        if (cljs.core.truth_(clojure.core.rrb_vector.nodes.regular_QMARK_.call(null, self__.root))) {
          var new_arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          var G__13560_13563 = new_arr;
          G__13560_13563[0] = self__.root;
          G__13560_13563[1] = clojure.core.rrb_vector.trees.new_path.call(null, self__.tail, self__.root.edit, self__.shift, tail_node);
          self__.root = cljs.core.__GT_VectorNode.call(null, self__.root.edit, new_arr);
          self__.shift = self__.shift + 5;
          self__.cnt = self__.cnt + 1;
          return this$__$1;
        } else {
          var new_arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          var new_rngs = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
          var new_root = cljs.core.__GT_VectorNode.call(null, self__.root.edit, new_arr);
          var root_total_range = clojure.core.rrb_vector.nodes.ranges.call(null, self__.root)[31];
          var G__13561_13564 = new_arr;
          G__13561_13564[0] = self__.root;
          G__13561_13564[1] = clojure.core.rrb_vector.trees.new_path.call(null, self__.tail, self__.root.edit, self__.shift, tail_node);
          G__13561_13564[32] = new_rngs;
          var G__13562_13565 = new_rngs;
          G__13562_13565[0] = root_total_range;
          G__13562_13565[1] = root_total_range + 32;
          G__13562_13565[32] = 2;
          self__.root = new_root;
          self__.shift = self__.shift + 5;
          self__.cnt = self__.cnt + 1;
          return this$__$1;
        }
      } else {
        var new_root = clojure.core.rrb_vector.transients.push_tail_BANG_.call(null, self__.shift, self__.cnt, self__.root.edit, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return this$__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
clojure.core.rrb_vector.rrbt.Transient.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var trimmed_tail = new Array(self__.tidx);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, self__.tidx);
    return new clojure.core.rrb_vector.rrbt.Vector(self__.cnt, self__.shift, self__.root, trimmed_tail, null, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
clojure.core.rrb_vector.rrbt.Transient.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(this$, key, val) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, this$__$1, key, val);
};
clojure.core.rrb_vector.rrbt.Transient.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(this$, i, val) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.root.edit) {
    if (0 <= i && i < self__.cnt) {
      var tail_off = self__.cnt - self__.tidx;
      if (tail_off <= i) {
        self__.tail[i - tail_off] = val;
      } else {
        self__.root = clojure.core.rrb_vector.transients.do_assoc_BANG_.call(null, self__.shift, self__.root.edit, self__.root, i, val);
      }
      return this$__$1;
    } else {
      if (i === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, this$__$1, val);
      } else {
        return cljs.core.vector_index_out_of_bounds.call(null, i, self__.cnt);
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
clojure.core.rrb_vector.rrbt.Transient.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        self__.tidx = 0;
        self__.tail[0] = null;
        return this$__$1;
      } else {
        if (self__.tidx > 1) {
          self__.cnt = self__.cnt - 1;
          self__.tidx = self__.tidx - 1;
          self__.tail[self__.tidx] = null;
          return this$__$1;
        } else {
          var new_tail_base = clojure.core.rrb_vector.trees.array_for.call(null, self__.cnt, self__.shift, self__.root, self__.tail, self__.cnt - 2);
          var new_tail = cljs.core.aclone.call(null, new_tail_base);
          var new_tidx = new_tail_base.length;
          var new_root = clojure.core.rrb_vector.transients.pop_tail_BANG_.call(null, self__.shift, self__.cnt, self__.root.edit, self__.root);
          if (new_root == null) {
            self__.cnt = self__.cnt - 1;
            self__.root = clojure.core.rrb_vector.transients.ensure_editable.call(null, self__.root.edit, clojure.core.rrb_vector.nodes.empty_node);
            self__.tail = new_tail;
            self__.tidx = new_tidx;
            return this$__$1;
          } else {
            if (self__.shift > 5 && new_root.arr[1] == null) {
              self__.cnt = self__.cnt - 1;
              self__.shift = self__.shift - 5;
              self__.root = new_root.arr[0];
              self__.tail = new_tail;
              self__.tidx = new_tidx;
              return this$__$1;
            } else {
              self__.cnt = self__.cnt - 1;
              self__.root = new_root;
              self__.tail = new_tail;
              self__.tidx = new_tidx;
              return this$__$1;
            }
          }
        }
      }
    }
  } else {
    throw new Error("count after persistent!");
  }
};
clojure.core.rrb_vector.rrbt.Transient.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
clojure.core.rrb_vector.rrbt.Transient.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.Symbol(null, "tidx", "tidx", 1939123455, null)], null);
};
clojure.core.rrb_vector.rrbt.Transient.cljs$lang$type = true;
clojure.core.rrb_vector.rrbt.Transient.cljs$lang$ctorStr = "clojure.core.rrb-vector.rrbt/Transient";
clojure.core.rrb_vector.rrbt.Transient.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "clojure.core.rrb-vector.rrbt/Transient");
};
clojure.core.rrb_vector.rrbt.__GT_Transient = function clojure$core$rrb_vector$rrbt$__GT_Transient(cnt, shift, root, tail, tidx) {
  return new clojure.core.rrb_vector.rrbt.Transient(cnt, shift, root, tail, tidx);
};
goog.provide("clojure.core.rrb_vector.interop");
goog.require("cljs.core");
goog.require("clojure.core.rrb_vector.protocols");
goog.require("clojure.core.rrb_vector.rrbt");
cljs.core.PersistentVector.prototype.clojure$core$rrb_vector$protocols$PSliceableVector$ = true;
cljs.core.PersistentVector.prototype.clojure$core$rrb_vector$protocols$PSliceableVector$_slicev$arity$3 = function(v, start, end) {
  var v__$1 = this;
  return clojure.core.rrb_vector.protocols._slicev.call(null, clojure.core.rrb_vector.rrbt._as_rrbt.call(null, v__$1), start, end);
};
cljs.core.Subvec.prototype.clojure$core$rrb_vector$protocols$PSliceableVector$ = true;
cljs.core.Subvec.prototype.clojure$core$rrb_vector$protocols$PSliceableVector$_slicev$arity$3 = function(v, start, end) {
  var v__$1 = this;
  return clojure.core.rrb_vector.protocols._slicev.call(null, clojure.core.rrb_vector.rrbt._as_rrbt.call(null, v__$1), start, end);
};
cljs.core.PersistentVector.prototype.clojure$core$rrb_vector$protocols$PSpliceableVector$ = true;
cljs.core.PersistentVector.prototype.clojure$core$rrb_vector$protocols$PSpliceableVector$_splicev$arity$2 = function(v1, v2) {
  var v1__$1 = this;
  return clojure.core.rrb_vector.protocols._splicev.call(null, clojure.core.rrb_vector.rrbt._as_rrbt.call(null, v1__$1), v2);
};
cljs.core.Subvec.prototype.clojure$core$rrb_vector$protocols$PSpliceableVector$ = true;
cljs.core.Subvec.prototype.clojure$core$rrb_vector$protocols$PSpliceableVector$_splicev$arity$2 = function(v1, v2) {
  var v1__$1 = this;
  return clojure.core.rrb_vector.protocols._splicev.call(null, clojure.core.rrb_vector.rrbt._as_rrbt.call(null, v1__$1), v2);
};
goog.provide("clojure.core.rrb_vector");
goog.require("cljs.core");
goog.require("clojure.core.rrb_vector.protocols");
goog.require("clojure.core.rrb_vector.rrbt");
goog.require("clojure.core.rrb_vector.interop");
clojure.core.rrb_vector.catvec = function clojure$core$rrb_vector$catvec() {
  var G__13376 = arguments.length;
  switch(G__13376) {
    case 0:
      return clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5358__auto__);
  }
};
clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$1 = function(v1) {
  return v1;
};
clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$2 = function(v1, v2) {
  return clojure.core.rrb_vector.protocols._splicev.call(null, v1, v2);
};
clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$3 = function(v1, v2, v3) {
  return clojure.core.rrb_vector.protocols._splicev.call(null, clojure.core.rrb_vector.protocols._splicev.call(null, v1, v2), v3);
};
clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$4 = function(v1, v2, v3, v4) {
  return clojure.core.rrb_vector.protocols._splicev.call(null, clojure.core.rrb_vector.protocols._splicev.call(null, v1, v2), clojure.core.rrb_vector.protocols._splicev.call(null, v3, v4));
};
clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$variadic = function(v1, v2, v3, v4, vn) {
  return clojure.core.rrb_vector.protocols._splicev.call(null, clojure.core.rrb_vector.protocols._splicev.call(null, clojure.core.rrb_vector.protocols._splicev.call(null, v1, v2), clojure.core.rrb_vector.protocols._splicev.call(null, v3, v4)), cljs.core.apply.call(null, clojure.core.rrb_vector.catvec, vn));
};
clojure.core.rrb_vector.catvec.cljs$lang$applyTo = function(seq13370) {
  var G__13371 = cljs.core.first.call(null, seq13370);
  var seq13370__$1 = cljs.core.next.call(null, seq13370);
  var G__13372 = cljs.core.first.call(null, seq13370__$1);
  var seq13370__$2 = cljs.core.next.call(null, seq13370__$1);
  var G__13373 = cljs.core.first.call(null, seq13370__$2);
  var seq13370__$3 = cljs.core.next.call(null, seq13370__$2);
  var G__13374 = cljs.core.first.call(null, seq13370__$3);
  var seq13370__$4 = cljs.core.next.call(null, seq13370__$3);
  return clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$variadic(G__13371, G__13372, G__13373, G__13374, seq13370__$4);
};
clojure.core.rrb_vector.catvec.cljs$lang$maxFixedArity = 4;
clojure.core.rrb_vector.subvec = function clojure$core$rrb_vector$subvec() {
  var G__13379 = arguments.length;
  switch(G__13379) {
    case 2:
      return clojure.core.rrb_vector.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.core.rrb_vector.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.core.rrb_vector.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return clojure.core.rrb_vector.protocols._slicev.call(null, v, start, cljs.core.count.call(null, v));
};
clojure.core.rrb_vector.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return clojure.core.rrb_vector.protocols._slicev.call(null, v, start, end);
};
clojure.core.rrb_vector.subvec.cljs$lang$maxFixedArity = 3;
clojure.core.rrb_vector.vector = function clojure$core$rrb_vector$vector() {
  var G__13387 = arguments.length;
  switch(G__13387) {
    case 0:
      return clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5358__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5358__auto__);
  }
};
clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$0 = function() {
  var arr__13388 = [];
  return new clojure.core.rrb_vector.rrbt.Vector(0, 5, cljs.core.PersistentVector.EMPTY_NODE, arr__13388, null, 0);
};
clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$1 = function(x1) {
  var arr__13389 = [null];
  arr__13389[0] = x1;
  return new clojure.core.rrb_vector.rrbt.Vector(1, 5, cljs.core.PersistentVector.EMPTY_NODE, arr__13389, null, null);
};
clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$2 = function(x1, x2) {
  var arr__13390 = [null, null];
  arr__13390[0] = x1;
  arr__13390[1] = x2;
  return new clojure.core.rrb_vector.rrbt.Vector(2, 5, cljs.core.PersistentVector.EMPTY_NODE, arr__13390, null, null);
};
clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$3 = function(x1, x2, x3) {
  var arr__13391 = [null, null, null];
  arr__13391[0] = x1;
  arr__13391[1] = x2;
  arr__13391[2] = x3;
  return new clojure.core.rrb_vector.rrbt.Vector(3, 5, cljs.core.PersistentVector.EMPTY_NODE, arr__13391, null, null);
};
clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$4 = function(x1, x2, x3, x4) {
  var arr__13392 = [null, null, null, null];
  arr__13392[0] = x1;
  arr__13392[1] = x2;
  arr__13392[2] = x3;
  arr__13392[3] = x4;
  return new clojure.core.rrb_vector.rrbt.Vector(4, 5, cljs.core.PersistentVector.EMPTY_NODE, arr__13392, null, null);
};
clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$variadic = function(x1, x2, x3, x4, xn) {
  return cljs.core.into.call(null, clojure.core.rrb_vector.vector.call(null, x1, x2, x3, x4), xn);
};
clojure.core.rrb_vector.vector.cljs$lang$applyTo = function(seq13381) {
  var G__13382 = cljs.core.first.call(null, seq13381);
  var seq13381__$1 = cljs.core.next.call(null, seq13381);
  var G__13383 = cljs.core.first.call(null, seq13381__$1);
  var seq13381__$2 = cljs.core.next.call(null, seq13381__$1);
  var G__13384 = cljs.core.first.call(null, seq13381__$2);
  var seq13381__$3 = cljs.core.next.call(null, seq13381__$2);
  var G__13385 = cljs.core.first.call(null, seq13381__$3);
  var seq13381__$4 = cljs.core.next.call(null, seq13381__$3);
  return clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$variadic(G__13382, G__13383, G__13384, G__13385, seq13381__$4);
};
clojure.core.rrb_vector.vector.cljs$lang$maxFixedArity = 4;
clojure.core.rrb_vector.vec = function clojure$core$rrb_vector$vec(coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    return clojure.core.rrb_vector.rrbt._as_rrbt.call(null, coll);
  } else {
    return cljs.core.apply.call(null, clojure.core.rrb_vector.vector, coll);
  }
};
goog.provide("fipp.deque");
goog.require("cljs.core");
goog.require("clojure.core.rrb_vector");
fipp.deque.create = cljs.core.vector;
fipp.deque.empty = cljs.core.PersistentVector.EMPTY;
fipp.deque.popl = function fipp$deque$popl(v) {
  return cljs.core.subvec.call(null, v, 1);
};
fipp.deque.conjr = cljs.core.fnil.call(null, cljs.core.conj, fipp.deque.empty);
fipp.deque.conjlr = function fipp$deque$conjlr(l, deque, r) {
  return clojure.core.rrb_vector.catvec.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [l], null), deque, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [r], null));
};
fipp.deque.concat = clojure.core.rrb_vector.catvec;
goog.provide("fipp.engine");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("fipp.deque");
if (typeof fipp.engine.serialize_node !== "undefined") {
} else {
  fipp.engine.serialize_node = function() {
    var method_table__5202__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5203__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5204__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5205__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5206__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "fipp.engine", "serialize-node"), cljs.core.first, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5206__auto__, method_table__5202__auto__, prefer_table__5203__auto__, method_cache__5204__auto__, cached_hierarchy__5205__auto__);
  }();
}
fipp.engine.serialize = function fipp$engine$serialize(doc) {
  if (doc == null) {
    return null;
  } else {
    if (cljs.core.seq_QMARK_.call(null, doc)) {
      return cljs.core.mapcat.call(null, fipp$engine$serialize, doc);
    } else {
      if (typeof doc === "string") {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "text", "text", -1790561697), new cljs.core.Keyword(null, "text", "text", -1790561697), doc], null)], null);
      } else {
        if (doc instanceof cljs.core.Keyword) {
          return fipp.engine.serialize_node.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [doc], null));
        } else {
          if (cljs.core.vector_QMARK_.call(null, doc)) {
            return fipp.engine.serialize_node.call(null, doc);
          } else {
            throw cljs.core.ex_info.call(null, "Unexpected class for doc node", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "node", "node", 581201198), doc], null));
          }
        }
      }
    }
  }
};
cljs.core._add_method.call(null, fipp.engine.serialize_node, new cljs.core.Keyword(null, "text", "text", -1790561697), function(p__13317) {
  var vec__13318 = p__13317;
  var _ = cljs.core.nth.call(null, vec__13318, 0, null);
  var text = cljs.core.nthnext.call(null, vec__13318, 1);
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "text", "text", -1790561697), new cljs.core.Keyword(null, "text", "text", -1790561697), cljs.core.apply.call(null, cljs.core.str, text)], null)], null);
});
cljs.core._add_method.call(null, fipp.engine.serialize_node, new cljs.core.Keyword(null, "pass", "pass", 1574159993), function(p__13319) {
  var vec__13320 = p__13319;
  var _ = cljs.core.nth.call(null, vec__13320, 0, null);
  var text = cljs.core.nthnext.call(null, vec__13320, 1);
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "text", "text", -1790561697), cljs.core.apply.call(null, cljs.core.str, text)], null)], null);
});
cljs.core._add_method.call(null, fipp.engine.serialize_node, new cljs.core.Keyword(null, "escaped", "escaped", -1007929769), function(p__13321) {
  var vec__13322 = p__13321;
  var _ = cljs.core.nth.call(null, vec__13322, 0, null);
  var text = cljs.core.nth.call(null, vec__13322, 1, null);
  if (typeof text === "string") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "text", "text", -150030170, null))))].join(""));
  }
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "escaped", "escaped", -1007929769), new cljs.core.Keyword(null, "text", "text", -1790561697), text], null)], null);
});
cljs.core._add_method.call(null, fipp.engine.serialize_node, new cljs.core.Keyword(null, "span", "span", 1394872991), function(p__13323) {
  var vec__13324 = p__13323;
  var _ = cljs.core.nth.call(null, vec__13324, 0, null);
  var children = cljs.core.nthnext.call(null, vec__13324, 1);
  return fipp.engine.serialize.call(null, children);
});
cljs.core._add_method.call(null, fipp.engine.serialize_node, new cljs.core.Keyword(null, "line", "line", 212345235), function(p__13325) {
  var vec__13326 = p__13325;
  var _ = cljs.core.nth.call(null, vec__13326, 0, null);
  var inline = cljs.core.nth.call(null, vec__13326, 1, null);
  var inline__$1 = function() {
    var or__4307__auto__ = inline;
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return " ";
    }
  }();
  if (typeof inline__$1 === "string") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "inline", "inline", -1254551547, null))))].join(""));
  }
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "inline", "inline", 1399884222), inline__$1], null)], null);
});
cljs.core._add_method.call(null, fipp.engine.serialize_node, new cljs.core.Keyword(null, "break", "break", 126570225), function() {
  var G__13327__delegate = function(_) {
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "break", "break", 126570225)], null)], null);
  };
  var G__13327 = function(var_args) {
    var _ = null;
    if (arguments.length > 0) {
      var G__13328__i = 0, G__13328__a = new Array(arguments.length - 0);
      while (G__13328__i < G__13328__a.length) {
        G__13328__a[G__13328__i] = arguments[G__13328__i + 0];
        ++G__13328__i;
      }
      _ = new cljs.core.IndexedSeq(G__13328__a, 0);
    }
    return G__13327__delegate.call(this, _);
  };
  G__13327.cljs$lang$maxFixedArity = 0;
  G__13327.cljs$lang$applyTo = function(arglist__13329) {
    var _ = cljs.core.seq(arglist__13329);
    return G__13327__delegate(_);
  };
  G__13327.cljs$core$IFn$_invoke$arity$variadic = G__13327__delegate;
  return G__13327;
}());
cljs.core._add_method.call(null, fipp.engine.serialize_node, new cljs.core.Keyword(null, "group", "group", 582596132), function(p__13330) {
  var vec__13331 = p__13330;
  var _ = cljs.core.nth.call(null, vec__13331, 0, null);
  var children = cljs.core.nthnext.call(null, vec__13331, 1);
  return cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "begin", "begin", -319034319)], null)], null), fipp.engine.serialize.call(null, children), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "op", "op", 
  -1882987955), new cljs.core.Keyword(null, "end", "end", -268185958)], null)], null));
});
cljs.core._add_method.call(null, fipp.engine.serialize_node, new cljs.core.Keyword(null, "nest", "nest", -314993663), function(p__13332) {
  var vec__13333 = p__13332;
  var _ = cljs.core.nth.call(null, vec__13333, 0, null);
  var offset = cljs.core.nth.call(null, vec__13333, 1, null);
  var children = cljs.core.nthnext.call(null, vec__13333, 2);
  return cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "nest", "nest", -314993663), new cljs.core.Keyword(null, "offset", "offset", 296498311), offset], null)], null), fipp.engine.serialize.call(null, children), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "outdent", "outdent", 467209411)], null)], null));
});
cljs.core._add_method.call(null, fipp.engine.serialize_node, new cljs.core.Keyword(null, "align", "align", 1964212802), function(p__13334) {
  var vec__13335 = p__13334;
  var _ = cljs.core.nth.call(null, vec__13335, 0, null);
  var args = cljs.core.nthnext.call(null, vec__13335, 1);
  var vec__13336 = typeof cljs.core.first.call(null, args) === "number" ? args : cljs.core.cons.call(null, 0, args);
  var offset = cljs.core.nth.call(null, vec__13336, 0, null);
  var children = cljs.core.nthnext.call(null, vec__13336, 1);
  return cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "align", "align", 1964212802), new cljs.core.Keyword(null, "offset", "offset", 296498311), offset], null)], null), fipp.engine.serialize.call(null, children), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "outdent", "outdent", 467209411)], null)], null));
});
fipp.engine.annotate_rights = function fipp$engine$annotate_rights(rf) {
  var pos = cljs.core.volatile_BANG_.call(null, 0);
  return function(pos) {
    return function() {
      var G__13339 = null;
      var G__13339__0 = function() {
        return rf.call(null);
      };
      var G__13339__1 = function(res) {
        return rf.call(null, res);
      };
      var G__13339__2 = function(res, node) {
        var delta = function() {
          var G__13338 = (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(node) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(node).fqn : null;
          switch(G__13338) {
            case "text":
              return cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(node));
              break;
            case "line":
              return cljs.core.count.call(null, (new cljs.core.Keyword(null, "inline", "inline", 1399884222)).cljs$core$IFn$_invoke$arity$1(node));
              break;
            case "escaped":
              return 1;
              break;
            default:
              return 0;
          }
        }();
        var p = cljs.core._vreset_BANG_.call(null, pos, cljs.core._deref.call(null, pos) + delta);
        return rf.call(null, res, cljs.core.assoc.call(null, node, new cljs.core.Keyword(null, "right", "right", -452581833), p));
      };
      G__13339 = function(res, node) {
        switch(arguments.length) {
          case 0:
            return G__13339__0.call(this);
          case 1:
            return G__13339__1.call(this, res);
          case 2:
            return G__13339__2.call(this, res, node);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13339.cljs$core$IFn$_invoke$arity$0 = G__13339__0;
      G__13339.cljs$core$IFn$_invoke$arity$1 = G__13339__1;
      G__13339.cljs$core$IFn$_invoke$arity$2 = G__13339__2;
      return G__13339;
    }();
  }(pos);
};
fipp.engine.update_right = function fipp$engine$update_right() {
  var argseq__5347__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5347__auto__);
};
fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic = function(deque, f, args) {
  return fipp.deque.conjr.call(null, cljs.core.pop.call(null, deque), cljs.core.apply.call(null, f, cljs.core.peek.call(null, deque), args));
};
fipp.engine.update_right.cljs$lang$maxFixedArity = 2;
fipp.engine.update_right.cljs$lang$applyTo = function(seq13341) {
  var G__13342 = cljs.core.first.call(null, seq13341);
  var seq13341__$1 = cljs.core.next.call(null, seq13341);
  var G__13343 = cljs.core.first.call(null, seq13341__$1);
  var seq13341__$2 = cljs.core.next.call(null, seq13341__$1);
  return fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic(G__13342, G__13343, seq13341__$2);
};
fipp.engine.annotate_begins = function fipp$engine$annotate_begins(p__13344) {
  var map__13348 = p__13344;
  var map__13348__$1 = cljs.core.seq_QMARK_.call(null, map__13348) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13348) : map__13348;
  var options = map__13348__$1;
  var width = cljs.core.get.call(null, map__13348__$1, new cljs.core.Keyword(null, "width", "width", -384071477));
  return function(map__13348, map__13348__$1, options, width) {
    return function(rf) {
      var pos = cljs.core.volatile_BANG_.call(null, 0);
      var bufs = cljs.core.volatile_BANG_.call(null, fipp.deque.empty);
      return function(pos, bufs, map__13348, map__13348__$1, options, width) {
        return function() {
          var G__13351 = null;
          var G__13351__0 = function() {
            return rf.call(null);
          };
          var G__13351__1 = function(res) {
            return rf.call(null, res);
          };
          var G__13351__2 = function(res, p__13349) {
            var map__13350 = p__13349;
            var map__13350__$1 = cljs.core.seq_QMARK_.call(null, map__13350) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13350) : map__13350;
            var node = map__13350__$1;
            var op = cljs.core.get.call(null, map__13350__$1, new cljs.core.Keyword(null, "op", "op", -1882987955));
            var right = cljs.core.get.call(null, map__13350__$1, new cljs.core.Keyword(null, "right", "right", -452581833));
            var buffers = cljs.core.deref.call(null, bufs);
            if (cljs.core.empty_QMARK_.call(null, buffers)) {
              if (cljs.core._EQ_.call(null, op, new cljs.core.Keyword(null, "begin", "begin", -319034319))) {
                var position_STAR_ = right + width;
                var buffer = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "position", "position", -2011731912), position_STAR_, new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), fipp.deque.empty], null);
                cljs.core.vreset_BANG_.call(null, pos, position_STAR_);
                cljs.core.vreset_BANG_.call(null, bufs, fipp.deque.create.call(null, buffer));
                return res;
              } else {
                return rf.call(null, res, node);
              }
            } else {
              if (cljs.core._EQ_.call(null, op, new cljs.core.Keyword(null, "end", "end", -268185958))) {
                var buffer = cljs.core.peek.call(null, buffers);
                var buffers_STAR_ = cljs.core.pop.call(null, buffers);
                var begin = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "begin", "begin", -319034319), new cljs.core.Keyword(null, "right", "right", -452581833), right], null);
                var nodes = fipp.deque.conjlr.call(null, begin, (new cljs.core.Keyword(null, "nodes", "nodes", -2099585805)).cljs$core$IFn$_invoke$arity$1(buffer), node);
                if (cljs.core.empty_QMARK_.call(null, buffers_STAR_)) {
                  cljs.core.vreset_BANG_.call(null, pos, 0);
                  cljs.core.vreset_BANG_.call(null, bufs, fipp.deque.empty);
                  return cljs.core.reduce.call(null, rf, res, nodes);
                } else {
                  if (cljs.core.vector_QMARK_.call(null, buffers_STAR_)) {
                  } else {
                    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null), new cljs.core.Symbol(null, "buffers*", "buffers*", -1961623915, null))))].join(""));
                  }
                  if (cljs.core.vector_QMARK_.call(null, nodes)) {
                  } else {
                    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null))))].join(""));
                  }
                  cljs.core.vreset_BANG_.call(null, bufs, fipp.engine.update_right.call(null, buffers_STAR_, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "nodes", "nodes", -2099585805)], null), fipp.deque.concat, nodes));
                  return res;
                }
              } else {
                var buffers_STAR_ = cljs.core._EQ_.call(null, op, new cljs.core.Keyword(null, "begin", "begin", -319034319)) ? fipp.deque.conjr.call(null, buffers, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "position", "position", -2011731912), right + width, new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), fipp.deque.empty], null)) : fipp.engine.update_right.call(null, buffers, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
                [new cljs.core.Keyword(null, "nodes", "nodes", -2099585805)], null), fipp.deque.conjr, node);
                var res__$1 = res;
                while (true) {
                  if (right <= cljs.core.deref.call(null, pos) && cljs.core.count.call(null, buffers_STAR_) <= width) {
                    cljs.core.vreset_BANG_.call(null, bufs, buffers_STAR_);
                    return res__$1;
                  } else {
                    var buffer = cljs.core.first.call(null, buffers_STAR_);
                    var buffers_STAR__STAR_ = fipp.deque.popl.call(null, buffers_STAR_);
                    var begin = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "begin", "begin", -319034319), new cljs.core.Keyword(null, "right", "right", -452581833), new cljs.core.Keyword(null, "too-far", "too-far", 85800617)], null);
                    var res_STAR_ = rf.call(null, res__$1, begin);
                    var res_STAR___$1 = cljs.core.reduce.call(null, rf, res_STAR_, (new cljs.core.Keyword(null, "nodes", "nodes", -2099585805)).cljs$core$IFn$_invoke$arity$1(buffer));
                    if (cljs.core.empty_QMARK_.call(null, buffers_STAR__STAR_)) {
                      cljs.core.vreset_BANG_.call(null, pos, 0);
                      cljs.core.vreset_BANG_.call(null, bufs, fipp.deque.empty);
                      return res_STAR___$1;
                    } else {
                      cljs.core.vreset_BANG_.call(null, pos, (new cljs.core.Keyword(null, "position", "position", -2011731912)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, buffers_STAR__STAR_)));
                      var G__13352 = buffers_STAR__STAR_;
                      var G__13353 = res_STAR___$1;
                      buffers_STAR_ = G__13352;
                      res__$1 = G__13353;
                      continue;
                    }
                  }
                  break;
                }
              }
            }
          };
          G__13351 = function(res, p__13349) {
            switch(arguments.length) {
              case 0:
                return G__13351__0.call(this);
              case 1:
                return G__13351__1.call(this, res);
              case 2:
                return G__13351__2.call(this, res, p__13349);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__13351.cljs$core$IFn$_invoke$arity$0 = G__13351__0;
          G__13351.cljs$core$IFn$_invoke$arity$1 = G__13351__1;
          G__13351.cljs$core$IFn$_invoke$arity$2 = G__13351__2;
          return G__13351;
        }();
      }(pos, bufs, map__13348, map__13348__$1, options, width);
    };
  }(map__13348, map__13348__$1, options, width);
};
fipp.engine.format_nodes = function fipp$engine$format_nodes(p__13354) {
  var map__13359 = p__13354;
  var map__13359__$1 = cljs.core.seq_QMARK_.call(null, map__13359) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13359) : map__13359;
  var options = map__13359__$1;
  var width = cljs.core.get.call(null, map__13359__$1, new cljs.core.Keyword(null, "width", "width", -384071477));
  return function(map__13359, map__13359__$1, options, width) {
    return function(rf) {
      var fits = cljs.core.volatile_BANG_.call(null, 0);
      var length = cljs.core.volatile_BANG_.call(null, width);
      var tab_stops = cljs.core.volatile_BANG_.call(null, cljs.core.list(0));
      var column = cljs.core.volatile_BANG_.call(null, 0);
      return function(fits, length, tab_stops, column, map__13359, map__13359__$1, options, width) {
        return function() {
          var G__13363 = null;
          var G__13363__0 = function() {
            return rf.call(null);
          };
          var G__13363__1 = function(res) {
            return rf.call(null, res);
          };
          var G__13363__2 = function(res, p__13360) {
            var map__13361 = p__13360;
            var map__13361__$1 = cljs.core.seq_QMARK_.call(null, map__13361) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13361) : map__13361;
            var node = map__13361__$1;
            var op = cljs.core.get.call(null, map__13361__$1, new cljs.core.Keyword(null, "op", "op", -1882987955));
            var right = cljs.core.get.call(null, map__13361__$1, new cljs.core.Keyword(null, "right", "right", -452581833));
            var indent = cljs.core.peek.call(null, cljs.core.deref.call(null, tab_stops));
            var G__13362 = op instanceof cljs.core.Keyword ? op.fqn : null;
            switch(G__13362) {
              case "nest":
                cljs.core._vreset_BANG_.call(null, tab_stops, cljs.core.conj.call(null, cljs.core._deref.call(null, tab_stops), indent + (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(node)));
                return res;
                break;
              case "align":
                cljs.core._vreset_BANG_.call(null, tab_stops, cljs.core.conj.call(null, cljs.core._deref.call(null, tab_stops), cljs.core.deref.call(null, column) + (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(node)));
                return res;
                break;
              case "outdent":
                cljs.core._vreset_BANG_.call(null, tab_stops, cljs.core.pop.call(null, cljs.core._deref.call(null, tab_stops)));
                return res;
                break;
              case "begin":
                cljs.core.vreset_BANG_.call(null, fits, cljs.core.deref.call(null, fits) > 0 ? cljs.core.deref.call(null, fits) + 1 : cljs.core._EQ_.call(null, right, new cljs.core.Keyword(null, "too-far", "too-far", 85800617)) ? 0 : right <= cljs.core.deref.call(null, length) ? 1 : 0);
                return res;
                break;
              case "break":
                cljs.core.vreset_BANG_.call(null, length, right + width - indent);
                cljs.core.vreset_BANG_.call(null, column, 0);
                return rf.call(null, res, "\n");
                break;
              case "line":
                if (cljs.core.deref.call(null, fits) === 0) {
                  cljs.core.vreset_BANG_.call(null, length, right + width - indent);
                  cljs.core.vreset_BANG_.call(null, column, 0);
                  return rf.call(null, res, "\n");
                } else {
                  var inline = (new cljs.core.Keyword(null, "inline", "inline", 1399884222)).cljs$core$IFn$_invoke$arity$1(node);
                  cljs.core._vreset_BANG_.call(null, column, cljs.core._deref.call(null, column) + cljs.core.count.call(null, inline));
                  return rf.call(null, res, inline);
                }
                break;
              case "escaped":
                var text = (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(node);
                var res_STAR_ = cljs.core.deref.call(null, column) === 0 ? function() {
                  cljs.core._vreset_BANG_.call(null, column, cljs.core._deref.call(null, column) + indent);
                  return rf.call(null, res, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, indent, " ")));
                }() : res;
                cljs.core._vreset_BANG_.call(null, column, cljs.core._deref.call(null, column) + 1);
                return rf.call(null, res_STAR_, text);
                break;
              case "pass":
                return rf.call(null, res, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(node));
                break;
              case "end":
                cljs.core.vreset_BANG_.call(null, fits, function() {
                  var x__4619__auto__ = 0;
                  var y__4620__auto__ = cljs.core.deref.call(null, fits) - 1;
                  return x__4619__auto__ > y__4620__auto__ ? x__4619__auto__ : y__4620__auto__;
                }());
                return res;
                break;
              case "text":
                var text = (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(node);
                var res_STAR_ = cljs.core.deref.call(null, column) === 0 ? function() {
                  cljs.core._vreset_BANG_.call(null, column, cljs.core._deref.call(null, column) + indent);
                  return rf.call(null, res, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, indent, " ")));
                }() : res;
                cljs.core._vreset_BANG_.call(null, column, cljs.core._deref.call(null, column) + cljs.core.count.call(null, text));
                return rf.call(null, res_STAR_, text);
                break;
              default:
                throw cljs.core.ex_info.call(null, "Unexpected node op", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "node", "node", 581201198), node], null));;
            }
          };
          G__13363 = function(res, p__13360) {
            switch(arguments.length) {
              case 0:
                return G__13363__0.call(this);
              case 1:
                return G__13363__1.call(this, res);
              case 2:
                return G__13363__2.call(this, res, p__13360);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__13363.cljs$core$IFn$_invoke$arity$0 = G__13363__0;
          G__13363.cljs$core$IFn$_invoke$arity$1 = G__13363__1;
          G__13363.cljs$core$IFn$_invoke$arity$2 = G__13363__2;
          return G__13363;
        }();
      }(fits, length, tab_stops, column, map__13359, map__13359__$1, options, width);
    };
  }(map__13359, map__13359__$1, options, width);
};
fipp.engine.pprint_document = function fipp$engine$pprint_document(document, options) {
  var options_13365__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "width", "width", -384071477), 70], null), options);
  cljs.core.run_BANG_.call(null, cljs.core.print, cljs.core.eduction.call(null, fipp.engine.annotate_rights, fipp.engine.annotate_begins.call(null, options_13365__$1), fipp.engine.format_nodes.call(null, options_13365__$1), fipp.engine.serialize.call(null, document)));
  return cljs.core.println.call(null);
};
goog.provide("fipp.edn");
goog.require("cljs.core");
goog.require("fipp.ednize");
goog.require("fipp.visit");
goog.require("fipp.engine");
fipp.edn.EdnPrinter = function(print_meta, symbols, __meta, __extmap, __hash) {
  this.print_meta = print_meta;
  this.symbols = symbols;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
fipp.edn.EdnPrinter.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4902__auto__, k__4903__auto__) {
  var self__ = this;
  var this__4902__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4902__auto____$1, k__4903__auto__, null);
};
fipp.edn.EdnPrinter.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4904__auto__, k13245, else__4905__auto__) {
  var self__ = this;
  var this__4904__auto____$1 = this;
  var G__13247 = k13245 instanceof cljs.core.Keyword ? k13245.fqn : null;
  switch(G__13247) {
    case "print-meta":
      return self__.print_meta;
      break;
    case "symbols":
      return self__.symbols;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k13245, else__4905__auto__);
  }
};
fipp.edn.EdnPrinter.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4916__auto__, writer__4917__auto__, opts__4918__auto__) {
  var self__ = this;
  var this__4916__auto____$1 = this;
  var pr_pair__4919__auto__ = function(this__4916__auto____$1) {
    return function(keyval__4920__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4917__auto__, cljs.core.pr_writer, "", " ", "", opts__4918__auto__, keyval__4920__auto__);
    };
  }(this__4916__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4917__auto__, pr_pair__4919__auto__, "#fipp.edn.EdnPrinter{", ", ", "}", opts__4918__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "print-meta", "print-meta", 1034114598), self__.print_meta], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "symbols", "symbols", 1211743), self__.symbols], null)], null), self__.__extmap));
};
fipp.edn.EdnPrinter.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4900__auto__) {
  var self__ = this;
  var this__4900__auto____$1 = this;
  return self__.__meta;
};
fipp.edn.EdnPrinter.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4896__auto__) {
  var self__ = this;
  var this__4896__auto____$1 = this;
  return new fipp.edn.EdnPrinter(self__.print_meta, self__.symbols, self__.__meta, self__.__extmap, self__.__hash);
};
fipp.edn.EdnPrinter.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4906__auto__) {
  var self__ = this;
  var this__4906__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$ = true;
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_meta$arity$3 = function(this$, m, x) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(self__.print_meta)) {
    return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "align", "align", 1964212802), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), "^", fipp.visit.visit.call(null, this$__$1, m)], null), new cljs.core.Keyword(null, "line", "line", 212345235), fipp.visit.visit_STAR_.call(null, this$__$1, x)], null);
  } else {
    return fipp.visit.visit_STAR_.call(null, this$__$1, x);
  }
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_number$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), cljs.core.pr_str.call(null, x)], null);
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_pattern$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), cljs.core.pr_str.call(null, x)], null);
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_unknown$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return fipp.visit.visit.call(null, this$__$1, fipp.ednize.edn.call(null, x));
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_symbol$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), [cljs.core.str(x)].join("")], null);
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_seq$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  var temp__4421__auto__ = self__.symbols.call(null, cljs.core.first.call(null, x));
  if (cljs.core.truth_(temp__4421__auto__)) {
    var pretty = temp__4421__auto__;
    return pretty.call(null, this$__$1, x);
  } else {
    return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "group", "group", 582596132), "(", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "align", "align", 1964212802), cljs.core.interpose.call(null, new cljs.core.Keyword(null, "line", "line", 212345235), cljs.core.map.call(null, function(temp__4421__auto__, this$__$1) {
      return function(p1__13241_SHARP_) {
        return fipp.visit.visit.call(null, this$__$1, p1__13241_SHARP_);
      };
    }(temp__4421__auto__, this$__$1), x))], null), ")"], null);
  }
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_boolean$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), [cljs.core.str(x)].join("")], null);
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_tagged$arity$2 = function(this$, p__13248) {
  var self__ = this;
  var map__13249 = p__13248;
  var map__13249__$1 = cljs.core.seq_QMARK_.call(null, map__13249) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13249) : map__13249;
  var tag = cljs.core.get.call(null, map__13249__$1, new cljs.core.Keyword(null, "tag", "tag", -1290361223));
  var form = cljs.core.get.call(null, map__13249__$1, new cljs.core.Keyword(null, "form", "form", -1624062471));
  var this$__$1 = this;
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "group", "group", 582596132), "#", cljs.core.pr_str.call(null, tag), cljs.core.truth_(function() {
    var or__4307__auto__ = function() {
      var and__4295__auto__ = self__.print_meta;
      if (cljs.core.truth_(and__4295__auto__)) {
        return cljs.core.meta.call(null, form);
      } else {
        return and__4295__auto__;
      }
    }();
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return !cljs.core.coll_QMARK_.call(null, form);
    }
  }()) ? " " : null, fipp.visit.visit.call(null, this$__$1, form)], null);
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_keyword$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), [cljs.core.str(x)].join("")], null);
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_map$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  var kvps = function() {
    var iter__5061__auto__ = function(this$__$1) {
      return function fipp$edn$iter__13250(s__13251) {
        return new cljs.core.LazySeq(null, function(this$__$1) {
          return function() {
            var s__13251__$1 = s__13251;
            while (true) {
              var temp__4423__auto__ = cljs.core.seq.call(null, s__13251__$1);
              if (temp__4423__auto__) {
                var s__13251__$2 = temp__4423__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__13251__$2)) {
                  var c__5059__auto__ = cljs.core.chunk_first.call(null, s__13251__$2);
                  var size__5060__auto__ = cljs.core.count.call(null, c__5059__auto__);
                  var b__13253 = cljs.core.chunk_buffer.call(null, size__5060__auto__);
                  if (function() {
                    var i__13252 = 0;
                    while (true) {
                      if (i__13252 < size__5060__auto__) {
                        var vec__13256 = cljs.core._nth.call(null, c__5059__auto__, i__13252);
                        var k = cljs.core.nth.call(null, vec__13256, 0, null);
                        var v = cljs.core.nth.call(null, vec__13256, 1, null);
                        cljs.core.chunk_append.call(null, b__13253, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), fipp.visit.visit.call(null, this$__$1, k), " ", fipp.visit.visit.call(null, this$__$1, v)], null));
                        var G__13262 = i__13252 + 1;
                        i__13252 = G__13262;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13253), fipp$edn$iter__13250.call(null, cljs.core.chunk_rest.call(null, s__13251__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13253), null);
                  }
                } else {
                  var vec__13257 = cljs.core.first.call(null, s__13251__$2);
                  var k = cljs.core.nth.call(null, vec__13257, 0, null);
                  var v = cljs.core.nth.call(null, vec__13257, 1, null);
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), fipp.visit.visit.call(null, this$__$1, k), " ", fipp.visit.visit.call(null, this$__$1, v)], null), fipp$edn$iter__13250.call(null, cljs.core.rest.call(null, s__13251__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(this$__$1), null, null);
      };
    }(this$__$1);
    return iter__5061__auto__.call(null, x);
  }();
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "group", "group", 582596132), "{", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "align", "align", 1964212802), cljs.core.interpose.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), ",", new cljs.core.Keyword(null, 
  "line", "line", 212345235)], null), kvps)], null), "}"], null);
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_nil$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), "nil"], null);
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_character$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), cljs.core.pr_str.call(null, x)], null);
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_string$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), cljs.core.pr_str.call(null, x)], null);
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_var$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), [cljs.core.str(x)].join("")], null);
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_set$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "group", "group", 582596132), "#{", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "align", "align", 1964212802), cljs.core.interpose.call(null, new cljs.core.Keyword(null, "line", "line", 212345235), cljs.core.map.call(null, function(this$__$1) {
    return function(p1__13243_SHARP_) {
      return fipp.visit.visit.call(null, this$__$1, p1__13243_SHARP_);
    };
  }(this$__$1), x))], null), "}"], null);
};
fipp.edn.EdnPrinter.prototype.fipp$visit$IVisitor$visit_vector$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "group", "group", 582596132), "[", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "align", "align", 1964212802), cljs.core.interpose.call(null, new cljs.core.Keyword(null, "line", "line", 212345235), cljs.core.map.call(null, function(this$__$1) {
    return function(p1__13242_SHARP_) {
      return fipp.visit.visit.call(null, this$__$1, p1__13242_SHARP_);
    };
  }(this$__$1), x))], null), "]"], null);
};
fipp.edn.EdnPrinter.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4897__auto__) {
  var self__ = this;
  var this__4897__auto____$1 = this;
  var h__4723__auto__ = self__.__hash;
  if (!(h__4723__auto__ == null)) {
    return h__4723__auto__;
  } else {
    var h__4723__auto____$1 = cljs.core.hash_imap.call(null, this__4897__auto____$1);
    self__.__hash = h__4723__auto____$1;
    return h__4723__auto____$1;
  }
};
fipp.edn.EdnPrinter.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4898__auto__, other__4899__auto__) {
  var self__ = this;
  var this__4898__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4295__auto__ = other__4899__auto__;
    if (cljs.core.truth_(and__4295__auto__)) {
      var and__4295__auto____$1 = this__4898__auto____$1.constructor === other__4899__auto__.constructor;
      if (and__4295__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4898__auto____$1, other__4899__auto__);
      } else {
        return and__4295__auto____$1;
      }
    } else {
      return and__4295__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
fipp.edn.EdnPrinter.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4911__auto__, k__4912__auto__) {
  var self__ = this;
  var this__4911__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "print-meta", "print-meta", 1034114598), null, new cljs.core.Keyword(null, "symbols", "symbols", 1211743), null], null), null), k__4912__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4911__auto____$1), self__.__meta), k__4912__auto__);
  } else {
    return new fipp.edn.EdnPrinter(self__.print_meta, self__.symbols, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4912__auto__)), null);
  }
};
fipp.edn.EdnPrinter.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4909__auto__, k__4910__auto__, G__13244) {
  var self__ = this;
  var this__4909__auto____$1 = this;
  var pred__13258 = cljs.core.keyword_identical_QMARK_;
  var expr__13259 = k__4910__auto__;
  if (cljs.core.truth_(pred__13258.call(null, new cljs.core.Keyword(null, "print-meta", "print-meta", 1034114598), expr__13259))) {
    return new fipp.edn.EdnPrinter(G__13244, self__.symbols, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13258.call(null, new cljs.core.Keyword(null, "symbols", "symbols", 1211743), expr__13259))) {
      return new fipp.edn.EdnPrinter(self__.print_meta, G__13244, self__.__meta, self__.__extmap, null);
    } else {
      return new fipp.edn.EdnPrinter(self__.print_meta, self__.symbols, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4910__auto__, G__13244), null);
    }
  }
};
fipp.edn.EdnPrinter.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4914__auto__) {
  var self__ = this;
  var this__4914__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "print-meta", "print-meta", 1034114598), self__.print_meta], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "symbols", "symbols", 1211743), self__.symbols], null)], null), self__.__extmap));
};
fipp.edn.EdnPrinter.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4901__auto__, G__13244) {
  var self__ = this;
  var this__4901__auto____$1 = this;
  return new fipp.edn.EdnPrinter(self__.print_meta, self__.symbols, G__13244, self__.__extmap, self__.__hash);
};
fipp.edn.EdnPrinter.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4907__auto__, entry__4908__auto__) {
  var self__ = this;
  var this__4907__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4908__auto__)) {
    return cljs.core._assoc.call(null, this__4907__auto____$1, cljs.core._nth.call(null, entry__4908__auto__, 0), cljs.core._nth.call(null, entry__4908__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4907__auto____$1, entry__4908__auto__);
  }
};
fipp.edn.EdnPrinter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "print-meta", "print-meta", -1620321171, null), new cljs.core.Symbol(null, "symbols", "symbols", 1641743270, null)], null);
};
fipp.edn.EdnPrinter.cljs$lang$type = true;
fipp.edn.EdnPrinter.cljs$lang$ctorPrSeq = function(this__4936__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "fipp.edn/EdnPrinter");
};
fipp.edn.EdnPrinter.cljs$lang$ctorPrWriter = function(this__4936__auto__, writer__4937__auto__) {
  return cljs.core._write.call(null, writer__4937__auto__, "fipp.edn/EdnPrinter");
};
fipp.edn.__GT_EdnPrinter = function fipp$edn$__GT_EdnPrinter(print_meta, symbols) {
  return new fipp.edn.EdnPrinter(print_meta, symbols, null, null, null);
};
fipp.edn.map__GT_EdnPrinter = function fipp$edn$map__GT_EdnPrinter(G__13246) {
  return new fipp.edn.EdnPrinter((new cljs.core.Keyword(null, "print-meta", "print-meta", 1034114598)).cljs$core$IFn$_invoke$arity$1(G__13246), (new cljs.core.Keyword(null, "symbols", "symbols", 1211743)).cljs$core$IFn$_invoke$arity$1(G__13246), null, cljs.core.dissoc.call(null, G__13246, new cljs.core.Keyword(null, "print-meta", "print-meta", 1034114598), new cljs.core.Keyword(null, "symbols", "symbols", 1211743)), null);
};
fipp.edn.pprint = function fipp$edn$pprint() {
  var G__13264 = arguments.length;
  switch(G__13264) {
    case 1:
      return fipp.edn.pprint.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return fipp.edn.pprint.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
fipp.edn.pprint.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return fipp.edn.pprint.call(null, x, cljs.core.PersistentArrayMap.EMPTY);
};
fipp.edn.pprint.cljs$core$IFn$_invoke$arity$2 = function(x, options) {
  var printer = fipp.edn.map__GT_EdnPrinter.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "print-meta", "print-meta", 1034114598), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "symbols", "symbols", 1211743), cljs.core.PersistentArrayMap.EMPTY], null), options));
  var _STAR_print_meta_STAR_13265 = cljs.core._STAR_print_meta_STAR_;
  cljs.core._STAR_print_meta_STAR_ = false;
  try {
    return fipp.engine.pprint_document.call(null, fipp.visit.visit.call(null, printer, x), options);
  } finally {
    cljs.core._STAR_print_meta_STAR_ = _STAR_print_meta_STAR_13265;
  }
};
fipp.edn.pprint.cljs$lang$maxFixedArity = 2;
goog.provide("goog.ui.IdGenerator");
goog.ui.IdGenerator = function() {
};
goog.addSingletonGetter(goog.ui.IdGenerator);
goog.ui.IdGenerator.prototype.nextId_ = 0;
goog.ui.IdGenerator.prototype.getNextUniqueId = function() {
  return ":" + (this.nextId_++).toString(36);
};
goog.provide("om.core");
goog.require("cljs.core");
goog.require("om.dom");
goog.require("goog.dom");
goog.require("goog.ui.IdGenerator");
om.core._STAR_parent_STAR_ = null;
om.core._STAR_instrument_STAR_ = null;
om.core._STAR_descriptor_STAR_ = null;
om.core._STAR_state_STAR_ = null;
om.core._STAR_root_key_STAR_ = null;
om.core.IDisplayName = function() {
  var obj14571 = {};
  return obj14571;
}();
om.core.display_name = function om$core$display_name(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IDisplayName$display_name$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IDisplayName$display_name$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core.display_name[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core.display_name["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisplayName.display-name", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IInitState = function() {
  var obj14573 = {};
  return obj14573;
}();
om.core.init_state = function om$core$init_state(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IInitState$init_state$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IInitState$init_state$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core.init_state[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core.init_state["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IInitState.init-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IShouldUpdate = function() {
  var obj14575 = {};
  return obj14575;
}();
om.core.should_update = function om$core$should_update(this$, next_props, next_state) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IShouldUpdate$should_update$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IShouldUpdate$should_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core.should_update[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core.should_update["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IShouldUpdate.should-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IWillMount = function() {
  var obj14577 = {};
  return obj14577;
}();
om.core.will_mount = function om$core$will_mount(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IWillMount$will_mount$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IWillMount$will_mount$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core.will_mount[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core.will_mount["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillMount.will-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IDidMount = function() {
  var obj14579 = {};
  return obj14579;
}();
om.core.did_mount = function om$core$did_mount(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IDidMount$did_mount$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IDidMount$did_mount$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core.did_mount[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core.did_mount["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidMount.did-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUnmount = function() {
  var obj14581 = {};
  return obj14581;
}();
om.core.will_unmount = function om$core$will_unmount(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IWillUnmount$will_unmount$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IWillUnmount$will_unmount$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core.will_unmount[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core.will_unmount["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUnmount.will-unmount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUpdate = function() {
  var obj14583 = {};
  return obj14583;
}();
om.core.will_update = function om$core$will_update(this$, next_props, next_state) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IWillUpdate$will_update$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IWillUpdate$will_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core.will_update[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core.will_update["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUpdate.will-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IDidUpdate = function() {
  var obj14585 = {};
  return obj14585;
}();
om.core.did_update = function om$core$did_update(this$, prev_props, prev_state) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IDidUpdate$did_update$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IDidUpdate$did_update$arity$3(this$, prev_props, prev_state);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core.did_update[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core.did_update["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidUpdate.did-update", this$);
        }
      }
    }().call(null, this$, prev_props, prev_state);
  }
};
om.core.IWillReceiveProps = function() {
  var obj14587 = {};
  return obj14587;
}();
om.core.will_receive_props = function om$core$will_receive_props(this$, next_props) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IWillReceiveProps$will_receive_props$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IWillReceiveProps$will_receive_props$arity$2(this$, next_props);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core.will_receive_props[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core.will_receive_props["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillReceiveProps.will-receive-props", this$);
        }
      }
    }().call(null, this$, next_props);
  }
};
om.core.IRender = function() {
  var obj14589 = {};
  return obj14589;
}();
om.core.render = function om$core$render(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IRender$render$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IRender$render$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core.render[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core.render["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRender.render", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IRenderProps = function() {
  var obj14591 = {};
  return obj14591;
}();
om.core.render_props = function om$core$render_props(this$, props, state) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IRenderProps$render_props$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IRenderProps$render_props$arity$3(this$, props, state);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core.render_props[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core.render_props["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderProps.render-props", this$);
        }
      }
    }().call(null, this$, props, state);
  }
};
om.core.IRenderState = function() {
  var obj14593 = {};
  return obj14593;
}();
om.core.render_state = function om$core$render_state(this$, state) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IRenderState$render_state$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IRenderState$render_state$arity$2(this$, state);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core.render_state[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core.render_state["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderState.render-state", this$);
        }
      }
    }().call(null, this$, state);
  }
};
om.core.ICheckState = function() {
  var obj14595 = {};
  return obj14595;
}();
om.core.IOmSwap = function() {
  var obj14597 = {};
  return obj14597;
}();
om.core._om_swap_BANG_ = function om$core$_om_swap_BANG_(this$, cursor, korks, f, tag) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5(this$, cursor, korks, f, tag);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._om_swap_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._om_swap_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmSwap.-om-swap!", this$);
        }
      }
    }().call(null, this$, cursor, korks, f, tag);
  }
};
om.core.IGetState = function() {
  var obj14599 = {};
  return obj14599;
}();
om.core._get_state = function om$core$_get_state() {
  var G__14601 = arguments.length;
  switch(G__14601) {
    case 1:
      return om.core._get_state.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core._get_state.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core._get_state.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IGetState$_get_state$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IGetState$_get_state$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._get_state[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._get_state["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._get_state.cljs$core$IFn$_invoke$arity$2 = function(this$, ks) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IGetState$_get_state$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IGetState$_get_state$arity$2(this$, ks);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._get_state[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._get_state["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
        }
      }
    }().call(null, this$, ks);
  }
};
om.core._get_state.cljs$lang$maxFixedArity = 2;
om.core.IGetRenderState = function() {
  var obj14604 = {};
  return obj14604;
}();
om.core._get_render_state = function om$core$_get_render_state() {
  var G__14606 = arguments.length;
  switch(G__14606) {
    case 1:
      return om.core._get_render_state.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core._get_render_state.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core._get_render_state.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IGetRenderState$_get_render_state$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._get_render_state[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._get_render_state["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._get_render_state.cljs$core$IFn$_invoke$arity$2 = function(this$, ks) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IGetRenderState$_get_render_state$arity$2(this$, ks);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._get_render_state[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._get_render_state["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
        }
      }
    }().call(null, this$, ks);
  }
};
om.core._get_render_state.cljs$lang$maxFixedArity = 2;
om.core.ISetState = function() {
  var obj14609 = {};
  return obj14609;
}();
om.core._set_state_BANG_ = function om$core$_set_state_BANG_() {
  var G__14611 = arguments.length;
  switch(G__14611) {
    case 3:
      return om.core._set_state_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return om.core._set_state_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core._set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = function(this$, val, render) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$ISetState$_set_state_BANG_$arity$3(this$, val, render);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._set_state_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
        }
      }
    }().call(null, this$, val, render);
  }
};
om.core._set_state_BANG_.cljs$core$IFn$_invoke$arity$4 = function(this$, ks, val, render) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$4;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$ISetState$_set_state_BANG_$arity$4(this$, ks, val, render);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._set_state_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
        }
      }
    }().call(null, this$, ks, val, render);
  }
};
om.core._set_state_BANG_.cljs$lang$maxFixedArity = 4;
om.core.IRenderQueue = function() {
  var obj14614 = {};
  return obj14614;
}();
om.core._get_queue = function om$core$_get_queue(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IRenderQueue$_get_queue$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_get_queue$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._get_queue[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._get_queue["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-get-queue", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._queue_render_BANG_ = function om$core$_queue_render_BANG_(this$, c) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2(this$, c);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._queue_render_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._queue_render_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-queue-render!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._empty_queue_BANG_ = function om$core$_empty_queue_BANG_(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._empty_queue_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._empty_queue_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-empty-queue!", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IValue = function() {
  var obj14616 = {};
  return obj14616;
}();
om.core._value = function om$core$_value(x) {
  if (function() {
    var and__4295__auto__ = x;
    if (and__4295__auto__) {
      return x.om$core$IValue$_value$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return x.om$core$IValue$_value$arity$1(x);
  } else {
    var x__4943__auto__ = x == null ? null : x;
    return function() {
      var or__4307__auto__ = om.core._value[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._value["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IValue.-value", x);
        }
      }
    }().call(null, x);
  }
};
om.core.IValue["_"] = true;
om.core._value["_"] = function(x) {
  return x;
};
om.core.ICursor = function() {
  var obj14618 = {};
  return obj14618;
}();
om.core._path = function om$core$_path(cursor) {
  if (function() {
    var and__4295__auto__ = cursor;
    if (and__4295__auto__) {
      return cursor.om$core$ICursor$_path$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_path$arity$1(cursor);
  } else {
    var x__4943__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4307__auto__ = om.core._path[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._path["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-path", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core._state = function om$core$_state(cursor) {
  if (function() {
    var and__4295__auto__ = cursor;
    if (and__4295__auto__) {
      return cursor.om$core$ICursor$_state$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_state$arity$1(cursor);
  } else {
    var x__4943__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4307__auto__ = om.core._state[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._state["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-state", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IToCursor = function() {
  var obj14620 = {};
  return obj14620;
}();
om.core._to_cursor = function om$core$_to_cursor() {
  var G__14622 = arguments.length;
  switch(G__14622) {
    case 2:
      return om.core._to_cursor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core._to_cursor.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core._to_cursor.cljs$core$IFn$_invoke$arity$2 = function(value, state) {
  if (function() {
    var and__4295__auto__ = value;
    if (and__4295__auto__) {
      return value.om$core$IToCursor$_to_cursor$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return value.om$core$IToCursor$_to_cursor$arity$2(value, state);
  } else {
    var x__4943__auto__ = value == null ? null : value;
    return function() {
      var or__4307__auto__ = om.core._to_cursor[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._to_cursor["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
        }
      }
    }().call(null, value, state);
  }
};
om.core._to_cursor.cljs$core$IFn$_invoke$arity$3 = function(value, state, path) {
  if (function() {
    var and__4295__auto__ = value;
    if (and__4295__auto__) {
      return value.om$core$IToCursor$_to_cursor$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return value.om$core$IToCursor$_to_cursor$arity$3(value, state, path);
  } else {
    var x__4943__auto__ = value == null ? null : value;
    return function() {
      var or__4307__auto__ = om.core._to_cursor[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._to_cursor["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
        }
      }
    }().call(null, value, state, path);
  }
};
om.core._to_cursor.cljs$lang$maxFixedArity = 3;
om.core.ICursorDerive = function() {
  var obj14625 = {};
  return obj14625;
}();
om.core._derive = function om$core$_derive(cursor, derived, state, path) {
  if (function() {
    var and__4295__auto__ = cursor;
    if (and__4295__auto__) {
      return cursor.om$core$ICursorDerive$_derive$arity$4;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return cursor.om$core$ICursorDerive$_derive$arity$4(cursor, derived, state, path);
  } else {
    var x__4943__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4307__auto__ = om.core._derive[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._derive["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursorDerive.-derive", cursor);
        }
      }
    }().call(null, cursor, derived, state, path);
  }
};
om.core.ICursorDerive["_"] = true;
om.core._derive["_"] = function(this$, derived, state, path) {
  return om.core.to_cursor.call(null, derived, state, path);
};
om.core.path = function om$core$path(cursor) {
  return om.core._path.call(null, cursor);
};
om.core.value = function om$core$value(cursor) {
  return om.core._value.call(null, cursor);
};
om.core.state = function om$core$state(cursor) {
  return om.core._state.call(null, cursor);
};
om.core.ITransact = function() {
  var obj14627 = {};
  return obj14627;
}();
om.core._transact_BANG_ = function om$core$_transact_BANG_(cursor, korks, f, tag) {
  if (function() {
    var and__4295__auto__ = cursor;
    if (and__4295__auto__) {
      return cursor.om$core$ITransact$_transact_BANG_$arity$4;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return cursor.om$core$ITransact$_transact_BANG_$arity$4(cursor, korks, f, tag);
  } else {
    var x__4943__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4307__auto__ = om.core._transact_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._transact_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransact.-transact!", cursor);
        }
      }
    }().call(null, cursor, korks, f, tag);
  }
};
om.core.INotify = function() {
  var obj14629 = {};
  return obj14629;
}();
om.core._listen_BANG_ = function om$core$_listen_BANG_(x, key, tx_listen) {
  if (function() {
    var and__4295__auto__ = x;
    if (and__4295__auto__) {
      return x.om$core$INotify$_listen_BANG_$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return x.om$core$INotify$_listen_BANG_$arity$3(x, key, tx_listen);
  } else {
    var x__4943__auto__ = x == null ? null : x;
    return function() {
      var or__4307__auto__ = om.core._listen_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._listen_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-listen!", x);
        }
      }
    }().call(null, x, key, tx_listen);
  }
};
om.core._unlisten_BANG_ = function om$core$_unlisten_BANG_(x, key) {
  if (function() {
    var and__4295__auto__ = x;
    if (and__4295__auto__) {
      return x.om$core$INotify$_unlisten_BANG_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return x.om$core$INotify$_unlisten_BANG_$arity$2(x, key);
  } else {
    var x__4943__auto__ = x == null ? null : x;
    return function() {
      var or__4307__auto__ = om.core._unlisten_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._unlisten_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-unlisten!", x);
        }
      }
    }().call(null, x, key);
  }
};
om.core._notify_BANG_ = function om$core$_notify_BANG_(x, tx_data, root_cursor) {
  if (function() {
    var and__4295__auto__ = x;
    if (and__4295__auto__) {
      return x.om$core$INotify$_notify_BANG_$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return x.om$core$INotify$_notify_BANG_$arity$3(x, tx_data, root_cursor);
  } else {
    var x__4943__auto__ = x == null ? null : x;
    return function() {
      var or__4307__auto__ = om.core._notify_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._notify_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-notify!", x);
        }
      }
    }().call(null, x, tx_data, root_cursor);
  }
};
om.core.IRootProperties = function() {
  var obj14631 = {};
  return obj14631;
}();
om.core._set_property_BANG_ = function om$core$_set_property_BANG_(this$, id, p, val) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IRootProperties$_set_property_BANG_$arity$4;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_set_property_BANG_$arity$4(this$, id, p, val);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._set_property_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._set_property_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-set-property!", this$);
        }
      }
    }().call(null, this$, id, p, val);
  }
};
om.core._remove_property_BANG_ = function om$core$_remove_property_BANG_(this$, id, p) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IRootProperties$_remove_property_BANG_$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_remove_property_BANG_$arity$3(this$, id, p);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._remove_property_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._remove_property_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-remove-property!", this$);
        }
      }
    }().call(null, this$, id, p);
  }
};
om.core._remove_properties_BANG_ = function om$core$_remove_properties_BANG_(this$, id) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IRootProperties$_remove_properties_BANG_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_remove_properties_BANG_$arity$2(this$, id);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._remove_properties_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._remove_properties_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-remove-properties!", this$);
        }
      }
    }().call(null, this$, id);
  }
};
om.core._get_property = function om$core$_get_property(this$, id, p) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IRootProperties$_get_property$arity$3;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_get_property$arity$3(this$, id, p);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._get_property[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._get_property["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-get-property", this$);
        }
      }
    }().call(null, this$, id, p);
  }
};
om.core.IRootKey = function() {
  var obj14633 = {};
  return obj14633;
}();
om.core._root_key = function om$core$_root_key(cursor) {
  if (function() {
    var and__4295__auto__ = cursor;
    if (and__4295__auto__) {
      return cursor.om$core$IRootKey$_root_key$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return cursor.om$core$IRootKey$_root_key$arity$1(cursor);
  } else {
    var x__4943__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4307__auto__ = om.core._root_key[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._root_key["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootKey.-root-key", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IAdapt = function() {
  var obj14635 = {};
  return obj14635;
}();
om.core._adapt = function om$core$_adapt(this$, other) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IAdapt$_adapt$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IAdapt$_adapt$arity$2(this$, other);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._adapt[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._adapt["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAdapt.-adapt", this$);
        }
      }
    }().call(null, this$, other);
  }
};
om.core.IAdapt["_"] = true;
om.core._adapt["_"] = function(_, other) {
  return other;
};
om.core.adapt = function om$core$adapt(x, other) {
  return om.core._adapt.call(null, x, other);
};
om.core.IOmRef = function() {
  var obj14637 = {};
  return obj14637;
}();
om.core._add_dep_BANG_ = function om$core$_add_dep_BANG_(this$, c) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IOmRef$_add_dep_BANG_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_add_dep_BANG_$arity$2(this$, c);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._add_dep_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._add_dep_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-add-dep!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._remove_dep_BANG_ = function om$core$_remove_dep_BANG_(this$, c) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IOmRef$_remove_dep_BANG_$arity$2;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_remove_dep_BANG_$arity$2(this$, c);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._remove_dep_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._remove_dep_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-remove-dep!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._refresh_deps_BANG_ = function om$core$_refresh_deps_BANG_(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IOmRef$_refresh_deps_BANG_$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_refresh_deps_BANG_$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._refresh_deps_BANG_[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._refresh_deps_BANG_["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-refresh-deps!", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._get_deps = function om$core$_get_deps(this$) {
  if (function() {
    var and__4295__auto__ = this$;
    if (and__4295__auto__) {
      return this$.om$core$IOmRef$_get_deps$arity$1;
    } else {
      return and__4295__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_get_deps$arity$1(this$);
  } else {
    var x__4943__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4307__auto__ = om.core._get_deps[goog.typeOf(x__4943__auto__)];
      if (or__4307__auto__) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._get_deps["_"];
        if (or__4307__auto____$1) {
          return or__4307__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-get-deps", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.transact_STAR_ = function om$core$transact_STAR_(state, cursor, korks, f, tag) {
  var old_state = cljs.core.deref.call(null, state);
  var path = cljs.core.into.call(null, om.core.path.call(null, cursor), korks);
  var ret = function() {
    var G__14639 = state;
    if (G__14639) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14639.om$core$IOmSwap$;
        }
      }())) {
        return true;
      } else {
        if (!G__14639.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__14639);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__14639);
    }
  }() ? om.core._om_swap_BANG_.call(null, state, cursor, korks, f, tag) : cljs.core.empty_QMARK_.call(null, path) ? cljs.core.swap_BANG_.call(null, state, f) : cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, path, f);
  if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "defer", "om.core/defer", -1038866178))) {
    return null;
  } else {
    var tx_data = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "old-value", "old-value", 862546795), cljs.core.get_in.call(null, old_state, path), new cljs.core.Keyword(null, "new-value", "new-value", 1087038368), cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path), new cljs.core.Keyword(null, "old-state", "old-state", 1039580704), old_state, new cljs.core.Keyword(null, "new-state", "new-state", 
    -490349212), cljs.core.deref.call(null, state)], null);
    if (!(tag == null)) {
      return om.core.notify_STAR_.call(null, cursor, cljs.core.assoc.call(null, tx_data, new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag));
    } else {
      return om.core.notify_STAR_.call(null, cursor, tx_data);
    }
  }
};
om.core.cursor_QMARK_ = function om$core$cursor_QMARK_(x) {
  var G__14641 = x;
  if (G__14641) {
    var bit__4981__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4307__auto__ = bit__4981__auto__;
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return G__14641.om$core$ICursor$;
      }
    }())) {
      return true;
    } else {
      if (!G__14641.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__14641);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__14641);
  }
};
om.core.component_QMARK_ = function om$core$component_QMARK_(x) {
  return x["isOmComponent"];
};
om.core.children = function om$core$children(node) {
  var c = node.props.children;
  if (cljs.core.ifn_QMARK_.call(null, c)) {
    return node.props.children = c.call(null, node);
  } else {
    return c;
  }
};
om.core.get_props = function om$core$get_props() {
  var G__14643 = arguments.length;
  switch(G__14643) {
    case 1:
      return om.core.get_props.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.get_props.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.get_props.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, x))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "x", "x", -555367584, null))))].join(""));
  }
  return x.props["__om_cursor"];
};
om.core.get_props.cljs$core$IFn$_invoke$arity$2 = function(x, korks) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, x))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "x", "x", -555367584, null))))].join(""));
  }
  var korks__$1 = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  var G__14644 = x.props["__om_cursor"];
  var G__14644__$1 = cljs.core.seq.call(null, korks__$1) ? cljs.core.get_in.call(null, G__14644, korks__$1) : G__14644;
  return G__14644__$1;
};
om.core.get_props.cljs$lang$maxFixedArity = 2;
om.core.get_state = function om$core$get_state() {
  var G__14647 = arguments.length;
  switch(G__14647) {
    case 1:
      return om.core.get_state.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.get_state.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.get_state.cljs$core$IFn$_invoke$arity$1 = function(owner) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  return om.core._get_state.call(null, owner);
};
om.core.get_state.cljs$core$IFn$_invoke$arity$2 = function(owner, korks) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  return om.core._get_state.call(null, owner, ks);
};
om.core.get_state.cljs$lang$maxFixedArity = 2;
om.core.get_shared = function om$core$get_shared() {
  var G__14650 = arguments.length;
  switch(G__14650) {
    case 1:
      return om.core.get_shared.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.get_shared.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.get_shared.cljs$core$IFn$_invoke$arity$1 = function(owner) {
  if (owner == null) {
    return null;
  } else {
    return owner.props["__om_shared"];
  }
};
om.core.get_shared.cljs$core$IFn$_invoke$arity$2 = function(owner, korks) {
  if (!cljs.core.sequential_QMARK_.call(null, korks)) {
    return cljs.core.get.call(null, om.core.get_shared.call(null, owner), korks);
  } else {
    if (cljs.core.empty_QMARK_.call(null, korks)) {
      return om.core.get_shared.call(null, owner);
    } else {
      return cljs.core.get_in.call(null, om.core.get_shared.call(null, owner), korks);
    }
  }
};
om.core.get_shared.cljs$lang$maxFixedArity = 2;
om.core.merge_pending_state = function om$core$merge_pending_state(owner) {
  var state = owner.state;
  var temp__4423__auto__ = state["__om_pending_state"];
  if (cljs.core.truth_(temp__4423__auto__)) {
    var pending_state = temp__4423__auto__;
    var G__14653 = state;
    G__14653["__om_prev_state"] = state["__om_state"];
    G__14653["__om_state"] = pending_state;
    G__14653["__om_pending_state"] = null;
    return G__14653;
  } else {
    return null;
  }
};
om.core.merge_props_state = function om$core$merge_props_state() {
  var G__14655 = arguments.length;
  switch(G__14655) {
    case 1:
      return om.core.merge_props_state.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.merge_props_state.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.merge_props_state.cljs$core$IFn$_invoke$arity$1 = function(owner) {
  return om.core.merge_props_state.call(null, owner, null);
};
om.core.merge_props_state.cljs$core$IFn$_invoke$arity$2 = function(owner, props) {
  var props__$1 = function() {
    var or__4307__auto__ = props;
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return owner.props;
    }
  }();
  var temp__4423__auto__ = props__$1["__om_state"];
  if (cljs.core.truth_(temp__4423__auto__)) {
    var props_state = temp__4423__auto__;
    var state = owner.state;
    state["__om_pending_state"] = cljs.core.merge.call(null, function() {
      var or__4307__auto__ = state["__om_pending_state"];
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return state["__om_state"];
      }
    }(), props_state);
    return props__$1["__om_state"] = null;
  } else {
    return null;
  }
};
om.core.merge_props_state.cljs$lang$maxFixedArity = 2;
om.core.ref_changed_QMARK_ = function om$core$ref_changed_QMARK_(ref) {
  var val = om.core.value.call(null, ref);
  var val_SINGLEQUOTE_ = cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.state.call(null, ref)), om.core.path.call(null, ref), new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
  return cljs.core.not_EQ_.call(null, val, val_SINGLEQUOTE_);
};
om.core.update_refs = function om$core$update_refs(c) {
  var cstate = c.state;
  var refs = cstate["__om_refs"];
  if (cljs.core.count.call(null, refs) === 0) {
    return null;
  } else {
    return cstate["__om_refs"] = cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.filter.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(cstate, refs) {
      return function(ref) {
        var ref_val = om.core.value.call(null, ref);
        var ref_state = om.core.state.call(null, ref);
        var ref_path = om.core.path.call(null, ref);
        var ref_val_SINGLEQUOTE_ = cljs.core.get_in.call(null, cljs.core.deref.call(null, ref_state), ref_path, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
        if (cljs.core.not_EQ_.call(null, ref_val, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275))) {
          if (cljs.core.not_EQ_.call(null, ref_val, ref_val_SINGLEQUOTE_)) {
            return om.core.adapt.call(null, ref, om.core.to_cursor.call(null, ref_val_SINGLEQUOTE_, ref_state, ref_path));
          } else {
            return ref;
          }
        } else {
          return null;
        }
      };
    }(cstate, refs), refs)));
  }
};
om.core.pure_methods = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "componentDidUpdate", "componentDidUpdate", -1983477981), new cljs.core.Keyword(null, "isOmComponent", "isOmComponent", -2070015162), new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), new cljs.core.Keyword(null, "componentWillReceiveProps", "componentWillReceiveProps", 559988974), new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), 
new cljs.core.Keyword(null, "render", "render", -1408033454), new cljs.core.Keyword(null, "componentWillUpdate", "componentWillUpdate", 657390932), new cljs.core.Keyword(null, "getInitialState", "getInitialState", 1541760916), new cljs.core.Keyword(null, "componentDidMount", "componentDidMount", 955710936), new cljs.core.Keyword(null, "getDisplayName", "getDisplayName", 1324429466), new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619)], [function(prev_props, prev_state) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__14658 = c;
    if (G__14658) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14658.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__14658.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__14658);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__14658);
    }
  }()) {
    var state_14679 = this$.state;
    om.core.did_update.call(null, c, om.core.get_props.call(null, {"props":prev_props, "isOmComponent":true}), function() {
      var or__4307__auto__ = state_14679["__om_prev_state"];
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return state_14679["__om_state"];
      }
    }());
  } else {
  }
  return this$.state["__om_prev_state"] = null;
}, true, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var cursor = this$.props["__om_cursor"];
  if (function() {
    var G__14659 = c;
    if (G__14659) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14659.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__14659.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__14659);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__14659);
    }
  }()) {
    om.core.will_unmount.call(null, c);
  } else {
  }
  var temp__4423__auto__ = cljs.core.seq.call(null, this$.state["__om_refs"]);
  if (temp__4423__auto__) {
    var refs = temp__4423__auto__;
    var seq__14660 = cljs.core.seq.call(null, refs);
    var chunk__14661 = null;
    var count__14662 = 0;
    var i__14663 = 0;
    while (true) {
      if (i__14663 < count__14662) {
        var ref = cljs.core._nth.call(null, chunk__14661, i__14663);
        om.core.unobserve.call(null, this$, ref);
        var G__14680 = seq__14660;
        var G__14681 = chunk__14661;
        var G__14682 = count__14662;
        var G__14683 = i__14663 + 1;
        seq__14660 = G__14680;
        chunk__14661 = G__14681;
        count__14662 = G__14682;
        i__14663 = G__14683;
        continue;
      } else {
        var temp__4423__auto____$1 = cljs.core.seq.call(null, seq__14660);
        if (temp__4423__auto____$1) {
          var seq__14660__$1 = temp__4423__auto____$1;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14660__$1)) {
            var c__5092__auto__ = cljs.core.chunk_first.call(null, seq__14660__$1);
            var G__14684 = cljs.core.chunk_rest.call(null, seq__14660__$1);
            var G__14685 = c__5092__auto__;
            var G__14686 = cljs.core.count.call(null, c__5092__auto__);
            var G__14687 = 0;
            seq__14660 = G__14684;
            chunk__14661 = G__14685;
            count__14662 = G__14686;
            i__14663 = G__14687;
            continue;
          } else {
            var ref = cljs.core.first.call(null, seq__14660__$1);
            om.core.unobserve.call(null, this$, ref);
            var G__14688 = cljs.core.next.call(null, seq__14660__$1);
            var G__14689 = null;
            var G__14690 = 0;
            var G__14691 = 0;
            seq__14660 = G__14688;
            chunk__14661 = G__14689;
            count__14662 = G__14690;
            i__14663 = G__14691;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } else {
    return null;
  }
}, function(next_props) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__14664 = c;
    if (G__14664) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14664.om$core$IWillReceiveProps$;
        }
      }())) {
        return true;
      } else {
        if (!G__14664.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__14664);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__14664);
    }
  }()) {
    return om.core.will_receive_props.call(null, c, om.core.get_props.call(null, {"props":next_props, "isOmComponent":true}));
  } else {
    return null;
  }
}, function(next_props, next_state) {
  var this$ = this;
  var props = this$.props;
  var state = this$.state;
  var c = om.core.children.call(null, this$);
  om.core.merge_props_state.call(null, this$, next_props);
  if (function() {
    var G__14665 = c;
    if (G__14665) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14665.om$core$IShouldUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__14665.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__14665);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__14665);
    }
  }()) {
    return om.core.should_update.call(null, c, om.core.get_props.call(null, {"props":next_props, "isOmComponent":true}), om.core._get_state.call(null, this$));
  } else {
    var cursor = props["__om_cursor"];
    var next_cursor = next_props["__om_cursor"];
    if (cljs.core.not_EQ_.call(null, om.core._value.call(null, cursor), om.core._value.call(null, next_cursor))) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var and__4295__auto__ = om.core.cursor_QMARK_.call(null, cursor);
        if (cljs.core.truth_(and__4295__auto__)) {
          var and__4295__auto____$1 = om.core.cursor_QMARK_.call(null, next_cursor);
          if (cljs.core.truth_(and__4295__auto____$1)) {
            return cljs.core.not_EQ_.call(null, om.core._path.call(null, cursor), om.core._path.call(null, next_cursor));
          } else {
            return and__4295__auto____$1;
          }
        } else {
          return and__4295__auto__;
        }
      }())) {
        return true;
      } else {
        if (cljs.core.not_EQ_.call(null, om.core._get_state.call(null, this$), om.core._get_render_state.call(null, this$))) {
          return true;
        } else {
          if (cljs.core.truth_(function() {
            var and__4295__auto__ = !(cljs.core.count.call(null, state["__om_refs"]) === 0);
            if (and__4295__auto__) {
              return cljs.core.some.call(null, function(and__4295__auto__, cursor, next_cursor, props, state, c, this$) {
                return function(p1__14657_SHARP_) {
                  return om.core.ref_changed_QMARK_.call(null, p1__14657_SHARP_);
                };
              }(and__4295__auto__, cursor, next_cursor, props, state, c, this$), state["__om_refs"]);
            } else {
              return and__4295__auto__;
            }
          }())) {
            return true;
          } else {
            if (!(props["__om_index"] === next_props["__om_index"])) {
              return true;
            } else {
              return false;
            }
          }
        }
      }
    }
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var _STAR_parent_STAR_14666 = om.core._STAR_parent_STAR_;
  var _STAR_state_STAR_14667 = om.core._STAR_state_STAR_;
  var _STAR_instrument_STAR_14668 = om.core._STAR_instrument_STAR_;
  var _STAR_descriptor_STAR_14669 = om.core._STAR_descriptor_STAR_;
  var _STAR_root_key_STAR_14670 = om.core._STAR_root_key_STAR_;
  om.core._STAR_parent_STAR_ = this$;
  om.core._STAR_state_STAR_ = props["__om_app_state"];
  om.core._STAR_instrument_STAR_ = props["__om_instrument"];
  om.core._STAR_descriptor_STAR_ = props["__om_descriptor"];
  om.core._STAR_root_key_STAR_ = props["__om_root_key"];
  try {
    if (function() {
      var G__14671 = c;
      if (G__14671) {
        var bit__4981__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4307__auto__ = bit__4981__auto__;
          if (cljs.core.truth_(or__4307__auto__)) {
            return or__4307__auto__;
          } else {
            return G__14671.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__14671.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__14671);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__14671);
      }
    }()) {
      return om.core.render.call(null, c);
    } else {
      if (function() {
        var G__14672 = c;
        if (G__14672) {
          var bit__4981__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4307__auto__ = bit__4981__auto__;
            if (cljs.core.truth_(or__4307__auto__)) {
              return or__4307__auto__;
            } else {
              return G__14672.om$core$IRenderProps$;
            }
          }())) {
            return true;
          } else {
            if (!G__14672.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__14672);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__14672);
        }
      }()) {
        return om.core.render_props.call(null, c, props["__om_cursor"], om.core.get_state.call(null, this$));
      } else {
        if (function() {
          var G__14673 = c;
          if (G__14673) {
            var bit__4981__auto__ = null;
            if (cljs.core.truth_(function() {
              var or__4307__auto__ = bit__4981__auto__;
              if (cljs.core.truth_(or__4307__auto__)) {
                return or__4307__auto__;
              } else {
                return G__14673.om$core$IRenderState$;
              }
            }())) {
              return true;
            } else {
              if (!G__14673.cljs$lang$protocol_mask$partition$) {
                return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__14673);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__14673);
          }
        }()) {
          return om.core.render_state.call(null, c, om.core.get_state.call(null, this$));
        } else {
          return c;
        }
      }
    }
  } finally {
    om.core._STAR_root_key_STAR_ = _STAR_root_key_STAR_14670;
    om.core._STAR_descriptor_STAR_ = _STAR_descriptor_STAR_14669;
    om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_14668;
    om.core._STAR_state_STAR_ = _STAR_state_STAR_14667;
    om.core._STAR_parent_STAR_ = _STAR_parent_STAR_14666;
  }
}, function(next_props, next_state) {
  var this$ = this;
  var c_14692 = om.core.children.call(null, this$);
  if (function() {
    var G__14674 = c_14692;
    if (G__14674) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14674.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__14674.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__14674);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__14674);
    }
  }()) {
    var state_14693 = this$.state;
    om.core.will_update.call(null, c_14692, om.core.get_props.call(null, {"props":next_props, "isOmComponent":true}), om.core._get_state.call(null, this$));
  } else {
  }
  om.core.merge_pending_state.call(null, this$);
  return om.core.update_refs.call(null, this$);
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__4307__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var id = (new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)).cljs$core$IFn$_invoke$arity$1(istate);
  var ret = {"__om_id":function() {
    var or__4307__auto__ = id;
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return goog.ui.IdGenerator.getInstance().getNextUniqueId();
    }
  }(), "__om_state":cljs.core.merge.call(null, function() {
    var G__14675 = c;
    if (G__14675) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14675.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__14675.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__14675);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__14675);
    }
  }() ? om.core.init_state.call(null, c) : null, cljs.core.dissoc.call(null, istate, new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)))};
  props["__om_init_state"] = null;
  return ret;
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var cursor = this$.props["__om_cursor"];
  if (function() {
    var G__14676 = c;
    if (G__14676) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14676.om$core$IDidMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__14676.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__14676);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__14676);
    }
  }()) {
    return om.core.did_mount.call(null, c);
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__14677 = c;
    if (G__14677) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14677.om$core$IDisplayName$;
        }
      }())) {
        return true;
      } else {
        if (!G__14677.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__14677);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__14677);
    }
  }()) {
    return om.core.display_name.call(null, c);
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_14694 = om.core.children.call(null, this$);
  if (function() {
    var G__14678 = c_14694;
    if (G__14678) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14678.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__14678.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__14678);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__14678);
    }
  }()) {
    om.core.will_mount.call(null, c_14694);
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}]);
om.core.specify_state_methods_BANG_ = function om$core$specify_state_methods_BANG_(obj) {
  var x14696 = obj;
  x14696.om$core$ISetState$ = true;
  x14696.om$core$ISetState$_set_state_BANG_$arity$3 = function(x14696) {
    return function(this$, val, render) {
      var this$__$1 = this;
      var props = this$__$1.props;
      var app_state = props["__om_app_state"];
      this$__$1.state["__om_pending_state"] = val;
      if (cljs.core.truth_(function() {
        var and__4295__auto__ = !(app_state == null);
        if (and__4295__auto__) {
          return render;
        } else {
          return and__4295__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
      } else {
        return null;
      }
    };
  }(x14696);
  x14696.om$core$ISetState$_set_state_BANG_$arity$4 = function(x14696) {
    return function(this$, ks, val, render) {
      var this$__$1 = this;
      var props = this$__$1.props;
      var state = this$__$1.state;
      var pstate = om.core._get_state.call(null, this$__$1);
      var app_state = props["__om_app_state"];
      state["__om_pending_state"] = cljs.core.assoc_in.call(null, pstate, ks, val);
      if (cljs.core.truth_(function() {
        var and__4295__auto__ = !(app_state == null);
        if (and__4295__auto__) {
          return render;
        } else {
          return and__4295__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
      } else {
        return null;
      }
    };
  }(x14696);
  x14696.om$core$IGetRenderState$ = true;
  x14696.om$core$IGetRenderState$_get_render_state$arity$1 = function(x14696) {
    return function(this$) {
      var this$__$1 = this;
      return this$__$1.state["__om_state"];
    };
  }(x14696);
  x14696.om$core$IGetRenderState$_get_render_state$arity$2 = function(x14696) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_render_state.call(null, this$__$1), ks);
    };
  }(x14696);
  x14696.om$core$IGetState$ = true;
  x14696.om$core$IGetState$_get_state$arity$1 = function(x14696) {
    return function(this$) {
      var this$__$1 = this;
      var state = this$__$1.state;
      var or__4307__auto__ = state["__om_pending_state"];
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return state["__om_state"];
      }
    };
  }(x14696);
  x14696.om$core$IGetState$_get_state$arity$2 = function(x14696) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_state.call(null, this$__$1), ks);
    };
  }(x14696);
  return x14696;
};
om.core.pure_descriptor = om.core.specify_state_methods_BANG_.call(null, cljs.core.clj__GT_js.call(null, om.core.pure_methods));
om.core.react_id = function om$core$react_id(x) {
  var id = x["_rootNodeID"];
  if (cljs.core.truth_(id)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "id", "id", 252129435, null)))].join(""));
  }
  return id;
};
om.core.get_gstate = function om$core$get_gstate(owner) {
  return owner.props["__om_app_state"];
};
om.core.no_local_merge_pending_state = function om$core$no_local_merge_pending_state(owner) {
  var gstate = om.core.get_gstate.call(null, owner);
  var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, owner)], null);
  var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, gstate), spath);
  if (cljs.core.truth_((new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states))) {
    return cljs.core.swap_BANG_.call(null, gstate, cljs.core.update_in, spath, function(gstate, spath, states) {
      return function(states__$1) {
        return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, states__$1, new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923), (new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states__$1)), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270), cljs.core.merge.call(null, (new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states__$1), 
        (new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states__$1))), new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973));
      };
    }(gstate, spath, states));
  } else {
    return null;
  }
};
om.core.no_local_state_methods = cljs.core.assoc.call(null, om.core.pure_methods, new cljs.core.Keyword(null, "getInitialState", "getInitialState", 1541760916), function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__4307__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var om_id = function() {
    var or__4307__auto__ = (new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)).cljs$core$IFn$_invoke$arity$1(istate);
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return goog.ui.IdGenerator.getInstance().getNextUniqueId();
    }
  }();
  var state = cljs.core.merge.call(null, cljs.core.dissoc.call(null, istate, new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)), function() {
    var G__14697 = c;
    if (G__14697) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14697.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__14697.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__14697);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__14697);
    }
  }() ? om.core.init_state.call(null, c) : null);
  var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)], null);
  props["__om_init_state"] = null;
  cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$), cljs.core.assoc_in, spath, state);
  return {"__om_id":om_id};
}, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_14706 = om.core.children.call(null, this$);
  if (function() {
    var G__14698 = c_14706;
    if (G__14698) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14698.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__14698.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__14698);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__14698);
    }
  }()) {
    om.core.will_mount.call(null, c_14706);
  } else {
  }
  return om.core.no_local_merge_pending_state.call(null, this$);
}, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__14699 = c;
    if (G__14699) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14699.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__14699.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__14699);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__14699);
    }
  }()) {
    om.core.will_unmount.call(null, c);
  } else {
  }
  cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128)], null), cljs.core.dissoc, om.core.react_id.call(null, this$));
  var temp__4423__auto__ = cljs.core.seq.call(null, this$.state["__om_refs"]);
  if (temp__4423__auto__) {
    var refs = temp__4423__auto__;
    var seq__14700 = cljs.core.seq.call(null, refs);
    var chunk__14701 = null;
    var count__14702 = 0;
    var i__14703 = 0;
    while (true) {
      if (i__14703 < count__14702) {
        var ref = cljs.core._nth.call(null, chunk__14701, i__14703);
        om.core.unobserve.call(null, this$, ref);
        var G__14707 = seq__14700;
        var G__14708 = chunk__14701;
        var G__14709 = count__14702;
        var G__14710 = i__14703 + 1;
        seq__14700 = G__14707;
        chunk__14701 = G__14708;
        count__14702 = G__14709;
        i__14703 = G__14710;
        continue;
      } else {
        var temp__4423__auto____$1 = cljs.core.seq.call(null, seq__14700);
        if (temp__4423__auto____$1) {
          var seq__14700__$1 = temp__4423__auto____$1;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14700__$1)) {
            var c__5092__auto__ = cljs.core.chunk_first.call(null, seq__14700__$1);
            var G__14711 = cljs.core.chunk_rest.call(null, seq__14700__$1);
            var G__14712 = c__5092__auto__;
            var G__14713 = cljs.core.count.call(null, c__5092__auto__);
            var G__14714 = 0;
            seq__14700 = G__14711;
            chunk__14701 = G__14712;
            count__14702 = G__14713;
            i__14703 = G__14714;
            continue;
          } else {
            var ref = cljs.core.first.call(null, seq__14700__$1);
            om.core.unobserve.call(null, this$, ref);
            var G__14715 = cljs.core.next.call(null, seq__14700__$1);
            var G__14716 = null;
            var G__14717 = 0;
            var G__14718 = 0;
            seq__14700 = G__14715;
            chunk__14701 = G__14716;
            count__14702 = G__14717;
            i__14703 = G__14718;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } else {
    return null;
  }
}, new cljs.core.Keyword(null, "componentWillUpdate", "componentWillUpdate", 657390932), function(next_props, next_state) {
  var this$ = this;
  var props_14719 = this$.props;
  var c_14720 = om.core.children.call(null, this$);
  if (function() {
    var G__14704 = c_14720;
    if (G__14704) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14704.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__14704.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__14704);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__14704);
    }
  }()) {
    var state_14721 = this$.state;
    om.core.will_update.call(null, c_14720, om.core.get_props.call(null, {"props":next_props, "isOmComponent":true}), om.core._get_state.call(null, this$));
  } else {
  }
  om.core.no_local_merge_pending_state.call(null, this$);
  return om.core.update_refs.call(null, this$);
}, new cljs.core.Keyword(null, "componentDidUpdate", "componentDidUpdate", -1983477981), function(prev_props, prev_state) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var gstate = om.core.get_gstate.call(null, this$);
  var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, gstate), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$)], null));
  var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$)], null);
  if (function() {
    var G__14705 = c;
    if (G__14705) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14705.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__14705.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__14705);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__14705);
    }
  }()) {
    var state_14722 = this$.state;
    om.core.did_update.call(null, c, om.core.get_props.call(null, {"props":prev_props, "isOmComponent":true}), function() {
      var or__4307__auto__ = (new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923)).cljs$core$IFn$_invoke$arity$1(states);
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return (new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states);
      }
    }());
  } else {
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923)).cljs$core$IFn$_invoke$arity$1(states))) {
    return cljs.core.swap_BANG_.call(null, gstate, cljs.core.update_in, spath, cljs.core.dissoc, new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923));
  } else {
    return null;
  }
});
om.core.no_local_descriptor = function om$core$no_local_descriptor(methods$) {
  var x14724 = cljs.core.clj__GT_js.call(null, methods$);
  x14724.om$core$ISetState$ = true;
  x14724.om$core$ISetState$_set_state_BANG_$arity$3 = function(x14724) {
    return function(this$, val, render) {
      var this$__$1 = this;
      var gstate = om.core.get_gstate.call(null, this$__$1);
      var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1), new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)], null);
      cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$__$1), cljs.core.assoc_in, spath, val);
      if (cljs.core.truth_(function() {
        var and__4295__auto__ = !(gstate == null);
        if (and__4295__auto__) {
          return render;
        } else {
          return and__4295__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, gstate, this$__$1);
      } else {
        return null;
      }
    };
  }(x14724);
  x14724.om$core$ISetState$_set_state_BANG_$arity$4 = function(x14724) {
    return function(this$, ks, val, render) {
      var this$__$1 = this;
      return om.core._set_state_BANG_.call(null, this$__$1, cljs.core.assoc_in.call(null, om.core._get_state.call(null, this$__$1), ks, val), render);
    };
  }(x14724);
  x14724.om$core$IGetRenderState$ = true;
  x14724.om$core$IGetRenderState$_get_render_state$arity$1 = function(x14724) {
    return function(this$) {
      var this$__$1 = this;
      var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)], null);
      return cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.get_gstate.call(null, this$__$1)), spath);
    };
  }(x14724);
  x14724.om$core$IGetRenderState$_get_render_state$arity$2 = function(x14724) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_render_state.call(null, this$__$1), ks);
    };
  }(x14724);
  x14724.om$core$IGetState$ = true;
  x14724.om$core$IGetState$_get_state$arity$1 = function(x14724) {
    return function(this$) {
      var this$__$1 = this;
      var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1)], null);
      var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.get_gstate.call(null, this$__$1)), spath);
      var or__4307__auto__ = (new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states);
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return (new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states);
      }
    };
  }(x14724);
  x14724.om$core$IGetState$_get_state$arity$2 = function(x14724) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_state.call(null, this$__$1), ks);
    };
  }(x14724);
  return x14724;
};
om.core.valid_QMARK_ = function om$core$valid_QMARK_(x) {
  if (function() {
    var G__14726 = x;
    if (G__14726) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14726.om$core$ICursor$;
        }
      }())) {
        return true;
      } else {
        if (!G__14726.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__14726);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__14726);
    }
  }()) {
    return !cljs.core.keyword_identical_QMARK_.call(null, cljs.core.deref.call(null, x), new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
  } else {
    return true;
  }
};
om.core.MapCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2163640079;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.call(null, this$__$1, k, null);
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var v = cljs.core._lookup.call(null, self__.value, k, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
  if (!cljs.core._EQ_.call(null, v, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275))) {
    return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k));
  } else {
    return not_found;
  }
};
om.core.MapCursor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._kv_reduce.call(null, self__.value, f, init);
};
om.core.MapCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._pr_writer.call(null, self__.value, writer, opts);
};
om.core.MapCursor.prototype.om$core$ICursor$ = true;
om.core.MapCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.MapCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.MapCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.meta.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(self__.value, self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._count.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, other))) {
    return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
  } else {
    return cljs.core._EQ_.call(null, self__.value, other);
  }
};
om.core.MapCursor.prototype.om$core$IValue$ = true;
om.core.MapCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.MapCursor.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core.empty.call(null, self__.value), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._dissoc.call(null, self__.value, k), self__.state, self__.path);
};
om.core.MapCursor.prototype.om$core$ITransact$ = true;
om.core.MapCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(_, k, v) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._assoc.call(null, self__.value, k, v), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.value) > 0) {
    return cljs.core.map.call(null, function(this$__$1) {
      return function(p__14728) {
        var vec__14729 = p__14728;
        var k = cljs.core.nth.call(null, vec__14729, 0, null);
        var v = cljs.core.nth.call(null, vec__14729, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k))], null);
      };
    }(this$__$1), self__.value);
  } else {
    return null;
  }
};
om.core.MapCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
};
om.core.MapCursor.prototype.call = function() {
  var G__14730 = null;
  var G__14730__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__14730__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__14730 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14730__2.call(this, self__, k);
      case 3:
        return G__14730__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14730.cljs$core$IFn$_invoke$arity$2 = G__14730__2;
  G__14730.cljs$core$IFn$_invoke$arity$3 = G__14730__3;
  return G__14730;
}();
om.core.MapCursor.prototype.apply = function(self__, args14727) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14727)));
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
om.core.MapCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
};
om.core.MapCursor.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "path", "path", 1452340359, null)], null);
};
om.core.MapCursor.cljs$lang$type = true;
om.core.MapCursor.cljs$lang$ctorStr = "om.core/MapCursor";
om.core.MapCursor.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "om.core/MapCursor");
};
om.core.__GT_MapCursor = function om$core$__GT_MapCursor(value, state, path) {
  return new om.core.MapCursor(value, state, path);
};
om.core.IndexedCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2180424479;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, n, null);
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, n, not_found);
};
om.core.IndexedCursor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._kv_reduce.call(null, self__.value, f, init);
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n));
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (n < cljs.core._count.call(null, self__.value)) {
    return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n, not_found), self__.state, cljs.core.conj.call(null, self__.path, n));
  } else {
    return not_found;
  }
};
om.core.IndexedCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._pr_writer.call(null, self__.value, writer, opts);
};
om.core.IndexedCursor.prototype.om$core$ICursor$ = true;
om.core.IndexedCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.IndexedCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.IndexedCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.meta.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(self__.value, self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._count.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_peek$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._peek.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_pop$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._pop.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, other))) {
    return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
  } else {
    return cljs.core._EQ_.call(null, self__.value, other);
  }
};
om.core.IndexedCursor.prototype.om$core$IValue$ = true;
om.core.IndexedCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.IndexedCursor.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core.empty.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.om$core$ITransact$ = true;
om.core.IndexedCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this$, n, v) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._assoc_n.call(null, self__.value, n, v), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.value) > 0) {
    return cljs.core.map.call(null, function(this$__$1) {
      return function(v, i) {
        return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, i));
      };
    }(this$__$1), self__.value, cljs.core.range.call(null));
  } else {
    return null;
  }
};
om.core.IndexedCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.call = function() {
  var G__14732 = null;
  var G__14732__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__14732__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__14732 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14732__2.call(this, self__, k);
      case 3:
        return G__14732__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14732.cljs$core$IFn$_invoke$arity$2 = G__14732__2;
  G__14732.cljs$core$IFn$_invoke$arity$3 = G__14732__3;
  return G__14732;
}();
om.core.IndexedCursor.prototype.apply = function(self__, args14731) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14731)));
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
om.core.IndexedCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
};
om.core.IndexedCursor.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "path", "path", 1452340359, null)], null);
};
om.core.IndexedCursor.cljs$lang$type = true;
om.core.IndexedCursor.cljs$lang$ctorStr = "om.core/IndexedCursor";
om.core.IndexedCursor.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
  return cljs.core._write.call(null, writer__4887__auto__, "om.core/IndexedCursor");
};
om.core.__GT_IndexedCursor = function om$core$__GT_IndexedCursor(value, state, path) {
  return new om.core.IndexedCursor(value, state, path);
};
om.core.to_cursor_STAR_ = function om$core$to_cursor_STAR_(val, state, path) {
  var x14734 = cljs.core.clone.call(null, val);
  x14734.cljs$core$IDeref$ = true;
  x14734.cljs$core$IDeref$_deref$arity$1 = function(x14734) {
    return function(this$) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
    };
  }(x14734);
  x14734.om$core$ICursor$ = true;
  x14734.om$core$ICursor$_path$arity$1 = function(x14734) {
    return function(_) {
      var ___$1 = this;
      return path;
    };
  }(x14734);
  x14734.om$core$ICursor$_state$arity$1 = function(x14734) {
    return function(_) {
      var ___$1 = this;
      return state;
    };
  }(x14734);
  x14734.om$core$ITransact$ = true;
  x14734.om$core$ITransact$_transact_BANG_$arity$4 = function(x14734) {
    return function(this$, korks, f, tag) {
      var this$__$1 = this;
      return om.core.transact_STAR_.call(null, state, this$__$1, korks, f, tag);
    };
  }(x14734);
  x14734.cljs$core$IEquiv$ = true;
  x14734.cljs$core$IEquiv$_equiv$arity$2 = function(x14734) {
    return function(_, other) {
      var ___$1 = this;
      if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, other))) {
        return cljs.core._EQ_.call(null, val, om.core._value.call(null, other));
      } else {
        return cljs.core._EQ_.call(null, val, other);
      }
    };
  }(x14734);
  return x14734;
};
om.core.to_cursor = function om$core$to_cursor() {
  var G__14736 = arguments.length;
  switch(G__14736) {
    case 1:
      return om.core.to_cursor.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.to_cursor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.to_cursor.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.to_cursor.cljs$core$IFn$_invoke$arity$1 = function(val) {
  return om.core.to_cursor.call(null, val, null, cljs.core.PersistentVector.EMPTY);
};
om.core.to_cursor.cljs$core$IFn$_invoke$arity$2 = function(val, state) {
  return om.core.to_cursor.call(null, val, state, cljs.core.PersistentVector.EMPTY);
};
om.core.to_cursor.cljs$core$IFn$_invoke$arity$3 = function(val, state, path) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, val))) {
    return val;
  } else {
    if (function() {
      var G__14737 = val;
      if (G__14737) {
        var bit__4981__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4307__auto__ = bit__4981__auto__;
          if (cljs.core.truth_(or__4307__auto__)) {
            return or__4307__auto__;
          } else {
            return G__14737.om$core$IToCursor$;
          }
        }())) {
          return true;
        } else {
          if (!G__14737.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__14737);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__14737);
      }
    }()) {
      return om.core._to_cursor.call(null, val, state, path);
    } else {
      if (cljs.core.indexed_QMARK_.call(null, val)) {
        return new om.core.IndexedCursor(val, state, path);
      } else {
        if (cljs.core.map_QMARK_.call(null, val)) {
          return new om.core.MapCursor(val, state, path);
        } else {
          if (function() {
            var G__14738 = val;
            if (G__14738) {
              var bit__4981__auto__ = G__14738.cljs$lang$protocol_mask$partition1$ & 8192;
              if (bit__4981__auto__ || G__14738.cljs$core$ICloneable$) {
                return true;
              } else {
                if (!G__14738.cljs$lang$protocol_mask$partition1$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__14738);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__14738);
            }
          }()) {
            return om.core.to_cursor_STAR_.call(null, val, state, path);
          } else {
            return val;
          }
        }
      }
    }
  }
};
om.core.to_cursor.cljs$lang$maxFixedArity = 3;
om.core.notify_STAR_ = function om$core$notify_STAR_(cursor, tx_data) {
  var state = om.core._state.call(null, cursor);
  return om.core._notify_BANG_.call(null, state, tx_data, om.core.to_cursor.call(null, cljs.core.deref.call(null, state), state));
};
om.core.root_cursor = function om$core$root_cursor(atom) {
  if (function() {
    var G__14741 = atom;
    if (G__14741) {
      var bit__4981__auto__ = G__14741.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__4981__auto__ || G__14741.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__14741.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__14741);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__14741);
    }
  }()) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "atom", "atom", 1243487874, null))))].join(""));
  }
  return om.core.to_cursor.call(null, cljs.core.deref.call(null, atom), atom, cljs.core.PersistentVector.EMPTY);
};
om.core._refs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.ref_sub_cursor = function om$core$ref_sub_cursor(x, parent) {
  var x14743 = cljs.core.clone.call(null, x);
  x14743.cljs$core$ICloneable$ = true;
  x14743.cljs$core$ICloneable$_clone$arity$1 = function(x14743) {
    return function(this$) {
      var this$__$1 = this;
      return om$core$ref_sub_cursor.call(null, cljs.core.clone.call(null, x), parent);
    };
  }(x14743);
  x14743.om$core$IAdapt$ = true;
  x14743.om$core$IAdapt$_adapt$arity$2 = function(x14743) {
    return function(this$, other) {
      var this$__$1 = this;
      return om$core$ref_sub_cursor.call(null, om.core.adapt.call(null, x, other), parent);
    };
  }(x14743);
  x14743.om$core$ICursorDerive$ = true;
  x14743.om$core$ICursorDerive$_derive$arity$4 = function(x14743) {
    return function(this$, derived, state, path) {
      var this$__$1 = this;
      var cursor_SINGLEQUOTE_ = om.core.to_cursor.call(null, derived, state, path);
      if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor_SINGLEQUOTE_))) {
        return om.core.adapt.call(null, this$__$1, cursor_SINGLEQUOTE_);
      } else {
        return cursor_SINGLEQUOTE_;
      }
    };
  }(x14743);
  x14743.om$core$ITransact$ = true;
  x14743.om$core$ITransact$_transact_BANG_$arity$4 = function(x14743) {
    return function(cursor, korks, f, tag) {
      var cursor__$1 = this;
      om.core.commit_BANG_.call(null, cursor__$1, korks, f);
      return om.core._refresh_deps_BANG_.call(null, parent);
    };
  }(x14743);
  return x14743;
};
om.core.ref_cursor = function om$core$ref_cursor(cursor) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  if (function() {
    var G__14750 = cursor;
    if (G__14750) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14750.om$core$IOmRef$;
        }
      }())) {
        return true;
      } else {
        if (!G__14750.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmRef, G__14750);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmRef, G__14750);
    }
  }()) {
    return cursor;
  } else {
    var path = om.core.path.call(null, cursor);
    var storage = cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, om.core._refs, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null), cljs.core.fnil.call(null, cljs.core.identity, cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY))), path);
    var x14751 = cljs.core.clone.call(null, cursor);
    x14751.om$core$ICursorDerive$ = true;
    x14751.om$core$ICursorDerive$_derive$arity$4 = function(x14751, path, storage) {
      return function(this$, derived, state, path__$1) {
        var this$__$1 = this;
        var cursor_SINGLEQUOTE_ = om.core.to_cursor.call(null, derived, state, path__$1);
        if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor_SINGLEQUOTE_))) {
          return om.core.ref_sub_cursor.call(null, cursor_SINGLEQUOTE_, this$__$1);
        } else {
          return cursor_SINGLEQUOTE_;
        }
      };
    }(x14751, path, storage);
    x14751.om$core$IOmRef$ = true;
    x14751.om$core$IOmRef$_add_dep_BANG_$arity$2 = function(x14751, path, storage) {
      return function(_, c) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, storage, cljs.core.assoc, om.core.id.call(null, c), c);
      };
    }(x14751, path, storage);
    x14751.om$core$IOmRef$_remove_dep_BANG_$arity$2 = function(x14751, path, storage) {
      return function(_, c) {
        var ___$1 = this;
        var m = cljs.core.swap_BANG_.call(null, storage, cljs.core.dissoc, om.core.id.call(null, c));
        if (cljs.core.count.call(null, m) === 0) {
          return cljs.core.swap_BANG_.call(null, om.core._refs, cljs.core.dissoc, path);
        } else {
          return null;
        }
      };
    }(x14751, path, storage);
    x14751.om$core$IOmRef$_refresh_deps_BANG_$arity$1 = function(x14751, path, storage) {
      return function(_) {
        var ___$1 = this;
        var seq__14752 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, storage)));
        var chunk__14753 = null;
        var count__14754 = 0;
        var i__14755 = 0;
        while (true) {
          if (i__14755 < count__14754) {
            var c = cljs.core._nth.call(null, chunk__14753, i__14755);
            om.core._queue_render_BANG_.call(null, om.core.state.call(null, cursor), c);
            var G__14756 = seq__14752;
            var G__14757 = chunk__14753;
            var G__14758 = count__14754;
            var G__14759 = i__14755 + 1;
            seq__14752 = G__14756;
            chunk__14753 = G__14757;
            count__14754 = G__14758;
            i__14755 = G__14759;
            continue;
          } else {
            var temp__4423__auto__ = cljs.core.seq.call(null, seq__14752);
            if (temp__4423__auto__) {
              var seq__14752__$1 = temp__4423__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__14752__$1)) {
                var c__5092__auto__ = cljs.core.chunk_first.call(null, seq__14752__$1);
                var G__14760 = cljs.core.chunk_rest.call(null, seq__14752__$1);
                var G__14761 = c__5092__auto__;
                var G__14762 = cljs.core.count.call(null, c__5092__auto__);
                var G__14763 = 0;
                seq__14752 = G__14760;
                chunk__14753 = G__14761;
                count__14754 = G__14762;
                i__14755 = G__14763;
                continue;
              } else {
                var c = cljs.core.first.call(null, seq__14752__$1);
                om.core._queue_render_BANG_.call(null, om.core.state.call(null, cursor), c);
                var G__14764 = cljs.core.next.call(null, seq__14752__$1);
                var G__14765 = null;
                var G__14766 = 0;
                var G__14767 = 0;
                seq__14752 = G__14764;
                chunk__14753 = G__14765;
                count__14754 = G__14766;
                i__14755 = G__14767;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(x14751, path, storage);
    x14751.om$core$IOmRef$_get_deps$arity$1 = function(x14751, path, storage) {
      return function(_) {
        var ___$1 = this;
        return cljs.core.deref.call(null, storage);
      };
    }(x14751, path, storage);
    x14751.om$core$ITransact$ = true;
    x14751.om$core$ITransact$_transact_BANG_$arity$4 = function(x14751, path, storage) {
      return function(cursor__$1, korks, f, tag) {
        var cursor__$2 = this;
        om.core.commit_BANG_.call(null, cursor__$2, korks, f);
        return om.core._refresh_deps_BANG_.call(null, cursor__$2);
      };
    }(x14751, path, storage);
    return x14751;
  }
};
om.core.add_ref_to_component_BANG_ = function om$core$add_ref_to_component_BANG_(c, ref) {
  var state = c.state;
  var refs = function() {
    var or__4307__auto__ = state["__om_refs"];
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return cljs.core.PersistentHashSet.EMPTY;
    }
  }();
  if (cljs.core.contains_QMARK_.call(null, refs, ref)) {
    return null;
  } else {
    return state["__om_refs"] = cljs.core.conj.call(null, refs, ref);
  }
};
om.core.remove_ref_from_component_BANG_ = function om$core$remove_ref_from_component_BANG_(c, ref) {
  var state = c.state;
  var refs = state["__om_refs"];
  if (cljs.core.contains_QMARK_.call(null, refs, ref)) {
    return state["__om_refs"] = cljs.core.disj.call(null, refs, ref);
  } else {
    return null;
  }
};
om.core.observe = function om$core$observe(c, ref) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, c))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "c", "c", -122660552, null))))].join(""));
  }
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, ref))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "ref", "ref", -1364538802, null))))].join(""));
  }
  om.core.add_ref_to_component_BANG_.call(null, c, ref);
  om.core._add_dep_BANG_.call(null, ref, c);
  return ref;
};
om.core.unobserve = function om$core$unobserve(c, ref) {
  om.core.remove_ref_from_component_BANG_.call(null, c, ref);
  om.core._remove_dep_BANG_.call(null, ref, c);
  return ref;
};
om.core.refresh_queued = false;
om.core.refresh_set = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
om.core.get_renderT = function om$core$get_renderT(state) {
  var or__4307__auto__ = state.om$render$T;
  if (cljs.core.truth_(or__4307__auto__)) {
    return or__4307__auto__;
  } else {
    return 0;
  }
};
om.core.render_all = function om$core$render_all() {
  var G__14769 = arguments.length;
  switch(G__14769) {
    case 0:
      return om.core.render_all.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return om.core.render_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.render_all.cljs$core$IFn$_invoke$arity$0 = function() {
  return om.core.render_all.call(null, null);
};
om.core.render_all.cljs$core$IFn$_invoke$arity$1 = function(state) {
  om.core.refresh_queued = false;
  var seq__14770_14775 = cljs.core.seq.call(null, cljs.core.deref.call(null, om.core.refresh_set));
  var chunk__14771_14776 = null;
  var count__14772_14777 = 0;
  var i__14773_14778 = 0;
  while (true) {
    if (i__14773_14778 < count__14772_14777) {
      var f_14779 = cljs.core._nth.call(null, chunk__14771_14776, i__14773_14778);
      f_14779.call(null);
      var G__14780 = seq__14770_14775;
      var G__14781 = chunk__14771_14776;
      var G__14782 = count__14772_14777;
      var G__14783 = i__14773_14778 + 1;
      seq__14770_14775 = G__14780;
      chunk__14771_14776 = G__14781;
      count__14772_14777 = G__14782;
      i__14773_14778 = G__14783;
      continue;
    } else {
      var temp__4423__auto___14784 = cljs.core.seq.call(null, seq__14770_14775);
      if (temp__4423__auto___14784) {
        var seq__14770_14785__$1 = temp__4423__auto___14784;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14770_14785__$1)) {
          var c__5092__auto___14786 = cljs.core.chunk_first.call(null, seq__14770_14785__$1);
          var G__14787 = cljs.core.chunk_rest.call(null, seq__14770_14785__$1);
          var G__14788 = c__5092__auto___14786;
          var G__14789 = cljs.core.count.call(null, c__5092__auto___14786);
          var G__14790 = 0;
          seq__14770_14775 = G__14787;
          chunk__14771_14776 = G__14788;
          count__14772_14777 = G__14789;
          i__14773_14778 = G__14790;
          continue;
        } else {
          var f_14791 = cljs.core.first.call(null, seq__14770_14785__$1);
          f_14791.call(null);
          var G__14792 = cljs.core.next.call(null, seq__14770_14785__$1);
          var G__14793 = null;
          var G__14794 = 0;
          var G__14795 = 0;
          seq__14770_14775 = G__14792;
          chunk__14771_14776 = G__14793;
          count__14772_14777 = G__14794;
          i__14773_14778 = G__14795;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (state == null) {
    return null;
  } else {
    return state.om$render$T = om.core.get_renderT.call(null, state) + 1;
  }
};
om.core.render_all.cljs$lang$maxFixedArity = 1;
om.core.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.valid_component_QMARK_ = function om$core$valid_component_QMARK_(x, f) {
  if (function() {
    var or__4307__auto__ = function() {
      var G__14802 = x;
      if (G__14802) {
        var bit__4981__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4307__auto__ = bit__4981__auto__;
          if (cljs.core.truth_(or__4307__auto__)) {
            return or__4307__auto__;
          } else {
            return G__14802.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__14802.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__14802);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__14802);
      }
    }();
    if (or__4307__auto__) {
      return or__4307__auto__;
    } else {
      var or__4307__auto____$1 = function() {
        var G__14804 = x;
        if (G__14804) {
          var bit__4981__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4307__auto____$1 = bit__4981__auto__;
            if (cljs.core.truth_(or__4307__auto____$1)) {
              return or__4307__auto____$1;
            } else {
              return G__14804.om$core$IRenderProps$;
            }
          }())) {
            return true;
          } else {
            if (!G__14804.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__14804);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__14804);
        }
      }();
      if (or__4307__auto____$1) {
        return or__4307__auto____$1;
      } else {
        var G__14805 = x;
        if (G__14805) {
          var bit__4981__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4307__auto____$2 = bit__4981__auto__;
            if (cljs.core.truth_(or__4307__auto____$2)) {
              return or__4307__auto____$2;
            } else {
              return G__14805.om$core$IRenderState$;
            }
          }())) {
            return true;
          } else {
            if (!G__14805.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__14805);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__14805);
        }
      }
    }
  }()) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid Om component fn, "), cljs.core.str(f.name), cljs.core.str(" does not return valid instance")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRender", "IRender", 590822196, null), new cljs.core.Symbol(null, 
    "x", "x", -555367584, null)), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRenderProps", "IRenderProps", 2115139472, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRenderState", "IRenderState", -897673898, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)))))].join(""));
  }
};
om.core.valid_opts_QMARK_ = function om$core$valid_opts_QMARK_(m) {
  return cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018), null, new cljs.core.Keyword(null, "fn", "fn", -1175266204), null, new cljs.core.Keyword(null, "instrument", "instrument", -960698844), null, new cljs.core.Keyword(null, "react-key", "react-key", 1337881348), null, new cljs.core.Keyword(null, "key", "key", -1516042587), null, new cljs.core.Keyword(null, "init-state", 
  "init-state", 1450863212), null, new cljs.core.Keyword(null, "state", "state", -1988618099), null, new cljs.core.Keyword(null, "key-fn", "key-fn", -636154479), null, new cljs.core.Keyword(null, "opts", "opts", 155075701), null, new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434), null, new cljs.core.Keyword(null, "shared", "shared", -384145993), null], null), null), cljs.core.keys.call(null, m));
};
om.core.id = function om$core$id(owner) {
  return owner.state["__om_id"];
};
om.core.get_descriptor = function om$core$get_descriptor() {
  var G__14807 = arguments.length;
  switch(G__14807) {
    case 1:
      return om.core.get_descriptor.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.get_descriptor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.get_descriptor.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return om.core.get_descriptor.call(null, f, null);
};
om.core.get_descriptor.cljs$core$IFn$_invoke$arity$2 = function(f, descriptor) {
  if (f["om$descriptor"] == null) {
    f["om$descriptor"] = React.createFactory(React.createClass(function() {
      var or__4307__auto__ = descriptor;
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        var or__4307__auto____$1 = om.core._STAR_descriptor_STAR_;
        if (cljs.core.truth_(or__4307__auto____$1)) {
          return or__4307__auto____$1;
        } else {
          return om.core.pure_descriptor;
        }
      }
    }()));
  } else {
  }
  return f["om$descriptor"];
};
om.core.get_descriptor.cljs$lang$maxFixedArity = 2;
om.core.getf = function om$core$getf() {
  var G__14810 = arguments.length;
  switch(G__14810) {
    case 2:
      return om.core.getf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.getf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.getf.cljs$core$IFn$_invoke$arity$2 = function(f, cursor) {
  if (f instanceof cljs.core.MultiFn) {
    var dv = f.dispatch_fn.call(null, cursor, null);
    return cljs.core.get_method.call(null, f, dv);
  } else {
    return f;
  }
};
om.core.getf.cljs$core$IFn$_invoke$arity$3 = function(f, cursor, opts) {
  if (f instanceof cljs.core.MultiFn) {
    var dv = f.dispatch_fn.call(null, cursor, null, opts);
    return cljs.core.get_method.call(null, f, dv);
  } else {
    return f;
  }
};
om.core.getf.cljs$lang$maxFixedArity = 3;
om.core.build_STAR_ = function om$core$build_STAR_() {
  var G__14813 = arguments.length;
  switch(G__14813) {
    case 2:
      return om.core.build_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.build_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.build_STAR_.cljs$core$IFn$_invoke$arity$2 = function(f, cursor) {
  return om.core.build_STAR_.call(null, f, cursor, null);
};
om.core.build_STAR_.cljs$core$IFn$_invoke$arity$3 = function(f, cursor, m) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (m == null || cljs.core.map_QMARK_.call(null, m)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
  }
  if (cljs.core.truth_(om.core.valid_opts_QMARK_.call(null, m))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, "build options contains invalid keys, only :key, :key-fn :react-key, ", ":fn, :init-state, :state, and :opts allowed, given ", cljs.core.interpose.call(null, ", ", cljs.core.keys.call(null, m)))), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-opts?", "valid-opts?", 1000038576, null), new cljs.core.Symbol(null, "m", "m", -1021758608, 
    null))))].join(""));
  }
  if (m == null) {
    var shared = om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
    var ctor = om.core.get_descriptor.call(null, om.core.getf.call(null, f, cursor));
    return ctor.call(null, {"__om_cursor":cursor, "__om_shared":shared, "__om_root_key":om.core._STAR_root_key_STAR_, "__om_app_state":om.core._STAR_state_STAR_, "__om_descriptor":om.core._STAR_descriptor_STAR_, "__om_instrument":om.core._STAR_instrument_STAR_, "children":function(shared, ctor) {
      return function(this$) {
        var ret = f.call(null, cursor, this$);
        om.core.valid_component_QMARK_.call(null, ret, f);
        return ret;
      };
    }(shared, ctor)});
  } else {
    var map__14814 = m;
    var map__14814__$1 = cljs.core.seq_QMARK_.call(null, map__14814) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14814) : map__14814;
    var key = cljs.core.get.call(null, map__14814__$1, new cljs.core.Keyword(null, "key", "key", -1516042587));
    var key_fn = cljs.core.get.call(null, map__14814__$1, new cljs.core.Keyword(null, "key-fn", "key-fn", -636154479));
    var state = cljs.core.get.call(null, map__14814__$1, new cljs.core.Keyword(null, "state", "state", -1988618099));
    var init_state = cljs.core.get.call(null, map__14814__$1, new cljs.core.Keyword(null, "init-state", "init-state", 1450863212));
    var opts = cljs.core.get.call(null, map__14814__$1, new cljs.core.Keyword(null, "opts", "opts", 155075701));
    var dataf = cljs.core.get.call(null, m, new cljs.core.Keyword(null, "fn", "fn", -1175266204));
    var cursor_SINGLEQUOTE_ = !(dataf == null) ? function() {
      var temp__4421__auto__ = (new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(temp__4421__auto__)) {
        var i = temp__4421__auto__;
        return dataf.call(null, cursor, i);
      } else {
        return dataf.call(null, cursor);
      }
    }() : cursor;
    var rkey = !(key == null) ? cljs.core.get.call(null, cursor_SINGLEQUOTE_, key) : !(key_fn == null) ? key_fn.call(null, cursor_SINGLEQUOTE_) : cljs.core.get.call(null, m, new cljs.core.Keyword(null, "react-key", "react-key", 1337881348));
    var shared = function() {
      var or__4307__auto__ = (new cljs.core.Keyword(null, "shared", "shared", -384145993)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
      }
    }();
    var ctor = om.core.get_descriptor.call(null, om.core.getf.call(null, f, cursor_SINGLEQUOTE_, opts), (new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018)).cljs$core$IFn$_invoke$arity$1(m));
    return ctor.call(null, {"__om_state":state, "__om_instrument":om.core._STAR_instrument_STAR_, "children":opts == null ? function(map__14814, map__14814__$1, key, key_fn, state, init_state, opts, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
      return function(this$) {
        var ret = f.call(null, cursor_SINGLEQUOTE_, this$);
        om.core.valid_component_QMARK_.call(null, ret, f);
        return ret;
      };
    }(map__14814, map__14814__$1, key, key_fn, state, init_state, opts, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) : function(map__14814, map__14814__$1, key, key_fn, state, init_state, opts, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
      return function(this$) {
        var ret = f.call(null, cursor_SINGLEQUOTE_, this$, opts);
        om.core.valid_component_QMARK_.call(null, ret, f);
        return ret;
      };
    }(map__14814, map__14814__$1, key, key_fn, state, init_state, opts, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor), "__om_init_state":init_state, "key":function() {
      var or__4307__auto__ = rkey;
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return undefined;
      }
    }(), "__om_app_state":om.core._STAR_state_STAR_, "__om_cursor":cursor_SINGLEQUOTE_, "__om_index":(new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434)).cljs$core$IFn$_invoke$arity$1(m), "__om_shared":shared, "__om_descriptor":om.core._STAR_descriptor_STAR_, "__om_root_key":om.core._STAR_root_key_STAR_});
  }
};
om.core.build_STAR_.cljs$lang$maxFixedArity = 3;
om.core.build = function om$core$build() {
  var G__14817 = arguments.length;
  switch(G__14817) {
    case 2:
      return om.core.build.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.build.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.build.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return om.core.build.call(null, f, x, null);
};
om.core.build.cljs$core$IFn$_invoke$arity$3 = function(f, x, m) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (m == null || cljs.core.map_QMARK_.call(null, m)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
  }
  if (!(om.core._STAR_instrument_STAR_ == null)) {
    var ret = om.core._STAR_instrument_STAR_.call(null, f, x, m);
    if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "pass", "om.core/pass", -1453289268))) {
      return om.core.build_STAR_.call(null, f, x, m);
    } else {
      return ret;
    }
  } else {
    return om.core.build_STAR_.call(null, f, x, m);
  }
};
om.core.build.cljs$lang$maxFixedArity = 3;
om.core.build_all = function om$core$build_all() {
  var G__14820 = arguments.length;
  switch(G__14820) {
    case 2:
      return om.core.build_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.build_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.build_all.cljs$core$IFn$_invoke$arity$2 = function(f, xs) {
  return om.core.build_all.call(null, f, xs, null);
};
om.core.build_all.cljs$core$IFn$_invoke$arity$3 = function(f, xs, m) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (m == null || cljs.core.map_QMARK_.call(null, m)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
  }
  return cljs.core.map.call(null, function(x, i) {
    return om.core.build.call(null, f, x, cljs.core.assoc.call(null, m, new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434), i));
  }, xs, cljs.core.range.call(null));
};
om.core.build_all.cljs$lang$maxFixedArity = 3;
om.core.setup = function om$core$setup(state, key, tx_listen) {
  if (function() {
    var G__14830 = state;
    if (G__14830) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__14830.om$core$INotify$;
        }
      }())) {
        return true;
      } else {
        if (!G__14830.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__14830);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__14830);
    }
  }()) {
  } else {
    var properties_14838 = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var listeners_14839 = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var render_queue_14840 = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
    var x14831_14841 = state;
    x14831_14841.om$core$IRootProperties$ = true;
    x14831_14841.om$core$IRootProperties$_set_property_BANG_$arity$4 = function(x14831_14841, properties_14838, listeners_14839, render_queue_14840) {
      return function(_, id, k, v) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_14838, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, k], null), v);
      };
    }(x14831_14841, properties_14838, listeners_14839, render_queue_14840);
    x14831_14841.om$core$IRootProperties$_remove_property_BANG_$arity$3 = function(x14831_14841, properties_14838, listeners_14839, render_queue_14840) {
      return function(_, id, k) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_14838, cljs.core.dissoc, id, k);
      };
    }(x14831_14841, properties_14838, listeners_14839, render_queue_14840);
    x14831_14841.om$core$IRootProperties$_remove_properties_BANG_$arity$2 = function(x14831_14841, properties_14838, listeners_14839, render_queue_14840) {
      return function(_, id) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_14838, cljs.core.dissoc, id);
      };
    }(x14831_14841, properties_14838, listeners_14839, render_queue_14840);
    x14831_14841.om$core$IRootProperties$_get_property$arity$3 = function(x14831_14841, properties_14838, listeners_14839, render_queue_14840) {
      return function(_, id, k) {
        var ___$1 = this;
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, properties_14838), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, k], null));
      };
    }(x14831_14841, properties_14838, listeners_14839, render_queue_14840);
    x14831_14841.om$core$INotify$ = true;
    x14831_14841.om$core$INotify$_listen_BANG_$arity$3 = function(x14831_14841, properties_14838, listeners_14839, render_queue_14840) {
      return function(this$, key__$1, tx_listen__$1) {
        var this$__$1 = this;
        if (tx_listen__$1 == null) {
        } else {
          cljs.core.swap_BANG_.call(null, listeners_14839, cljs.core.assoc, key__$1, tx_listen__$1);
        }
        return this$__$1;
      };
    }(x14831_14841, properties_14838, listeners_14839, render_queue_14840);
    x14831_14841.om$core$INotify$_unlisten_BANG_$arity$2 = function(x14831_14841, properties_14838, listeners_14839, render_queue_14840) {
      return function(this$, key__$1) {
        var this$__$1 = this;
        cljs.core.swap_BANG_.call(null, listeners_14839, cljs.core.dissoc, key__$1);
        return this$__$1;
      };
    }(x14831_14841, properties_14838, listeners_14839, render_queue_14840);
    x14831_14841.om$core$INotify$_notify_BANG_$arity$3 = function(x14831_14841, properties_14838, listeners_14839, render_queue_14840) {
      return function(this$, tx_data, root_cursor) {
        var this$__$1 = this;
        var seq__14832_14842 = cljs.core.seq.call(null, cljs.core.deref.call(null, listeners_14839));
        var chunk__14833_14843 = null;
        var count__14834_14844 = 0;
        var i__14835_14845 = 0;
        while (true) {
          if (i__14835_14845 < count__14834_14844) {
            var vec__14836_14846 = cljs.core._nth.call(null, chunk__14833_14843, i__14835_14845);
            var __14847 = cljs.core.nth.call(null, vec__14836_14846, 0, null);
            var f_14848 = cljs.core.nth.call(null, vec__14836_14846, 1, null);
            f_14848.call(null, tx_data, root_cursor);
            var G__14849 = seq__14832_14842;
            var G__14850 = chunk__14833_14843;
            var G__14851 = count__14834_14844;
            var G__14852 = i__14835_14845 + 1;
            seq__14832_14842 = G__14849;
            chunk__14833_14843 = G__14850;
            count__14834_14844 = G__14851;
            i__14835_14845 = G__14852;
            continue;
          } else {
            var temp__4423__auto___14853 = cljs.core.seq.call(null, seq__14832_14842);
            if (temp__4423__auto___14853) {
              var seq__14832_14854__$1 = temp__4423__auto___14853;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__14832_14854__$1)) {
                var c__5092__auto___14855 = cljs.core.chunk_first.call(null, seq__14832_14854__$1);
                var G__14856 = cljs.core.chunk_rest.call(null, seq__14832_14854__$1);
                var G__14857 = c__5092__auto___14855;
                var G__14858 = cljs.core.count.call(null, c__5092__auto___14855);
                var G__14859 = 0;
                seq__14832_14842 = G__14856;
                chunk__14833_14843 = G__14857;
                count__14834_14844 = G__14858;
                i__14835_14845 = G__14859;
                continue;
              } else {
                var vec__14837_14860 = cljs.core.first.call(null, seq__14832_14854__$1);
                var __14861 = cljs.core.nth.call(null, vec__14837_14860, 0, null);
                var f_14862 = cljs.core.nth.call(null, vec__14837_14860, 1, null);
                f_14862.call(null, tx_data, root_cursor);
                var G__14863 = cljs.core.next.call(null, seq__14832_14854__$1);
                var G__14864 = null;
                var G__14865 = 0;
                var G__14866 = 0;
                seq__14832_14842 = G__14863;
                chunk__14833_14843 = G__14864;
                count__14834_14844 = G__14865;
                i__14835_14845 = G__14866;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return this$__$1;
      };
    }(x14831_14841, properties_14838, listeners_14839, render_queue_14840);
    x14831_14841.om$core$IRenderQueue$ = true;
    x14831_14841.om$core$IRenderQueue$_get_queue$arity$1 = function(x14831_14841, properties_14838, listeners_14839, render_queue_14840) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.deref.call(null, render_queue_14840);
      };
    }(x14831_14841, properties_14838, listeners_14839, render_queue_14840);
    x14831_14841.om$core$IRenderQueue$_queue_render_BANG_$arity$2 = function(x14831_14841, properties_14838, listeners_14839, render_queue_14840) {
      return function(this$, c) {
        var this$__$1 = this;
        if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, render_queue_14840), c)) {
          return null;
        } else {
          cljs.core.swap_BANG_.call(null, render_queue_14840, cljs.core.conj, c);
          return cljs.core.swap_BANG_.call(null, this$__$1, cljs.core.identity);
        }
      };
    }(x14831_14841, properties_14838, listeners_14839, render_queue_14840);
    x14831_14841.om$core$IRenderQueue$_empty_queue_BANG_$arity$1 = function(x14831_14841, properties_14838, listeners_14839, render_queue_14840) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.swap_BANG_.call(null, render_queue_14840, cljs.core.empty);
      };
    }(x14831_14841, properties_14838, listeners_14839, render_queue_14840);
  }
  return om.core._listen_BANG_.call(null, state, key, tx_listen);
};
om.core.tear_down = function om$core$tear_down(state, key) {
  return om.core._unlisten_BANG_.call(null, state, key);
};
om.core.tag_root_key = function om$core$tag_root_key(cursor, root_key) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor))) {
    var x14868 = cljs.core.clone.call(null, cursor);
    x14868.cljs$core$ICloneable$ = true;
    x14868.cljs$core$ICloneable$_clone$arity$1 = function(x14868) {
      return function(this$) {
        var this$__$1 = this;
        return om$core$tag_root_key.call(null, cljs.core.clone.call(null, cursor), root_key);
      };
    }(x14868);
    x14868.om$core$IAdapt$ = true;
    x14868.om$core$IAdapt$_adapt$arity$2 = function(x14868) {
      return function(this$, other) {
        var this$__$1 = this;
        return om$core$tag_root_key.call(null, om.core.adapt.call(null, cursor, other), root_key);
      };
    }(x14868);
    x14868.om$core$IRootKey$ = true;
    x14868.om$core$IRootKey$_root_key$arity$1 = function(x14868) {
      return function(this$) {
        var this$__$1 = this;
        return root_key;
      };
    }(x14868);
    return x14868;
  } else {
    return cursor;
  }
};
om.core.root = function om$core$root(f, value, p__14869) {
  var map__14932 = p__14869;
  var map__14932__$1 = cljs.core.seq_QMARK_.call(null, map__14932) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14932) : map__14932;
  var options = map__14932__$1;
  var target = cljs.core.get.call(null, map__14932__$1, new cljs.core.Keyword(null, "target", "target", 253001721));
  var tx_listen = cljs.core.get.call(null, map__14932__$1, new cljs.core.Keyword(null, "tx-listen", "tx-listen", 119130367));
  var path = cljs.core.get.call(null, map__14932__$1, new cljs.core.Keyword(null, "path", "path", -188191168));
  var instrument = cljs.core.get.call(null, map__14932__$1, new cljs.core.Keyword(null, "instrument", "instrument", -960698844));
  var descriptor = cljs.core.get.call(null, map__14932__$1, new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018));
  var adapt = cljs.core.get.call(null, map__14932__$1, new cljs.core.Keyword(null, "adapt", "adapt", -1817022327));
  var raf = cljs.core.get.call(null, map__14932__$1, new cljs.core.Keyword(null, "raf", "raf", -1295410152));
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First argument must be a function"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (!(target == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No target specified to om.core/root"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "target", "target", 1893533248, null)))))].join(""));
  }
  var roots_SINGLEQUOTE__14994 = cljs.core.deref.call(null, om.core.roots);
  if (cljs.core.contains_QMARK_.call(null, roots_SINGLEQUOTE__14994, target)) {
    cljs.core.get.call(null, roots_SINGLEQUOTE__14994, target).call(null);
  } else {
  }
  var watch_key = cljs.core.gensym.call(null);
  var state = function() {
    var G__14933 = value;
    if (G__14933) {
      var bit__4981__auto__ = G__14933.cljs$lang$protocol_mask$partition1$ & 16384;
      if (bit__4981__auto__ || G__14933.cljs$core$IAtom$) {
        return true;
      } else {
        if (!G__14933.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__14933);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__14933);
    }
  }() ? value : cljs.core.atom.call(null, value);
  var state__$1 = om.core.setup.call(null, state, watch_key, tx_listen);
  var adapt__$1 = function() {
    var or__4307__auto__ = adapt;
    if (cljs.core.truth_(or__4307__auto__)) {
      return or__4307__auto__;
    } else {
      return cljs.core.identity;
    }
  }();
  var m = cljs.core.dissoc.call(null, options, new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.Keyword(null, "tx-listen", "tx-listen", 119130367), new cljs.core.Keyword(null, "path", "path", -188191168), new cljs.core.Keyword(null, "adapt", "adapt", -1817022327), new cljs.core.Keyword(null, "raf", "raf", -1295410152));
  var ret = cljs.core.atom.call(null, null);
  var rootf = function(watch_key, state, state__$1, adapt__$1, m, ret, map__14932, map__14932__$1, options, target, tx_listen, path, instrument, descriptor, adapt, raf) {
    return function om$core$root_$_rootf() {
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, om$core$root_$_rootf);
      var value__$1 = cljs.core.deref.call(null, state__$1);
      var cursor = adapt__$1.call(null, om.core.tag_root_key.call(null, path == null ? om.core.to_cursor.call(null, value__$1, state__$1, cljs.core.PersistentVector.EMPTY) : om.core.to_cursor.call(null, cljs.core.get_in.call(null, value__$1, path), state__$1, path), watch_key));
      if (cljs.core.truth_(om.core._get_property.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643)))) {
      } else {
        var c_14995 = om.dom.render.call(null, function() {
          var _STAR_descriptor_STAR_14964 = om.core._STAR_descriptor_STAR_;
          var _STAR_instrument_STAR_14965 = om.core._STAR_instrument_STAR_;
          var _STAR_state_STAR_14966 = om.core._STAR_state_STAR_;
          var _STAR_root_key_STAR_14967 = om.core._STAR_root_key_STAR_;
          om.core._STAR_descriptor_STAR_ = descriptor;
          om.core._STAR_instrument_STAR_ = instrument;
          om.core._STAR_state_STAR_ = state__$1;
          om.core._STAR_root_key_STAR_ = watch_key;
          try {
            return om.core.build.call(null, f, cursor, m);
          } finally {
            om.core._STAR_root_key_STAR_ = _STAR_root_key_STAR_14967;
            om.core._STAR_state_STAR_ = _STAR_state_STAR_14966;
            om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_14965;
            om.core._STAR_descriptor_STAR_ = _STAR_descriptor_STAR_14964;
          }
        }(), target);
        if (cljs.core.deref.call(null, ret) == null) {
          cljs.core.reset_BANG_.call(null, ret, c_14995);
        } else {
        }
      }
      var queue_14996 = om.core._get_queue.call(null, state__$1);
      om.core._empty_queue_BANG_.call(null, state__$1);
      if (cljs.core.empty_QMARK_.call(null, queue_14996)) {
      } else {
        var seq__14968_14997 = cljs.core.seq.call(null, queue_14996);
        var chunk__14969_14998 = null;
        var count__14970_14999 = 0;
        var i__14971_15000 = 0;
        while (true) {
          if (i__14971_15000 < count__14970_14999) {
            var c_15001 = cljs.core._nth.call(null, chunk__14969_14998, i__14971_15000);
            if (cljs.core.truth_(c_15001.isMounted())) {
              var temp__4423__auto___15002 = c_15001.state["__om_next_cursor"];
              if (cljs.core.truth_(temp__4423__auto___15002)) {
                var next_props_15003 = temp__4423__auto___15002;
                c_15001.props["__om_cursor"] = next_props_15003;
                c_15001.state["__om_next_cursor"] = null;
              } else {
              }
              if (cljs.core.truth_(function() {
                var or__4307__auto__ = !function() {
                  var G__14973 = om.core.children.call(null, c_15001);
                  if (G__14973) {
                    var bit__4981__auto__ = null;
                    if (cljs.core.truth_(function() {
                      var or__4307__auto__ = bit__4981__auto__;
                      if (cljs.core.truth_(or__4307__auto__)) {
                        return or__4307__auto__;
                      } else {
                        return G__14973.om$core$ICheckState$;
                      }
                    }())) {
                      return true;
                    } else {
                      if (!G__14973.cljs$lang$protocol_mask$partition$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__14973);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__14973);
                  }
                }();
                if (or__4307__auto__) {
                  return or__4307__auto__;
                } else {
                  return c_15001.shouldComponentUpdate(c_15001.props, c_15001.state);
                }
              }())) {
                c_15001.forceUpdate();
              } else {
              }
            } else {
            }
            var G__15004 = seq__14968_14997;
            var G__15005 = chunk__14969_14998;
            var G__15006 = count__14970_14999;
            var G__15007 = i__14971_15000 + 1;
            seq__14968_14997 = G__15004;
            chunk__14969_14998 = G__15005;
            count__14970_14999 = G__15006;
            i__14971_15000 = G__15007;
            continue;
          } else {
            var temp__4423__auto___15008 = cljs.core.seq.call(null, seq__14968_14997);
            if (temp__4423__auto___15008) {
              var seq__14968_15009__$1 = temp__4423__auto___15008;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__14968_15009__$1)) {
                var c__5092__auto___15010 = cljs.core.chunk_first.call(null, seq__14968_15009__$1);
                var G__15011 = cljs.core.chunk_rest.call(null, seq__14968_15009__$1);
                var G__15012 = c__5092__auto___15010;
                var G__15013 = cljs.core.count.call(null, c__5092__auto___15010);
                var G__15014 = 0;
                seq__14968_14997 = G__15011;
                chunk__14969_14998 = G__15012;
                count__14970_14999 = G__15013;
                i__14971_15000 = G__15014;
                continue;
              } else {
                var c_15015 = cljs.core.first.call(null, seq__14968_15009__$1);
                if (cljs.core.truth_(c_15015.isMounted())) {
                  var temp__4423__auto___15016__$1 = c_15015.state["__om_next_cursor"];
                  if (cljs.core.truth_(temp__4423__auto___15016__$1)) {
                    var next_props_15017 = temp__4423__auto___15016__$1;
                    c_15015.props["__om_cursor"] = next_props_15017;
                    c_15015.state["__om_next_cursor"] = null;
                  } else {
                  }
                  if (cljs.core.truth_(function() {
                    var or__4307__auto__ = !function() {
                      var G__14975 = om.core.children.call(null, c_15015);
                      if (G__14975) {
                        var bit__4981__auto__ = null;
                        if (cljs.core.truth_(function() {
                          var or__4307__auto__ = bit__4981__auto__;
                          if (cljs.core.truth_(or__4307__auto__)) {
                            return or__4307__auto__;
                          } else {
                            return G__14975.om$core$ICheckState$;
                          }
                        }())) {
                          return true;
                        } else {
                          if (!G__14975.cljs$lang$protocol_mask$partition$) {
                            return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__14975);
                          } else {
                            return false;
                          }
                        }
                      } else {
                        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__14975);
                      }
                    }();
                    if (or__4307__auto__) {
                      return or__4307__auto__;
                    } else {
                      return c_15015.shouldComponentUpdate(c_15015.props, c_15015.state);
                    }
                  }())) {
                    c_15015.forceUpdate();
                  } else {
                  }
                } else {
                }
                var G__15018 = cljs.core.next.call(null, seq__14968_15009__$1);
                var G__15019 = null;
                var G__15020 = 0;
                var G__15021 = 0;
                seq__14968_14997 = G__15018;
                chunk__14969_14998 = G__15019;
                count__14970_14999 = G__15020;
                i__14971_15000 = G__15021;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
      var _refs_15022 = cljs.core.deref.call(null, om.core._refs);
      if (cljs.core.empty_QMARK_.call(null, _refs_15022)) {
      } else {
        var seq__14976_15023 = cljs.core.seq.call(null, _refs_15022);
        var chunk__14977_15024 = null;
        var count__14978_15025 = 0;
        var i__14979_15026 = 0;
        while (true) {
          if (i__14979_15026 < count__14978_15025) {
            var vec__14980_15027 = cljs.core._nth.call(null, chunk__14977_15024, i__14979_15026);
            var path_15028__$1 = cljs.core.nth.call(null, vec__14980_15027, 0, null);
            var cs_15029 = cljs.core.nth.call(null, vec__14980_15027, 1, null);
            var cs_15030__$1 = cljs.core.deref.call(null, cs_15029);
            var seq__14981_15031 = cljs.core.seq.call(null, cs_15030__$1);
            var chunk__14982_15032 = null;
            var count__14983_15033 = 0;
            var i__14984_15034 = 0;
            while (true) {
              if (i__14984_15034 < count__14983_15033) {
                var vec__14985_15035 = cljs.core._nth.call(null, chunk__14982_15032, i__14984_15034);
                var id_15036 = cljs.core.nth.call(null, vec__14985_15035, 0, null);
                var c_15037 = cljs.core.nth.call(null, vec__14985_15035, 1, null);
                if (cljs.core.truth_(c_15037.shouldComponentUpdate(c_15037.props, c_15037.state))) {
                  c_15037.forceUpdate();
                } else {
                }
                var G__15038 = seq__14981_15031;
                var G__15039 = chunk__14982_15032;
                var G__15040 = count__14983_15033;
                var G__15041 = i__14984_15034 + 1;
                seq__14981_15031 = G__15038;
                chunk__14982_15032 = G__15039;
                count__14983_15033 = G__15040;
                i__14984_15034 = G__15041;
                continue;
              } else {
                var temp__4423__auto___15042 = cljs.core.seq.call(null, seq__14981_15031);
                if (temp__4423__auto___15042) {
                  var seq__14981_15043__$1 = temp__4423__auto___15042;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__14981_15043__$1)) {
                    var c__5092__auto___15044 = cljs.core.chunk_first.call(null, seq__14981_15043__$1);
                    var G__15045 = cljs.core.chunk_rest.call(null, seq__14981_15043__$1);
                    var G__15046 = c__5092__auto___15044;
                    var G__15047 = cljs.core.count.call(null, c__5092__auto___15044);
                    var G__15048 = 0;
                    seq__14981_15031 = G__15045;
                    chunk__14982_15032 = G__15046;
                    count__14983_15033 = G__15047;
                    i__14984_15034 = G__15048;
                    continue;
                  } else {
                    var vec__14986_15049 = cljs.core.first.call(null, seq__14981_15043__$1);
                    var id_15050 = cljs.core.nth.call(null, vec__14986_15049, 0, null);
                    var c_15051 = cljs.core.nth.call(null, vec__14986_15049, 1, null);
                    if (cljs.core.truth_(c_15051.shouldComponentUpdate(c_15051.props, c_15051.state))) {
                      c_15051.forceUpdate();
                    } else {
                    }
                    var G__15052 = cljs.core.next.call(null, seq__14981_15043__$1);
                    var G__15053 = null;
                    var G__15054 = 0;
                    var G__15055 = 0;
                    seq__14981_15031 = G__15052;
                    chunk__14982_15032 = G__15053;
                    count__14983_15033 = G__15054;
                    i__14984_15034 = G__15055;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__15056 = seq__14976_15023;
            var G__15057 = chunk__14977_15024;
            var G__15058 = count__14978_15025;
            var G__15059 = i__14979_15026 + 1;
            seq__14976_15023 = G__15056;
            chunk__14977_15024 = G__15057;
            count__14978_15025 = G__15058;
            i__14979_15026 = G__15059;
            continue;
          } else {
            var temp__4423__auto___15060 = cljs.core.seq.call(null, seq__14976_15023);
            if (temp__4423__auto___15060) {
              var seq__14976_15061__$1 = temp__4423__auto___15060;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__14976_15061__$1)) {
                var c__5092__auto___15062 = cljs.core.chunk_first.call(null, seq__14976_15061__$1);
                var G__15063 = cljs.core.chunk_rest.call(null, seq__14976_15061__$1);
                var G__15064 = c__5092__auto___15062;
                var G__15065 = cljs.core.count.call(null, c__5092__auto___15062);
                var G__15066 = 0;
                seq__14976_15023 = G__15063;
                chunk__14977_15024 = G__15064;
                count__14978_15025 = G__15065;
                i__14979_15026 = G__15066;
                continue;
              } else {
                var vec__14987_15067 = cljs.core.first.call(null, seq__14976_15061__$1);
                var path_15068__$1 = cljs.core.nth.call(null, vec__14987_15067, 0, null);
                var cs_15069 = cljs.core.nth.call(null, vec__14987_15067, 1, null);
                var cs_15070__$1 = cljs.core.deref.call(null, cs_15069);
                var seq__14988_15071 = cljs.core.seq.call(null, cs_15070__$1);
                var chunk__14989_15072 = null;
                var count__14990_15073 = 0;
                var i__14991_15074 = 0;
                while (true) {
                  if (i__14991_15074 < count__14990_15073) {
                    var vec__14992_15075 = cljs.core._nth.call(null, chunk__14989_15072, i__14991_15074);
                    var id_15076 = cljs.core.nth.call(null, vec__14992_15075, 0, null);
                    var c_15077 = cljs.core.nth.call(null, vec__14992_15075, 1, null);
                    if (cljs.core.truth_(c_15077.shouldComponentUpdate(c_15077.props, c_15077.state))) {
                      c_15077.forceUpdate();
                    } else {
                    }
                    var G__15078 = seq__14988_15071;
                    var G__15079 = chunk__14989_15072;
                    var G__15080 = count__14990_15073;
                    var G__15081 = i__14991_15074 + 1;
                    seq__14988_15071 = G__15078;
                    chunk__14989_15072 = G__15079;
                    count__14990_15073 = G__15080;
                    i__14991_15074 = G__15081;
                    continue;
                  } else {
                    var temp__4423__auto___15082__$1 = cljs.core.seq.call(null, seq__14988_15071);
                    if (temp__4423__auto___15082__$1) {
                      var seq__14988_15083__$1 = temp__4423__auto___15082__$1;
                      if (cljs.core.chunked_seq_QMARK_.call(null, seq__14988_15083__$1)) {
                        var c__5092__auto___15084 = cljs.core.chunk_first.call(null, seq__14988_15083__$1);
                        var G__15085 = cljs.core.chunk_rest.call(null, seq__14988_15083__$1);
                        var G__15086 = c__5092__auto___15084;
                        var G__15087 = cljs.core.count.call(null, c__5092__auto___15084);
                        var G__15088 = 0;
                        seq__14988_15071 = G__15085;
                        chunk__14989_15072 = G__15086;
                        count__14990_15073 = G__15087;
                        i__14991_15074 = G__15088;
                        continue;
                      } else {
                        var vec__14993_15089 = cljs.core.first.call(null, seq__14988_15083__$1);
                        var id_15090 = cljs.core.nth.call(null, vec__14993_15089, 0, null);
                        var c_15091 = cljs.core.nth.call(null, vec__14993_15089, 1, null);
                        if (cljs.core.truth_(c_15091.shouldComponentUpdate(c_15091.props, c_15091.state))) {
                          c_15091.forceUpdate();
                        } else {
                        }
                        var G__15092 = cljs.core.next.call(null, seq__14988_15083__$1);
                        var G__15093 = null;
                        var G__15094 = 0;
                        var G__15095 = 0;
                        seq__14988_15071 = G__15092;
                        chunk__14989_15072 = G__15093;
                        count__14990_15073 = G__15094;
                        i__14991_15074 = G__15095;
                        continue;
                      }
                    } else {
                    }
                  }
                  break;
                }
                var G__15096 = cljs.core.next.call(null, seq__14976_15061__$1);
                var G__15097 = null;
                var G__15098 = 0;
                var G__15099 = 0;
                seq__14976_15023 = G__15096;
                chunk__14977_15024 = G__15097;
                count__14978_15025 = G__15098;
                i__14979_15026 = G__15099;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
      om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643), true);
      return cljs.core.deref.call(null, ret);
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, map__14932, map__14932__$1, options, target, tx_listen, path, instrument, descriptor, adapt, raf);
  cljs.core.add_watch.call(null, state__$1, watch_key, function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__14932, map__14932__$1, options, target, tx_listen, path, instrument, descriptor, adapt, raf) {
    return function(_, ___$1, o, n) {
      if (cljs.core.not.call(null, om.core._get_property.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033))) && !(o === n)) {
        om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643), false);
      } else {
      }
      om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033), false);
      if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, om.core.refresh_set), rootf)) {
      } else {
        cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.conj, rootf);
      }
      if (cljs.core.truth_(om.core.refresh_queued)) {
        return null;
      } else {
        om.core.refresh_queued = true;
        if (raf === false || !(typeof requestAnimationFrame !== "undefined")) {
          return setTimeout(function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__14932, map__14932__$1, options, target, tx_listen, path, instrument, descriptor, adapt, raf) {
            return function() {
              return om.core.render_all.call(null, state__$1);
            };
          }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__14932, map__14932__$1, options, target, tx_listen, path, instrument, descriptor, adapt, raf), 16);
        } else {
          if (cljs.core.fn_QMARK_.call(null, raf)) {
            return raf.call(null);
          } else {
            return requestAnimationFrame(function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__14932, map__14932__$1, options, target, tx_listen, path, instrument, descriptor, adapt, raf) {
              return function() {
                return om.core.render_all.call(null, state__$1);
              };
            }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__14932, map__14932__$1, options, target, tx_listen, path, instrument, descriptor, adapt, raf));
          }
        }
      }
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__14932, map__14932__$1, options, target, tx_listen, path, instrument, descriptor, adapt, raf));
  cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.assoc, target, function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__14932, map__14932__$1, options, target, tx_listen, path, instrument, descriptor, adapt, raf) {
    return function() {
      om.core._remove_properties_BANG_.call(null, state__$1, watch_key);
      cljs.core.remove_watch.call(null, state__$1, watch_key);
      om.core.tear_down.call(null, state__$1, watch_key);
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, rootf);
      cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.dissoc, target);
      return React.unmountComponentAtNode(target);
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__14932, map__14932__$1, options, target, tx_listen, path, instrument, descriptor, adapt, raf));
  return rootf.call(null);
};
om.core.detach_root = function om$core$detach_root(target) {
  if (cljs.core.truth_(goog.dom.isElement(target))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("gdom", "isElement", "gdom/isElement", 465934354, null), new cljs.core.Symbol(null, "target", "target", 1893533248, null))))].join(""));
  }
  var temp__4423__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, om.core.roots), target);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var f = temp__4423__auto__;
    return f.call(null);
  } else {
    return null;
  }
};
om.core.transactable_QMARK_ = function om$core$transactable_QMARK_(x) {
  var G__15101 = x;
  if (G__15101) {
    var bit__4981__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4307__auto__ = bit__4981__auto__;
      if (cljs.core.truth_(or__4307__auto__)) {
        return or__4307__auto__;
      } else {
        return G__15101.om$core$ITransact$;
      }
    }())) {
      return true;
    } else {
      if (!G__15101.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ITransact, G__15101);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ITransact, G__15101);
  }
};
om.core.transact_BANG_ = function om$core$transact_BANG_() {
  var G__15103 = arguments.length;
  switch(G__15103) {
    case 2:
      return om.core.transact_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.transact_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return om.core.transact_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.transact_BANG_.cljs$core$IFn$_invoke$arity$2 = function(cursor, f) {
  return om.core.transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, f, null);
};
om.core.transact_BANG_.cljs$core$IFn$_invoke$arity$3 = function(cursor, korks, f) {
  return om.core.transact_BANG_.call(null, cursor, korks, f, null);
};
om.core.transact_BANG_.cljs$core$IFn$_invoke$arity$4 = function(cursor, korks, f, tag) {
  if (cljs.core.truth_(om.core.transactable_QMARK_.call(null, cursor))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "transactable?", "transactable?", 780536292, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  return om.core._transact_BANG_.call(null, cursor, korks__$1, f, tag);
};
om.core.transact_BANG_.cljs$lang$maxFixedArity = 4;
om.core.update_BANG_ = function om$core$update_BANG_() {
  var G__15106 = arguments.length;
  switch(G__15106) {
    case 2:
      return om.core.update_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.update_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return om.core.update_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.update_BANG_.cljs$core$IFn$_invoke$arity$2 = function(cursor, v) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  return om.core.transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, function(_) {
    return v;
  }, null);
};
om.core.update_BANG_.cljs$core$IFn$_invoke$arity$3 = function(cursor, korks, v) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
    return v;
  }, null);
};
om.core.update_BANG_.cljs$core$IFn$_invoke$arity$4 = function(cursor, korks, v, tag) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
    return v;
  }, tag);
};
om.core.update_BANG_.cljs$lang$maxFixedArity = 4;
om.core.commit_BANG_ = function om$core$commit_BANG_(cursor, korks, f) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  var key = function() {
    var G__15109 = cursor;
    if (G__15109) {
      var bit__4981__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4307__auto__ = bit__4981__auto__;
        if (cljs.core.truth_(or__4307__auto__)) {
          return or__4307__auto__;
        } else {
          return G__15109.om$core$IRootKey$;
        }
      }())) {
        return true;
      } else {
        if (!G__15109.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRootKey, G__15109);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRootKey, G__15109);
    }
  }() ? om.core._root_key.call(null, cursor) : null;
  var app_state = om.core.state.call(null, cursor);
  var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  var cpath = om.core.path.call(null, cursor);
  var rpath = cljs.core.into.call(null, cpath, korks__$1);
  if (cljs.core.truth_(key)) {
    om.core._set_property_BANG_.call(null, app_state, key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033), true);
  } else {
  }
  if (cljs.core.empty_QMARK_.call(null, rpath)) {
    return cljs.core.swap_BANG_.call(null, app_state, f);
  } else {
    return cljs.core.swap_BANG_.call(null, app_state, cljs.core.update_in, rpath, f);
  }
};
om.core.get_node = function om$core$get_node() {
  var G__15111 = arguments.length;
  switch(G__15111) {
    case 1:
      return om.core.get_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.get_node.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.get_node.cljs$core$IFn$_invoke$arity$1 = function(owner) {
  return owner.getDOMNode();
};
om.core.get_node.cljs$core$IFn$_invoke$arity$2 = function(owner, name) {
  if (typeof name === "string") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "name", "name", -810760592, null))))].join(""));
  }
  var temp__4423__auto__ = owner.refs;
  if (cljs.core.truth_(temp__4423__auto__)) {
    var refs = temp__4423__auto__;
    return refs[name].getDOMNode();
  } else {
    return null;
  }
};
om.core.get_node.cljs$lang$maxFixedArity = 2;
om.core.mounted_QMARK_ = function om$core$mounted_QMARK_(owner) {
  return owner.isMounted();
};
om.core.set_state_BANG_ = function om$core$set_state_BANG_() {
  var G__15114 = arguments.length;
  switch(G__15114) {
    case 2:
      return om.core.set_state_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.set_state_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = function(owner, v) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  return om.core._set_state_BANG_.call(null, owner, v, true);
};
om.core.set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = function(owner, korks, v) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  return om.core._set_state_BANG_.call(null, owner, ks, v, true);
};
om.core.set_state_BANG_.cljs$lang$maxFixedArity = 3;
om.core.set_state_nr_BANG_ = function om$core$set_state_nr_BANG_() {
  var G__15117 = arguments.length;
  switch(G__15117) {
    case 2:
      return om.core.set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2 = function(owner, v) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  return om.core._set_state_BANG_.call(null, owner, v, false);
};
om.core.set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3 = function(owner, korks, v) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  return om.core._set_state_BANG_.call(null, owner, ks, v, false);
};
om.core.set_state_nr_BANG_.cljs$lang$maxFixedArity = 3;
om.core.update_state_BANG_ = function om$core$update_state_BANG_() {
  var G__15120 = arguments.length;
  switch(G__15120) {
    case 2:
      return om.core.update_state_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.update_state_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.update_state_BANG_.cljs$core$IFn$_invoke$arity$2 = function(owner, f) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  return om.core.set_state_BANG_.call(null, owner, f.call(null, om.core.get_state.call(null, owner)));
};
om.core.update_state_BANG_.cljs$core$IFn$_invoke$arity$3 = function(owner, korks, f) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  return om.core.set_state_BANG_.call(null, owner, korks, f.call(null, om.core.get_state.call(null, owner, korks)));
};
om.core.update_state_BANG_.cljs$lang$maxFixedArity = 3;
om.core.update_state_nr_BANG_ = function om$core$update_state_nr_BANG_() {
  var G__15123 = arguments.length;
  switch(G__15123) {
    case 2:
      return om.core.update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2 = function(owner, f) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  return om.core.set_state_nr_BANG_.call(null, owner, f.call(null, om.core.get_state.call(null, owner)));
};
om.core.update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3 = function(owner, korks, f) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  return om.core.set_state_nr_BANG_.call(null, owner, korks, f.call(null, om.core.get_state.call(null, owner, korks)));
};
om.core.update_state_nr_BANG_.cljs$lang$maxFixedArity = 3;
om.core.refresh_BANG_ = function om$core$refresh_BANG_(owner) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  return om.core.update_state_BANG_.call(null, owner, cljs.core.identity);
};
om.core.get_render_state = function om$core$get_render_state() {
  var G__15126 = arguments.length;
  switch(G__15126) {
    case 1:
      return om.core.get_render_state.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.get_render_state.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.get_render_state.cljs$core$IFn$_invoke$arity$1 = function(owner) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  return om.core._get_render_state.call(null, owner);
};
om.core.get_render_state.cljs$core$IFn$_invoke$arity$2 = function(owner, korks) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  return om.core._get_render_state.call(null, owner, ks);
};
om.core.get_render_state.cljs$lang$maxFixedArity = 2;
goog.provide("collider.ui.frontend");
goog.require("cljs.core");
goog.require("om.dom");
goog.require("tailrecursion.cljson");
goog.require("fipp.edn");
goog.require("cljs_http.client");
goog.require("chord.client");
goog.require("cljs.core.async");
goog.require("jayq.core");
goog.require("om.core");
if (typeof collider.ui.frontend.app_state !== "undefined") {
} else {
  collider.ui.frontend.app_state = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "stream", "stream", 1534941648), null, new cljs.core.Keyword(null, "current", "current", -1088038603), null, new cljs.core.Keyword(null, "initial-value", "initial-value", 470619381), "", new cljs.core.Keyword(null, "reduction", "reduction", -1932397346), "", new cljs.core.Keyword(null, "projections", "projections", -1183474213), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, 
  "chord-test", "chord-test", 1985467952), "", new cljs.core.Keyword(null, "new-projection", "new-projection", -1144791648), false], null));
}
collider.ui.frontend.clj__GT_str = function collider$ui$frontend$clj__GT_str(c) {
  var res = clojure.string.replace.call(null, function() {
    var sb__5263__auto__ = new goog.string.StringBuffer;
    var _STAR_print_newline_STAR_12930_12932 = cljs.core._STAR_print_newline_STAR_;
    var _STAR_print_fn_STAR_12931_12933 = cljs.core._STAR_print_fn_STAR_;
    cljs.core._STAR_print_newline_STAR_ = true;
    cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_12930_12932, _STAR_print_fn_STAR_12931_12933, sb__5263__auto__) {
      return function(x__5264__auto__) {
        return sb__5263__auto__.append(x__5264__auto__);
      };
    }(_STAR_print_newline_STAR_12930_12932, _STAR_print_fn_STAR_12931_12933, sb__5263__auto__);
    try {
      fipp.edn.pprint.call(null, c, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "width", "width", -384071477), 80], null));
    } finally {
      cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_12931_12933;
      cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_12930_12932;
    }
    return [cljs.core.str(sb__5263__auto__)].join("");
  }(), /}nil/, "}");
  console.log(res);
  return res;
};
collider.ui.frontend.update_box = function collider$ui$frontend$update_box(owner, box_ref) {
  return hljs.highlightBlock(om.core.get_node.call(null, owner, box_ref));
};
collider.ui.frontend.update_projections_BANG_ = function collider$ui$frontend$update_projections_BANG_(data) {
  var c__8720__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto__) {
    return function() {
      var f__8721__auto__ = function() {
        var switch__8658__auto__ = function(c__8720__auto__) {
          return function(state_12955) {
            var state_val_12956 = state_12955[1];
            if (state_val_12956 === 1) {
              var inst_12949 = cljs_http.client.get.call(null, "/projections");
              var state_12955__$1 = state_12955;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12955__$1, 2, inst_12949);
            } else {
              if (state_val_12956 === 2) {
                var inst_12951 = state_12955[2];
                var inst_12952 = (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(inst_12951);
                var inst_12953 = om.core.update_BANG_.call(null, data, new cljs.core.Keyword(null, "projections", "projections", -1183474213), inst_12952);
                var state_12955__$1 = state_12955;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12955__$1, inst_12953);
              } else {
                return null;
              }
            }
          };
        }(c__8720__auto__);
        return function(switch__8658__auto__, c__8720__auto__) {
          return function() {
            var collider$ui$frontend$update_projections_BANG__$_state_machine__8659__auto__ = null;
            var collider$ui$frontend$update_projections_BANG__$_state_machine__8659__auto____0 = function() {
              var statearr_12960 = [null, null, null, null, null, null, null];
              statearr_12960[0] = collider$ui$frontend$update_projections_BANG__$_state_machine__8659__auto__;
              statearr_12960[1] = 1;
              return statearr_12960;
            };
            var collider$ui$frontend$update_projections_BANG__$_state_machine__8659__auto____1 = function(state_12955) {
              while (true) {
                var ret_value__8660__auto__ = function() {
                  try {
                    while (true) {
                      var result__8661__auto__ = switch__8658__auto__.call(null, state_12955);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8661__auto__;
                      }
                      break;
                    }
                  } catch (e12961) {
                    if (e12961 instanceof Object) {
                      var ex__8662__auto__ = e12961;
                      var statearr_12962_12964 = state_12955;
                      statearr_12962_12964[5] = ex__8662__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12955);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12961;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12965 = state_12955;
                  state_12955 = G__12965;
                  continue;
                } else {
                  return ret_value__8660__auto__;
                }
                break;
              }
            };
            collider$ui$frontend$update_projections_BANG__$_state_machine__8659__auto__ = function(state_12955) {
              switch(arguments.length) {
                case 0:
                  return collider$ui$frontend$update_projections_BANG__$_state_machine__8659__auto____0.call(this);
                case 1:
                  return collider$ui$frontend$update_projections_BANG__$_state_machine__8659__auto____1.call(this, state_12955);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            collider$ui$frontend$update_projections_BANG__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = collider$ui$frontend$update_projections_BANG__$_state_machine__8659__auto____0;
            collider$ui$frontend$update_projections_BANG__$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = collider$ui$frontend$update_projections_BANG__$_state_machine__8659__auto____1;
            return collider$ui$frontend$update_projections_BANG__$_state_machine__8659__auto__;
          }();
        }(switch__8658__auto__, c__8720__auto__);
      }();
      var state__8722__auto__ = function() {
        var statearr_12963 = f__8721__auto__.call(null);
        statearr_12963[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto__;
        return statearr_12963;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
    };
  }(c__8720__auto__));
  return c__8720__auto__;
};
collider.ui.frontend.widget_new_projection = function collider$ui$frontend$widget_new_projection(data, owner) {
  if (typeof collider.ui.frontend.t12997 !== "undefined") {
  } else {
    collider.ui.frontend.t12997 = function(widget_new_projection, data, owner, meta12998) {
      this.widget_new_projection = widget_new_projection;
      this.data = data;
      this.owner = owner;
      this.meta12998 = meta12998;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    collider.ui.frontend.t12997.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12999, meta12998__$1) {
      var self__ = this;
      var _12999__$1 = this;
      return new collider.ui.frontend.t12997(self__.widget_new_projection, self__.data, self__.owner, meta12998__$1);
    };
    collider.ui.frontend.t12997.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12999) {
      var self__ = this;
      var _12999__$1 = this;
      return self__.meta12998;
    };
    collider.ui.frontend.t12997.prototype.om$core$IDidMount$ = true;
    collider.ui.frontend.t12997.prototype.om$core$IDidMount$did_mount$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      collider.ui.frontend.update_box.call(null, self__.owner, "code-box");
      return collider.ui.frontend.update_box.call(null, self__.owner, "initial-value-box");
    };
    collider.ui.frontend.t12997.prototype.om$core$IRender$ = true;
    collider.ui.frontend.t12997.prototype.om$core$IRender$render$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return React.DOM.div(null, React.DOM.div(null, "Projection name", om.dom.input.call(null, {"type":"text", "ref":"name", "value":(new cljs.core.Keyword(null, "projection-name", "projection-name", -1947595457)).cljs$core$IFn$_invoke$arity$1(self__.data), "onChange":function(___$1) {
        return function(ev) {
          return om.core.update_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "projection-name", "projection-name", -1947595457), ev.target.value);
        };
      }(___$1)})), React.DOM.div(null, "Stream name", om.dom.input.call(null, {"type":"text", "ref":"name", "value":(new cljs.core.Keyword(null, "stream-name", "stream-name", 1607843230)).cljs$core$IFn$_invoke$arity$1(self__.data), "onChange":function(___$1) {
        return function(ev) {
          return om.core.update_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "stream-name", "stream-name", 1607843230), ev.target.value);
        };
      }(___$1)})), React.DOM.div(null, "Language"), cljs.core.apply.call(null, om.dom.div, {"className":"radio"}, cljs.core.map.call(null, function(___$1) {
        return function(p1__12966_SHARP_) {
          return React.DOM.div(null, om.dom.input.call(null, {"type":"checkbox", "checked":cljs.core._EQ_.call(null, p1__12966_SHARP_, (new cljs.core.Keyword(null, "language", "language", -1591107564)).cljs$core$IFn$_invoke$arity$1(self__.data)), "onChange":function(___$1) {
            return function(ev) {
              return om.core.update_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "language", "language", -1591107564), p1__12966_SHARP_);
            };
          }(___$1)}), p1__12966_SHARP_);
        };
      }(___$1), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clojure", "javascript"], null))), React.DOM.div(null, "Initial value"), React.DOM.pre(null, React.DOM.code({"className":"clojure"}, React.DOM.div({"contentEditable":"true", "ref":"initial-value-box", "className":"clojure", "onBlur":function(___$1) {
        return function(ev) {
          om.core.update_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "initial-value", "initial-value", 470619381), ev.target.textContent);
          return collider.ui.frontend.update_box.call(null, self__.owner, "initial-value-box");
        };
      }(___$1)}, (new cljs.core.Keyword(null, "initial-value", "initial-value", 470619381)).cljs$core$IFn$_invoke$arity$1(self__.data)))), React.DOM.div(null, "Code: content of (fn [prev item] ... )"), React.DOM.pre(null, React.DOM.code({"className":"clojure"}, React.DOM.div({"contentEditable":"true", "ref":"code-box", "className":"clojure", "onBlur":function(___$1) {
        return function(ev) {
          om.core.update_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "reduction", "reduction", -1932397346), ev.target.textContent);
          return collider.ui.frontend.update_box.call(null, self__.owner, "code-box");
        };
      }(___$1)}, (new cljs.core.Keyword(null, "reduction", "reduction", -1932397346)).cljs$core$IFn$_invoke$arity$1(self__.data)))), React.DOM.div(null, React.DOM.button({"onClick":function(___$1) {
        return function(___$2) {
          var c__8720__auto__ = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto__, ___$1) {
            return function() {
              var f__8721__auto__ = function() {
                var switch__8658__auto__ = function(c__8720__auto__, ___$1) {
                  return function(state_13017) {
                    var state_val_13018 = state_13017[1];
                    if (state_val_13018 === 1) {
                      var inst_13000 = [new cljs.core.Keyword(null, "json-params", "json-params", -1112693596)];
                      var inst_13001 = [new cljs.core.Keyword(null, "projection-name", "projection-name", -1947595457), new cljs.core.Keyword(null, "stream-name", "stream-name", 1607843230), new cljs.core.Keyword(null, "initial-value", "initial-value", 470619381), new cljs.core.Keyword(null, "language", "language", -1591107564), new cljs.core.Keyword(null, "reduction", "reduction", -1932397346)];
                      var inst_13002 = (new cljs.core.Keyword(null, "projection-name", "projection-name", -1947595457)).cljs$core$IFn$_invoke$arity$1(self__.data);
                      var inst_13003 = (new cljs.core.Keyword(null, "stream-name", "stream-name", 1607843230)).cljs$core$IFn$_invoke$arity$1(self__.data);
                      var inst_13004 = (new cljs.core.Keyword(null, "initial-value", "initial-value", 470619381)).cljs$core$IFn$_invoke$arity$1(self__.data);
                      var inst_13005 = (new cljs.core.Keyword(null, "language", "language", -1591107564)).cljs$core$IFn$_invoke$arity$1(self__.data);
                      var inst_13006 = (new cljs.core.Keyword(null, "reduction", "reduction", -1932397346)).cljs$core$IFn$_invoke$arity$1(self__.data);
                      var inst_13007 = [inst_13002, inst_13003, inst_13004, inst_13005, inst_13006];
                      var inst_13008 = cljs.core.PersistentHashMap.fromArrays(inst_13001, inst_13007);
                      var inst_13009 = [inst_13008];
                      var inst_13010 = cljs.core.PersistentHashMap.fromArrays(inst_13000, inst_13009);
                      var inst_13011 = cljs_http.client.post.call(null, "/projections", inst_13010);
                      var state_13017__$1 = state_13017;
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13017__$1, 2, inst_13011);
                    } else {
                      if (state_val_13018 === 2) {
                        var inst_13013 = state_13017[2];
                        var inst_13014 = (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(inst_13013);
                        var inst_13015 = collider.ui.frontend.update_projections_BANG_.call(null, self__.data);
                        var state_13017__$1 = function() {
                          var statearr_13019 = state_13017;
                          statearr_13019[7] = inst_13014;
                          return statearr_13019;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13017__$1, inst_13015);
                      } else {
                        return null;
                      }
                    }
                  };
                }(c__8720__auto__, ___$1);
                return function(switch__8658__auto__, c__8720__auto__, ___$1) {
                  return function() {
                    var collider$ui$frontend$widget_new_projection_$_state_machine__8659__auto__ = null;
                    var collider$ui$frontend$widget_new_projection_$_state_machine__8659__auto____0 = function() {
                      var statearr_13023 = [null, null, null, null, null, null, null, null];
                      statearr_13023[0] = collider$ui$frontend$widget_new_projection_$_state_machine__8659__auto__;
                      statearr_13023[1] = 1;
                      return statearr_13023;
                    };
                    var collider$ui$frontend$widget_new_projection_$_state_machine__8659__auto____1 = function(state_13017) {
                      while (true) {
                        var ret_value__8660__auto__ = function() {
                          try {
                            while (true) {
                              var result__8661__auto__ = switch__8658__auto__.call(null, state_13017);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__8661__auto__;
                              }
                              break;
                            }
                          } catch (e13024) {
                            if (e13024 instanceof Object) {
                              var ex__8662__auto__ = e13024;
                              var statearr_13025_13027 = state_13017;
                              statearr_13025_13027[5] = ex__8662__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13017);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e13024;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__13028 = state_13017;
                          state_13017 = G__13028;
                          continue;
                        } else {
                          return ret_value__8660__auto__;
                        }
                        break;
                      }
                    };
                    collider$ui$frontend$widget_new_projection_$_state_machine__8659__auto__ = function(state_13017) {
                      switch(arguments.length) {
                        case 0:
                          return collider$ui$frontend$widget_new_projection_$_state_machine__8659__auto____0.call(this);
                        case 1:
                          return collider$ui$frontend$widget_new_projection_$_state_machine__8659__auto____1.call(this, state_13017);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    collider$ui$frontend$widget_new_projection_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = collider$ui$frontend$widget_new_projection_$_state_machine__8659__auto____0;
                    collider$ui$frontend$widget_new_projection_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = collider$ui$frontend$widget_new_projection_$_state_machine__8659__auto____1;
                    return collider$ui$frontend$widget_new_projection_$_state_machine__8659__auto__;
                  }();
                }(switch__8658__auto__, c__8720__auto__, ___$1);
              }();
              var state__8722__auto__ = function() {
                var statearr_13026 = f__8721__auto__.call(null);
                statearr_13026[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto__;
                return statearr_13026;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
            };
          }(c__8720__auto__, ___$1));
          return c__8720__auto__;
        };
      }(___$1)}, "Register projection")));
    };
    collider.ui.frontend.t12997.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "widget-new-projection", "widget-new-projection", -572612337, null), new cljs.core.Symbol(null, "data", "data", 1407862150, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null), new cljs.core.Symbol(null, "meta12998", "meta12998", -1151579592, null)], null);
    };
    collider.ui.frontend.t12997.cljs$lang$type = true;
    collider.ui.frontend.t12997.cljs$lang$ctorStr = "collider.ui.frontend/t12997";
    collider.ui.frontend.t12997.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "collider.ui.frontend/t12997");
    };
    collider.ui.frontend.__GT_t12997 = function collider$ui$frontend$widget_new_projection_$___GT_t12997(widget_new_projection__$1, data__$1, owner__$1, meta12998) {
      return new collider.ui.frontend.t12997(widget_new_projection__$1, data__$1, owner__$1, meta12998);
    };
  }
  return new collider.ui.frontend.t12997(collider$ui$frontend$widget_new_projection, data, owner, cljs.core.PersistentArrayMap.EMPTY);
};
collider.ui.frontend.widget_projections = function collider$ui$frontend$widget_projections(data, owner) {
  if (typeof collider.ui.frontend.t13033 !== "undefined") {
  } else {
    collider.ui.frontend.t13033 = function(widget_projections, data, owner, meta13034) {
      this.widget_projections = widget_projections;
      this.data = data;
      this.owner = owner;
      this.meta13034 = meta13034;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    collider.ui.frontend.t13033.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13035, meta13034__$1) {
      var self__ = this;
      var _13035__$1 = this;
      return new collider.ui.frontend.t13033(self__.widget_projections, self__.data, self__.owner, meta13034__$1);
    };
    collider.ui.frontend.t13033.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13035) {
      var self__ = this;
      var _13035__$1 = this;
      return self__.meta13034;
    };
    collider.ui.frontend.t13033.prototype.om$core$IInitState$ = true;
    collider.ui.frontend.t13033.prototype.om$core$IInitState$init_state$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      return cljs.core.PersistentArrayMap.EMPTY;
    };
    collider.ui.frontend.t13033.prototype.om$core$IDidMount$ = true;
    collider.ui.frontend.t13033.prototype.om$core$IDidMount$did_mount$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      return collider.ui.frontend.update_projections_BANG_.call(null, self__.data);
    };
    collider.ui.frontend.t13033.prototype.om$core$IRenderState$ = true;
    collider.ui.frontend.t13033.prototype.om$core$IRenderState$render_state$arity$2 = function(_, state) {
      var self__ = this;
      var ___$1 = this;
      return React.DOM.div(null, React.DOM.h1(null, "Projections"), React.DOM.button({"onClick":function(___$1) {
        return function(___$2) {
          return om.core.update_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "new-projection", "new-projection", -1144791648), cljs.core.not.call(null, (new cljs.core.Keyword(null, "new-projection", "new-projection", -1144791648)).cljs$core$IFn$_invoke$arity$1(self__.data)));
        };
      }(___$1)}, "+ New Projection"), cljs.core.truth_((new cljs.core.Keyword(null, "new-projection", "new-projection", -1144791648)).cljs$core$IFn$_invoke$arity$1(self__.data)) ? om.core.build.call(null, collider.ui.frontend.widget_new_projection, self__.data) : null, cljs.core.apply.call(null, om.dom.ul, null, cljs.core.map.call(null, function(___$1) {
        return function(p1__13029_SHARP_) {
          return React.DOM.li(null, React.DOM.a({"href":"#", "onClick":function(___$1) {
            return function(ev) {
              if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-projection", "current-projection", -154217900)).cljs$core$IFn$_invoke$arity$1(self__.data), p1__13029_SHARP_)) {
                return om.core.update_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "current-projection", "current-projection", -154217900), null);
              } else {
                return om.core.update_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "current-projection", "current-projection", -154217900), p1__13029_SHARP_);
              }
            };
          }(___$1)}, (new cljs.core.Keyword(null, "projection-name", "projection-name", -1947595457)).cljs$core$IFn$_invoke$arity$1(p1__13029_SHARP_)), cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current-projection", "current-projection", -154217900)).cljs$core$IFn$_invoke$arity$1(self__.data), p1__13029_SHARP_) ? React.DOM.pre(null, React.DOM.code({"className":"clojure"}, collider.ui.frontend.clj__GT_str.call(null, p1__13029_SHARP_))) : null);
        };
      }(___$1), (new cljs.core.Keyword(null, "projections", "projections", -1183474213)).cljs$core$IFn$_invoke$arity$1(self__.data))));
    };
    collider.ui.frontend.t13033.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "widget-projections", "widget-projections", -1417704861, null), new cljs.core.Symbol(null, "data", "data", 1407862150, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null), new cljs.core.Symbol(null, "meta13034", "meta13034", -370827908, null)], null);
    };
    collider.ui.frontend.t13033.cljs$lang$type = true;
    collider.ui.frontend.t13033.cljs$lang$ctorStr = "collider.ui.frontend/t13033";
    collider.ui.frontend.t13033.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "collider.ui.frontend/t13033");
    };
    collider.ui.frontend.__GT_t13033 = function collider$ui$frontend$widget_projections_$___GT_t13033(widget_projections__$1, data__$1, owner__$1, meta13034) {
      return new collider.ui.frontend.t13033(widget_projections__$1, data__$1, owner__$1, meta13034);
    };
  }
  return new collider.ui.frontend.t13033(collider$ui$frontend$widget_projections, data, owner, cljs.core.PersistentArrayMap.EMPTY);
};
collider.ui.frontend.widget_streams = function collider$ui$frontend$widget_streams(data, owner) {
  if (typeof collider.ui.frontend.t13057 !== "undefined") {
  } else {
    collider.ui.frontend.t13057 = function(widget_streams, data, owner, meta13058) {
      this.widget_streams = widget_streams;
      this.data = data;
      this.owner = owner;
      this.meta13058 = meta13058;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    collider.ui.frontend.t13057.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13059, meta13058__$1) {
      var self__ = this;
      var _13059__$1 = this;
      return new collider.ui.frontend.t13057(self__.widget_streams, self__.data, self__.owner, meta13058__$1);
    };
    collider.ui.frontend.t13057.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13059) {
      var self__ = this;
      var _13059__$1 = this;
      return self__.meta13058;
    };
    collider.ui.frontend.t13057.prototype.om$core$IInitState$ = true;
    collider.ui.frontend.t13057.prototype.om$core$IInitState$init_state$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      return self__.data;
    };
    collider.ui.frontend.t13057.prototype.om$core$IDidMount$ = true;
    collider.ui.frontend.t13057.prototype.om$core$IDidMount$did_mount$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      var c__8720__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto__, this$__$1) {
        return function() {
          var f__8721__auto__ = function() {
            var switch__8658__auto__ = function(c__8720__auto__, this$__$1) {
              return function(state_13067) {
                var state_val_13068 = state_13067[1];
                if (state_val_13068 === 1) {
                  var inst_13060 = cljs_http.client.get.call(null, "/streams");
                  var state_13067__$1 = state_13067;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13067__$1, 2, inst_13060);
                } else {
                  if (state_val_13068 === 2) {
                    var inst_13062 = state_13067[2];
                    var inst_13063 = (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(inst_13062);
                    var inst_13064 = function() {
                      var response = inst_13063;
                      return function(response, inst_13062, inst_13063, state_val_13068, c__8720__auto__, this$__$1) {
                        return function(p1__13036_SHARP_) {
                          return cljs.core.assoc.call(null, p1__13036_SHARP_, new cljs.core.Keyword(null, "streams", "streams", 1465783789), (new cljs.core.Keyword(null, "streams", "streams", 1465783789)).cljs$core$IFn$_invoke$arity$1(response));
                        };
                      }(response, inst_13062, inst_13063, state_val_13068, c__8720__auto__, this$__$1);
                    }();
                    var inst_13065 = om.core.update_state_BANG_.call(null, self__.owner, inst_13064);
                    var state_13067__$1 = state_13067;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13067__$1, inst_13065);
                  } else {
                    return null;
                  }
                }
              };
            }(c__8720__auto__, this$__$1);
            return function(switch__8658__auto__, c__8720__auto__, this$__$1) {
              return function() {
                var collider$ui$frontend$widget_streams_$_state_machine__8659__auto__ = null;
                var collider$ui$frontend$widget_streams_$_state_machine__8659__auto____0 = function() {
                  var statearr_13072 = [null, null, null, null, null, null, null];
                  statearr_13072[0] = collider$ui$frontend$widget_streams_$_state_machine__8659__auto__;
                  statearr_13072[1] = 1;
                  return statearr_13072;
                };
                var collider$ui$frontend$widget_streams_$_state_machine__8659__auto____1 = function(state_13067) {
                  while (true) {
                    var ret_value__8660__auto__ = function() {
                      try {
                        while (true) {
                          var result__8661__auto__ = switch__8658__auto__.call(null, state_13067);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__8661__auto__;
                          }
                          break;
                        }
                      } catch (e13073) {
                        if (e13073 instanceof Object) {
                          var ex__8662__auto__ = e13073;
                          var statearr_13074_13076 = state_13067;
                          statearr_13074_13076[5] = ex__8662__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13067);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e13073;
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__13077 = state_13067;
                      state_13067 = G__13077;
                      continue;
                    } else {
                      return ret_value__8660__auto__;
                    }
                    break;
                  }
                };
                collider$ui$frontend$widget_streams_$_state_machine__8659__auto__ = function(state_13067) {
                  switch(arguments.length) {
                    case 0:
                      return collider$ui$frontend$widget_streams_$_state_machine__8659__auto____0.call(this);
                    case 1:
                      return collider$ui$frontend$widget_streams_$_state_machine__8659__auto____1.call(this, state_13067);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                collider$ui$frontend$widget_streams_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = collider$ui$frontend$widget_streams_$_state_machine__8659__auto____0;
                collider$ui$frontend$widget_streams_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = collider$ui$frontend$widget_streams_$_state_machine__8659__auto____1;
                return collider$ui$frontend$widget_streams_$_state_machine__8659__auto__;
              }();
            }(switch__8658__auto__, c__8720__auto__, this$__$1);
          }();
          var state__8722__auto__ = function() {
            var statearr_13075 = f__8721__auto__.call(null);
            statearr_13075[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto__;
            return statearr_13075;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
        };
      }(c__8720__auto__, this$__$1));
      return c__8720__auto__;
    };
    collider.ui.frontend.t13057.prototype.om$core$IRenderState$ = true;
    collider.ui.frontend.t13057.prototype.om$core$IRenderState$render_state$arity$2 = function(_, state) {
      var self__ = this;
      var ___$1 = this;
      return React.DOM.div(null, React.DOM.h1(null, "Streams"), cljs.core.apply.call(null, om.dom.ul, null, cljs.core.map.call(null, function(___$1) {
        return function(p1__13037_SHARP_) {
          return React.DOM.li(null, React.DOM.a({"href":"#", "onClick":function(___$1) {
            return function(ev) {
              return (new cljs.core.Keyword(null, "handler", "handler", -195596612)).cljs$core$IFn$_invoke$arity$1(self__.data).call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "stream", "stream", 1534941648), (new cljs.core.Keyword(null, "stream", "stream", 1534941648)).cljs$core$IFn$_invoke$arity$1(p1__13037_SHARP_)], null));
            };
          }(___$1)}, (new cljs.core.Keyword(null, "stream", "stream", 1534941648)).cljs$core$IFn$_invoke$arity$1(p1__13037_SHARP_)));
        };
      }(___$1), (new cljs.core.Keyword(null, "streams", "streams", 1465783789)).cljs$core$IFn$_invoke$arity$1(state))));
    };
    collider.ui.frontend.t13057.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "widget-streams", "widget-streams", -828269583, null), new cljs.core.Symbol(null, "data", "data", 1407862150, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null), new cljs.core.Symbol(null, "meta13058", "meta13058", -1197777616, null)], null);
    };
    collider.ui.frontend.t13057.cljs$lang$type = true;
    collider.ui.frontend.t13057.cljs$lang$ctorStr = "collider.ui.frontend/t13057";
    collider.ui.frontend.t13057.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "collider.ui.frontend/t13057");
    };
    collider.ui.frontend.__GT_t13057 = function collider$ui$frontend$widget_streams_$___GT_t13057(widget_streams__$1, data__$1, owner__$1, meta13058) {
      return new collider.ui.frontend.t13057(widget_streams__$1, data__$1, owner__$1, meta13058);
    };
  }
  return new collider.ui.frontend.t13057(collider$ui$frontend$widget_streams, data, owner, cljs.core.PersistentArrayMap.EMPTY);
};
collider.ui.frontend.widget_stream = function collider$ui$frontend$widget_stream(data, owner) {
  if (typeof collider.ui.frontend.t13101 !== "undefined") {
  } else {
    collider.ui.frontend.t13101 = function(widget_stream, data, owner, meta13102) {
      this.widget_stream = widget_stream;
      this.data = data;
      this.owner = owner;
      this.meta13102 = meta13102;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    collider.ui.frontend.t13101.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13103, meta13102__$1) {
      var self__ = this;
      var _13103__$1 = this;
      return new collider.ui.frontend.t13101(self__.widget_stream, self__.data, self__.owner, meta13102__$1);
    };
    collider.ui.frontend.t13101.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13103) {
      var self__ = this;
      var _13103__$1 = this;
      return self__.meta13102;
    };
    collider.ui.frontend.t13101.prototype.om$core$IInitState$ = true;
    collider.ui.frontend.t13101.prototype.om$core$IInitState$init_state$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "events", "events", 1792552201), cljs.core.PersistentVector.EMPTY], null);
    };
    collider.ui.frontend.t13101.prototype.om$core$IDidMount$ = true;
    collider.ui.frontend.t13101.prototype.om$core$IDidMount$did_mount$arity$1 = function(this$) {
      var self__ = this;
      var this$__$1 = this;
      var c__8720__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto__, this$__$1) {
        return function() {
          var f__8721__auto__ = function() {
            var switch__8658__auto__ = function(c__8720__auto__, this$__$1) {
              return function(state_13113) {
                var state_val_13114 = state_13113[1];
                if (state_val_13114 === 1) {
                  var inst_13104 = (new cljs.core.Keyword(null, "stream", "stream", 1534941648)).cljs$core$IFn$_invoke$arity$1(self__.data);
                  var inst_13105 = [cljs.core.str("/stream/"), cljs.core.str(inst_13104)].join("");
                  var inst_13106 = cljs_http.client.get.call(null, inst_13105);
                  var state_13113__$1 = state_13113;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13113__$1, 2, inst_13106);
                } else {
                  if (state_val_13114 === 2) {
                    var inst_13108 = state_13113[2];
                    var inst_13109 = (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(inst_13108);
                    var inst_13110 = function() {
                      var response = inst_13109;
                      return function(response, inst_13108, inst_13109, state_val_13114, c__8720__auto__, this$__$1) {
                        return function(p1__13078_SHARP_) {
                          return cljs.core.assoc.call(null, p1__13078_SHARP_, new cljs.core.Keyword(null, "events", "events", 1792552201), (new cljs.core.Keyword(null, "results", "results", -1134170113)).cljs$core$IFn$_invoke$arity$1(response));
                        };
                      }(response, inst_13108, inst_13109, state_val_13114, c__8720__auto__, this$__$1);
                    }();
                    var inst_13111 = om.core.update_state_BANG_.call(null, self__.owner, inst_13110);
                    var state_13113__$1 = state_13113;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13113__$1, inst_13111);
                  } else {
                    return null;
                  }
                }
              };
            }(c__8720__auto__, this$__$1);
            return function(switch__8658__auto__, c__8720__auto__, this$__$1) {
              return function() {
                var collider$ui$frontend$widget_stream_$_state_machine__8659__auto__ = null;
                var collider$ui$frontend$widget_stream_$_state_machine__8659__auto____0 = function() {
                  var statearr_13118 = [null, null, null, null, null, null, null];
                  statearr_13118[0] = collider$ui$frontend$widget_stream_$_state_machine__8659__auto__;
                  statearr_13118[1] = 1;
                  return statearr_13118;
                };
                var collider$ui$frontend$widget_stream_$_state_machine__8659__auto____1 = function(state_13113) {
                  while (true) {
                    var ret_value__8660__auto__ = function() {
                      try {
                        while (true) {
                          var result__8661__auto__ = switch__8658__auto__.call(null, state_13113);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__8661__auto__;
                          }
                          break;
                        }
                      } catch (e13119) {
                        if (e13119 instanceof Object) {
                          var ex__8662__auto__ = e13119;
                          var statearr_13120_13122 = state_13113;
                          statearr_13120_13122[5] = ex__8662__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13113);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e13119;
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__13123 = state_13113;
                      state_13113 = G__13123;
                      continue;
                    } else {
                      return ret_value__8660__auto__;
                    }
                    break;
                  }
                };
                collider$ui$frontend$widget_stream_$_state_machine__8659__auto__ = function(state_13113) {
                  switch(arguments.length) {
                    case 0:
                      return collider$ui$frontend$widget_stream_$_state_machine__8659__auto____0.call(this);
                    case 1:
                      return collider$ui$frontend$widget_stream_$_state_machine__8659__auto____1.call(this, state_13113);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                collider$ui$frontend$widget_stream_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = collider$ui$frontend$widget_stream_$_state_machine__8659__auto____0;
                collider$ui$frontend$widget_stream_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = collider$ui$frontend$widget_stream_$_state_machine__8659__auto____1;
                return collider$ui$frontend$widget_stream_$_state_machine__8659__auto__;
              }();
            }(switch__8658__auto__, c__8720__auto__, this$__$1);
          }();
          var state__8722__auto__ = function() {
            var statearr_13121 = f__8721__auto__.call(null);
            statearr_13121[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto__;
            return statearr_13121;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
        };
      }(c__8720__auto__, this$__$1));
      return c__8720__auto__;
    };
    collider.ui.frontend.t13101.prototype.om$core$IDidUpdate$ = true;
    collider.ui.frontend.t13101.prototype.om$core$IDidUpdate$did_update$arity$3 = function(_, ___$1, ___$2) {
      var self__ = this;
      var ___$3 = this;
      return cljs.core.dorun.call(null, cljs.core.map.call(null, function(___$3) {
        return function(p1__13079_SHARP_) {
          return hljs.highlightBlock(p1__13079_SHARP_);
        };
      }(___$3), jayq.core.$.call(null, "code")));
    };
    collider.ui.frontend.t13101.prototype.om$core$IRenderState$ = true;
    collider.ui.frontend.t13101.prototype.om$core$IRenderState$render_state$arity$2 = function(_, state) {
      var self__ = this;
      var ___$1 = this;
      console.log((new cljs.core.Keyword(null, "current", "current", -1088038603)).cljs$core$IFn$_invoke$arity$1(self__.data));
      return React.DOM.div(null, React.DOM.h2(null, [cljs.core.str("Events: "), cljs.core.str((new cljs.core.Keyword(null, "stream", "stream", 1534941648)).cljs$core$IFn$_invoke$arity$1(self__.data))].join("")), cljs.core.apply.call(null, om.dom.ul, null, cljs.core.map.call(null, function(___$1) {
        return function(event) {
          var payload = (new cljs.core.Keyword(null, "payload", "payload", -383036092)).cljs$core$IFn$_invoke$arity$1(event);
          var id = [cljs.core.str((new cljs.core.Keyword(null, "service-id", "service-id", -569220412)).cljs$core$IFn$_invoke$arity$1(event)), cljs.core.str(":"), cljs.core.str((new cljs.core.Keyword(null, "local-id", "local-id", 1726280758)).cljs$core$IFn$_invoke$arity$1(event))].join("");
          return React.DOM.li(null, function() {
            var current_QMARK_ = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "current", "current", -1088038603)).cljs$core$IFn$_invoke$arity$1(self__.data), id);
            return React.DOM.div(null, React.DOM.a({"href":"#", "onClick":function(current_QMARK_, payload, id, ___$1) {
              return function(ev) {
                if (current_QMARK_) {
                  return om.core.update_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "current", "current", -1088038603), null);
                } else {
                  return om.core.update_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "current", "current", -1088038603), id);
                }
              };
            }(current_QMARK_, payload, id, ___$1)}, id), current_QMARK_ ? React.DOM.pre(null, React.DOM.code({"className":"clojure"}, collider.ui.frontend.clj__GT_str.call(null, event))) : null);
          }());
        };
      }(___$1), (new cljs.core.Keyword(null, "events", "events", 1792552201)).cljs$core$IFn$_invoke$arity$1(state))));
    };
    collider.ui.frontend.t13101.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "widget-stream", "widget-stream", 806489157, null), new cljs.core.Symbol(null, "data", "data", 1407862150, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null), new cljs.core.Symbol(null, "meta13102", "meta13102", -2000274648, null)], null);
    };
    collider.ui.frontend.t13101.cljs$lang$type = true;
    collider.ui.frontend.t13101.cljs$lang$ctorStr = "collider.ui.frontend/t13101";
    collider.ui.frontend.t13101.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "collider.ui.frontend/t13101");
    };
    collider.ui.frontend.__GT_t13101 = function collider$ui$frontend$widget_stream_$___GT_t13101(widget_stream__$1, data__$1, owner__$1, meta13102) {
      return new collider.ui.frontend.t13101(widget_stream__$1, data__$1, owner__$1, meta13102);
    };
  }
  return new collider.ui.frontend.t13101(collider$ui$frontend$widget_stream, data, owner, cljs.core.PersistentArrayMap.EMPTY);
};
collider.ui.frontend.full_page = function collider$ui$frontend$full_page(data, owner) {
  if (typeof collider.ui.frontend.t13176 !== "undefined") {
  } else {
    collider.ui.frontend.t13176 = function(full_page, data, owner, meta13177) {
      this.full_page = full_page;
      this.data = data;
      this.owner = owner;
      this.meta13177 = meta13177;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    collider.ui.frontend.t13176.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13178, meta13177__$1) {
      var self__ = this;
      var _13178__$1 = this;
      return new collider.ui.frontend.t13176(self__.full_page, self__.data, self__.owner, meta13177__$1);
    };
    collider.ui.frontend.t13176.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13178) {
      var self__ = this;
      var _13178__$1 = this;
      return self__.meta13177;
    };
    collider.ui.frontend.t13176.prototype.om$core$IDidMount$ = true;
    collider.ui.frontend.t13176.prototype.om$core$IDidMount$did_mount$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      var c__8720__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__8720__auto__, ___$1) {
        return function() {
          var f__8721__auto__ = function() {
            var switch__8658__auto__ = function(c__8720__auto__, ___$1) {
              return function(state_13207) {
                var state_val_13208 = state_13207[1];
                if (state_val_13208 === 7) {
                  var inst_13195 = state_13207[7];
                  var inst_13195__$1 = state_13207[2];
                  var inst_13196 = cljs.core.seq_QMARK_.call(null, inst_13195__$1);
                  var state_13207__$1 = function() {
                    var statearr_13209 = state_13207;
                    statearr_13209[7] = inst_13195__$1;
                    return statearr_13209;
                  }();
                  if (inst_13196) {
                    var statearr_13210_13228 = state_13207__$1;
                    statearr_13210_13228[1] = 8;
                  } else {
                    var statearr_13211_13229 = state_13207__$1;
                    statearr_13211_13229[1] = 9;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13208 === 1) {
                    var inst_13179 = chord.client.ws_ch.call(null, "ws://localhost:3000/ws");
                    var state_13207__$1 = state_13207;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13207__$1, 2, inst_13179, "message");
                  } else {
                    if (state_val_13208 === 4) {
                      var inst_13186 = state_13207[8];
                      var inst_13189 = cljs.core.apply.call(null, cljs.core.hash_map, inst_13186);
                      var state_13207__$1 = state_13207;
                      var statearr_13212_13230 = state_13207__$1;
                      statearr_13212_13230[2] = inst_13189;
                      statearr_13212_13230[1] = 6;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13208 === 6) {
                        var inst_13192 = state_13207[2];
                        var inst_13193 = cljs.core.get.call(null, inst_13192, new cljs.core.Keyword(null, "ws-channel", "ws-channel", 1643892174));
                        var state_13207__$1 = state_13207;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13207__$1, 7, inst_13193);
                      } else {
                        if (state_val_13208 === 3) {
                          var inst_13186 = state_13207[8];
                          var inst_13186__$1 = state_13207[2];
                          var inst_13187 = cljs.core.seq_QMARK_.call(null, inst_13186__$1);
                          var state_13207__$1 = function() {
                            var statearr_13213 = state_13207;
                            statearr_13213[8] = inst_13186__$1;
                            return statearr_13213;
                          }();
                          if (inst_13187) {
                            var statearr_13214_13231 = state_13207__$1;
                            statearr_13214_13231[1] = 4;
                          } else {
                            var statearr_13215_13232 = state_13207__$1;
                            statearr_13215_13232[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13208 === 2) {
                            var inst_13181 = state_13207[2];
                            var inst_13184 = chord.client.ws_ch.call(null, "ws://localhost:3000/ws");
                            var state_13207__$1 = function() {
                              var statearr_13216 = state_13207;
                              statearr_13216[9] = inst_13181;
                              return statearr_13216;
                            }();
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13207__$1, 3, inst_13184);
                          } else {
                            if (state_val_13208 === 9) {
                              var inst_13195 = state_13207[7];
                              var state_13207__$1 = state_13207;
                              var statearr_13217_13233 = state_13207__$1;
                              statearr_13217_13233[2] = inst_13195;
                              statearr_13217_13233[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13208 === 5) {
                                var inst_13186 = state_13207[8];
                                var state_13207__$1 = state_13207;
                                var statearr_13218_13234 = state_13207__$1;
                                statearr_13218_13234[2] = inst_13186;
                                statearr_13218_13234[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13208 === 10) {
                                  var inst_13201 = state_13207[2];
                                  var inst_13202 = cljs.core.get.call(null, inst_13201, new cljs.core.Keyword(null, "message", "message", -406056002));
                                  var inst_13203 = om.core.update_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "chord-test", "chord-test", 1985467952), inst_13202);
                                  var inst_13204 = cljs.core.pr_str.call(null, inst_13202);
                                  var inst_13205 = console.log("Got message from server:", inst_13204);
                                  var state_13207__$1 = function() {
                                    var statearr_13219 = state_13207;
                                    statearr_13219[10] = inst_13203;
                                    return statearr_13219;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13207__$1, inst_13205);
                                } else {
                                  if (state_val_13208 === 8) {
                                    var inst_13195 = state_13207[7];
                                    var inst_13198 = cljs.core.apply.call(null, cljs.core.hash_map, inst_13195);
                                    var state_13207__$1 = state_13207;
                                    var statearr_13220_13235 = state_13207__$1;
                                    statearr_13220_13235[2] = inst_13198;
                                    statearr_13220_13235[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              };
            }(c__8720__auto__, ___$1);
            return function(switch__8658__auto__, c__8720__auto__, ___$1) {
              return function() {
                var collider$ui$frontend$full_page_$_state_machine__8659__auto__ = null;
                var collider$ui$frontend$full_page_$_state_machine__8659__auto____0 = function() {
                  var statearr_13224 = [null, null, null, null, null, null, null, null, null, null, null];
                  statearr_13224[0] = collider$ui$frontend$full_page_$_state_machine__8659__auto__;
                  statearr_13224[1] = 1;
                  return statearr_13224;
                };
                var collider$ui$frontend$full_page_$_state_machine__8659__auto____1 = function(state_13207) {
                  while (true) {
                    var ret_value__8660__auto__ = function() {
                      try {
                        while (true) {
                          var result__8661__auto__ = switch__8658__auto__.call(null, state_13207);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__8661__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__8661__auto__;
                          }
                          break;
                        }
                      } catch (e13225) {
                        if (e13225 instanceof Object) {
                          var ex__8662__auto__ = e13225;
                          var statearr_13226_13236 = state_13207;
                          statearr_13226_13236[5] = ex__8662__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13207);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e13225;
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8660__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__13237 = state_13207;
                      state_13207 = G__13237;
                      continue;
                    } else {
                      return ret_value__8660__auto__;
                    }
                    break;
                  }
                };
                collider$ui$frontend$full_page_$_state_machine__8659__auto__ = function(state_13207) {
                  switch(arguments.length) {
                    case 0:
                      return collider$ui$frontend$full_page_$_state_machine__8659__auto____0.call(this);
                    case 1:
                      return collider$ui$frontend$full_page_$_state_machine__8659__auto____1.call(this, state_13207);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                collider$ui$frontend$full_page_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$0 = collider$ui$frontend$full_page_$_state_machine__8659__auto____0;
                collider$ui$frontend$full_page_$_state_machine__8659__auto__.cljs$core$IFn$_invoke$arity$1 = collider$ui$frontend$full_page_$_state_machine__8659__auto____1;
                return collider$ui$frontend$full_page_$_state_machine__8659__auto__;
              }();
            }(switch__8658__auto__, c__8720__auto__, ___$1);
          }();
          var state__8722__auto__ = function() {
            var statearr_13227 = f__8721__auto__.call(null);
            statearr_13227[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8720__auto__;
            return statearr_13227;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8722__auto__);
        };
      }(c__8720__auto__, ___$1));
      return c__8720__auto__;
    };
    collider.ui.frontend.t13176.prototype.om$core$IRender$ = true;
    collider.ui.frontend.t13176.prototype.om$core$IRender$render$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return React.DOM.div(null, (new cljs.core.Keyword(null, "chord-test", "chord-test", 1985467952)).cljs$core$IFn$_invoke$arity$1(self__.data), om.core.build.call(null, collider.ui.frontend.widget_streams, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "handler", "handler", -195596612), function(___$1) {
        return function(ev) {
          return om.core.update_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "stream", "stream", 1534941648), (new cljs.core.Keyword(null, "stream", "stream", 1534941648)).cljs$core$IFn$_invoke$arity$1(ev));
        };
      }(___$1), new cljs.core.Keyword(null, "streams", "streams", 1465783789), cljs.core.PersistentVector.EMPTY], null)), !((new cljs.core.Keyword(null, "stream", "stream", 1534941648)).cljs$core$IFn$_invoke$arity$1(self__.data) == null) ? om.core.build.call(null, collider.ui.frontend.widget_stream, self__.data) : null, om.core.build.call(null, collider.ui.frontend.widget_projections, self__.data));
    };
    collider.ui.frontend.t13176.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "full-page", "full-page", -1712627269, null), new cljs.core.Symbol(null, "data", "data", 1407862150, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null), new cljs.core.Symbol(null, "meta13177", "meta13177", 470690809, null)], null);
    };
    collider.ui.frontend.t13176.cljs$lang$type = true;
    collider.ui.frontend.t13176.cljs$lang$ctorStr = "collider.ui.frontend/t13176";
    collider.ui.frontend.t13176.cljs$lang$ctorPrWriter = function(this__4886__auto__, writer__4887__auto__, opt__4888__auto__) {
      return cljs.core._write.call(null, writer__4887__auto__, "collider.ui.frontend/t13176");
    };
    collider.ui.frontend.__GT_t13176 = function collider$ui$frontend$full_page_$___GT_t13176(full_page__$1, data__$1, owner__$1, meta13177) {
      return new collider.ui.frontend.t13176(full_page__$1, data__$1, owner__$1, meta13177);
    };
  }
  return new collider.ui.frontend.t13176(collider$ui$frontend$full_page, data, owner, cljs.core.PersistentArrayMap.EMPTY);
};
om.core.root.call(null, collider.ui.frontend.full_page, collider.ui.frontend.app_state, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "target", "target", 253001721), document.getElementById("main-area")], null));
collider.ui.frontend._main = function collider$ui$frontend$_main() {
  var argseq__5347__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return collider.ui.frontend._main.cljs$core$IFn$_invoke$arity$variadic(argseq__5347__auto__);
};
collider.ui.frontend._main.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  return null;
};
collider.ui.frontend._main.cljs$lang$maxFixedArity = 0;
collider.ui.frontend._main.cljs$lang$applyTo = function(seq13238) {
  return collider.ui.frontend._main.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13238));
};
